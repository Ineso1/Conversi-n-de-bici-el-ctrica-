
ECU_M1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800ce80  0800ce80  0001ce80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3e8  0800d3e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d3e8  0800d3e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d3e8  0800d3e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3e8  0800d3e8  0001d3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3ec  0800d3ec  0001d3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00001524  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001704  20001704  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d98a  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047c6  00000000  00000000  0003dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001920  00000000  00000000  000423a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001370  00000000  00000000  00043cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026984  00000000  00000000  00045038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023202  00000000  00000000  0006b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9a4e  00000000  00000000  0008ebbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007cfc  00000000  00000000  0016860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  00170308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce68 	.word	0x0800ce68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ce68 	.word	0x0800ce68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000d2e:	2300      	movs	r3, #0
 8000d30:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000d3e:	2308      	movs	r3, #8
 8000d40:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000d8a:	f000 fa0f 	bl	80011ac <MCP2515_Initialize>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <CANSPI_Initialize+0x9a>
  {
    return false;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e05e      	b.n	8000e5c <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000d9e:	f000 fa27 	bl	80011f0 <MCP2515_SetConfigMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f083 0301 	eor.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <CANSPI_Initialize+0xae>
  {
    return false;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e054      	b.n	8000e5c <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	461a      	mov	r2, r3
 8000db6:	2123      	movs	r1, #35	; 0x23
 8000db8:	2020      	movs	r0, #32
 8000dba:	f000 fac3 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2127      	movs	r1, #39	; 0x27
 8000dc4:	2024      	movs	r0, #36	; 0x24
 8000dc6:	f000 fabd 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 fab6 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2107      	movs	r1, #7
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 faaf 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	461a      	mov	r2, r3
 8000dec:	210b      	movs	r1, #11
 8000dee:	2008      	movs	r0, #8
 8000df0:	f000 faa8 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2113      	movs	r1, #19
 8000dfc:	2010      	movs	r0, #16
 8000dfe:	f000 faa1 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	461a      	mov	r2, r3
 8000e08:	2117      	movs	r1, #23
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f000 fa9a 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	461a      	mov	r2, r3
 8000e16:	211b      	movs	r1, #27
 8000e18:	2018      	movs	r0, #24
 8000e1a:	f000 fa93 	bl	8001344 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	2060      	movs	r0, #96	; 0x60
 8000e22:	f000 fa69 	bl	80012f8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000e26:	2101      	movs	r1, #1
 8000e28:	2070      	movs	r0, #112	; 0x70
 8000e2a:	f000 fa65 	bl	80012f8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	202a      	movs	r0, #42	; 0x2a
 8000e32:	f000 fa61 	bl	80012f8 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000e36:	21e5      	movs	r1, #229	; 0xe5
 8000e38:	2029      	movs	r0, #41	; 0x29
 8000e3a:	f000 fa5d 	bl	80012f8 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000e3e:	2183      	movs	r1, #131	; 0x83
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f000 fa59 	bl	80012f8 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000e46:	f000 f9f1 	bl	800122c <MCP2515_SetNormalMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f083 0301 	eor.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <CANSPI_Initialize+0x156>
    return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <CANSPI_Initialize+0x158>
  
  return true;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000e88:	f000 fad0 	bl	800142c <MCP2515_ReadStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000e92:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000e94:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d115      	bne.n	8000ece <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6858      	ldr	r0, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000eac:	4619      	mov	r1, r3
 8000eae:	f000 f928 	bl	8001102 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a1a      	ldrb	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3309      	adds	r3, #9
 8000eba:	4924      	ldr	r1, [pc, #144]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000ebc:	2040      	movs	r0, #64	; 0x40
 8000ebe:	f000 fa6d 	bl	800139c <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000ec2:	2081      	movs	r0, #129	; 0x81
 8000ec4:	f000 fa96 	bl	80013f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e038      	b.n	8000f40 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d115      	bne.n	8000f08 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6858      	ldr	r0, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f000 f90b 	bl	8001102 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7a1a      	ldrb	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3309      	adds	r3, #9
 8000ef4:	4915      	ldr	r1, [pc, #84]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000ef6:	2042      	movs	r0, #66	; 0x42
 8000ef8:	f000 fa50 	bl	800139c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000efc:	2082      	movs	r0, #130	; 0x82
 8000efe:	f000 fa79 	bl	80013f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e01b      	b.n	8000f40 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6858      	ldr	r0, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000f20:	4619      	mov	r1, r3
 8000f22:	f000 f8ee 	bl	8001102 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a1a      	ldrb	r2, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3309      	adds	r3, #9
 8000f2e:	4907      	ldr	r1, [pc, #28]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000f30:	2044      	movs	r0, #68	; 0x44
 8000f32:	f000 fa33 	bl	800139c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000f36:	2084      	movs	r0, #132	; 0x84
 8000f38:	f000 fa5c 	bl	80013f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000200 	.word	0x20000200
 8000f50:	200001fc 	.word	0x200001fc

08000f54 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000f60:	f000 fa82 	bl	8001468 <MCP2515_GetRxStatus>
 8000f64:	4603      	mov	r3, r0
 8000f66:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000f68:	7b3b      	ldrb	r3, [r7, #12]
 8000f6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d066      	beq.n	8001042 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000f74:	7b3b      	ldrb	r3, [r7, #12]
 8000f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b40      	cmp	r3, #64	; 0x40
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7b3b      	ldrb	r3, [r7, #12]
 8000f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	220d      	movs	r2, #13
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2090      	movs	r0, #144	; 0x90
 8000faa:	f000 f981 	bl	80012b0 <MCP2515_ReadRxSequence>
 8000fae:	e00c      	b.n	8000fca <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b80      	cmp	r3, #128	; 0x80
 8000fba:	d106      	bne.n	8000fca <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	220d      	movs	r2, #13
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2094      	movs	r0, #148	; 0x94
 8000fc6:	f000 f973 	bl	80012b0 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000fca:	7b3b      	ldrb	r3, [r7, #12]
 8000fcc:	f003 0318 	and.w	r3, r3, #24
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d10c      	bne.n	8000ff0 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000fdc:	7cb8      	ldrb	r0, [r7, #18]
 8000fde:	7cf9      	ldrb	r1, [r7, #19]
 8000fe0:	7c3a      	ldrb	r2, [r7, #16]
 8000fe2:	7c7b      	ldrb	r3, [r7, #17]
 8000fe4:	f000 f832 	bl	800104c <convertReg2ExtendedCANid>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	e00b      	b.n	8001008 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000ff6:	7c3b      	ldrb	r3, [r7, #16]
 8000ff8:	7c7a      	ldrb	r2, [r7, #17]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f863 	bl	80010c8 <convertReg2StandardCANid>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001008:	7d3a      	ldrb	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800100e:	7d7a      	ldrb	r2, [r7, #21]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001014:	7dba      	ldrb	r2, [r7, #22]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800101a:	7dfa      	ldrb	r2, [r7, #23]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001020:	7e3a      	ldrb	r2, [r7, #24]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001026:	7e7a      	ldrb	r2, [r7, #25]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800102c:	7eba      	ldrb	r2, [r7, #26]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001032:	7efa      	ldrb	r2, [r7, #27]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8001038:	7f3a      	ldrb	r2, [r7, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8001042:	7ffb      	ldrb	r3, [r7, #31]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800104c:	b490      	push	{r4, r7}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	4603      	mov	r3, r0
 8001060:	71bb      	strb	r3, [r7, #6]
 8001062:	460b      	mov	r3, r1
 8001064:	717b      	strb	r3, [r7, #5]
 8001066:	4613      	mov	r3, r2
 8001068:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4413      	add	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4413      	add	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80010bc:	697b      	ldr	r3, [r7, #20]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc90      	pop	{r4, r7}
 80010c6:	4770      	bx	lr

080010c8 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	460b      	mov	r3, r1
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d12e      	bne.n	8001178 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f023 031f 	bic.w	r3, r3, #31
 800114e:	b2da      	uxtb	r2, r3
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	4413      	add	r3, r2
 8001154:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	3308      	adds	r3, #8
 800115a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	f023 0314 	bic.w	r3, r3, #20
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8001176:	e013      	b.n	80011a0 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	701a      	strb	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MCP2515_Initialize+0x3c>)
 80011ba:	f001 fe2b 	bl	8002e14 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80011be:	230a      	movs	r3, #10
 80011c0:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <MCP2515_Initialize+0x40>)
 80011c4:	f004 fe2b 	bl	8005e1e <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <MCP2515_Initialize+0x26>
      return true;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e006      	b.n	80011e0 <MCP2515_Initialize+0x34>
    
    loop--;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f1      	bne.n	80011c2 <MCP2515_Initialize+0x16>
      
  return false;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	48000400 	.word	0x48000400
 80011ec:	20000658 	.word	0x20000658

080011f0 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	200f      	movs	r0, #15
 80011fa:	f000 f87d 	bl	80012f8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80011fe:	230a      	movs	r3, #10
 8001200:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001202:	200e      	movs	r0, #14
 8001204:	f000 f830 	bl	8001268 <MCP2515_ReadByte>
 8001208:	4603      	mov	r3, r0
 800120a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800120e:	2b80      	cmp	r3, #128	; 0x80
 8001210:	d101      	bne.n	8001216 <MCP2515_SetConfigMode+0x26>
      return true;
 8001212:	2301      	movs	r3, #1
 8001214:	e006      	b.n	8001224 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	3b01      	subs	r3, #1
 800121a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1ef      	bne.n	8001202 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001232:	2100      	movs	r1, #0
 8001234:	200f      	movs	r0, #15
 8001236:	f000 f85f 	bl	80012f8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800123a:	230a      	movs	r3, #10
 800123c:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800123e:	200e      	movs	r0, #14
 8001240:	f000 f812 	bl	8001268 <MCP2515_ReadByte>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <MCP2515_SetNormalMode+0x26>
      return true;
 800124e:	2301      	movs	r3, #1
 8001250:	e006      	b.n	8001260 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3b01      	subs	r3, #1
 8001256:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ef      	bne.n	800123e <MCP2515_SetNormalMode+0x12>
  
  return false;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <MCP2515_ReadByte+0x44>)
 800127a:	f001 fdcb 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 800127e:	2003      	movs	r0, #3
 8001280:	f000 f910 	bl	80014a4 <SPI_Tx>
  SPI_Tx(address);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f90c 	bl	80014a4 <SPI_Tx>
  retVal = SPI_Rx();
 800128c:	f000 f930 	bl	80014f0 <SPI_Rx>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MCP2515_ReadByte+0x44>)
 800129c:	f001 fdba 	bl	8002e14 <HAL_GPIO_WritePin>
  
  return retVal;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	48000400 	.word	0x48000400

080012b0 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MCP2515_ReadRxSequence+0x44>)
 80012c8:	f001 fda4 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f8e8 	bl	80014a4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	4619      	mov	r1, r3
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 f919 	bl	8001510 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MCP2515_ReadRxSequence+0x44>)
 80012e6:	f001 fd95 	bl	8002e14 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	48000400 	.word	0x48000400

080012f8 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <MCP2515_WriteByte+0x48>)
 8001310:	f001 fd80 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001314:	2002      	movs	r0, #2
 8001316:	f000 f8c5 	bl	80014a4 <SPI_Tx>
  SPI_Tx(address);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f8c1 	bl	80014a4 <SPI_Tx>
  SPI_Tx(data);  
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8bd 	bl	80014a4 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <MCP2515_WriteByte+0x48>)
 8001332:	f001 fd6f 	bl	8002e14 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	48000400 	.word	0x48000400

08001344 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	603a      	str	r2, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	460b      	mov	r3, r1
 8001352:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <MCP2515_WriteByteSequence+0x54>)
 800135c:	f001 fd5a 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001360:	2002      	movs	r0, #2
 8001362:	f000 f89f 	bl	80014a4 <SPI_Tx>
  SPI_Tx(startAddress);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f89b 	bl	80014a4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f000 f8a3 	bl	80014c8 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <MCP2515_WriteByteSequence+0x54>)
 800138a:	f001 fd43 	bl	8002e14 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	48000400 	.word	0x48000400

0800139c <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	4613      	mov	r3, r2
 80013ac:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MCP2515_LoadTxSequence+0x54>)
 80013b6:	f001 fd2d 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f871 	bl	80014a4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80013c2:	2104      	movs	r1, #4
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f000 f87f 	bl	80014c8 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f869 	bl	80014a4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f876 	bl	80014c8 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MCP2515_LoadTxSequence+0x54>)
 80013e4:	f001 fd16 	bl	8002e14 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	48000400 	.word	0x48000400

080013f4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MCP2515_RequestToSend+0x34>)
 8001406:	f001 fd05 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f849 	bl	80014a4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <MCP2515_RequestToSend+0x34>)
 800141a:	f001 fcfb 	bl	8002e14 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	48000400 	.word	0x48000400

0800142c <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <MCP2515_ReadStatus+0x38>)
 800143a:	f001 fceb 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 800143e:	20a0      	movs	r0, #160	; 0xa0
 8001440:	f000 f830 	bl	80014a4 <SPI_Tx>
  retVal = SPI_Rx();
 8001444:	f000 f854 	bl	80014f0 <SPI_Rx>
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <MCP2515_ReadStatus+0x38>)
 8001454:	f001 fcde 	bl	8002e14 <HAL_GPIO_WritePin>
  
  return retVal;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	48000400 	.word	0x48000400

08001468 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <MCP2515_GetRxStatus+0x38>)
 8001476:	f001 fccd 	bl	8002e14 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 800147a:	20b0      	movs	r0, #176	; 0xb0
 800147c:	f000 f812 	bl	80014a4 <SPI_Tx>
  retVal = SPI_Rx();
 8001480:	f000 f836 	bl	80014f0 <SPI_Rx>
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MCP2515_GetRxStatus+0x38>)
 8001490:	f001 fcc0 	bl	8002e14 <HAL_GPIO_WritePin>
  
  return retVal;
 8001494:	79fb      	ldrb	r3, [r7, #7]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	48000400 	.word	0x48000400

080014a4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80014ae:	1df9      	adds	r1, r7, #7
 80014b0:	230a      	movs	r3, #10
 80014b2:	2201      	movs	r2, #1
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <SPI_Tx+0x20>)
 80014b6:	f003 ffe4 	bl	8005482 <HAL_SPI_Transmit>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000658 	.word	0x20000658

080014c8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	230a      	movs	r3, #10
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <SPI_TxBuffer+0x24>)
 80014de:	f003 ffd0 	bl	8005482 <HAL_SPI_Transmit>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000658 	.word	0x20000658

080014f0 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80014f6:	1df9      	adds	r1, r7, #7
 80014f8:	230a      	movs	r3, #10
 80014fa:	2201      	movs	r2, #1
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <SPI_Rx+0x1c>)
 80014fe:	f004 f935 	bl	800576c <HAL_SPI_Receive>
  return retVal;
 8001502:	79fb      	ldrb	r3, [r7, #7]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000658 	.word	0x20000658

08001510 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	b29a      	uxth	r2, r3
 8001520:	230a      	movs	r3, #10
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <SPI_RxBuffer+0x24>)
 8001526:	f004 f921 	bl	800576c <HAL_SPI_Receive>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000658 	.word	0x20000658

08001538 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8001540:	233d      	movs	r3, #61	; 0x3d
 8001542:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8001544:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001548:	230a      	movs	r3, #10
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2302      	movs	r3, #2
 800154e:	2150      	movs	r1, #80	; 0x50
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f001 fd07 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001556:	200a      	movs	r0, #10
 8001558:	f001 f8a6 	bl	80026a8 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 800155c:	f240 1307 	movw	r3, #263	; 0x107
 8001560:	853b      	strh	r3, [r7, #40]	; 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 8001562:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001566:	230a      	movs	r3, #10
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2302      	movs	r3, #2
 800156c:	2150      	movs	r1, #80	; 0x50
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 fcf8 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f001 f897 	bl	80026a8 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 800157a:	2308      	movs	r3, #8
 800157c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <BNO055_Init_I2C+0x18c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	b25a      	sxtb	r2, r3
 8001588:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <BNO055_Init_I2C+0x190>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b25a      	sxtb	r2, r3
 8001594:	4b4d      	ldr	r3, [pc, #308]	; (80016cc <BNO055_Init_I2C+0x194>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80015a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015a8:	230a      	movs	r3, #10
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2150      	movs	r1, #80	; 0x50
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 fcd7 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f001 f876 	bl	80026a8 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80015bc:	230a      	movs	r3, #10
 80015be:	f887 3020 	strb.w	r3, [r7, #32]
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <BNO055_Init_I2C+0x198>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	b25a      	sxtb	r2, r3
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <BNO055_Init_I2C+0x19c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 80015da:	f107 0220 	add.w	r2, r7, #32
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2302      	movs	r3, #2
 80015e4:	2150      	movs	r1, #80	; 0x50
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f001 fcbc 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 f85b 	bl	80026a8 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 80015f2:	230b      	movs	r3, #11
 80015f4:	773b      	strb	r3, [r7, #28]
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <BNO055_Init_I2C+0x1a0>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 80015fc:	f107 021c 	add.w	r2, r7, #28
 8001600:	230a      	movs	r3, #10
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2302      	movs	r3, #2
 8001606:	2150      	movs	r1, #80	; 0x50
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 fcab 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f001 f84a 	bl	80026a8 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8001614:	2300      	movs	r3, #0
 8001616:	763b      	strb	r3, [r7, #24]
 8001618:	2309      	movs	r3, #9
 800161a:	767b      	strb	r3, [r7, #25]
 800161c:	2301      	movs	r3, #1
 800161e:	76bb      	strb	r3, [r7, #26]
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <BNO055_Init_I2C+0x1a4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	b25a      	sxtb	r2, r3
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <BNO055_Init_I2C+0x1a8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b25a      	sxtb	r2, r3
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <BNO055_Init_I2C+0x1ac>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b25b      	sxtb	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8001642:	f107 0218 	add.w	r2, r7, #24
 8001646:	230a      	movs	r3, #10
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2304      	movs	r3, #4
 800164c:	2150      	movs	r1, #80	; 0x50
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f001 fc88 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f001 f827 	bl	80026a8 <HAL_Delay>

	// Select BNO055 gyro temperature source 
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );
	
	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 800165a:	2307      	movs	r3, #7
 800165c:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 800165e:	f107 0214 	add.w	r2, r7, #20
 8001662:	230a      	movs	r3, #10
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2302      	movs	r3, #2
 8001668:	2150      	movs	r1, #80	; 0x50
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f001 fc7a 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001670:	200a      	movs	r0, #10
 8001672:	f001 f819 	bl	80026a8 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 8001676:	233e      	movs	r3, #62	; 0x3e
 8001678:	743b      	strb	r3, [r7, #16]
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <BNO055_Init_I2C+0x1b0>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 8001680:	f107 0210 	add.w	r2, r7, #16
 8001684:	230a      	movs	r3, #10
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2302      	movs	r3, #2
 800168a:	2150      	movs	r1, #80	; 0x50
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 fc69 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001692:	200a      	movs	r0, #10
 8001694:	f001 f808 	bl	80026a8 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 8001698:	233d      	movs	r3, #61	; 0x3d
 800169a:	733b      	strb	r3, [r7, #12]
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <BNO055_Init_I2C+0x1b4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	230a      	movs	r3, #10
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2302      	movs	r3, #2
 80016ac:	2150      	movs	r1, #80	; 0x50
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f001 fc58 	bl	8002f64 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80016b4:	2032      	movs	r0, #50	; 0x32
 80016b6:	f000 fff7 	bl	80026a8 <HAL_Delay>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000206 	.word	0x20000206
 80016c8:	20000002 	.word	0x20000002
 80016cc:	20000001 	.word	0x20000001
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000205 	.word	0x20000205
 80016d8:	20000204 	.word	0x20000204
 80016dc:	20000207 	.word	0x20000207
 80016e0:	20000003 	.word	0x20000003
 80016e4:	20000004 	.word	0x20000004
 80016e8:	20000208 	.word	0x20000208
 80016ec:	20000005 	.word	0x20000005

080016f0 <GetAccelData>:



// Send data to BNO055 over I2C
uint8_t GetAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2312      	movs	r3, #18
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	2208      	movs	r2, #8
 800170a:	2150      	movs	r1, #80	; 0x50
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 fd1d 	bl	800314c <HAL_I2C_Mem_Read>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {} 
	return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_DMA_Init+0x48>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <MX_DMA_Init+0x48>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_DMA_Init+0x48>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	2010      	movs	r0, #16
 8001744:	f001 f88c 	bl	8002860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001748:	2010      	movs	r0, #16
 800174a:	f001 f8a5 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2011      	movs	r0, #17
 8001754:	f001 f884 	bl	8002860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001758:	2011      	movs	r0, #17
 800175a:	f001 f89d 	bl	8002898 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <vApplicationGetIdleTaskMemory+0x2c>)
 800177c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <vApplicationGetIdleTaskMemory+0x30>)
 8001782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200002dc 	.word	0x200002dc
 800179c:	2000037c 	.word	0x2000037c

080017a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b09c      	sub	sp, #112	; 0x70
 80017a4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <MX_FREERTOS_Init+0xa4>)
 80017a8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80017ac:	461d      	mov	r5, r3
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 fca3 	bl	800710c <osThreadCreate>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <MX_FREERTOS_Init+0xa8>)
 80017ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of RecepcionCAN */
  osThreadDef(RecepcionCAN, StartRecepcionCAN, osPriorityAboveNormal, 0, 128);
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_FREERTOS_Init+0xac>)
 80017ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80017d2:	461d      	mov	r5, r3
 80017d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecepcionCANHandle = osThreadCreate(osThread(RecepcionCAN), NULL);
 80017e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 fc90 	bl	800710c <osThreadCreate>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <MX_FREERTOS_Init+0xb0>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of IMUprocess */
  osThreadDef(IMUprocess, StartIMUprocess, osPriorityNormal, 0, 128);
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_FREERTOS_Init+0xb4>)
 80017f4:	f107 041c 	add.w	r4, r7, #28
 80017f8:	461d      	mov	r5, r3
 80017fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMUprocessHandle = osThreadCreate(osThread(IMUprocess), NULL);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f005 fc7d 	bl	800710c <osThreadCreate>
 8001812:	4603      	mov	r3, r0
 8001814:	4a10      	ldr	r2, [pc, #64]	; (8001858 <MX_FREERTOS_Init+0xb8>)
 8001816:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTcom */
  osThreadDef(UARTcom, StartUARTcom, osPriorityBelowNormal, 0, 128);
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_FREERTOS_Init+0xbc>)
 800181a:	463c      	mov	r4, r7
 800181c:	461d      	mov	r5, r3
 800181e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001822:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTcomHandle = osThreadCreate(osThread(UARTcom), NULL);
 800182a:	463b      	mov	r3, r7
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f005 fc6c 	bl	800710c <osThreadCreate>
 8001834:	4603      	mov	r3, r0
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <MX_FREERTOS_Init+0xc0>)
 8001838:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800183a:	bf00      	nop
 800183c:	3770      	adds	r7, #112	; 0x70
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	0800ce8c 	.word	0x0800ce8c
 8001848:	200002cc 	.word	0x200002cc
 800184c:	0800ceb8 	.word	0x0800ceb8
 8001850:	200002d0 	.word	0x200002d0
 8001854:	0800cee0 	.word	0x0800cee0
 8001858:	200002d4 	.word	0x200002d4
 800185c:	0800cf04 	.word	0x0800cf04
 8001860:	200002d8 	.word	0x200002d8

08001864 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  {
	/*int v = 0;
	char message[50];
	snprintf(message, sizeof(message), "Default: %u\r\n", v);
	//HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);*/
    osDelay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f005 fc99 	bl	80071a4 <osDelay>
 8001872:	e7fb      	b.n	800186c <StartDefaultTask+0x8>

08001874 <StartRecepcionCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecepcionCAN */
void StartRecepcionCAN(void const * argument)
{
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	b09f      	sub	sp, #124	; 0x7c
 8001878:	af0a      	add	r7, sp, #40	; 0x28
 800187a:	6178      	str	r0, [r7, #20]
  {
	//int v = 1;
	char message[50];
	//snprintf(message, sizeof(message), "CAN: %u\r\n", v);
	//HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
	strcpy(message, "Enviado\n");
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <StartRecepcionCAN+0x104>)
 8001882:	ca07      	ldmia	r2, {r0, r1, r2}
 8001884:	c303      	stmia	r3!, {r0, r1}
 8001886:	701a      	strb	r2, [r3, #0]

	if(CANSPI_Receive(&rxMessage))
 8001888:	483c      	ldr	r0, [pc, #240]	; (800197c <StartRecepcionCAN+0x108>)
 800188a:	f7ff fb63 	bl	8000f54 <CANSPI_Receive>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d06d      	beq.n	8001970 <StartRecepcionCAN+0xfc>
	 {
		txMessage.frame.idType = rxMessage.frame.idType;
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <StartRecepcionCAN+0x108>)
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <StartRecepcionCAN+0x10c>)
 800189a:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = rxMessage.frame.id;
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <StartRecepcionCAN+0x108>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a37      	ldr	r2, [pc, #220]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018a2:	6053      	str	r3, [r2, #4]
		txMessage.frame.dlc = rxMessage.frame.dlc;
 80018a4:	4b35      	ldr	r3, [pc, #212]	; (800197c <StartRecepcionCAN+0x108>)
 80018a6:	7a1a      	ldrb	r2, [r3, #8]
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018aa:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0++;
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018ae:	7a5b      	ldrb	r3, [r3, #9]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018b6:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = rxMessage.frame.data1;
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <StartRecepcionCAN+0x108>)
 80018ba:	7a9a      	ldrb	r2, [r3, #10]
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018be:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = rxMessage.frame.data2;
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <StartRecepcionCAN+0x108>)
 80018c2:	7ada      	ldrb	r2, [r3, #11]
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018c6:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = rxMessage.frame.data3;
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <StartRecepcionCAN+0x108>)
 80018ca:	7b1a      	ldrb	r2, [r3, #12]
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018ce:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = rxMessage.frame.data4;
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <StartRecepcionCAN+0x108>)
 80018d2:	7b5a      	ldrb	r2, [r3, #13]
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018d6:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = rxMessage.frame.data5;
 80018d8:	4b28      	ldr	r3, [pc, #160]	; (800197c <StartRecepcionCAN+0x108>)
 80018da:	7b9a      	ldrb	r2, [r3, #14]
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018de:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = rxMessage.frame.data6;
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <StartRecepcionCAN+0x108>)
 80018e2:	7bda      	ldrb	r2, [r3, #15]
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018e6:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = rxMessage.frame.data7;
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <StartRecepcionCAN+0x108>)
 80018ea:	7c1a      	ldrb	r2, [r3, #16]
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018ee:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 80018f0:	4823      	ldr	r0, [pc, #140]	; (8001980 <StartRecepcionCAN+0x10c>)
 80018f2:	f7ff fab7 	bl	8000e64 <CANSPI_Transmit>

		snprintf(message, sizeof(message),
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <StartRecepcionCAN+0x108>)
 80018f8:	685b      	ldr	r3, [r3, #4]
			 "CAN ID: %lu, DLC: %u, Data: %u %u %u %u %u %u %u %u\r\n",
			 rxMessage.frame.id, rxMessage.frame.dlc,
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <StartRecepcionCAN+0x108>)
 80018fc:	7a12      	ldrb	r2, [r2, #8]
		snprintf(message, sizeof(message),
 80018fe:	4611      	mov	r1, r2
			 rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 8001900:	4a1e      	ldr	r2, [pc, #120]	; (800197c <StartRecepcionCAN+0x108>)
 8001902:	7a52      	ldrb	r2, [r2, #9]
		snprintf(message, sizeof(message),
 8001904:	4614      	mov	r4, r2
			 rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <StartRecepcionCAN+0x108>)
 8001908:	7a92      	ldrb	r2, [r2, #10]
		snprintf(message, sizeof(message),
 800190a:	4615      	mov	r5, r2
			 rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <StartRecepcionCAN+0x108>)
 800190e:	7ad2      	ldrb	r2, [r2, #11]
		snprintf(message, sizeof(message),
 8001910:	4616      	mov	r6, r2
			 rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 8001912:	4a1a      	ldr	r2, [pc, #104]	; (800197c <StartRecepcionCAN+0x108>)
 8001914:	7b12      	ldrb	r2, [r2, #12]
		snprintf(message, sizeof(message),
 8001916:	613a      	str	r2, [r7, #16]
			 rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <StartRecepcionCAN+0x108>)
 800191a:	7b52      	ldrb	r2, [r2, #13]
		snprintf(message, sizeof(message),
 800191c:	60fa      	str	r2, [r7, #12]
			 rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <StartRecepcionCAN+0x108>)
 8001920:	7b92      	ldrb	r2, [r2, #14]
		snprintf(message, sizeof(message),
 8001922:	60ba      	str	r2, [r7, #8]
			 rxMessage.frame.data6, rxMessage.frame.data7);
 8001924:	4a15      	ldr	r2, [pc, #84]	; (800197c <StartRecepcionCAN+0x108>)
 8001926:	7bd2      	ldrb	r2, [r2, #15]
		snprintf(message, sizeof(message),
 8001928:	607a      	str	r2, [r7, #4]
			 rxMessage.frame.data6, rxMessage.frame.data7);
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <StartRecepcionCAN+0x108>)
 800192c:	7c12      	ldrb	r2, [r2, #16]
		snprintf(message, sizeof(message),
 800192e:	f107 001c 	add.w	r0, r7, #28
 8001932:	9208      	str	r2, [sp, #32]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	9207      	str	r2, [sp, #28]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	9206      	str	r2, [sp, #24]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	9205      	str	r2, [sp, #20]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	9204      	str	r2, [sp, #16]
 8001944:	9603      	str	r6, [sp, #12]
 8001946:	9502      	str	r5, [sp, #8]
 8001948:	9401      	str	r4, [sp, #4]
 800194a:	9100      	str	r1, [sp, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <StartRecepcionCAN+0x110>)
 800194e:	2132      	movs	r1, #50	; 0x32
 8001950:	f007 fd64 	bl	800941c <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fc91 	bl	8000280 <strlen>
 800195e:	4603      	mov	r3, r0
 8001960:	b29a      	uxth	r2, r3
 8001962:	f107 011c 	add.w	r1, r7, #28
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <StartRecepcionCAN+0x114>)
 800196c:	f004 ff3c 	bl	80067e8 <HAL_UART_Transmit>

	 }
	osDelay(100);
 8001970:	2064      	movs	r0, #100	; 0x64
 8001972:	f005 fc17 	bl	80071a4 <osDelay>
  {
 8001976:	e781      	b.n	800187c <StartRecepcionCAN+0x8>
 8001978:	0800cf20 	.word	0x0800cf20
 800197c:	20000220 	.word	0x20000220
 8001980:	2000020c 	.word	0x2000020c
 8001984:	0800cf2c 	.word	0x0800cf2c
 8001988:	20000758 	.word	0x20000758

0800198c <StartIMUprocess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMUprocess */
void StartIMUprocess(void const * argument)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMUprocess */
  /* Infinite loop */
  for(;;)
  {

	 GetAccelData(&hi2c1, (uint8_t*)imu_readings);
 8001994:	4942      	ldr	r1, [pc, #264]	; (8001aa0 <StartIMUprocess+0x114>)
 8001996:	4843      	ldr	r0, [pc, #268]	; (8001aa4 <StartIMUprocess+0x118>)
 8001998:	f7ff feaa 	bl	80016f0 <GetAccelData>

	 accel_data[0] = (((int16_t)((uint8_t *)(imu_readings))[1] << 8) | ((uint8_t *)(imu_readings))[0]);      // Turn the MSB and LSB into a signed 16-bit value
 800199c:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <StartIMUprocess+0x114>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <StartIMUprocess+0x114>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <StartIMUprocess+0x11c>)
 80019b0:	801a      	strh	r2, [r3, #0]
	 accel_data[1] = (((int16_t)((uint8_t *)(imu_readings))[3] << 8) | ((uint8_t *)(imu_readings))[2]);
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <StartIMUprocess+0x114>)
 80019b4:	78db      	ldrb	r3, [r3, #3]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <StartIMUprocess+0x114>)
 80019bc:	789b      	ldrb	r3, [r3, #2]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <StartIMUprocess+0x11c>)
 80019c6:	805a      	strh	r2, [r3, #2]
	 accel_data[2] = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <StartIMUprocess+0x114>)
 80019ca:	795b      	ldrb	r3, [r3, #5]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <StartIMUprocess+0x114>)
 80019d2:	791b      	ldrb	r3, [r3, #4]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21a      	sxth	r2, r3
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <StartIMUprocess+0x11c>)
 80019dc:	809a      	strh	r2, [r3, #4]


	 acc_x = ((float)(accel_data[0]))/100.0f; //m/s2
 80019de:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <StartIMUprocess+0x11c>)
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001aac <StartIMUprocess+0x120>
 80019f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <StartIMUprocess+0x124>)
 80019f6:	edc3 7a00 	vstr	s15, [r3]
	 acc_y = ((float)(accel_data[1]))/100.0f;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <StartIMUprocess+0x11c>)
 80019fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a08:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001aac <StartIMUprocess+0x120>
 8001a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <StartIMUprocess+0x128>)
 8001a12:	edc3 7a00 	vstr	s15, [r3]
	 acc_z = ((float)(accel_data[2]))/100.0f;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <StartIMUprocess+0x11c>)
 8001a18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a24:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001aac <StartIMUprocess+0x120>
 8001a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <StartIMUprocess+0x12c>)
 8001a2e:	edc3 7a00 	vstr	s15, [r3]

	 acc_x_int = (int)acc_x;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <StartIMUprocess+0x124>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3c:	ee17 2a90 	vmov	r2, s15
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <StartIMUprocess+0x130>)
 8001a42:	601a      	str	r2, [r3, #0]
	 acc_y_int = (int)acc_y;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <StartIMUprocess+0x128>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4e:	ee17 2a90 	vmov	r2, s15
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <StartIMUprocess+0x134>)
 8001a54:	601a      	str	r2, [r3, #0]
	 acc_z_int = (int)acc_z;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <StartIMUprocess+0x12c>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a60:	ee17 2a90 	vmov	r2, s15
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <StartIMUprocess+0x138>)
 8001a66:	601a      	str	r2, [r3, #0]


	 sprintf(message, "X: %d Y: %d Z: %d\r\n", acc_x_int, acc_y_int, acc_z_int);
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <StartIMUprocess+0x130>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <StartIMUprocess+0x134>)
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <StartIMUprocess+0x138>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	460b      	mov	r3, r1
 8001a78:	4913      	ldr	r1, [pc, #76]	; (8001ac8 <StartIMUprocess+0x13c>)
 8001a7a:	4814      	ldr	r0, [pc, #80]	; (8001acc <StartIMUprocess+0x140>)
 8001a7c:	f007 fd02 	bl	8009484 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001a80:	4812      	ldr	r0, [pc, #72]	; (8001acc <StartIMUprocess+0x140>)
 8001a82:	f7fe fbfd 	bl	8000280 <strlen>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	490f      	ldr	r1, [pc, #60]	; (8001acc <StartIMUprocess+0x140>)
 8001a90:	480f      	ldr	r0, [pc, #60]	; (8001ad0 <StartIMUprocess+0x144>)
 8001a92:	f004 fea9 	bl	80067e8 <HAL_UART_Transmit>


	 osDelay(100);
 8001a96:	2064      	movs	r0, #100	; 0x64
 8001a98:	f005 fb84 	bl	80071a4 <osDelay>
	 GetAccelData(&hi2c1, (uint8_t*)imu_readings);
 8001a9c:	e77a      	b.n	8001994 <StartIMUprocess+0x8>
 8001a9e:	bf00      	nop
 8001aa0:	20000298 	.word	0x20000298
 8001aa4:	2000057c 	.word	0x2000057c
 8001aa8:	200002ac 	.word	0x200002ac
 8001aac:	42c80000 	.word	0x42c80000
 8001ab0:	200002b4 	.word	0x200002b4
 8001ab4:	200002b8 	.word	0x200002b8
 8001ab8:	200002bc 	.word	0x200002bc
 8001abc:	200002c0 	.word	0x200002c0
 8001ac0:	200002c4 	.word	0x200002c4
 8001ac4:	200002c8 	.word	0x200002c8
 8001ac8:	0800cf64 	.word	0x0800cf64
 8001acc:	20000234 	.word	0x20000234
 8001ad0:	20000758 	.word	0x20000758

08001ad4 <StartUARTcom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTcom */
void StartUARTcom(void const * argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTcom */
  /* Infinite loop */
  for(;;)
  {
	  char message[50];
	  snprintf(message, sizeof(message), "%u", rxMessage.frame.data0);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <StartUARTcom+0x3c>)
 8001ade:	7a5b      	ldrb	r3, [r3, #9]
 8001ae0:	f107 000c 	add.w	r0, r7, #12
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <StartUARTcom+0x40>)
 8001ae6:	2132      	movs	r1, #50	; 0x32
 8001ae8:	f007 fc98 	bl	800941c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fbc5 	bl	8000280 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f107 010c 	add.w	r1, r7, #12
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <StartUARTcom+0x44>)
 8001b04:	f004 fe70 	bl	80067e8 <HAL_UART_Transmit>
	  osDelay(200);
 8001b08:	20c8      	movs	r0, #200	; 0xc8
 8001b0a:	f005 fb4b 	bl	80071a4 <osDelay>
  {
 8001b0e:	e7e5      	b.n	8001adc <StartUARTcom+0x8>
 8001b10:	20000220 	.word	0x20000220
 8001b14:	0800cf78 	.word	0x0800cf78
 8001b18:	200007e0 	.word	0x200007e0

08001b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a35      	ldr	r2, [pc, #212]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b54:	6153      	str	r3, [r2, #20]
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	6153      	str	r3, [r2, #20]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <MX_GPIO_Init+0xf0>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2120      	movs	r1, #32
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f001 f93b 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba4:	481a      	ldr	r0, [pc, #104]	; (8001c10 <MX_GPIO_Init+0xf4>)
 8001ba6:	f001 f935 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4814      	ldr	r0, [pc, #80]	; (8001c14 <MX_GPIO_Init+0xf8>)
 8001bc2:	f000 ff9d 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f000 ff8e 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_GPIO_Init+0xf4>)
 8001bfe:	f000 ff7f 	bl	8002b00 <HAL_GPIO_Init>

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800

08001c18 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <MX_I2C1_Init+0x78>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <MX_I2C1_Init+0x7c>)
 8001c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c52:	480e      	ldr	r0, [pc, #56]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c54:	f001 f8f6 	bl	8002e44 <HAL_I2C_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c5e:	f000 f969 	bl	8001f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c62:	2100      	movs	r1, #0
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c66:	f001 fdef 	bl	8003848 <HAL_I2CEx_ConfigAnalogFilter>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c70:	f000 f960 	bl	8001f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c74:	2100      	movs	r1, #0
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_I2C1_Init+0x74>)
 8001c78:	f001 fe31 	bl	80038de <HAL_I2CEx_ConfigDigitalFilter>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c82:	f000 f957 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000057c 	.word	0x2000057c
 8001c90:	40005400 	.word	0x40005400
 8001c94:	2000090e 	.word	0x2000090e

08001c98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_I2C_MspInit+0x150>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	f040 8092 	bne.w	8001de0 <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc6:	6153      	str	r3, [r2, #20]
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	4a44      	ldr	r2, [pc, #272]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cde:	6153      	str	r3, [r2, #20]
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf2:	2312      	movs	r3, #18
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0c:	f000 fef8 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d14:	2312      	movs	r3, #18
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d20:	2304      	movs	r3, #4
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4831      	ldr	r0, [pc, #196]	; (8001df0 <HAL_I2C_MspInit+0x158>)
 8001d2c:	f000 fee8 	bl	8002b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_I2C_MspInit+0x154>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d4a:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <HAL_I2C_MspInit+0x160>)
 8001d4c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d78:	481e      	ldr	r0, [pc, #120]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d7a:	f000 fd9b 	bl	80028b4 <HAL_DMA_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8001d84:	f000 f8d6 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d8e:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_I2C_MspInit+0x15c>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001d96:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_I2C_MspInit+0x168>)
 8001d98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001dc6:	f000 fd75 	bl	80028b4 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8001dd0:	f000 f8b0 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_I2C_MspInit+0x164>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40005400 	.word	0x40005400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000400 	.word	0x48000400
 8001df4:	200005d0 	.word	0x200005d0
 8001df8:	40020080 	.word	0x40020080
 8001dfc:	20000614 	.word	0x20000614
 8001e00:	4002006c 	.word	0x4002006c

08001e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e08:	f000 fc18 	bl	800263c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0c:	f000 f81a 	bl	8001e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e10:	f7ff fe84 	bl	8001b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e14:	f7ff fc84 	bl	8001720 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e18:	f000 fb10 	bl	800243c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001e1c:	f000 f890 	bl	8001f40 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001e20:	f7ff fefa 	bl	8001c18 <MX_I2C1_Init>
  MX_TIM17_Init();
 8001e24:	f000 fac4 	bl	80023b0 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8001e28:	f000 fb38 	bl	800249c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8001e2c:	f7fe ff6a 	bl	8000d04 <CANSPI_Initialize>
  BNO055_Init_I2C(&hi2c1);
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <main+0x3c>)
 8001e32:	f7ff fb81 	bl	8001538 <BNO055_Init_I2C>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e36:	f7ff fcb3 	bl	80017a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e3a:	f005 f960 	bl	80070fe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <main+0x3a>
 8001e40:	2000057c 	.word	0x2000057c

08001e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0a6      	sub	sp, #152	; 0x98
 8001e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e4e:	2228      	movs	r2, #40	; 0x28
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f007 fb79 	bl	800954a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2258      	movs	r2, #88	; 0x58
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f007 fb6b 	bl	800954a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2302      	movs	r3, #2
 8001e76:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fd68 	bl	8003978 <HAL_RCC_OscConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001eae:	f000 f841 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fda6 	bl	8004a20 <HAL_RCC_ClockConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001eda:	f000 f82b 	bl	8001f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <SystemClock_Config+0xc8>)
 8001ee0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fffb 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f00:	f000 f818 	bl	8001f34 <Error_Handler>
  }
}
 8001f04:	bf00      	nop
 8001f06:	3798      	adds	r7, #152	; 0x98
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	01000026 	.word	0x01000026

08001f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f22:	f000 fba1 	bl	8002668 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40012c00 	.word	0x40012c00

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <MX_SPI2_Init+0x78>)
 8001f48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f76:	2208      	movs	r2, #8
 8001f78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f8e:	2207      	movs	r2, #7
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_SPI2_Init+0x74>)
 8001fa0:	f003 f9c4 	bl	800532c <HAL_SPI_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001faa:	f7ff ffc3 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000658 	.word	0x20000658
 8001fb8:	40003800 	.word	0x40003800

08001fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <HAL_SPI_MspInit+0xa0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d139      	bne.n	8002052 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_SPI_MspInit+0xa4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_SPI_MspInit+0xa4>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_SPI_MspInit+0xa4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_SPI_MspInit+0xa4>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_SPI_MspInit+0xa4>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6153      	str	r3, [r2, #20]
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_SPI_MspInit+0xa4>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800200e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002020:	2305      	movs	r3, #5
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	480e      	ldr	r0, [pc, #56]	; (8002064 <HAL_SPI_MspInit+0xa8>)
 800202c:	f000 fd68 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800203a:	2302      	movs	r3, #2
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002042:	2305      	movs	r3, #5
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_SPI_MspInit+0xa8>)
 800204e:	f000 fd57 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40003800 	.word	0x40003800
 8002060:	40021000 	.word	0x40021000
 8002064:	48000400 	.word	0x48000400

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_MspInit+0x4c>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_MspInit+0x4c>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6193      	str	r3, [r2, #24]
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_MspInit+0x4c>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_MspInit+0x4c>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_MspInit+0x4c>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_MspInit+0x4c>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	210f      	movs	r1, #15
 80020a2:	f06f 0001 	mvn.w	r0, #1
 80020a6:	f000 fbdb 	bl	8002860 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_InitTick+0xcc>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a2d      	ldr	r2, [pc, #180]	; (8002184 <HAL_InitTick+0xcc>)
 80020ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_InitTick+0xcc>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e0:	f107 020c 	add.w	r2, r7, #12
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fece 	bl	8004e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020f0:	f002 feaa 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 80020f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <HAL_InitTick+0xd0>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	3b01      	subs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_InitTick+0xd4>)
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <HAL_InitTick+0xd8>)
 8002108:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_InitTick+0xd4>)
 800210c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002110:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_InitTick+0xd4>)
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_InitTick+0xd4>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_InitTick+0xd4>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_InitTick+0xd4>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800212a:	4818      	ldr	r0, [pc, #96]	; (800218c <HAL_InitTick+0xd4>)
 800212c:	f004 f842 	bl	80061b4 <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11b      	bne.n	8002176 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800213e:	4813      	ldr	r0, [pc, #76]	; (800218c <HAL_InitTick+0xd4>)
 8002140:	f004 f890 	bl	8006264 <HAL_TIM_Base_Start_IT>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800214a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800214e:	2b00      	cmp	r3, #0
 8002150:	d111      	bne.n	8002176 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002152:	2019      	movs	r0, #25
 8002154:	f000 fba0 	bl	8002898 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	d808      	bhi.n	8002170 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800215e:	2200      	movs	r2, #0
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	2019      	movs	r0, #25
 8002164:	f000 fb7c 	bl	8002860 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_InitTick+0xdc>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e002      	b.n	8002176 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800217a:	4618      	mov	r0, r3
 800217c:	3730      	adds	r7, #48	; 0x30
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	431bde83 	.word	0x431bde83
 800218c:	200006bc 	.word	0x200006bc
 8002190:	40012c00 	.word	0x40012c00
 8002194:	2000000c 	.word	0x2000000c

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA1_Channel6_IRQHandler+0x10>)
 80021ca:	f000 fbba 	bl	8002942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000614 	.word	0x20000614

080021d8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Channel7_IRQHandler+0x10>)
 80021de:	f000 fbb0 	bl	8002942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200005d0 	.word	0x200005d0

080021ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80021f2:	f004 f8a7 	bl	8006344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200006bc 	.word	0x200006bc

08002200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_kill>:

int _kill(int pid, int sig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800221a:	f007 fa3f 	bl	800969c <__errno>
 800221e:	4603      	mov	r3, r0
 8002220:	2216      	movs	r2, #22
 8002222:	601a      	str	r2, [r3, #0]
  return -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_exit>:

void _exit (int status)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ffe7 	bl	8002210 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002242:	e7fe      	b.n	8002242 <_exit+0x12>

08002244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e00a      	b.n	800226c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002256:	f3af 8000 	nop.w
 800225a:	4601      	mov	r1, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <_read+0x12>
  }

  return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e009      	b.n	80022a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf1      	blt.n	8002290 <_write+0x12>
  }
  return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
  return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f007 f9a4 	bl	800969c <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20010000 	.word	0x20010000
 8002380:	00000400 	.word	0x00000400
 8002384:	20000708 	.word	0x20000708
 8002388:	20001708 	.word	0x20001708

0800238c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <SystemInit+0x20>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <SystemInit+0x20>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <MX_TIM17_Init+0x48>)
 80023b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023cc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_TIM17_Init+0x44>)
 80023e2:	f003 fee7 	bl	80061b4 <HAL_TIM_Base_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80023ec:	f7ff fda2 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000070c 	.word	0x2000070c
 80023f8:	40014800 	.word	0x40014800

080023fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_TIM_Base_MspInit+0x38>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10b      	bne.n	8002426 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002418:	6193      	str	r3, [r2, #24]
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40014800 	.word	0x40014800
 8002438:	40021000 	.word	0x40021000

0800243c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <MX_USART2_UART_Init+0x5c>)
 8002444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002448:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800244c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_USART2_UART_Init+0x58>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_USART2_UART_Init+0x58>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_USART2_UART_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_USART2_UART_Init+0x58>)
 8002480:	f004 f964 	bl	800674c <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800248a:	f7ff fd53 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000758 	.word	0x20000758
 8002498:	40004400 	.word	0x40004400

0800249c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <MX_USART3_UART_Init+0x5c>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <MX_USART3_UART_Init+0x58>)
 80024e0:	f004 f934 	bl	800674c <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024ea:	f7ff fd23 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200007e0 	.word	0x200007e0
 80024f8:	40004800 	.word	0x40004800

080024fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <HAL_UART_MspInit+0xdc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d129      	bne.n	8002572 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <HAL_UART_MspInit+0xe0>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a2e      	ldr	r2, [pc, #184]	; (80025dc <HAL_UART_MspInit+0xe0>)
 8002524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002528:	61d3      	str	r3, [r2, #28]
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_UART_MspInit+0xe0>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_UART_MspInit+0xe0>)
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4a28      	ldr	r2, [pc, #160]	; (80025dc <HAL_UART_MspInit+0xe0>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	6153      	str	r3, [r2, #20]
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_UART_MspInit+0xe0>)
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800254e:	230c      	movs	r3, #12
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800255e:	2307      	movs	r3, #7
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256c:	f000 fac8 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002570:	e02d      	b.n	80025ce <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_UART_MspInit+0xe4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d128      	bne.n	80025ce <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_UART_MspInit+0xe0>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <HAL_UART_MspInit+0xe0>)
 8002582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002586:	61d3      	str	r3, [r2, #28]
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_UART_MspInit+0xe0>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_UART_MspInit+0xe0>)
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_UART_MspInit+0xe0>)
 800259a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259e:	6153      	str	r3, [r2, #20]
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_UART_MspInit+0xe0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025be:	2307      	movs	r3, #7
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	4806      	ldr	r0, [pc, #24]	; (80025e4 <HAL_UART_MspInit+0xe8>)
 80025ca:	f000 fa99 	bl	8002b00 <HAL_GPIO_Init>
}
 80025ce:	bf00      	nop
 80025d0:	3730      	adds	r7, #48	; 0x30
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40004400 	.word	0x40004400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40004800 	.word	0x40004800
 80025e4:	48000400 	.word	0x48000400

080025e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002620 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff fece 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	; (8002628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	; (8002634 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f007 f847 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261a:	f7ff fbf3 	bl	8001e04 <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002620:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800262c:	0800d3f0 	.word	0x0800d3f0
  ldr r2, =_sbss
 8002630:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002634:	20001704 	.word	0x20001704

08002638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_2_IRQHandler>
	...

0800263c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_Init+0x28>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_Init+0x28>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 f8fc 	bl	800284a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	200f      	movs	r0, #15
 8002654:	f7ff fd30 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff fd06 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000

08002668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_IncTick+0x20>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x24>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_IncTick+0x24>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000010 	.word	0x20000010
 800268c:	20000868 	.word	0x20000868

08002690 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;  
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_GetTick+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000868 	.word	0x20000868

080026a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff ffee 	bl	8002690 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d005      	beq.n	80026ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_Delay+0x44>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026ce:	bf00      	nop
 80026d0:	f7ff ffde 	bl	8002690 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d8f7      	bhi.n	80026d0 <HAL_Delay+0x28>
  {
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000010 	.word	0x20000010

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ff4c 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002872:	f7ff ff61 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002876:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7ff ffb1 	bl	80027e4 <NVIC_EncodePriority>
 8002882:	4602      	mov	r2, r0
 8002884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff80 	bl	8002790 <__NVIC_SetPriority>
}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff54 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e037      	b.n	800293a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8b3 	bl	8002a88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}  
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2204      	movs	r2, #4
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x72>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01f      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0204 	bic.w	r2, r2, #4
 8002990:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	2104      	movs	r1, #4
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	e065      	b.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2202      	movs	r2, #2
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02c      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xdc>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d027      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020a 	bic.w	r2, r2, #10
 80029ea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2102      	movs	r1, #2
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d035      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a1c:	e030      	b.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2208      	movs	r2, #8
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d028      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d023      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
    }
  }
}  
 8002a7e:	e7ff      	b.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <DMA_CalcBaseAndBitshift+0x60>)
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d80f      	bhi.n	8002abc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <DMA_CalcBaseAndBitshift+0x64>)
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <DMA_CalcBaseAndBitshift+0x68>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002aba:	e00e      	b.n	8002ada <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <DMA_CalcBaseAndBitshift+0x70>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <DMA_CalcBaseAndBitshift+0x74>)
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40020407 	.word	0x40020407
 8002aec:	bffdfff8 	.word	0xbffdfff8
 8002af0:	cccccccd 	.word	0xcccccccd
 8002af4:	40020000 	.word	0x40020000
 8002af8:	bffdfbf8 	.word	0xbffdfbf8
 8002afc:	40020400 	.word	0x40020400

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0e:	e160      	b.n	8002dd2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8152 	beq.w	8002dcc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <HAL_GPIO_Init+0x40>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d130      	bne.n	8002ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b76:	2201      	movs	r2, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0201 	and.w	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d017      	beq.n	8002bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80ac 	beq.w	8002dcc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c8c:	4a59      	ldr	r2, [pc, #356]	; (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cb6:	d025      	beq.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x2f8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d01f      	beq.n	8002d00 <HAL_GPIO_Init+0x200>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a4e      	ldr	r2, [pc, #312]	; (8002dfc <HAL_GPIO_Init+0x2fc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d019      	beq.n	8002cfc <HAL_GPIO_Init+0x1fc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a4d      	ldr	r2, [pc, #308]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_GPIO_Init+0x1f8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_GPIO_Init+0x1f4>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a4b      	ldr	r2, [pc, #300]	; (8002e08 <HAL_GPIO_Init+0x308>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <HAL_GPIO_Init+0x1f0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <HAL_GPIO_Init+0x30c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_GPIO_Init+0x1ec>
 8002ce8:	2306      	movs	r3, #6
 8002cea:	e00c      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002cec:	2307      	movs	r3, #7
 8002cee:	e00a      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	e008      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	e006      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e004      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e002      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_GPIO_Init+0x206>
 8002d04:	2300      	movs	r3, #0
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	f002 0203 	and.w	r2, r2, #3
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	4093      	lsls	r3, r2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d16:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d48:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_GPIO_Init+0x310>)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f ae97 	bne.w	8002b10 <HAL_GPIO_Init+0x10>
  }
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	48000400 	.word	0x48000400
 8002dfc:	48000800 	.word	0x48000800
 8002e00:	48000c00 	.word	0x48000c00
 8002e04:	48001000 	.word	0x48001000
 8002e08:	48001400 	.word	0x48001400
 8002e0c:	48001800 	.word	0x48001800
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e081      	b.n	8002f5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe ff14 	bl	8001c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e006      	b.n	8002ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d104      	bne.n	8002ede <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
 8002f74:	4613      	mov	r3, r2
 8002f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f040 80da 	bne.w	800313a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2C_Master_Transmit+0x30>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0d3      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fb78 	bl	8002690 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2319      	movs	r3, #25
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fa5e 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0be      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	893a      	ldrh	r2, [r7, #8]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2bff      	cmp	r3, #255	; 0xff
 8002fee:	d90e      	bls.n	800300e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_I2C_Master_Transmit+0x1e0>)
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fbec 	bl	80037e4 <I2C_TransferConfig>
 800300c:	e06c      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_I2C_Master_Transmit+0x1e0>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fbdb 	bl	80037e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800302e:	e05b      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa6a 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07b      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d034      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d130      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2200      	movs	r2, #0
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f9ed 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04d      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	d90e      	bls.n	80030c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	22ff      	movs	r2, #255	; 0xff
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fb8f 	bl	80037e4 <I2C_TransferConfig>
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	2300      	movs	r3, #0
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fb7e 	bl	80037e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d19e      	bne.n	8003030 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6a39      	ldr	r1, [r7, #32]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa50 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01a      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2220      	movs	r2, #32
 800310c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_I2C_Master_Transmit+0x1e4>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	80002000 	.word	0x80002000
 8003148:	fe00e800 	.word	0xfe00e800

0800314c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	4608      	mov	r0, r1
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4603      	mov	r3, r0
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	460b      	mov	r3, r1
 8003160:	813b      	strh	r3, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	f040 80fd 	bne.w	800336e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_I2C_Mem_Read+0x34>
 800317a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0f1      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_I2C_Mem_Read+0x4e>
 8003196:	2302      	movs	r3, #2
 8003198:	e0ea      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031a2:	f7ff fa75 	bl	8002690 <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2319      	movs	r3, #25
 80031ae:	2201      	movs	r2, #1
 80031b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f95b 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d5      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2222      	movs	r2, #34	; 0x22
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ec:	88f8      	ldrh	r0, [r7, #6]
 80031ee:	893a      	ldrh	r2, [r7, #8]
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4603      	mov	r3, r0
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f8bf 	bl	8003380 <I2C_RequestMemoryRead>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0ad      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2bff      	cmp	r3, #255	; 0xff
 800321c:	d90e      	bls.n	800323c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	b2da      	uxtb	r2, r3
 800322a:	8979      	ldrh	r1, [r7, #10]
 800322c:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_I2C_Mem_Read+0x22c>)
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fad5 	bl	80037e4 <I2C_TransferConfig>
 800323a:	e00f      	b.n	800325c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	b2da      	uxtb	r2, r3
 800324c:	8979      	ldrh	r1, [r7, #10]
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_I2C_Mem_Read+0x22c>)
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fac4 	bl	80037e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	2200      	movs	r2, #0
 8003264:	2104      	movs	r1, #4
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f902 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07c      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d034      	beq.n	800331c <HAL_I2C_Mem_Read+0x1d0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d130      	bne.n	800331c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f8d3 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04d      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d90e      	bls.n	80032fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fa75 	bl	80037e4 <I2C_TransferConfig>
 80032fa:	e00f      	b.n	800331c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa64 	bl	80037e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19a      	bne.n	800325c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f936 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01a      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2220      	movs	r2, #32
 8003340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_I2C_Mem_Read+0x230>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	80002400 	.word	0x80002400
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	460b      	mov	r3, r1
 8003394:	813b      	strh	r3, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <I2C_RequestMemoryRead+0xa4>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa1c 	bl	80037e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f8ac 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02c      	b.n	800341a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c6:	893b      	ldrh	r3, [r7, #8]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
 80033d0:	e015      	b.n	80033fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033d2:	893b      	ldrh	r3, [r7, #8]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f892 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e012      	b.n	800341a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2200      	movs	r2, #0
 8003406:	2140      	movs	r1, #64	; 0x40
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f831 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	80002000 	.word	0x80002000

08003428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d103      	bne.n	8003446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d007      	beq.n	8003464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	619a      	str	r2, [r3, #24]
  }
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	e031      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d02d      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7ff f901 	bl	8002690 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d122      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d113      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d0be      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351a:	e033      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f87f 	bl	8003624 <I2C_IsErrorOccurred>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e031      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d025      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7ff f8aa 	bl	8002690 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11a      	bne.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d013      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d1c4      	bne.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	e02f      	b.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f838 	bl	8003624 <I2C_IsErrorOccurred>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02d      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7ff f867 	bl	8002690 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11a      	bne.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d013      	beq.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d1c8      	bne.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d068      	beq.n	8003722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003658:	e049      	b.n	80036ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d045      	beq.n	80036ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7ff f815 	bl	8002690 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_IsErrorOccurred+0x54>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d13a      	bne.n	80036ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800368a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d121      	bne.n	80036e0 <I2C_IsErrorOccurred+0xbc>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a2:	d01d      	beq.n	80036e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d01a      	beq.n	80036e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ba:	f7fe ffe9 	bl	8002690 <HAL_GetTick>
 80036be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c0:	e00e      	b.n	80036e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036c2:	f7fe ffe5 	bl	8002690 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b19      	cmp	r3, #25
 80036ce:	d907      	bls.n	80036e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036de:	e006      	b.n	80036ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d1e9      	bne.n	80036c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d003      	beq.n	8003704 <I2C_IsErrorOccurred+0xe0>
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0aa      	beq.n	800365a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01c      	beq.n	80037d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fe45 	bl	8003428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2C_IsErrorOccurred+0x1bc>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	4613      	mov	r3, r2
 80037f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fc:	7a7b      	ldrb	r3, [r7, #9]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	4313      	orrs	r3, r2
 800380e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	0d5b      	lsrs	r3, r3, #21
 800381e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <I2C_TransferConfig+0x60>)
 8003824:	430b      	orrs	r3, r1
 8003826:	43db      	mvns	r3, r3
 8003828:	ea02 0103 	and.w	r1, r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	03ff63ff 	.word	0x03ff63ff

08003848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	d138      	bne.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003868:	2302      	movs	r3, #2
 800386a:	e032      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800389a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d139      	bne.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fe:	2302      	movs	r3, #2
 8003900:	e033      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2224      	movs	r2, #36	; 0x24
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800397e:	af00      	add	r7, sp, #0
 8003980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003984:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003988:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800398a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f001 b83a 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 816f 	beq.w	8003c92 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039b4:	4bb5      	ldr	r3, [pc, #724]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d00c      	beq.n	80039da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c0:	4bb2      	ldr	r3, [pc, #712]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d15c      	bne.n	8003a86 <HAL_RCC_OscConfig+0x10e>
 80039cc:	4baf      	ldr	r3, [pc, #700]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d155      	bne.n	8003a86 <HAL_RCC_OscConfig+0x10e>
 80039da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d102      	bne.n	8003a0c <HAL_RCC_OscConfig+0x94>
 8003a06:	4ba1      	ldr	r3, [pc, #644]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	e015      	b.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a24:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a28:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a34:	4b95      	ldr	r3, [pc, #596]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a3c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003a40:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a44:	fa92 f2a2 	rbit	r2, r2
 8003a48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003a4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f042 0220 	orr.w	r2, r2, #32
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 021f 	and.w	r2, r2, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8111 	beq.w	8003c90 <HAL_RCC_OscConfig+0x318>
 8003a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8108 	bne.w	8003c90 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f000 bfc6 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12e>
 8003a98:	4b7c      	ldr	r3, [pc, #496]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a7b      	ldr	r2, [pc, #492]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e036      	b.n	8003b14 <HAL_RCC_OscConfig+0x19c>
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x158>
 8003ab6:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a74      	ldr	r2, [pc, #464]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b72      	ldr	r3, [pc, #456]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a71      	ldr	r2, [pc, #452]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e021      	b.n	8003b14 <HAL_RCC_OscConfig+0x19c>
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x184>
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b67      	ldr	r3, [pc, #412]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a66      	ldr	r2, [pc, #408]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x19c>
 8003afc:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a62      	ldr	r2, [pc, #392]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b60      	ldr	r3, [pc, #384]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a5f      	ldr	r2, [pc, #380]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d059      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fe fdb4 	bl	8002690 <HAL_GetTick>
 8003b28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2e:	f7fe fdaf 	bl	8002690 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d902      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	f000 bf67 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
 8003b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b48:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003b58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5c:	fab3 f383 	clz	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_RCC_OscConfig+0x1fe>
 8003b70:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	e015      	b.n	8003ba2 <HAL_RCC_OscConfig+0x22a>
 8003b76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003baa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003bae:	fa92 f2a2 	rbit	r2, r2
 8003bb2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003bb6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003bba:	fab2 f282 	clz	r2, r2
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f042 0220 	orr.w	r2, r2, #32
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ab      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1b6>
 8003bd6:	e05c      	b.n	8003c92 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fd5a 	bl	8002690 <HAL_GetTick>
 8003bdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be2:	f7fe fd55 	bl	8002690 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d902      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	f000 bf0d 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
 8003bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003c0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HAL_RCC_OscConfig+0x2b2>
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	e015      	b.n	8003c56 <HAL_RCC_OscConfig+0x2de>
 8003c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_RCC_OscConfig+0x314>)
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003c5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003c62:	fa92 f2a2 	rbit	r2, r2
 8003c66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003c6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c6e:	fab2 f282 	clz	r2, r2
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	f042 0220 	orr.w	r2, r2, #32
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	f002 021f 	and.w	r2, r2, #31
 8003c7e:	2101      	movs	r1, #1
 8003c80:	fa01 f202 	lsl.w	r2, r1, r2
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ab      	bne.n	8003be2 <HAL_RCC_OscConfig+0x26a>
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_OscConfig+0x31a>
 8003c8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 817f 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ca8:	4ba7      	ldr	r3, [pc, #668]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cb4:	4ba4      	ldr	r3, [pc, #656]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d173      	bne.n	8003da8 <HAL_RCC_OscConfig+0x430>
 8003cc0:	4ba1      	ldr	r3, [pc, #644]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	d16c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x430>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003ce0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_OscConfig+0x386>
 8003cf8:	4b93      	ldr	r3, [pc, #588]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	e013      	b.n	8003d26 <HAL_RCC_OscConfig+0x3ae>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003d10:	2302      	movs	r3, #2
 8003d12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d16:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d22:	4b89      	ldr	r3, [pc, #548]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2202      	movs	r2, #2
 8003d28:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003d2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003d30:	fa92 f2a2 	rbit	r2, r2
 8003d34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003d38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d3c:	fab2 f282 	clz	r2, r2
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f002 021f 	and.w	r2, r2, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3f6>
 8003d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f000 be52 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	21f8      	movs	r1, #248	; 0xf8
 8003d84:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003d8c:	fa91 f1a1 	rbit	r1, r1
 8003d90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003d94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d98:	fab1 f181 	clz	r1, r1
 8003d9c:	b2c9      	uxtb	r1, r1
 8003d9e:	408b      	lsls	r3, r1
 8003da0:	4969      	ldr	r1, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e0fe      	b.n	8003fa6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8088 	beq.w	8003eca <HAL_RCC_OscConfig+0x552>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003dcc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	461a      	mov	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fe fc53 	bl	8002690 <HAL_GetTick>
 8003dea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fe fc4e 	bl	8002690 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d902      	bls.n	8003e06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	f000 be06 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
 8003e06:	2302      	movs	r3, #2
 8003e08:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003e18:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4be>
 8003e30:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	e013      	b.n	8003e5e <HAL_RCC_OscConfig+0x4e6>
 8003e36:	2302      	movs	r3, #2
 8003e38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003e64:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003e68:	fa92 f2a2 	rbit	r2, r2
 8003e6c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003e70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e74:	fab2 f282 	clz	r2, r2
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	f002 021f 	and.w	r2, r2, #31
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0af      	beq.n	8003df0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	21f8      	movs	r1, #248	; 0xf8
 8003ea6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003eae:	fa91 f1a1 	rbit	r1, r1
 8003eb2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003eb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003eba:	fab1 f181 	clz	r1, r1
 8003ebe:	b2c9      	uxtb	r1, r1
 8003ec0:	408b      	lsls	r3, r1
 8003ec2:	4921      	ldr	r1, [pc, #132]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e06d      	b.n	8003fa6 <HAL_RCC_OscConfig+0x62e>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fe fbcb 	bl	8002690 <HAL_GetTick>
 8003efa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fe fbc6 	bl	8002690 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	f000 bd7e 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003f28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5d4>
 8003f40:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <HAL_RCC_OscConfig+0x5d0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	e016      	b.n	8003f74 <HAL_RCC_OscConfig+0x5fc>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f70:	4bbf      	ldr	r3, [pc, #764]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2202      	movs	r2, #2
 8003f76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f7e:	fa92 f2a2 	rbit	r2, r2
 8003f82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003f86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f8a:	fab2 f282 	clz	r2, r2
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	f042 0220 	orr.w	r2, r2, #32
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	f002 021f 	and.w	r2, r2, #31
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ac      	bne.n	8003f00 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003faa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8113 	beq.w	80041e2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d07c      	beq.n	80040c6 <HAL_RCC_OscConfig+0x74e>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003fde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4ba2      	ldr	r3, [pc, #648]	; (8004274 <HAL_RCC_OscConfig+0x8fc>)
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fb4b 	bl	8002690 <HAL_GetTick>
 8003ffa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004000:	f7fe fb46 	bl	8002690 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d902      	bls.n	8004016 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	f000 bcfe 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
 8004016:	2302      	movs	r3, #2
 8004018:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004020:	fa93 f2a3 	rbit	r2, r3
 8004024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004028:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004036:	2202      	movs	r2, #2
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fa93 f2a3 	rbit	r2, r3
 8004048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004056:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800405a:	2202      	movs	r2, #2
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004062:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	fa93 f2a3 	rbit	r2, r3
 800406c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004070:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004074:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	4b7e      	ldr	r3, [pc, #504]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 8004078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004082:	2102      	movs	r1, #2
 8004084:	6019      	str	r1, [r3, #0]
 8004086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fa93 f1a3 	rbit	r1, r3
 8004094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004098:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800409c:	6019      	str	r1, [r3, #0]
  return result;
 800409e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2101      	movs	r1, #1
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d09d      	beq.n	8004000 <HAL_RCC_OscConfig+0x688>
 80040c4:	e08d      	b.n	80041e2 <HAL_RCC_OscConfig+0x86a>
 80040c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f2a3 	rbit	r2, r3
 80040e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040e8:	601a      	str	r2, [r3, #0]
  return result;
 80040ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f4:	fab3 f383 	clz	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b5d      	ldr	r3, [pc, #372]	; (8004274 <HAL_RCC_OscConfig+0x8fc>)
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	461a      	mov	r2, r3
 8004104:	2300      	movs	r3, #0
 8004106:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe fac2 	bl	8002690 <HAL_GetTick>
 800410c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004110:	e00a      	b.n	8004128 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004112:	f7fe fabd 	bl	8002690 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d902      	bls.n	8004128 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	f000 bc75 	b.w	8004a12 <HAL_RCC_OscConfig+0x109a>
 8004128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004130:	2202      	movs	r2, #2
 8004132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004138:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f2a3 	rbit	r2, r3
 8004142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004146:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004150:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004174:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004178:	2202      	movs	r2, #2
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004192:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 8004196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041a0:	2102      	movs	r1, #2
 80041a2:	6019      	str	r1, [r3, #0]
 80041a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	fa93 f1a3 	rbit	r1, r3
 80041b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041ba:	6019      	str	r1, [r3, #0]
  return result;
 80041bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d197      	bne.n	8004112 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 81a5 	beq.w	8004542 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004214:	61d3      	str	r3, [r2, #28]
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCC_OscConfig+0x8f8>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800421e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004230:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_OscConfig+0x900>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d121      	bne.n	8004288 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x900>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x900>)
 800424a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004250:	f7fe fa1e 	bl	8002690 <HAL_GetTick>
 8004254:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	e010      	b.n	800427c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fe fa19 	bl	8002690 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d908      	bls.n	800427c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e3d1      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	10908120 	.word	0x10908120
 8004278:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	4b8d      	ldr	r3, [pc, #564]	; (80044b4 <HAL_RCC_OscConfig+0xb3c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0e8      	beq.n	800425a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x92e>
 8004298:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	4a86      	ldr	r2, [pc, #536]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6213      	str	r3, [r2, #32]
 80042a4:	e035      	b.n	8004312 <HAL_RCC_OscConfig+0x99a>
 80042a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x958>
 80042b6:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a7f      	ldr	r2, [pc, #508]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6213      	str	r3, [r2, #32]
 80042c2:	4b7d      	ldr	r3, [pc, #500]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a7c      	ldr	r2, [pc, #496]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6213      	str	r3, [r2, #32]
 80042ce:	e020      	b.n	8004312 <HAL_RCC_OscConfig+0x99a>
 80042d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d10c      	bne.n	80042fa <HAL_RCC_OscConfig+0x982>
 80042e0:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a74      	ldr	r2, [pc, #464]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a71      	ldr	r2, [pc, #452]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	e00b      	b.n	8004312 <HAL_RCC_OscConfig+0x99a>
 80042fa:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a6e      	ldr	r2, [pc, #440]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6213      	str	r3, [r2, #32]
 8004306:	4b6c      	ldr	r3, [pc, #432]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a6b      	ldr	r2, [pc, #428]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004316:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8081 	beq.w	8004426 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004324:	f7fe f9b4 	bl	8002690 <HAL_GetTick>
 8004328:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fe f9af 	bl	8002690 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e365      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
 8004346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800434a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800434e:	2202      	movs	r2, #2
 8004350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004356:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	fa93 f2a3 	rbit	r2, r3
 8004360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004364:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800436e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004372:	2202      	movs	r2, #2
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	fa93 f2a3 	rbit	r2, r3
 8004384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004388:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800438c:	601a      	str	r2, [r3, #0]
  return result;
 800438e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004392:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004396:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_OscConfig+0xa3a>
 80043ac:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	e013      	b.n	80043da <HAL_RCC_OscConfig+0xa62>
 80043b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80043ba:	2202      	movs	r2, #2
 80043bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fa93 f2a3 	rbit	r2, r3
 80043cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80043e2:	2102      	movs	r1, #2
 80043e4:	6011      	str	r1, [r2, #0]
 80043e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	fa92 f1a2 	rbit	r1, r2
 80043f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80043f8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80043fc:	6011      	str	r1, [r2, #0]
  return result;
 80043fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004402:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f002 021f 	and.w	r2, r2, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d084      	beq.n	800432e <HAL_RCC_OscConfig+0x9b6>
 8004424:	e083      	b.n	800452e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004426:	f7fe f933 	bl	8002690 <HAL_GetTick>
 800442a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fe f92e 	bl	8002690 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e2e4      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
 8004448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004450:	2202      	movs	r2, #2
 8004452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004458:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	fa93 f2a3 	rbit	r2, r3
 8004462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004466:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004470:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004474:	2202      	movs	r2, #2
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	fa93 f2a3 	rbit	r2, r3
 8004486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800448e:	601a      	str	r2, [r3, #0]
  return result;
 8004490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004494:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004498:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f043 0302 	orr.w	r3, r3, #2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d106      	bne.n	80044bc <HAL_RCC_OscConfig+0xb44>
 80044ae:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <HAL_RCC_OscConfig+0xb40>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	e017      	b.n	80044e4 <HAL_RCC_OscConfig+0xb6c>
 80044b4:	40007000 	.word	0x40007000
 80044b8:	40021000 	.word	0x40021000
 80044bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80044c4:	2202      	movs	r2, #2
 80044c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	fa93 f2a3 	rbit	r2, r3
 80044d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044da:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	4bb3      	ldr	r3, [pc, #716]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80044ec:	2102      	movs	r1, #2
 80044ee:	6011      	str	r1, [r2, #0]
 80044f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	fa92 f1a2 	rbit	r1, r2
 80044fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004502:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004506:	6011      	str	r1, [r2, #0]
  return result;
 8004508:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800450c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	fab2 f282 	clz	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f002 021f 	and.w	r2, r2, #31
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d180      	bne.n	8004430 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800452e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4b9e      	ldr	r3, [pc, #632]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4a9d      	ldr	r2, [pc, #628]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 825e 	beq.w	8004a10 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004554:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b08      	cmp	r3, #8
 800455e:	f000 821f 	beq.w	80049a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004566:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	f040 8170 	bne.w	8004854 <HAL_RCC_OscConfig+0xedc>
 8004574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004578:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800457c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004586:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	fa93 f2a3 	rbit	r2, r3
 8004590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004594:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004598:	601a      	str	r2, [r3, #0]
  return result;
 800459a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80045a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	fab3 f383 	clz	r3, r3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe f869 	bl	8002690 <HAL_GetTick>
 80045be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c2:	e009      	b.n	80045d8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fe f864 	bl	8002690 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e21c      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
 80045d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	fa93 f2a3 	rbit	r2, r3
 80045f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80045fc:	601a      	str	r2, [r3, #0]
  return result;
 80045fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004602:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004606:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004608:	fab3 f383 	clz	r3, r3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d102      	bne.n	8004622 <HAL_RCC_OscConfig+0xcaa>
 800461c:	4b64      	ldr	r3, [pc, #400]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	e027      	b.n	8004672 <HAL_RCC_OscConfig+0xcfa>
 8004622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004626:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800462a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800462e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004634:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004642:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800464c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	fa93 f2a3 	rbit	r2, r3
 8004664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004668:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004676:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800467a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800467e:	6011      	str	r1, [r2, #0]
 8004680:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004684:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	fa92 f1a2 	rbit	r1, r2
 800468e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004692:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004696:	6011      	str	r1, [r2, #0]
  return result;
 8004698:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800469c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	fab2 f282 	clz	r2, r2
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	f042 0220 	orr.w	r2, r2, #32
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	f002 021f 	and.w	r2, r2, #31
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d182      	bne.n	80045c4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046be:	4b3c      	ldr	r3, [pc, #240]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f023 020f 	bic.w	r2, r3, #15
 80046c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80046e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a19      	ldr	r1, [r3, #32]
 80046ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	492d      	ldr	r1, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
 8004700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004704:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800470c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004712:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	fa93 f2a3 	rbit	r2, r3
 800471c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004720:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004724:	601a      	str	r2, [r3, #0]
  return result;
 8004726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800472e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800473a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	2301      	movs	r3, #1
 8004744:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fd ffa3 	bl	8002690 <HAL_GetTick>
 800474a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800474e:	e009      	b.n	8004764 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7fd ff9e 	bl	8002690 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e156      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
 8004764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004768:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800476c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004776:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	fa93 f2a3 	rbit	r2, r3
 8004780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004784:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004788:	601a      	str	r2, [r3, #0]
  return result;
 800478a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004792:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d105      	bne.n	80047b4 <HAL_RCC_OscConfig+0xe3c>
 80047a8:	4b01      	ldr	r3, [pc, #4]	; (80047b0 <HAL_RCC_OscConfig+0xe38>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	e02a      	b.n	8004804 <HAL_RCC_OscConfig+0xe8c>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80047bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fa93 f2a3 	rbit	r2, r3
 80047d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80047e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	fa93 f2a3 	rbit	r2, r3
 80047f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4b86      	ldr	r3, [pc, #536]	; (8004a1c <HAL_RCC_OscConfig+0x10a4>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004808:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800480c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004810:	6011      	str	r1, [r2, #0]
 8004812:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004816:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	fa92 f1a2 	rbit	r1, r2
 8004820:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004824:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004828:	6011      	str	r1, [r2, #0]
  return result;
 800482a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800482e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	fab2 f282 	clz	r2, r2
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	f042 0220 	orr.w	r2, r2, #32
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	f002 021f 	and.w	r2, r2, #31
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f202 	lsl.w	r2, r1, r2
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f43f af7f 	beq.w	8004750 <HAL_RCC_OscConfig+0xdd8>
 8004852:	e0dd      	b.n	8004a10 <HAL_RCC_OscConfig+0x1098>
 8004854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004858:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800485c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004866:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	fa93 f2a3 	rbit	r2, r3
 8004870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004874:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004878:	601a      	str	r2, [r3, #0]
  return result;
 800487a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800487e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004882:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800488e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fd fef9 	bl	8002690 <HAL_GetTick>
 800489e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a2:	e009      	b.n	80048b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fd fef4 	bl	8002690 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0ac      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
 80048b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	fa93 f2a3 	rbit	r2, r3
 80048d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80048dc:	601a      	str	r2, [r3, #0]
  return result;
 80048de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80048e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d102      	bne.n	8004902 <HAL_RCC_OscConfig+0xf8a>
 80048fc:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <HAL_RCC_OscConfig+0x10a4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	e027      	b.n	8004952 <HAL_RCC_OscConfig+0xfda>
 8004902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004906:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800490a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004914:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fa93 f2a3 	rbit	r2, r3
 800491e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004922:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	fa93 f2a3 	rbit	r2, r3
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x10a4>)
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004956:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800495a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800495e:	6011      	str	r1, [r2, #0]
 8004960:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004964:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	fa92 f1a2 	rbit	r1, r2
 800496e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004972:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004976:	6011      	str	r1, [r2, #0]
  return result;
 8004978:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800497c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	fab2 f282 	clz	r2, r2
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	f042 0220 	orr.w	r2, r2, #32
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	f002 021f 	and.w	r2, r2, #31
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f202 	lsl.w	r2, r1, r2
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d182      	bne.n	80048a4 <HAL_RCC_OscConfig+0xf2c>
 800499e:	e037      	b.n	8004a10 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e02e      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <HAL_RCC_OscConfig+0x10a4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <HAL_RCC_OscConfig+0x10a4>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80049cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d117      	bne.n	8004a0c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80049dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80049f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b09e      	sub	sp, #120	; 0x78
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e162      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d910      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 0207 	bic.w	r2, r3, #7
 8004a4e:	498b      	ldr	r1, [pc, #556]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e14a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b82      	ldr	r3, [pc, #520]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	497f      	ldr	r1, [pc, #508]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80dc 	beq.w	8004c4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d13c      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xf6>
 8004a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aa0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xa6>
 8004ac0:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e00f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0xc6>
 8004ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8004ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae2:	4b67      	ldr	r3, [pc, #412]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aea:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aee:	fa92 f2a2 	rbit	r2, r2
 8004af2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004af4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004af6:	fab2 f282 	clz	r2, r2
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	f042 0220 	orr.w	r2, r2, #32
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	f002 021f 	and.w	r2, r2, #31
 8004b06:	2101      	movs	r1, #1
 8004b08:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d17b      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0f3      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d13c      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x178>
 8004b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d102      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x128>
 8004b42:	4b4f      	ldr	r3, [pc, #316]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	e00f      	b.n	8004b68 <HAL_RCC_ClockConfig+0x148>
 8004b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
 8004b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b64:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b70:	fa92 f2a2 	rbit	r2, r2
 8004b74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b78:	fab2 f282 	clz	r2, r2
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	f042 0220 	orr.w	r2, r2, #32
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	f002 021f 	and.w	r2, r2, #31
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d13a      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b2      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d102      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x1a0>
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	e00d      	b.n	8004bdc <HAL_RCC_ClockConfig+0x1bc>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	fa93 f3a3 	rbit	r3, r3
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	2302      	movs	r3, #2
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2202      	movs	r2, #2
 8004bde:	61ba      	str	r2, [r7, #24]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	fa92 f2a2 	rbit	r2, r2
 8004be6:	617a      	str	r2, [r7, #20]
  return result;
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	fab2 f282 	clz	r2, r2
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	f042 0220 	orr.w	r2, r2, #32
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f002 021f 	and.w	r2, r2, #31
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e079      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f023 0203 	bic.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	491a      	ldr	r1, [pc, #104]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c1c:	f7fd fd38 	bl	8002690 <HAL_GetTick>
 8004c20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7fd fd34 	bl	8002690 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e061      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 020c 	and.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d1eb      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d214      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 0207 	bic.w	r2, r3, #7
 8004c62:	4906      	ldr	r1, [pc, #24]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e040      	b.n	8004cfe <HAL_RCC_ClockConfig+0x2de>
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCC_ClockConfig+0x2e8>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	491a      	ldr	r1, [pc, #104]	; (8004d08 <HAL_RCC_ClockConfig+0x2e8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCC_ClockConfig+0x2e8>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4912      	ldr	r1, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x2e8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cc2:	f000 f829 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RCC_ClockConfig+0x2e8>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd0:	22f0      	movs	r2, #240	; 0xf0
 8004cd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	fa92 f2a2 	rbit	r2, r2
 8004cda:	60fa      	str	r2, [r7, #12]
  return result;
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	fab2 f282 	clz	r2, r2
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	40d3      	lsrs	r3, r2
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <HAL_RCC_ClockConfig+0x2ec>)
 8004ce8:	5cd3      	ldrb	r3, [r2, r3]
 8004cea:	fa21 f303 	lsr.w	r3, r1, r3
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <HAL_RCC_ClockConfig+0x2f0>)
 8004cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_RCC_ClockConfig+0x2f4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd f9de 	bl	80020b8 <HAL_InitTick>
  
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3778      	adds	r7, #120	; 0x78
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800cf84 	.word	0x0800cf84
 8004d10:	20000008 	.word	0x20000008
 8004d14:	2000000c 	.word	0x2000000c

08004d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b08b      	sub	sp, #44	; 0x2c
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004d32:	4b2a      	ldr	r3, [pc, #168]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x30>
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0x36>
 8004d46:	e03f      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d4a:	623b      	str	r3, [r7, #32]
      break;
 8004d4c:	e03f      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004d58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	fa92 f2a2 	rbit	r2, r2
 8004d60:	607a      	str	r2, [r7, #4]
  return result;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	fab2 f282 	clz	r2, r2
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	40d3      	lsrs	r3, r2
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d6e:	5cd3      	ldrb	r3, [r2, r3]
 8004d70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	220f      	movs	r2, #15
 8004d7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	fa92 f2a2 	rbit	r2, r2
 8004d84:	60fa      	str	r2, [r7, #12]
  return result;
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	fab2 f282 	clz	r2, r2
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	40d3      	lsrs	r3, r2
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d92:	5cd3      	ldrb	r3, [r2, r3]
 8004d94:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
 8004db0:	e007      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	623b      	str	r3, [r7, #32]
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004dca:	623b      	str	r3, [r7, #32]
      break;
 8004dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dce:	6a3b      	ldr	r3, [r7, #32]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	372c      	adds	r7, #44	; 0x2c
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	007a1200 	.word	0x007a1200
 8004de4:	0800cf9c 	.word	0x0800cf9c
 8004de8:	0800cfac 	.word	0x0800cfac

08004dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000008 	.word	0x20000008

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e0a:	f7ff ffef 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e0e:	4601      	mov	r1, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	fa92 f2a2 	rbit	r2, r2
 8004e24:	603a      	str	r2, [r7, #0]
  return result;
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	fab2 f282 	clz	r2, r2
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	40d3      	lsrs	r3, r2
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004e32:	5cd3      	ldrb	r3, [r2, r3]
 8004e34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	0800cf94 	.word	0x0800cf94

08004e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e4e:	f7ff ffcd 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e52:	4601      	mov	r1, r0
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004e5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004e60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	fa92 f2a2 	rbit	r2, r2
 8004e68:	603a      	str	r2, [r7, #0]
  return result;
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	fab2 f282 	clz	r2, r2
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	40d3      	lsrs	r3, r2
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000
 8004e88:	0800cf94 	.word	0x0800cf94

08004e8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	220f      	movs	r2, #15
 8004e9a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e9c:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0203 	and.w	r2, r3, #3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	08db      	lsrs	r3, r3, #3
 8004ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_RCC_GetClockConfig+0x60>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0207 	and.w	r2, r3, #7
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40022000 	.word	0x40022000

08004ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b092      	sub	sp, #72	; 0x48
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80d4 	beq.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f14:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10e      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	61d3      	str	r3, [r2, #28]
 8004f2c:	4b48      	ldr	r3, [pc, #288]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b45      	ldr	r3, [pc, #276]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d118      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b42      	ldr	r3, [pc, #264]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a41      	ldr	r2, [pc, #260]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fd fb9b 	bl	8002690 <HAL_GetTick>
 8004f5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fd fb97 	bl	8002690 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	; 0x64
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1d6      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b38      	ldr	r3, [pc, #224]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f7c:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8084 	beq.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d07c      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f9c:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fee:	4a18      	ldr	r2, [pc, #96]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04b      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fd fb47 	bl	8002690 <HAL_GetTick>
 8005002:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005004:	e00a      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fd fb43 	bl	8002690 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e180      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800501c:	2302      	movs	r3, #2
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	fa93 f3a3 	rbit	r3, r3
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
 8005028:	2302      	movs	r3, #2
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	61fb      	str	r3, [r7, #28]
  return result;
 8005034:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005036:	fab3 f383 	clz	r3, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f043 0302 	orr.w	r3, r3, #2
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d108      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800504a:	4b01      	ldr	r3, [pc, #4]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	e00d      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005050:	40021000 	.word	0x40021000
 8005054:	40007000 	.word	0x40007000
 8005058:	10908100 	.word	0x10908100
 800505c:	2302      	movs	r3, #2
 800505e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	fa93 f3a3 	rbit	r3, r3
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	4b9a      	ldr	r3, [pc, #616]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2202      	movs	r2, #2
 800506e:	613a      	str	r2, [r7, #16]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	fa92 f2a2 	rbit	r2, r2
 8005076:	60fa      	str	r2, [r7, #12]
  return result;
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	fab2 f282 	clz	r2, r2
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	f002 021f 	and.w	r2, r2, #31
 800508a:	2101      	movs	r1, #1
 800508c:	fa01 f202 	lsl.w	r2, r1, r2
 8005090:	4013      	ands	r3, r2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0b7      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005096:	4b8f      	ldr	r3, [pc, #572]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	498c      	ldr	r1, [pc, #560]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d105      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050b0:	4b88      	ldr	r3, [pc, #544]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4a87      	ldr	r2, [pc, #540]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c8:	4b82      	ldr	r3, [pc, #520]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	f023 0203 	bic.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	497f      	ldr	r1, [pc, #508]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e6:	4b7b      	ldr	r3, [pc, #492]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4978      	ldr	r1, [pc, #480]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005104:	4b73      	ldr	r3, [pc, #460]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	4970      	ldr	r1, [pc, #448]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005122:	4b6c      	ldr	r3, [pc, #432]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f023 0210 	bic.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4969      	ldr	r1, [pc, #420]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005140:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514c:	4961      	ldr	r1, [pc, #388]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f023 0220 	bic.w	r2, r3, #32
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	495a      	ldr	r1, [pc, #360]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800516c:	4313      	orrs	r3, r2
 800516e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800517c:	4b55      	ldr	r3, [pc, #340]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	4952      	ldr	r1, [pc, #328]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800519a:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	494b      	ldr	r1, [pc, #300]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051b8:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	4943      	ldr	r1, [pc, #268]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051d6:	4b3f      	ldr	r3, [pc, #252]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	493c      	ldr	r1, [pc, #240]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051f4:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	4934      	ldr	r1, [pc, #208]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005212:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	492d      	ldr	r1, [pc, #180]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	4925      	ldr	r1, [pc, #148]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800523e:	4313      	orrs	r3, r2
 8005240:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800524e:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	491e      	ldr	r1, [pc, #120]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	4916      	ldr	r1, [pc, #88]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	490f      	ldr	r1, [pc, #60]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	4907      	ldr	r1, [pc, #28]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80052c6:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	e002      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052da:	4913      	ldr	r1, [pc, #76]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	490b      	ldr	r1, [pc, #44]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800530a:	4b07      	ldr	r3, [pc, #28]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	4904      	ldr	r1, [pc, #16]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005318:	4313      	orrs	r3, r2
 800531a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3748      	adds	r7, #72	; 0x48
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e09d      	b.n	800547a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534e:	d009      	beq.n	8005364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	61da      	str	r2, [r3, #28]
 8005356:	e005      	b.n	8005364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc fe1c 	bl	8001fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a4:	d902      	bls.n	80053ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Init+0xa0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	ea42 0103 	orr.w	r1, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	f003 0204 	and.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005448:	ea42 0103 	orr.w	r1, r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b088      	sub	sp, #32
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	4613      	mov	r3, r2
 8005490:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_SPI_Transmit+0x22>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e15f      	b.n	8005764 <HAL_SPI_Transmit+0x2e2>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ac:	f7fd f8f0 	bl	8002690 <HAL_GetTick>
 80054b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d002      	beq.n	80054c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
 80054c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054c6:	e148      	b.n	800575a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_SPI_Transmit+0x52>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054d8:	e13f      	b.n	800575a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2203      	movs	r2, #3
 80054de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005524:	d10f      	bne.n	8005546 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d007      	beq.n	8005564 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800556c:	d94f      	bls.n	800560e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_Transmit+0xfa>
 8005576:	8afb      	ldrh	r3, [r7, #22]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d142      	bne.n	8005602 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055a0:	e02f      	b.n	8005602 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d112      	bne.n	80055d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055d4:	e015      	b.n	8005602 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d6:	f7fd f85b 	bl	8002690 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d803      	bhi.n	80055ee <HAL_SPI_Transmit+0x16c>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d102      	bne.n	80055f4 <HAL_SPI_Transmit+0x172>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005600:	e0ab      	b.n	800575a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ca      	bne.n	80055a2 <HAL_SPI_Transmit+0x120>
 800560c:	e080      	b.n	8005710 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_SPI_Transmit+0x19a>
 8005616:	8afb      	ldrh	r3, [r7, #22]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d174      	bne.n	8005706 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d912      	bls.n	800564c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b02      	subs	r3, #2
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800564a:	e05c      	b.n	8005706 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005672:	e048      	b.n	8005706 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d12b      	bne.n	80056da <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d912      	bls.n	80056b2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	1c9a      	adds	r2, r3, #2
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b02      	subs	r3, #2
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b0:	e029      	b.n	8005706 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d8:	e015      	b.n	8005706 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fc ffd9 	bl	8002690 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x270>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x276>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005704:	e029      	b.n	800575a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1b1      	bne.n	8005674 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fd07 	bl	8006128 <SPI_EndRxTxTransaction>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e003      	b.n	800575a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005762:	7ffb      	ldrb	r3, [r7, #31]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d002      	beq.n	8005792 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800578c:	2302      	movs	r3, #2
 800578e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005790:	e11a      	b.n	80059c8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579a:	d112      	bne.n	80057c2 <HAL_SPI_Receive+0x56>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10e      	bne.n	80057c2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2204      	movs	r2, #4
 80057a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f90e 	bl	80059da <HAL_SPI_TransmitReceive>
 80057be:	4603      	mov	r3, r0
 80057c0:	e107      	b.n	80059d2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_SPI_Receive+0x64>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e100      	b.n	80059d2 <HAL_SPI_Receive+0x266>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d8:	f7fc ff5a 	bl	8002690 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_Receive+0x7e>
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057ee:	e0eb      	b.n	80059c8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583a:	d908      	bls.n	800584e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	e007      	b.n	800585e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005866:	d10f      	bne.n	8005888 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005876:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005886:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d007      	beq.n	80058a6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ae:	d86f      	bhi.n	8005990 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058b0:	e034      	b.n	800591c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d117      	bne.n	80058f0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f103 020c 	add.w	r2, r3, #12
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058ee:	e015      	b.n	800591c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f0:	f7fc fece 	bl	8002690 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d803      	bhi.n	8005908 <HAL_SPI_Receive+0x19c>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d102      	bne.n	800590e <HAL_SPI_Receive+0x1a2>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800591a:	e055      	b.n	80059c8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1c4      	bne.n	80058b2 <HAL_SPI_Receive+0x146>
 8005928:	e038      	b.n	800599c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d115      	bne.n	8005964 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	b292      	uxth	r2, r2
 8005944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	1c9a      	adds	r2, r3, #2
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005962:	e015      	b.n	8005990 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005964:	f7fc fe94 	bl	8002690 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d803      	bhi.n	800597c <HAL_SPI_Receive+0x210>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x216>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800598e:	e01b      	b.n	80059c8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1c6      	bne.n	800592a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fb69 	bl	8006078 <SPI_EndRxTransaction>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
 80059be:	e003      	b.n	80059c8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
 80059e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059e8:	2301      	movs	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x26>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e20a      	b.n	8005e16 <HAL_SPI_TransmitReceive+0x43c>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a08:	f7fc fe42 	bl	8002690 <HAL_GetTick>
 8005a0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a1c:	887b      	ldrh	r3, [r7, #2]
 8005a1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a24:	7efb      	ldrb	r3, [r7, #27]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d00e      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x6e>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a30:	d106      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x66>
 8005a3a:	7efb      	ldrb	r3, [r7, #27]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d003      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a46:	e1e0      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x80>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x80>
 8005a54:	887b      	ldrh	r3, [r7, #2]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a60:	e1d3      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2205      	movs	r2, #5
 8005a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	887a      	ldrh	r2, [r7, #2]
 8005a86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	887a      	ldrh	r2, [r7, #2]
 8005a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	887a      	ldrh	r2, [r7, #2]
 8005aa2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ab8:	d802      	bhi.n	8005ac0 <HAL_SPI_TransmitReceive+0xe6>
 8005aba:	8a3b      	ldrh	r3, [r7, #16]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d908      	bls.n	8005ad2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ace:	605a      	str	r2, [r3, #4]
 8005ad0:	e007      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ae0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d007      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b08:	f240 8081 	bls.w	8005c0e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x140>
 8005b14:	8a7b      	ldrh	r3, [r7, #18]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d16d      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	1c9a      	adds	r2, r3, #2
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3e:	e05a      	b.n	8005bf6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d11b      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x1ac>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d016      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0x1ac>
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d113      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d11c      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x1f4>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d016      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	b292      	uxth	r2, r2
 8005bac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bce:	f7fc fd5f 	bl	8002690 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d80b      	bhi.n	8005bf6 <HAL_SPI_TransmitReceive+0x21c>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d007      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005bf4:	e109      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d19f      	bne.n	8005b40 <HAL_SPI_TransmitReceive+0x166>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d199      	bne.n	8005b40 <HAL_SPI_TransmitReceive+0x166>
 8005c0c:	e0e3      	b.n	8005dd6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x244>
 8005c16:	8a7b      	ldrh	r3, [r7, #18]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	f040 80cf 	bne.w	8005dbc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d912      	bls.n	8005c4e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	881a      	ldrh	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b02      	subs	r3, #2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c4c:	e0b6      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	e0a2      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d134      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x314>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d02f      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x314>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d12c      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d912      	bls.n	8005cc4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	881a      	ldrh	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	1c9a      	adds	r2, r3, #2
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b02      	subs	r3, #2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cc2:	e012      	b.n	8005cea <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d148      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0x3b4>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d042      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d923      	bls.n	8005d5c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b02      	subs	r3, #2
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d81f      	bhi.n	8005d8a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	e016      	b.n	8005d8a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f103 020c 	add.w	r2, r3, #12
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d8e:	f7fc fc7f 	bl	8002690 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d803      	bhi.n	8005da6 <HAL_SPI_TransmitReceive+0x3cc>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x3d2>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005dba:	e026      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f47f af57 	bne.w	8005c76 <HAL_SPI_TransmitReceive+0x29c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af50 	bne.w	8005c76 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f9a4 	bl	8006128 <SPI_EndRxTxTransaction>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e00:	e003      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3728      	adds	r7, #40	; 0x28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e2c:	b2db      	uxtb	r3, r3
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e4c:	f7fc fc20 	bl	8002690 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	4413      	add	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e5c:	f7fc fc18 	bl	8002690 <HAL_GetTick>
 8005e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e62:	4b39      	ldr	r3, [pc, #228]	; (8005f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	015b      	lsls	r3, r3, #5
 8005e68:	0d1b      	lsrs	r3, r3, #20
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e72:	e054      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d050      	beq.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e7c:	f7fc fc08 	bl	8002690 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d902      	bls.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d13d      	bne.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eaa:	d111      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d004      	beq.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebe:	d107      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d10f      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e017      	b.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d19b      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000008 	.word	0x20000008

08005f4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f5e:	f7fc fb97 	bl	8002690 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f6e:	f7fc fb8f 	bl	8002690 <HAL_GetTick>
 8005f72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f7c:	4b3d      	ldr	r3, [pc, #244]	; (8006074 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00da      	lsls	r2, r3, #3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	0d1b      	lsrs	r3, r3, #20
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f94:	e060      	b.n	8006058 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f9c:	d107      	bne.n	8005fae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d050      	beq.n	8006058 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fb6:	f7fc fb6b 	bl	8002690 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d902      	bls.n	8005fcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d13d      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe4:	d111      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fee:	d004      	beq.n	8005ffa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d107      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006012:	d10f      	bne.n	8006034 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e010      	b.n	800606a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3b01      	subs	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d196      	bne.n	8005f96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3728      	adds	r7, #40	; 0x28
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000008 	.word	0x20000008

08006078 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608c:	d111      	bne.n	80060b2 <SPI_EndRxTransaction+0x3a>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006096:	d004      	beq.n	80060a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d107      	bne.n	80060b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff febd 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e023      	b.n	8006120 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e0:	d11d      	bne.n	800611e <SPI_EndRxTransaction+0xa6>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ea:	d004      	beq.n	80060f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d113      	bne.n	800611e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff ff22 	bl	8005f4c <SPI_WaitFifoStateUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e000      	b.n	8006120 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff03 	bl	8005f4c <SPI_WaitFifoStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e027      	b.n	80061ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fe68 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e014      	b.n	80061ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fedc 	bl	8005f4c <SPI_WaitFifoStateUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e000      	b.n	80061ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e049      	b.n	800625a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc f90e 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 f9ee 	bl	80065d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d001      	beq.n	800627c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e04f      	b.n	800631c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a23      	ldr	r2, [pc, #140]	; (8006328 <HAL_TIM_Base_Start_IT+0xc4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d01d      	beq.n	80062da <HAL_TIM_Base_Start_IT+0x76>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d018      	beq.n	80062da <HAL_TIM_Base_Start_IT+0x76>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <HAL_TIM_Base_Start_IT+0xc8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d013      	beq.n	80062da <HAL_TIM_Base_Start_IT+0x76>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_TIM_Base_Start_IT+0xcc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIM_Base_Start_IT+0x76>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <HAL_TIM_Base_Start_IT+0xd0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIM_Base_Start_IT+0x76>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <HAL_TIM_Base_Start_IT+0xd4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIM_Base_Start_IT+0x76>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a19      	ldr	r2, [pc, #100]	; (800633c <HAL_TIM_Base_Start_IT+0xd8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d115      	bne.n	8006306 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	4b17      	ldr	r3, [pc, #92]	; (8006340 <HAL_TIM_Base_Start_IT+0xdc>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d015      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0xb4>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f2:	d011      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	e008      	b.n	8006318 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e000      	b.n	800631a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006318:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	40015000 	.word	0x40015000
 8006340:	00010007 	.word	0x00010007

08006344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b02      	cmp	r3, #2
 8006358:	d122      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d11b      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0202 	mvn.w	r2, #2
 8006370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f905 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 800638c:	e005      	b.n	800639a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8f7 	bl	8006582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f908 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0204 	mvn.w	r2, #4
 80063c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2202      	movs	r2, #2
 80063ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f8db 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f8cd 	bl	8006582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f8de 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b08      	cmp	r3, #8
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0208 	mvn.w	r2, #8
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f8b1 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8a3 	bl	8006582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f8b4 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b10      	cmp	r3, #16
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b10      	cmp	r3, #16
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0210 	mvn.w	r2, #16
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2208      	movs	r2, #8
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f887 	bl	8006596 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f879 	bl	8006582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f88a 	bl	80065aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d10e      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0201 	mvn.w	r2, #1
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fb fd24 	bl	8001f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b80      	cmp	r3, #128	; 0x80
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e0:	2b80      	cmp	r3, #128	; 0x80
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f918 	bl	8006724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006502:	d10e      	bne.n	8006522 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d107      	bne.n	8006522 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f90b 	bl	8006738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d10e      	bne.n	800654e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	d107      	bne.n	800654e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f838 	bl	80065be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b20      	cmp	r3, #32
 800655a:	d10e      	bne.n	800657a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b20      	cmp	r3, #32
 8006568:	d107      	bne.n	800657a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f06f 0220 	mvn.w	r2, #32
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f8cb 	bl	8006710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a42      	ldr	r2, [pc, #264]	; (80066f0 <TIM_Base_SetConfig+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f2:	d00f      	beq.n	8006614 <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a3f      	ldr	r2, [pc, #252]	; (80066f4 <TIM_Base_SetConfig+0x120>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00b      	beq.n	8006614 <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3e      	ldr	r2, [pc, #248]	; (80066f8 <TIM_Base_SetConfig+0x124>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d007      	beq.n	8006614 <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3d      	ldr	r2, [pc, #244]	; (80066fc <TIM_Base_SetConfig+0x128>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <TIM_Base_SetConfig+0x12c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d108      	bne.n	8006626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a31      	ldr	r2, [pc, #196]	; (80066f0 <TIM_Base_SetConfig+0x11c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01f      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006634:	d01b      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2e      	ldr	r2, [pc, #184]	; (80066f4 <TIM_Base_SetConfig+0x120>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d017      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2d      	ldr	r2, [pc, #180]	; (80066f8 <TIM_Base_SetConfig+0x124>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d013      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <TIM_Base_SetConfig+0x128>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00f      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2c      	ldr	r2, [pc, #176]	; (8006704 <TIM_Base_SetConfig+0x130>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00b      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <TIM_Base_SetConfig+0x134>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d007      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2a      	ldr	r2, [pc, #168]	; (800670c <TIM_Base_SetConfig+0x138>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d003      	beq.n	800666e <TIM_Base_SetConfig+0x9a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a25      	ldr	r2, [pc, #148]	; (8006700 <TIM_Base_SetConfig+0x12c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d108      	bne.n	8006680 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <TIM_Base_SetConfig+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <TIM_Base_SetConfig+0x100>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a13      	ldr	r2, [pc, #76]	; (80066fc <TIM_Base_SetConfig+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00f      	beq.n	80066d4 <TIM_Base_SetConfig+0x100>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a13      	ldr	r2, [pc, #76]	; (8006704 <TIM_Base_SetConfig+0x130>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_Base_SetConfig+0x100>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a12      	ldr	r2, [pc, #72]	; (8006708 <TIM_Base_SetConfig+0x134>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_Base_SetConfig+0x100>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a11      	ldr	r2, [pc, #68]	; (800670c <TIM_Base_SetConfig+0x138>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0x100>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <TIM_Base_SetConfig+0x12c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d103      	bne.n	80066dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	615a      	str	r2, [r3, #20]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40013400 	.word	0x40013400
 8006700:	40015000 	.word	0x40015000
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e040      	b.n	80067e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fb fec4 	bl	80024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2224      	movs	r2, #36	; 0x24
 8006778:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f8b6 	bl	80068fc <UART_SetConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e022      	b.n	80067e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa7e 	bl	8006ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb05 	bl	8006de8 <UART_CheckIdleState>
 80067de:	4603      	mov	r3, r0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d178      	bne.n	80068f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_UART_Transmit+0x24>
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e071      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2221      	movs	r2, #33	; 0x21
 800681c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800681e:	f7fb ff37 	bl	8002690 <HAL_GetTick>
 8006822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	88fa      	ldrh	r2, [r7, #6]
 8006830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683c:	d108      	bne.n	8006850 <HAL_UART_Transmit+0x68>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e003      	b.n	8006858 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006858:	e030      	b.n	80068bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fb67 	bl	8006f38 <UART_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e03c      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	881a      	ldrh	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688c:	b292      	uxth	r2, r2
 800688e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3302      	adds	r3, #2
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e008      	b.n	80068aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	b292      	uxth	r2, r2
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3301      	adds	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1c8      	bne.n	800685a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2140      	movs	r1, #64	; 0x40
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fb30 	bl	8006f38 <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e005      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b92      	ldr	r3, [pc, #584]	; (8006b70 <UART_SetConfig+0x274>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	430b      	orrs	r3, r1
 8006932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	430a      	orrs	r2, r1
 800696c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a80      	ldr	r2, [pc, #512]	; (8006b74 <UART_SetConfig+0x278>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d120      	bne.n	80069ba <UART_SetConfig+0xbe>
 8006978:	4b7f      	ldr	r3, [pc, #508]	; (8006b78 <UART_SetConfig+0x27c>)
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b03      	cmp	r3, #3
 8006982:	d817      	bhi.n	80069b4 <UART_SetConfig+0xb8>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x90>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069a9 	.word	0x080069a9
 8006994:	080069af 	.word	0x080069af
 8006998:	080069a3 	.word	0x080069a3
 800699c:	2301      	movs	r3, #1
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e0b5      	b.n	8006b0e <UART_SetConfig+0x212>
 80069a2:	2302      	movs	r3, #2
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e0b2      	b.n	8006b0e <UART_SetConfig+0x212>
 80069a8:	2304      	movs	r3, #4
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e0af      	b.n	8006b0e <UART_SetConfig+0x212>
 80069ae:	2308      	movs	r3, #8
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e0ac      	b.n	8006b0e <UART_SetConfig+0x212>
 80069b4:	2310      	movs	r3, #16
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e0a9      	b.n	8006b0e <UART_SetConfig+0x212>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a6f      	ldr	r2, [pc, #444]	; (8006b7c <UART_SetConfig+0x280>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d124      	bne.n	8006a0e <UART_SetConfig+0x112>
 80069c4:	4b6c      	ldr	r3, [pc, #432]	; (8006b78 <UART_SetConfig+0x27c>)
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069d0:	d011      	beq.n	80069f6 <UART_SetConfig+0xfa>
 80069d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069d6:	d817      	bhi.n	8006a08 <UART_SetConfig+0x10c>
 80069d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069dc:	d011      	beq.n	8006a02 <UART_SetConfig+0x106>
 80069de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e2:	d811      	bhi.n	8006a08 <UART_SetConfig+0x10c>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <UART_SetConfig+0xf4>
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ec:	d006      	beq.n	80069fc <UART_SetConfig+0x100>
 80069ee:	e00b      	b.n	8006a08 <UART_SetConfig+0x10c>
 80069f0:	2300      	movs	r3, #0
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e08b      	b.n	8006b0e <UART_SetConfig+0x212>
 80069f6:	2302      	movs	r3, #2
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e088      	b.n	8006b0e <UART_SetConfig+0x212>
 80069fc:	2304      	movs	r3, #4
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e085      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a02:	2308      	movs	r3, #8
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e082      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e07f      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a5b      	ldr	r2, [pc, #364]	; (8006b80 <UART_SetConfig+0x284>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d124      	bne.n	8006a62 <UART_SetConfig+0x166>
 8006a18:	4b57      	ldr	r3, [pc, #348]	; (8006b78 <UART_SetConfig+0x27c>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a24:	d011      	beq.n	8006a4a <UART_SetConfig+0x14e>
 8006a26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a2a:	d817      	bhi.n	8006a5c <UART_SetConfig+0x160>
 8006a2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a30:	d011      	beq.n	8006a56 <UART_SetConfig+0x15a>
 8006a32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a36:	d811      	bhi.n	8006a5c <UART_SetConfig+0x160>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <UART_SetConfig+0x148>
 8006a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a40:	d006      	beq.n	8006a50 <UART_SetConfig+0x154>
 8006a42:	e00b      	b.n	8006a5c <UART_SetConfig+0x160>
 8006a44:	2300      	movs	r3, #0
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e061      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e05e      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a50:	2304      	movs	r3, #4
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e05b      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a56:	2308      	movs	r3, #8
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e058      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e055      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a47      	ldr	r2, [pc, #284]	; (8006b84 <UART_SetConfig+0x288>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d124      	bne.n	8006ab6 <UART_SetConfig+0x1ba>
 8006a6c:	4b42      	ldr	r3, [pc, #264]	; (8006b78 <UART_SetConfig+0x27c>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a78:	d011      	beq.n	8006a9e <UART_SetConfig+0x1a2>
 8006a7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a7e:	d817      	bhi.n	8006ab0 <UART_SetConfig+0x1b4>
 8006a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a84:	d011      	beq.n	8006aaa <UART_SetConfig+0x1ae>
 8006a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a8a:	d811      	bhi.n	8006ab0 <UART_SetConfig+0x1b4>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <UART_SetConfig+0x19c>
 8006a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a94:	d006      	beq.n	8006aa4 <UART_SetConfig+0x1a8>
 8006a96:	e00b      	b.n	8006ab0 <UART_SetConfig+0x1b4>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e037      	b.n	8006b0e <UART_SetConfig+0x212>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e034      	b.n	8006b0e <UART_SetConfig+0x212>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e031      	b.n	8006b0e <UART_SetConfig+0x212>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e02e      	b.n	8006b0e <UART_SetConfig+0x212>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e02b      	b.n	8006b0e <UART_SetConfig+0x212>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a33      	ldr	r2, [pc, #204]	; (8006b88 <UART_SetConfig+0x28c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d124      	bne.n	8006b0a <UART_SetConfig+0x20e>
 8006ac0:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <UART_SetConfig+0x27c>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006acc:	d011      	beq.n	8006af2 <UART_SetConfig+0x1f6>
 8006ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ad2:	d817      	bhi.n	8006b04 <UART_SetConfig+0x208>
 8006ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ad8:	d011      	beq.n	8006afe <UART_SetConfig+0x202>
 8006ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ade:	d811      	bhi.n	8006b04 <UART_SetConfig+0x208>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <UART_SetConfig+0x1f0>
 8006ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ae8:	d006      	beq.n	8006af8 <UART_SetConfig+0x1fc>
 8006aea:	e00b      	b.n	8006b04 <UART_SetConfig+0x208>
 8006aec:	2300      	movs	r3, #0
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e00d      	b.n	8006b0e <UART_SetConfig+0x212>
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
 8006af6:	e00a      	b.n	8006b0e <UART_SetConfig+0x212>
 8006af8:	2304      	movs	r3, #4
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e007      	b.n	8006b0e <UART_SetConfig+0x212>
 8006afe:	2308      	movs	r3, #8
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e004      	b.n	8006b0e <UART_SetConfig+0x212>
 8006b04:	2310      	movs	r3, #16
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e001      	b.n	8006b0e <UART_SetConfig+0x212>
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b16:	d16b      	bne.n	8006bf0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006b18:	7ffb      	ldrb	r3, [r7, #31]
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d838      	bhi.n	8006b90 <UART_SetConfig+0x294>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0x228>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b51 	.word	0x08006b51
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b91 	.word	0x08006b91
 8006b34:	08006b5f 	.word	0x08006b5f
 8006b38:	08006b91 	.word	0x08006b91
 8006b3c:	08006b91 	.word	0x08006b91
 8006b40:	08006b91 	.word	0x08006b91
 8006b44:	08006b67 	.word	0x08006b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b48:	f7fe f95c 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8006b4c:	61b8      	str	r0, [r7, #24]
        break;
 8006b4e:	e024      	b.n	8006b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b50:	f7fe f97a 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 8006b54:	61b8      	str	r0, [r7, #24]
        break;
 8006b56:	e020      	b.n	8006b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <UART_SetConfig+0x290>)
 8006b5a:	61bb      	str	r3, [r7, #24]
        break;
 8006b5c:	e01d      	b.n	8006b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fe f8db 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8006b62:	61b8      	str	r0, [r7, #24]
        break;
 8006b64:	e019      	b.n	8006b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	61bb      	str	r3, [r7, #24]
        break;
 8006b6c:	e015      	b.n	8006b9a <UART_SetConfig+0x29e>
 8006b6e:	bf00      	nop
 8006b70:	efff69f3 	.word	0xefff69f3
 8006b74:	40013800 	.word	0x40013800
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40004400 	.word	0x40004400
 8006b80:	40004800 	.word	0x40004800
 8006b84:	40004c00 	.word	0x40004c00
 8006b88:	40005000 	.word	0x40005000
 8006b8c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	77bb      	strb	r3, [r7, #30]
        break;
 8006b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d073      	beq.n	8006c88 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	005a      	lsls	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b0f      	cmp	r3, #15
 8006bba:	d916      	bls.n	8006bea <UART_SetConfig+0x2ee>
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc2:	d212      	bcs.n	8006bea <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f023 030f 	bic.w	r3, r3, #15
 8006bcc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	89fb      	ldrh	r3, [r7, #14]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	89fa      	ldrh	r2, [r7, #14]
 8006be6:	60da      	str	r2, [r3, #12]
 8006be8:	e04e      	b.n	8006c88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	77bb      	strb	r3, [r7, #30]
 8006bee:	e04b      	b.n	8006c88 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf0:	7ffb      	ldrb	r3, [r7, #31]
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d827      	bhi.n	8006c46 <UART_SetConfig+0x34a>
 8006bf6:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x300>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
 8006c1c:	08006c3f 	.word	0x08006c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fe f8f0 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8006c24:	61b8      	str	r0, [r7, #24]
        break;
 8006c26:	e013      	b.n	8006c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c28:	f7fe f90e 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 8006c2c:	61b8      	str	r0, [r7, #24]
        break;
 8006c2e:	e00f      	b.n	8006c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <UART_SetConfig+0x3a4>)
 8006c32:	61bb      	str	r3, [r7, #24]
        break;
 8006c34:	e00c      	b.n	8006c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fe f86f 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8006c3a:	61b8      	str	r0, [r7, #24]
        break;
 8006c3c:	e008      	b.n	8006c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c42:	61bb      	str	r3, [r7, #24]
        break;
 8006c44:	e004      	b.n	8006c50 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d018      	beq.n	8006c88 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085a      	lsrs	r2, r3, #1
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	441a      	add	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d909      	bls.n	8006c84 <UART_SetConfig+0x388>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c76:	d205      	bcs.n	8006c84 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	e001      	b.n	8006c88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c94:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	007a1200 	.word	0x007a1200

08006ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01a      	beq.n	8006dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da2:	d10a      	bne.n	8006dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	605a      	str	r2, [r3, #4]
  }
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b098      	sub	sp, #96	; 0x60
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006df8:	f7fb fc4a 	bl	8002690 <HAL_GetTick>
 8006dfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d12e      	bne.n	8006e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e14:	2200      	movs	r2, #0
 8006e16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f88c 	bl	8006f38 <UART_WaitOnFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d021      	beq.n	8006e6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e44:	647b      	str	r3, [r7, #68]	; 0x44
 8006e46:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e6      	bne.n	8006e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e062      	b.n	8006f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d149      	bne.n	8006f0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f856 	bl	8006f38 <UART_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d03c      	beq.n	8006f0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee4:	61fa      	str	r2, [r7, #28]
 8006ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e011      	b.n	8006f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3758      	adds	r7, #88	; 0x58
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f48:	e049      	b.n	8006fde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d045      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7fb fb9d 	bl	8002690 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e048      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d031      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d110      	bne.n	8006faa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f838 	bl	8007006 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2208      	movs	r2, #8
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e029      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb8:	d111      	bne.n	8006fde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f81e 	bl	8007006 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e00f      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	bf0c      	ite	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	2300      	movne	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d0a6      	beq.n	8006f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b095      	sub	sp, #84	; 0x54
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702c:	643b      	str	r3, [r7, #64]	; 0x40
 800702e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e6      	bne.n	800700e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	64bb      	str	r3, [r7, #72]	; 0x48
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	d118      	bne.n	80070ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	60bb      	str	r3, [r7, #8]
   return(result);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f023 0310 	bic.w	r3, r3, #16
 8007090:	647b      	str	r3, [r7, #68]	; 0x44
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	613b      	str	r3, [r7, #16]
   return(result);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070c2:	bf00      	nop
 80070c4:	3754      	adds	r7, #84	; 0x54
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	4603      	mov	r3, r0
 80070d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	2b84      	cmp	r3, #132	; 0x84
 80070e2:	d005      	beq.n	80070f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	3303      	adds	r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070f0:	68fb      	ldr	r3, [r7, #12]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007102:	f000 faed 	bl	80076e0 <vTaskStartScheduler>
  
  return osOK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}

0800710c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	b089      	sub	sp, #36	; 0x24
 8007110:	af04      	add	r7, sp, #16
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d020      	beq.n	8007160 <osThreadCreate+0x54>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01c      	beq.n	8007160 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685c      	ldr	r4, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691e      	ldr	r6, [r3, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff ffc8 	bl	80070ce <makeFreeRtosPriority>
 800713e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007148:	9202      	str	r2, [sp, #8]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	9100      	str	r1, [sp, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	4632      	mov	r2, r6
 8007152:	4629      	mov	r1, r5
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f8ed 	bl	8007334 <xTaskCreateStatic>
 800715a:	4603      	mov	r3, r0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e01c      	b.n	800719a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685c      	ldr	r4, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800716c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ffaa 	bl	80070ce <makeFreeRtosPriority>
 800717a:	4602      	mov	r2, r0
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	9200      	str	r2, [sp, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4632      	mov	r2, r6
 8007188:	4629      	mov	r1, r5
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f92e 	bl	80073ec <xTaskCreate>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d001      	beq.n	800719a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	e000      	b.n	800719c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <osDelay+0x16>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	e000      	b.n	80071bc <osDelay+0x18>
 80071ba:	2301      	movs	r3, #1
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fa5b 	bl	8007678 <vTaskDelay>
  
  return osOK;
 80071c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f103 0208 	add.w	r2, r3, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295
 80071e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f103 0208 	add.w	r2, r3, #8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f103 0208 	add.w	r2, r3, #8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d103      	bne.n	800728e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e00c      	b.n	80072a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3308      	adds	r3, #8
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e002      	b.n	800729c <vListInsert+0x2e>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d2f6      	bcs.n	8007296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
}
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6892      	ldr	r2, [r2, #8]
 80072f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6852      	ldr	r2, [r2, #4]
 8007300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d103      	bne.n	8007314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1e5a      	subs	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	; 0x38
 8007338:	af04      	add	r7, sp, #16
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xTaskCreateStatic+0x46>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	61fb      	str	r3, [r7, #28]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800737a:	23a0      	movs	r3, #160	; 0xa0
 800737c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2ba0      	cmp	r3, #160	; 0xa0
 8007382:	d00a      	beq.n	800739a <xTaskCreateStatic+0x66>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	61bb      	str	r3, [r7, #24]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01e      	beq.n	80073de <xTaskCreateStatic+0xaa>
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01b      	beq.n	80073de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073b8:	2300      	movs	r3, #0
 80073ba:	9303      	str	r3, [sp, #12]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	9302      	str	r3, [sp, #8]
 80073c0:	f107 0314 	add.w	r3, r7, #20
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f851 	bl	8007478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073d8:	f000 f8e4 	bl	80075a4 <prvAddNewTaskToReadyList>
 80073dc:	e001      	b.n	80073e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073e2:	697b      	ldr	r3, [r7, #20]
	}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3728      	adds	r7, #40	; 0x28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af04      	add	r7, sp, #16
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fef9 	bl	80081f8 <pvPortMalloc>
 8007406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00e      	beq.n	800742c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800740e:	20a0      	movs	r0, #160	; 0xa0
 8007410:	f000 fef2 	bl	80081f8 <pvPortMalloc>
 8007414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
 8007422:	e005      	b.n	8007430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007424:	6978      	ldr	r0, [r7, #20]
 8007426:	f000 ffab 	bl	8008380 <vPortFree>
 800742a:	e001      	b.n	8007430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800742c:	2300      	movs	r3, #0
 800742e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d017      	beq.n	8007466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800743e:	88fa      	ldrh	r2, [r7, #6]
 8007440:	2300      	movs	r3, #0
 8007442:	9303      	str	r3, [sp, #12]
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f80f 	bl	8007478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800745a:	69f8      	ldr	r0, [r7, #28]
 800745c:	f000 f8a2 	bl	80075a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007460:	2301      	movs	r3, #1
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	e002      	b.n	800746c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800746c:	69bb      	ldr	r3, [r7, #24]
	}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007490:	3b01      	subs	r3, #1
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f023 0307 	bic.w	r3, r3, #7
 800749e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	617b      	str	r3, [r7, #20]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e012      	b.n	80074ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	7819      	ldrb	r1, [r3, #0]
 80074ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	3334      	adds	r3, #52	; 0x34
 80074d6:	460a      	mov	r2, r1
 80074d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d006      	beq.n	80074f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3301      	adds	r3, #1
 80074ea:	61fb      	str	r3, [r7, #28]
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d9e9      	bls.n	80074c6 <prvInitialiseNewTask+0x4e>
 80074f2:	e000      	b.n	80074f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80074f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	2b06      	cmp	r3, #6
 8007502:	d901      	bls.n	8007508 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007504:	2306      	movs	r3, #6
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007512:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2200      	movs	r2, #0
 8007518:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	3304      	adds	r3, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fe74 	bl	800720c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	3318      	adds	r3, #24
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fe6f 	bl	800720c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f1c3 0207 	rsb	r2, r3, #7
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2200      	movs	r2, #0
 8007548:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	2200      	movs	r2, #0
 8007550:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	334c      	adds	r3, #76	; 0x4c
 8007558:	224c      	movs	r2, #76	; 0x4c
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fff4 	bl	800954a <memset>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	4a0c      	ldr	r2, [pc, #48]	; (8007598 <prvInitialiseNewTask+0x120>)
 8007566:	651a      	str	r2, [r3, #80]	; 0x50
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	4a0c      	ldr	r2, [pc, #48]	; (800759c <prvInitialiseNewTask+0x124>)
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <prvInitialiseNewTask+0x128>)
 8007572:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	69b8      	ldr	r0, [r7, #24]
 800757a:	f000 fc2b 	bl	8007dd4 <pxPortInitialiseStack>
 800757e:	4602      	mov	r2, r0
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007590:	bf00      	nop
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200015b8 	.word	0x200015b8
 800759c:	20001620 	.word	0x20001620
 80075a0:	20001688 	.word	0x20001688

080075a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075ac:	f000 fd42 	bl	8008034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075b0:	4b2a      	ldr	r3, [pc, #168]	; (800765c <prvAddNewTaskToReadyList+0xb8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	4a29      	ldr	r2, [pc, #164]	; (800765c <prvAddNewTaskToReadyList+0xb8>)
 80075b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075ba:	4b29      	ldr	r3, [pc, #164]	; (8007660 <prvAddNewTaskToReadyList+0xbc>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075c2:	4a27      	ldr	r2, [pc, #156]	; (8007660 <prvAddNewTaskToReadyList+0xbc>)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075c8:	4b24      	ldr	r3, [pc, #144]	; (800765c <prvAddNewTaskToReadyList+0xb8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d110      	bne.n	80075f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075d0:	f000 fad2 	bl	8007b78 <prvInitialiseTaskLists>
 80075d4:	e00d      	b.n	80075f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075d6:	4b23      	ldr	r3, [pc, #140]	; (8007664 <prvAddNewTaskToReadyList+0xc0>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075de:	4b20      	ldr	r3, [pc, #128]	; (8007660 <prvAddNewTaskToReadyList+0xbc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d802      	bhi.n	80075f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075ec:	4a1c      	ldr	r2, [pc, #112]	; (8007660 <prvAddNewTaskToReadyList+0xbc>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075f2:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <prvAddNewTaskToReadyList+0xc4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <prvAddNewTaskToReadyList+0xc4>)
 80075fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	2201      	movs	r2, #1
 8007602:	409a      	lsls	r2, r3
 8007604:	4b19      	ldr	r3, [pc, #100]	; (800766c <prvAddNewTaskToReadyList+0xc8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4313      	orrs	r3, r2
 800760a:	4a18      	ldr	r2, [pc, #96]	; (800766c <prvAddNewTaskToReadyList+0xc8>)
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4a15      	ldr	r2, [pc, #84]	; (8007670 <prvAddNewTaskToReadyList+0xcc>)
 800761c:	441a      	add	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f7ff fdfe 	bl	8007226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800762a:	f000 fd33 	bl	8008094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800762e:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <prvAddNewTaskToReadyList+0xc0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00e      	beq.n	8007654 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007636:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <prvAddNewTaskToReadyList+0xbc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	429a      	cmp	r2, r3
 8007642:	d207      	bcs.n	8007654 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <prvAddNewTaskToReadyList+0xd0>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	2000096c 	.word	0x2000096c
 8007660:	2000086c 	.word	0x2000086c
 8007664:	20000978 	.word	0x20000978
 8007668:	20000988 	.word	0x20000988
 800766c:	20000974 	.word	0x20000974
 8007670:	20000870 	.word	0x20000870
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d017      	beq.n	80076ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800768a:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <vTaskDelay+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <vTaskDelay+0x30>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60bb      	str	r3, [r7, #8]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076a8:	f000 f884 	bl	80077b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076ac:	2100      	movs	r1, #0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fb2a 	bl	8007d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076b4:	f000 f88c 	bl	80077d0 <xTaskResumeAll>
 80076b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <vTaskDelay+0x64>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000994 	.word	0x20000994
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ee:	463a      	mov	r2, r7
 80076f0:	1d39      	adds	r1, r7, #4
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fa f838 	bl	800176c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	9202      	str	r2, [sp, #8]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	2300      	movs	r3, #0
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	460a      	mov	r2, r1
 800770e:	4921      	ldr	r1, [pc, #132]	; (8007794 <vTaskStartScheduler+0xb4>)
 8007710:	4821      	ldr	r0, [pc, #132]	; (8007798 <vTaskStartScheduler+0xb8>)
 8007712:	f7ff fe0f 	bl	8007334 <xTaskCreateStatic>
 8007716:	4603      	mov	r3, r0
 8007718:	4a20      	ldr	r2, [pc, #128]	; (800779c <vTaskStartScheduler+0xbc>)
 800771a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800771c:	4b1f      	ldr	r3, [pc, #124]	; (800779c <vTaskStartScheduler+0xbc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e001      	b.n	800772e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d11b      	bne.n	800776c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	613b      	str	r3, [r7, #16]
}
 8007746:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <vTaskStartScheduler+0xc0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	334c      	adds	r3, #76	; 0x4c
 800774e:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <vTaskStartScheduler+0xc4>)
 8007750:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <vTaskStartScheduler+0xc8>)
 8007754:	f04f 32ff 	mov.w	r2, #4294967295
 8007758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <vTaskStartScheduler+0xcc>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <vTaskStartScheduler+0xd0>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007766:	f000 fbc3 	bl	8007ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800776a:	e00e      	b.n	800778a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	d10a      	bne.n	800778a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	60fb      	str	r3, [r7, #12]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <vTaskStartScheduler+0xa8>
}
 800778a:	bf00      	nop
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	0800cf7c 	.word	0x0800cf7c
 8007798:	08007b49 	.word	0x08007b49
 800779c:	20000990 	.word	0x20000990
 80077a0:	2000086c 	.word	0x2000086c
 80077a4:	20000070 	.word	0x20000070
 80077a8:	2000098c 	.word	0x2000098c
 80077ac:	20000978 	.word	0x20000978
 80077b0:	20000970 	.word	0x20000970

080077b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077b8:	4b04      	ldr	r3, [pc, #16]	; (80077cc <vTaskSuspendAll+0x18>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	4a03      	ldr	r2, [pc, #12]	; (80077cc <vTaskSuspendAll+0x18>)
 80077c0:	6013      	str	r3, [r2, #0]
}
 80077c2:	bf00      	nop
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	20000994 	.word	0x20000994

080077d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077de:	4b41      	ldr	r3, [pc, #260]	; (80078e4 <xTaskResumeAll+0x114>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <xTaskResumeAll+0x2c>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	603b      	str	r3, [r7, #0]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077fc:	f000 fc1a 	bl	8008034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007800:	4b38      	ldr	r3, [pc, #224]	; (80078e4 <xTaskResumeAll+0x114>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3b01      	subs	r3, #1
 8007806:	4a37      	ldr	r2, [pc, #220]	; (80078e4 <xTaskResumeAll+0x114>)
 8007808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <xTaskResumeAll+0x114>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d161      	bne.n	80078d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007812:	4b35      	ldr	r3, [pc, #212]	; (80078e8 <xTaskResumeAll+0x118>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d05d      	beq.n	80078d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800781a:	e02e      	b.n	800787a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800781c:	4b33      	ldr	r3, [pc, #204]	; (80078ec <xTaskResumeAll+0x11c>)
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3318      	adds	r3, #24
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fd59 	bl	80072e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3304      	adds	r3, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fd54 	bl	80072e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	2201      	movs	r2, #1
 800783e:	409a      	lsls	r2, r3
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <xTaskResumeAll+0x120>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4313      	orrs	r3, r2
 8007846:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <xTaskResumeAll+0x120>)
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4a27      	ldr	r2, [pc, #156]	; (80078f4 <xTaskResumeAll+0x124>)
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3304      	adds	r3, #4
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7ff fce0 	bl	8007226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786a:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <xTaskResumeAll+0x128>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	429a      	cmp	r2, r3
 8007872:	d302      	bcc.n	800787a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007874:	4b21      	ldr	r3, [pc, #132]	; (80078fc <xTaskResumeAll+0x12c>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800787a:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <xTaskResumeAll+0x11c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1cc      	bne.n	800781c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007888:	f000 fa18 	bl	8007cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800788c:	4b1c      	ldr	r3, [pc, #112]	; (8007900 <xTaskResumeAll+0x130>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007898:	f000 f836 	bl	8007908 <xTaskIncrementTick>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80078a2:	4b16      	ldr	r3, [pc, #88]	; (80078fc <xTaskResumeAll+0x12c>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f1      	bne.n	8007898 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80078b4:	4b12      	ldr	r3, [pc, #72]	; (8007900 <xTaskResumeAll+0x130>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078ba:	4b10      	ldr	r3, [pc, #64]	; (80078fc <xTaskResumeAll+0x12c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078c2:	2301      	movs	r3, #1
 80078c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <xTaskResumeAll+0x134>)
 80078c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d6:	f000 fbdd 	bl	8008094 <vPortExitCritical>

	return xAlreadyYielded;
 80078da:	68bb      	ldr	r3, [r7, #8]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000994 	.word	0x20000994
 80078e8:	2000096c 	.word	0x2000096c
 80078ec:	2000092c 	.word	0x2000092c
 80078f0:	20000974 	.word	0x20000974
 80078f4:	20000870 	.word	0x20000870
 80078f8:	2000086c 	.word	0x2000086c
 80078fc:	20000980 	.word	0x20000980
 8007900:	2000097c 	.word	0x2000097c
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007912:	4b51      	ldr	r3, [pc, #324]	; (8007a58 <xTaskIncrementTick+0x150>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 808d 	bne.w	8007a36 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800791c:	4b4f      	ldr	r3, [pc, #316]	; (8007a5c <xTaskIncrementTick+0x154>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007924:	4a4d      	ldr	r2, [pc, #308]	; (8007a5c <xTaskIncrementTick+0x154>)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d120      	bne.n	8007972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007930:	4b4b      	ldr	r3, [pc, #300]	; (8007a60 <xTaskIncrementTick+0x158>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <xTaskIncrementTick+0x48>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	603b      	str	r3, [r7, #0]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xTaskIncrementTick+0x46>
 8007950:	4b43      	ldr	r3, [pc, #268]	; (8007a60 <xTaskIncrementTick+0x158>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	4b43      	ldr	r3, [pc, #268]	; (8007a64 <xTaskIncrementTick+0x15c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a41      	ldr	r2, [pc, #260]	; (8007a60 <xTaskIncrementTick+0x158>)
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	4a41      	ldr	r2, [pc, #260]	; (8007a64 <xTaskIncrementTick+0x15c>)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b40      	ldr	r3, [pc, #256]	; (8007a68 <xTaskIncrementTick+0x160>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	4a3f      	ldr	r2, [pc, #252]	; (8007a68 <xTaskIncrementTick+0x160>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	f000 f9a5 	bl	8007cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007972:	4b3e      	ldr	r3, [pc, #248]	; (8007a6c <xTaskIncrementTick+0x164>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d34d      	bcc.n	8007a18 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800797c:	4b38      	ldr	r3, [pc, #224]	; (8007a60 <xTaskIncrementTick+0x158>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <xTaskIncrementTick+0x82>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <xTaskIncrementTick+0x84>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d004      	beq.n	800799a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007990:	4b36      	ldr	r3, [pc, #216]	; (8007a6c <xTaskIncrementTick+0x164>)
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	601a      	str	r2, [r3, #0]
					break;
 8007998:	e03e      	b.n	8007a18 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <xTaskIncrementTick+0x158>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d203      	bcs.n	80079ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079b2:	4a2e      	ldr	r2, [pc, #184]	; (8007a6c <xTaskIncrementTick+0x164>)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6013      	str	r3, [r2, #0]
						break;
 80079b8:	e02e      	b.n	8007a18 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	3304      	adds	r3, #4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fc8e 	bl	80072e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	3318      	adds	r3, #24
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff fc85 	bl	80072e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	2201      	movs	r2, #1
 80079dc:	409a      	lsls	r2, r3
 80079de:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <xTaskIncrementTick+0x168>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	4a22      	ldr	r2, [pc, #136]	; (8007a70 <xTaskIncrementTick+0x168>)
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <xTaskIncrementTick+0x16c>)
 80079f6:	441a      	add	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f7ff fc11 	bl	8007226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <xTaskIncrementTick+0x170>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3b4      	bcc.n	800797c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a16:	e7b1      	b.n	800797c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <xTaskIncrementTick+0x170>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	4915      	ldr	r1, [pc, #84]	; (8007a74 <xTaskIncrementTick+0x16c>)
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d907      	bls.n	8007a40 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e004      	b.n	8007a40 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <xTaskIncrementTick+0x174>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	4a0f      	ldr	r2, [pc, #60]	; (8007a7c <xTaskIncrementTick+0x174>)
 8007a3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <xTaskIncrementTick+0x178>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a4c:	697b      	ldr	r3, [r7, #20]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000994 	.word	0x20000994
 8007a5c:	20000970 	.word	0x20000970
 8007a60:	20000924 	.word	0x20000924
 8007a64:	20000928 	.word	0x20000928
 8007a68:	20000984 	.word	0x20000984
 8007a6c:	2000098c 	.word	0x2000098c
 8007a70:	20000974 	.word	0x20000974
 8007a74:	20000870 	.word	0x20000870
 8007a78:	2000086c 	.word	0x2000086c
 8007a7c:	2000097c 	.word	0x2000097c
 8007a80:	20000980 	.word	0x20000980

08007a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a8a:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <vTaskSwitchContext+0xac>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a92:	4b28      	ldr	r3, [pc, #160]	; (8007b34 <vTaskSwitchContext+0xb0>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a98:	e044      	b.n	8007b24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007a9a:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <vTaskSwitchContext+0xb0>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <vTaskSwitchContext+0xb4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	fab3 f383 	clz	r3, r3
 8007aac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	f1c3 031f 	rsb	r3, r3, #31
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	4921      	ldr	r1, [pc, #132]	; (8007b3c <vTaskSwitchContext+0xb8>)
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <vTaskSwitchContext+0x5a>
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4a14      	ldr	r2, [pc, #80]	; (8007b3c <vTaskSwitchContext+0xb8>)
 8007aec:	4413      	add	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	605a      	str	r2, [r3, #4]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3308      	adds	r3, #8
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d104      	bne.n	8007b10 <vTaskSwitchContext+0x8c>
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	605a      	str	r2, [r3, #4]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <vTaskSwitchContext+0xbc>)
 8007b18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <vTaskSwitchContext+0xbc>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	334c      	adds	r3, #76	; 0x4c
 8007b20:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <vTaskSwitchContext+0xc0>)
 8007b22:	6013      	str	r3, [r2, #0]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	20000994 	.word	0x20000994
 8007b34:	20000980 	.word	0x20000980
 8007b38:	20000974 	.word	0x20000974
 8007b3c:	20000870 	.word	0x20000870
 8007b40:	2000086c 	.word	0x2000086c
 8007b44:	20000070 	.word	0x20000070

08007b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b50:	f000 f852 	bl	8007bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <prvIdleTask+0x28>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d9f9      	bls.n	8007b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b5c:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <prvIdleTask+0x2c>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b6c:	e7f0      	b.n	8007b50 <prvIdleTask+0x8>
 8007b6e:	bf00      	nop
 8007b70:	20000870 	.word	0x20000870
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b7e:	2300      	movs	r3, #0
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	e00c      	b.n	8007b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4a12      	ldr	r2, [pc, #72]	; (8007bd8 <prvInitialiseTaskLists+0x60>)
 8007b90:	4413      	add	r3, r2
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff fb1a 	bl	80071cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	607b      	str	r3, [r7, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	d9ef      	bls.n	8007b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ba4:	480d      	ldr	r0, [pc, #52]	; (8007bdc <prvInitialiseTaskLists+0x64>)
 8007ba6:	f7ff fb11 	bl	80071cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007baa:	480d      	ldr	r0, [pc, #52]	; (8007be0 <prvInitialiseTaskLists+0x68>)
 8007bac:	f7ff fb0e 	bl	80071cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bb0:	480c      	ldr	r0, [pc, #48]	; (8007be4 <prvInitialiseTaskLists+0x6c>)
 8007bb2:	f7ff fb0b 	bl	80071cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bb6:	480c      	ldr	r0, [pc, #48]	; (8007be8 <prvInitialiseTaskLists+0x70>)
 8007bb8:	f7ff fb08 	bl	80071cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bbc:	480b      	ldr	r0, [pc, #44]	; (8007bec <prvInitialiseTaskLists+0x74>)
 8007bbe:	f7ff fb05 	bl	80071cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <prvInitialiseTaskLists+0x78>)
 8007bc4:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <prvInitialiseTaskLists+0x64>)
 8007bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <prvInitialiseTaskLists+0x7c>)
 8007bca:	4a05      	ldr	r2, [pc, #20]	; (8007be0 <prvInitialiseTaskLists+0x68>)
 8007bcc:	601a      	str	r2, [r3, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000870 	.word	0x20000870
 8007bdc:	200008fc 	.word	0x200008fc
 8007be0:	20000910 	.word	0x20000910
 8007be4:	2000092c 	.word	0x2000092c
 8007be8:	20000940 	.word	0x20000940
 8007bec:	20000958 	.word	0x20000958
 8007bf0:	20000924 	.word	0x20000924
 8007bf4:	20000928 	.word	0x20000928

08007bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bfe:	e019      	b.n	8007c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c00:	f000 fa18 	bl	8008034 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <prvCheckTasksWaitingTermination+0x50>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff fb65 	bl	80072e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <prvCheckTasksWaitingTermination+0x54>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	4a0b      	ldr	r2, [pc, #44]	; (8007c4c <prvCheckTasksWaitingTermination+0x54>)
 8007c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <prvCheckTasksWaitingTermination+0x58>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	4a0a      	ldr	r2, [pc, #40]	; (8007c50 <prvCheckTasksWaitingTermination+0x58>)
 8007c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c2a:	f000 fa33 	bl	8008094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f810 	bl	8007c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <prvCheckTasksWaitingTermination+0x58>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e1      	bne.n	8007c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000940 	.word	0x20000940
 8007c4c:	2000096c 	.word	0x2000096c
 8007c50:	20000954 	.word	0x20000954

08007c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	334c      	adds	r3, #76	; 0x4c
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fc8f 	bl	8009584 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d108      	bne.n	8007c82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fb83 	bl	8008380 <vPortFree>
				vPortFree( pxTCB );
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb80 	bl	8008380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c80:	e018      	b.n	8007cb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d103      	bne.n	8007c94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb77 	bl	8008380 <vPortFree>
	}
 8007c92:	e00f      	b.n	8007cb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d00a      	beq.n	8007cb4 <prvDeleteTCB+0x60>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	60fb      	str	r3, [r7, #12]
}
 8007cb0:	bf00      	nop
 8007cb2:	e7fe      	b.n	8007cb2 <prvDeleteTCB+0x5e>
	}
 8007cb4:	bf00      	nop
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <prvResetNextTaskUnblockTime+0x44>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <prvResetNextTaskUnblockTime+0x14>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <prvResetNextTaskUnblockTime+0x16>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <prvResetNextTaskUnblockTime+0x48>)
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cde:	e008      	b.n	8007cf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <prvResetNextTaskUnblockTime+0x44>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	4a05      	ldr	r2, [pc, #20]	; (8007d04 <prvResetNextTaskUnblockTime+0x48>)
 8007cf0:	6013      	str	r3, [r2, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000924 	.word	0x20000924
 8007d04:	2000098c 	.word	0x2000098c

08007d08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d12:	4b29      	ldr	r3, [pc, #164]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d18:	4b28      	ldr	r3, [pc, #160]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fade 	bl	80072e0 <uxListRemove>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007d2a:	4b24      	ldr	r3, [pc, #144]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	2201      	movs	r2, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	43da      	mvns	r2, r3
 8007d38:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	4a20      	ldr	r2, [pc, #128]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d10a      	bne.n	8007d60 <prvAddCurrentTaskToDelayedList+0x58>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	481a      	ldr	r0, [pc, #104]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d5a:	f7ff fa64 	bl	8007226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d5e:	e026      	b.n	8007dae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d68:	4b14      	ldr	r3, [pc, #80]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d209      	bcs.n	8007d8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f7ff fa72 	bl	800726e <vListInsert>
}
 8007d8a:	e010      	b.n	8007dae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d8c:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7ff fa68 	bl	800726e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d202      	bcs.n	8007dae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6013      	str	r3, [r2, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000970 	.word	0x20000970
 8007dbc:	2000086c 	.word	0x2000086c
 8007dc0:	20000974 	.word	0x20000974
 8007dc4:	20000958 	.word	0x20000958
 8007dc8:	20000928 	.word	0x20000928
 8007dcc:	20000924 	.word	0x20000924
 8007dd0:	2000098c 	.word	0x2000098c

08007dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3b04      	subs	r3, #4
 8007de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3b04      	subs	r3, #4
 8007df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f023 0201 	bic.w	r2, r3, #1
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e04:	4a0c      	ldr	r2, [pc, #48]	; (8007e38 <pxPortInitialiseStack+0x64>)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b14      	subs	r3, #20
 8007e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f06f 0202 	mvn.w	r2, #2
 8007e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3b20      	subs	r3, #32
 8007e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	08007e3d 	.word	0x08007e3d

08007e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <prvTaskExitError+0x54>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4e:	d00a      	beq.n	8007e66 <prvTaskExitError+0x2a>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <prvTaskExitError+0x28>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60bb      	str	r3, [r7, #8]
}
 8007e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e7a:	bf00      	nop
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0fc      	beq.n	8007e7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20000014 	.word	0x20000014
	...

08007ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <pxCurrentTCBConst2>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6808      	ldr	r0, [r1, #0]
 8007ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	f380 8809 	msr	PSP, r0
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8811 	msr	BASEPRI, r0
 8007eba:	4770      	bx	lr
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst2>:
 8007ec0:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ec8:	4808      	ldr	r0, [pc, #32]	; (8007eec <prvPortStartFirstTask+0x24>)
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	6800      	ldr	r0, [r0, #0]
 8007ece:	f380 8808 	msr	MSP, r0
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8814 	msr	CONTROL, r0
 8007eda:	b662      	cpsie	i
 8007edc:	b661      	cpsie	f
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	df00      	svc	0
 8007ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eea:	bf00      	nop
 8007eec:	e000ed08 	.word	0xe000ed08

08007ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ef6:	4b46      	ldr	r3, [pc, #280]	; (8008010 <xPortStartScheduler+0x120>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a46      	ldr	r2, [pc, #280]	; (8008014 <xPortStartScheduler+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10a      	bne.n	8007f16 <xPortStartScheduler+0x26>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f16:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <xPortStartScheduler+0x120>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	; (8008018 <xPortStartScheduler+0x128>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10a      	bne.n	8007f36 <xPortStartScheduler+0x46>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60fb      	str	r3, [r7, #12]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f36:	4b39      	ldr	r3, [pc, #228]	; (800801c <xPortStartScheduler+0x12c>)
 8007f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <xPortStartScheduler+0x130>)
 8007f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f5e:	4b31      	ldr	r3, [pc, #196]	; (8008024 <xPortStartScheduler+0x134>)
 8007f60:	2207      	movs	r2, #7
 8007f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f64:	e009      	b.n	8007f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <xPortStartScheduler+0x134>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	4a2d      	ldr	r2, [pc, #180]	; (8008024 <xPortStartScheduler+0x134>)
 8007f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d0ef      	beq.n	8007f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f86:	4b27      	ldr	r3, [pc, #156]	; (8008024 <xPortStartScheduler+0x134>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1c3 0307 	rsb	r3, r3, #7
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d00a      	beq.n	8007fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	60bb      	str	r3, [r7, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <xPortStartScheduler+0x134>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <xPortStartScheduler+0x134>)
 8007fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <xPortStartScheduler+0x134>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fba:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <xPortStartScheduler+0x134>)
 8007fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fc6:	4b18      	ldr	r3, [pc, #96]	; (8008028 <xPortStartScheduler+0x138>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <xPortStartScheduler+0x138>)
 8007fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fd2:	4b15      	ldr	r3, [pc, #84]	; (8008028 <xPortStartScheduler+0x138>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a14      	ldr	r2, [pc, #80]	; (8008028 <xPortStartScheduler+0x138>)
 8007fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fde:	f000 f8dd 	bl	800819c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fe2:	4b12      	ldr	r3, [pc, #72]	; (800802c <xPortStartScheduler+0x13c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fe8:	f000 f8fc 	bl	80081e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <xPortStartScheduler+0x140>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <xPortStartScheduler+0x140>)
 8007ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ff8:	f7ff ff66 	bl	8007ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ffc:	f7ff fd42 	bl	8007a84 <vTaskSwitchContext>
	prvTaskExitError();
 8008000:	f7ff ff1c 	bl	8007e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	e000ed00 	.word	0xe000ed00
 8008014:	410fc271 	.word	0x410fc271
 8008018:	410fc270 	.word	0x410fc270
 800801c:	e000e400 	.word	0xe000e400
 8008020:	20000998 	.word	0x20000998
 8008024:	2000099c 	.word	0x2000099c
 8008028:	e000ed20 	.word	0xe000ed20
 800802c:	20000014 	.word	0x20000014
 8008030:	e000ef34 	.word	0xe000ef34

08008034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	607b      	str	r3, [r7, #4]
}
 800804c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <vPortEnterCritical+0x58>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	4a0d      	ldr	r2, [pc, #52]	; (800808c <vPortEnterCritical+0x58>)
 8008056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <vPortEnterCritical+0x58>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d10f      	bne.n	8008080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <vPortEnterCritical+0x5c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <vPortEnterCritical+0x4c>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	603b      	str	r3, [r7, #0]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <vPortEnterCritical+0x4a>
	}
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	20000014 	.word	0x20000014
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <vPortExitCritical+0x50>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <vPortExitCritical+0x24>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	607b      	str	r3, [r7, #4]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <vPortExitCritical+0x50>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <vPortExitCritical+0x50>)
 80080c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080c2:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <vPortExitCritical+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <vPortExitCritical+0x42>
 80080ca:	2300      	movs	r3, #0
 80080cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20000014 	.word	0x20000014
	...

080080f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080f0:	f3ef 8009 	mrs	r0, PSP
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	4b15      	ldr	r3, [pc, #84]	; (8008150 <pxCurrentTCBConst>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f01e 0f10 	tst.w	lr, #16
 8008100:	bf08      	it	eq
 8008102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	6010      	str	r0, [r2, #0]
 800810c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008114:	f380 8811 	msr	BASEPRI, r0
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f7ff fcb0 	bl	8007a84 <vTaskSwitchContext>
 8008124:	f04f 0000 	mov.w	r0, #0
 8008128:	f380 8811 	msr	BASEPRI, r0
 800812c:	bc09      	pop	{r0, r3}
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008136:	f01e 0f10 	tst.w	lr, #16
 800813a:	bf08      	it	eq
 800813c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008140:	f380 8809 	msr	PSP, r0
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w

08008150 <pxCurrentTCBConst>:
 8008150:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008172:	f7ff fbc9 	bl	8007908 <xTaskIncrementTick>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <SysTick_Handler+0x40>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	2300      	movs	r3, #0
 8008186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f383 8811 	msr	BASEPRI, r3
}
 800818e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	e000ed04 	.word	0xe000ed04

0800819c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <vPortSetupTimerInterrupt+0x38>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <vPortSetupTimerInterrupt+0x3c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <vPortSetupTimerInterrupt+0x40>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <vPortSetupTimerInterrupt+0x44>)
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081be:	4b04      	ldr	r3, [pc, #16]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	e000e010 	.word	0xe000e010
 80081d4:	e000e018 	.word	0xe000e018
 80081d8:	20000008 	.word	0x20000008
 80081dc:	10624dd3 	.word	0x10624dd3
 80081e0:	e000e014 	.word	0xe000e014

080081e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081f4 <vPortEnableVFP+0x10>
 80081e8:	6801      	ldr	r1, [r0, #0]
 80081ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ee:	6001      	str	r1, [r0, #0]
 80081f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081f2:	bf00      	nop
 80081f4:	e000ed88 	.word	0xe000ed88

080081f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	; 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008204:	f7ff fad6 	bl	80077b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008208:	4b58      	ldr	r3, [pc, #352]	; (800836c <pvPortMalloc+0x174>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008210:	f000 f910 	bl	8008434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008214:	4b56      	ldr	r3, [pc, #344]	; (8008370 <pvPortMalloc+0x178>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 808e 	bne.w	800833e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01d      	beq.n	8008264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008228:	2208      	movs	r2, #8
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	2b00      	cmp	r3, #0
 8008238:	d014      	beq.n	8008264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f023 0307 	bic.w	r3, r3, #7
 8008240:	3308      	adds	r3, #8
 8008242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <pvPortMalloc+0x6c>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	617b      	str	r3, [r7, #20]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d069      	beq.n	800833e <pvPortMalloc+0x146>
 800826a:	4b42      	ldr	r3, [pc, #264]	; (8008374 <pvPortMalloc+0x17c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d864      	bhi.n	800833e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008274:	4b40      	ldr	r3, [pc, #256]	; (8008378 <pvPortMalloc+0x180>)
 8008276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008278:	4b3f      	ldr	r3, [pc, #252]	; (8008378 <pvPortMalloc+0x180>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800827e:	e004      	b.n	800828a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	429a      	cmp	r2, r3
 8008292:	d903      	bls.n	800829c <pvPortMalloc+0xa4>
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f1      	bne.n	8008280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800829c:	4b33      	ldr	r3, [pc, #204]	; (800836c <pvPortMalloc+0x174>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d04b      	beq.n	800833e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2208      	movs	r2, #8
 80082ac:	4413      	add	r3, r2
 80082ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	2308      	movs	r3, #8
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d91f      	bls.n	8008308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <pvPortMalloc+0xf8>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	613b      	str	r3, [r7, #16]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008302:	69b8      	ldr	r0, [r7, #24]
 8008304:	f000 f8f8 	bl	80084f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <pvPortMalloc+0x17c>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	4a18      	ldr	r2, [pc, #96]	; (8008374 <pvPortMalloc+0x17c>)
 8008314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008316:	4b17      	ldr	r3, [pc, #92]	; (8008374 <pvPortMalloc+0x17c>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b18      	ldr	r3, [pc, #96]	; (800837c <pvPortMalloc+0x184>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d203      	bcs.n	800832a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008322:	4b14      	ldr	r3, [pc, #80]	; (8008374 <pvPortMalloc+0x17c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a15      	ldr	r2, [pc, #84]	; (800837c <pvPortMalloc+0x184>)
 8008328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <pvPortMalloc+0x178>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	431a      	orrs	r2, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800833e:	f7ff fa47 	bl	80077d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <pvPortMalloc+0x16a>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60fb      	str	r3, [r7, #12]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <pvPortMalloc+0x168>
	return pvReturn;
 8008362:	69fb      	ldr	r3, [r7, #28]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3728      	adds	r7, #40	; 0x28
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200015a8 	.word	0x200015a8
 8008370:	200015b4 	.word	0x200015b4
 8008374:	200015ac 	.word	0x200015ac
 8008378:	200015a0 	.word	0x200015a0
 800837c:	200015b0 	.word	0x200015b0

08008380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d048      	beq.n	8008424 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008392:	2308      	movs	r3, #8
 8008394:	425b      	negs	r3, r3
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4413      	add	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	4b21      	ldr	r3, [pc, #132]	; (800842c <vPortFree+0xac>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4013      	ands	r3, r2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <vPortFree+0x44>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60fb      	str	r3, [r7, #12]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <vPortFree+0x62>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	60bb      	str	r3, [r7, #8]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <vPortFree+0xac>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d019      	beq.n	8008424 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d115      	bne.n	8008424 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	4b0b      	ldr	r3, [pc, #44]	; (800842c <vPortFree+0xac>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	43db      	mvns	r3, r3
 8008402:	401a      	ands	r2, r3
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008408:	f7ff f9d4 	bl	80077b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <vPortFree+0xb0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4413      	add	r3, r2
 8008416:	4a06      	ldr	r2, [pc, #24]	; (8008430 <vPortFree+0xb0>)
 8008418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800841a:	6938      	ldr	r0, [r7, #16]
 800841c:	f000 f86c 	bl	80084f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008420:	f7ff f9d6 	bl	80077d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008424:	bf00      	nop
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200015b4 	.word	0x200015b4
 8008430:	200015ac 	.word	0x200015ac

08008434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800843a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800843e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008440:	4b27      	ldr	r3, [pc, #156]	; (80084e0 <prvHeapInit+0xac>)
 8008442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00c      	beq.n	8008468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3307      	adds	r3, #7
 8008452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <prvHeapInit+0xac>)
 8008464:	4413      	add	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800846c:	4a1d      	ldr	r2, [pc, #116]	; (80084e4 <prvHeapInit+0xb0>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008472:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <prvHeapInit+0xb0>)
 8008474:	2200      	movs	r2, #0
 8008476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008480:	2208      	movs	r2, #8
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	1a9b      	subs	r3, r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0307 	bic.w	r3, r3, #7
 800848e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <prvHeapInit+0xb4>)
 8008494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <prvHeapInit+0xb4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <prvHeapInit+0xb4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <prvHeapInit+0xb4>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <prvHeapInit+0xb8>)
 80084c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <prvHeapInit+0xbc>)
 80084ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <prvHeapInit+0xc0>)
 80084ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	200009a0 	.word	0x200009a0
 80084e4:	200015a0 	.word	0x200015a0
 80084e8:	200015a8 	.word	0x200015a8
 80084ec:	200015b0 	.word	0x200015b0
 80084f0:	200015ac 	.word	0x200015ac
 80084f4:	200015b4 	.word	0x200015b4

080084f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008500:	4b28      	ldr	r3, [pc, #160]	; (80085a4 <prvInsertBlockIntoFreeList+0xac>)
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	e002      	b.n	800850c <prvInsertBlockIntoFreeList+0x14>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d8f7      	bhi.n	8008506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	4413      	add	r3, r2
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	429a      	cmp	r2, r3
 8008526:	d108      	bne.n	800853a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	441a      	add	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	441a      	add	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d118      	bne.n	8008580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d00d      	beq.n	8008576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	441a      	add	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e008      	b.n	8008588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e003      	b.n	8008588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	429a      	cmp	r2, r3
 800858e:	d002      	beq.n	8008596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	200015a0 	.word	0x200015a0
 80085a8:	200015a8 	.word	0x200015a8

080085ac <__cvt>:
 80085ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	ec55 4b10 	vmov	r4, r5, d0
 80085b4:	2d00      	cmp	r5, #0
 80085b6:	460e      	mov	r6, r1
 80085b8:	4619      	mov	r1, r3
 80085ba:	462b      	mov	r3, r5
 80085bc:	bfbb      	ittet	lt
 80085be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085c2:	461d      	movlt	r5, r3
 80085c4:	2300      	movge	r3, #0
 80085c6:	232d      	movlt	r3, #45	; 0x2d
 80085c8:	700b      	strb	r3, [r1, #0]
 80085ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085d0:	4691      	mov	r9, r2
 80085d2:	f023 0820 	bic.w	r8, r3, #32
 80085d6:	bfbc      	itt	lt
 80085d8:	4622      	movlt	r2, r4
 80085da:	4614      	movlt	r4, r2
 80085dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085e0:	d005      	beq.n	80085ee <__cvt+0x42>
 80085e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085e6:	d100      	bne.n	80085ea <__cvt+0x3e>
 80085e8:	3601      	adds	r6, #1
 80085ea:	2102      	movs	r1, #2
 80085ec:	e000      	b.n	80085f0 <__cvt+0x44>
 80085ee:	2103      	movs	r1, #3
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	ab02      	add	r3, sp, #8
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	ec45 4b10 	vmov	d0, r4, r5
 80085fc:	4653      	mov	r3, sl
 80085fe:	4632      	mov	r2, r6
 8008600:	f001 f916 	bl	8009830 <_dtoa_r>
 8008604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008608:	4607      	mov	r7, r0
 800860a:	d102      	bne.n	8008612 <__cvt+0x66>
 800860c:	f019 0f01 	tst.w	r9, #1
 8008610:	d022      	beq.n	8008658 <__cvt+0xac>
 8008612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008616:	eb07 0906 	add.w	r9, r7, r6
 800861a:	d110      	bne.n	800863e <__cvt+0x92>
 800861c:	783b      	ldrb	r3, [r7, #0]
 800861e:	2b30      	cmp	r3, #48	; 0x30
 8008620:	d10a      	bne.n	8008638 <__cvt+0x8c>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 fa55 	bl	8000ad8 <__aeabi_dcmpeq>
 800862e:	b918      	cbnz	r0, 8008638 <__cvt+0x8c>
 8008630:	f1c6 0601 	rsb	r6, r6, #1
 8008634:	f8ca 6000 	str.w	r6, [sl]
 8008638:	f8da 3000 	ldr.w	r3, [sl]
 800863c:	4499      	add	r9, r3
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f8 fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800864a:	b108      	cbz	r0, 8008650 <__cvt+0xa4>
 800864c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008650:	2230      	movs	r2, #48	; 0x30
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	454b      	cmp	r3, r9
 8008656:	d307      	bcc.n	8008668 <__cvt+0xbc>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800865c:	1bdb      	subs	r3, r3, r7
 800865e:	4638      	mov	r0, r7
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	b004      	add	sp, #16
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	1c59      	adds	r1, r3, #1
 800866a:	9103      	str	r1, [sp, #12]
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e7f0      	b.n	8008652 <__cvt+0xa6>

08008670 <__exponent>:
 8008670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008672:	4603      	mov	r3, r0
 8008674:	2900      	cmp	r1, #0
 8008676:	bfb8      	it	lt
 8008678:	4249      	neglt	r1, r1
 800867a:	f803 2b02 	strb.w	r2, [r3], #2
 800867e:	bfb4      	ite	lt
 8008680:	222d      	movlt	r2, #45	; 0x2d
 8008682:	222b      	movge	r2, #43	; 0x2b
 8008684:	2909      	cmp	r1, #9
 8008686:	7042      	strb	r2, [r0, #1]
 8008688:	dd2a      	ble.n	80086e0 <__exponent+0x70>
 800868a:	f10d 0207 	add.w	r2, sp, #7
 800868e:	4617      	mov	r7, r2
 8008690:	260a      	movs	r6, #10
 8008692:	4694      	mov	ip, r2
 8008694:	fb91 f5f6 	sdiv	r5, r1, r6
 8008698:	fb06 1415 	mls	r4, r6, r5, r1
 800869c:	3430      	adds	r4, #48	; 0x30
 800869e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086a2:	460c      	mov	r4, r1
 80086a4:	2c63      	cmp	r4, #99	; 0x63
 80086a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80086aa:	4629      	mov	r1, r5
 80086ac:	dcf1      	bgt.n	8008692 <__exponent+0x22>
 80086ae:	3130      	adds	r1, #48	; 0x30
 80086b0:	f1ac 0402 	sub.w	r4, ip, #2
 80086b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086b8:	1c41      	adds	r1, r0, #1
 80086ba:	4622      	mov	r2, r4
 80086bc:	42ba      	cmp	r2, r7
 80086be:	d30a      	bcc.n	80086d6 <__exponent+0x66>
 80086c0:	f10d 0209 	add.w	r2, sp, #9
 80086c4:	eba2 020c 	sub.w	r2, r2, ip
 80086c8:	42bc      	cmp	r4, r7
 80086ca:	bf88      	it	hi
 80086cc:	2200      	movhi	r2, #0
 80086ce:	4413      	add	r3, r2
 80086d0:	1a18      	subs	r0, r3, r0
 80086d2:	b003      	add	sp, #12
 80086d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80086da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80086de:	e7ed      	b.n	80086bc <__exponent+0x4c>
 80086e0:	2330      	movs	r3, #48	; 0x30
 80086e2:	3130      	adds	r1, #48	; 0x30
 80086e4:	7083      	strb	r3, [r0, #2]
 80086e6:	70c1      	strb	r1, [r0, #3]
 80086e8:	1d03      	adds	r3, r0, #4
 80086ea:	e7f1      	b.n	80086d0 <__exponent+0x60>

080086ec <_printf_float>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	ed2d 8b02 	vpush	{d8}
 80086f4:	b08d      	sub	sp, #52	; 0x34
 80086f6:	460c      	mov	r4, r1
 80086f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086fc:	4616      	mov	r6, r2
 80086fe:	461f      	mov	r7, r3
 8008700:	4605      	mov	r5, r0
 8008702:	f000 ff2b 	bl	800955c <_localeconv_r>
 8008706:	f8d0 a000 	ldr.w	sl, [r0]
 800870a:	4650      	mov	r0, sl
 800870c:	f7f7 fdb8 	bl	8000280 <strlen>
 8008710:	2300      	movs	r3, #0
 8008712:	930a      	str	r3, [sp, #40]	; 0x28
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	9305      	str	r3, [sp, #20]
 8008718:	f8d8 3000 	ldr.w	r3, [r8]
 800871c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008720:	3307      	adds	r3, #7
 8008722:	f023 0307 	bic.w	r3, r3, #7
 8008726:	f103 0208 	add.w	r2, r3, #8
 800872a:	f8c8 2000 	str.w	r2, [r8]
 800872e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008732:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008736:	9307      	str	r3, [sp, #28]
 8008738:	f8cd 8018 	str.w	r8, [sp, #24]
 800873c:	ee08 0a10 	vmov	s16, r0
 8008740:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008748:	4b9e      	ldr	r3, [pc, #632]	; (80089c4 <_printf_float+0x2d8>)
 800874a:	f04f 32ff 	mov.w	r2, #4294967295
 800874e:	f7f8 f9f5 	bl	8000b3c <__aeabi_dcmpun>
 8008752:	bb88      	cbnz	r0, 80087b8 <_printf_float+0xcc>
 8008754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <_printf_float+0x2d8>)
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	f7f8 f9cf 	bl	8000b00 <__aeabi_dcmple>
 8008762:	bb48      	cbnz	r0, 80087b8 <_printf_float+0xcc>
 8008764:	2200      	movs	r2, #0
 8008766:	2300      	movs	r3, #0
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f8 f9be 	bl	8000aec <__aeabi_dcmplt>
 8008770:	b110      	cbz	r0, 8008778 <_printf_float+0x8c>
 8008772:	232d      	movs	r3, #45	; 0x2d
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008778:	4a93      	ldr	r2, [pc, #588]	; (80089c8 <_printf_float+0x2dc>)
 800877a:	4b94      	ldr	r3, [pc, #592]	; (80089cc <_printf_float+0x2e0>)
 800877c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008780:	bf94      	ite	ls
 8008782:	4690      	movls	r8, r2
 8008784:	4698      	movhi	r8, r3
 8008786:	2303      	movs	r3, #3
 8008788:	6123      	str	r3, [r4, #16]
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	9700      	str	r7, [sp, #0]
 8008798:	4633      	mov	r3, r6
 800879a:	aa0b      	add	r2, sp, #44	; 0x2c
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f9da 	bl	8008b58 <_printf_common>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f040 8090 	bne.w	80088ca <_printf_float+0x1de>
 80087aa:	f04f 30ff 	mov.w	r0, #4294967295
 80087ae:	b00d      	add	sp, #52	; 0x34
 80087b0:	ecbd 8b02 	vpop	{d8}
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f8 f9bc 	bl	8000b3c <__aeabi_dcmpun>
 80087c4:	b140      	cbz	r0, 80087d8 <_printf_float+0xec>
 80087c6:	464b      	mov	r3, r9
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bfbc      	itt	lt
 80087cc:	232d      	movlt	r3, #45	; 0x2d
 80087ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087d2:	4a7f      	ldr	r2, [pc, #508]	; (80089d0 <_printf_float+0x2e4>)
 80087d4:	4b7f      	ldr	r3, [pc, #508]	; (80089d4 <_printf_float+0x2e8>)
 80087d6:	e7d1      	b.n	800877c <_printf_float+0x90>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	d13f      	bne.n	8008864 <_printf_float+0x178>
 80087e4:	2306      	movs	r3, #6
 80087e6:	6063      	str	r3, [r4, #4]
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	6861      	ldr	r1, [r4, #4]
 80087ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087f0:	2300      	movs	r3, #0
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	ab0a      	add	r3, sp, #40	; 0x28
 80087f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087fa:	ab09      	add	r3, sp, #36	; 0x24
 80087fc:	ec49 8b10 	vmov	d0, r8, r9
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	6022      	str	r2, [r4, #0]
 8008804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fecf 	bl	80085ac <__cvt>
 800880e:	9b06      	ldr	r3, [sp, #24]
 8008810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008812:	2b47      	cmp	r3, #71	; 0x47
 8008814:	4680      	mov	r8, r0
 8008816:	d108      	bne.n	800882a <_printf_float+0x13e>
 8008818:	1cc8      	adds	r0, r1, #3
 800881a:	db02      	blt.n	8008822 <_printf_float+0x136>
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	4299      	cmp	r1, r3
 8008820:	dd41      	ble.n	80088a6 <_printf_float+0x1ba>
 8008822:	f1ab 0302 	sub.w	r3, fp, #2
 8008826:	fa5f fb83 	uxtb.w	fp, r3
 800882a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800882e:	d820      	bhi.n	8008872 <_printf_float+0x186>
 8008830:	3901      	subs	r1, #1
 8008832:	465a      	mov	r2, fp
 8008834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008838:	9109      	str	r1, [sp, #36]	; 0x24
 800883a:	f7ff ff19 	bl	8008670 <__exponent>
 800883e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008840:	1813      	adds	r3, r2, r0
 8008842:	2a01      	cmp	r2, #1
 8008844:	4681      	mov	r9, r0
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	dc02      	bgt.n	8008850 <_printf_float+0x164>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	07d2      	lsls	r2, r2, #31
 800884e:	d501      	bpl.n	8008854 <_printf_float+0x168>
 8008850:	3301      	adds	r3, #1
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008858:	2b00      	cmp	r3, #0
 800885a:	d09c      	beq.n	8008796 <_printf_float+0xaa>
 800885c:	232d      	movs	r3, #45	; 0x2d
 800885e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008862:	e798      	b.n	8008796 <_printf_float+0xaa>
 8008864:	9a06      	ldr	r2, [sp, #24]
 8008866:	2a47      	cmp	r2, #71	; 0x47
 8008868:	d1be      	bne.n	80087e8 <_printf_float+0xfc>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1bc      	bne.n	80087e8 <_printf_float+0xfc>
 800886e:	2301      	movs	r3, #1
 8008870:	e7b9      	b.n	80087e6 <_printf_float+0xfa>
 8008872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008876:	d118      	bne.n	80088aa <_printf_float+0x1be>
 8008878:	2900      	cmp	r1, #0
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	dd0b      	ble.n	8008896 <_printf_float+0x1aa>
 800887e:	6121      	str	r1, [r4, #16]
 8008880:	b913      	cbnz	r3, 8008888 <_printf_float+0x19c>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	07d0      	lsls	r0, r2, #31
 8008886:	d502      	bpl.n	800888e <_printf_float+0x1a2>
 8008888:	3301      	adds	r3, #1
 800888a:	440b      	add	r3, r1
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008890:	f04f 0900 	mov.w	r9, #0
 8008894:	e7de      	b.n	8008854 <_printf_float+0x168>
 8008896:	b913      	cbnz	r3, 800889e <_printf_float+0x1b2>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	07d2      	lsls	r2, r2, #31
 800889c:	d501      	bpl.n	80088a2 <_printf_float+0x1b6>
 800889e:	3302      	adds	r3, #2
 80088a0:	e7f4      	b.n	800888c <_printf_float+0x1a0>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e7f2      	b.n	800888c <_printf_float+0x1a0>
 80088a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ac:	4299      	cmp	r1, r3
 80088ae:	db05      	blt.n	80088bc <_printf_float+0x1d0>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	6121      	str	r1, [r4, #16]
 80088b4:	07d8      	lsls	r0, r3, #31
 80088b6:	d5ea      	bpl.n	800888e <_printf_float+0x1a2>
 80088b8:	1c4b      	adds	r3, r1, #1
 80088ba:	e7e7      	b.n	800888c <_printf_float+0x1a0>
 80088bc:	2900      	cmp	r1, #0
 80088be:	bfd4      	ite	le
 80088c0:	f1c1 0202 	rsble	r2, r1, #2
 80088c4:	2201      	movgt	r2, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	e7e0      	b.n	800888c <_printf_float+0x1a0>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	055a      	lsls	r2, r3, #21
 80088ce:	d407      	bmi.n	80088e0 <_printf_float+0x1f4>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	4642      	mov	r2, r8
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	d12c      	bne.n	8008938 <_printf_float+0x24c>
 80088de:	e764      	b.n	80087aa <_printf_float+0xbe>
 80088e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088e4:	f240 80e0 	bls.w	8008aa8 <_printf_float+0x3bc>
 80088e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	f7f8 f8f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d034      	beq.n	8008962 <_printf_float+0x276>
 80088f8:	4a37      	ldr	r2, [pc, #220]	; (80089d8 <_printf_float+0x2ec>)
 80088fa:	2301      	movs	r3, #1
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af51 	beq.w	80087aa <_printf_float+0xbe>
 8008908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890c:	429a      	cmp	r2, r3
 800890e:	db02      	blt.n	8008916 <_printf_float+0x22a>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07d8      	lsls	r0, r3, #31
 8008914:	d510      	bpl.n	8008938 <_printf_float+0x24c>
 8008916:	ee18 3a10 	vmov	r3, s16
 800891a:	4652      	mov	r2, sl
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af41 	beq.w	80087aa <_printf_float+0xbe>
 8008928:	f04f 0800 	mov.w	r8, #0
 800892c:	f104 091a 	add.w	r9, r4, #26
 8008930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008932:	3b01      	subs	r3, #1
 8008934:	4543      	cmp	r3, r8
 8008936:	dc09      	bgt.n	800894c <_printf_float+0x260>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	079b      	lsls	r3, r3, #30
 800893c:	f100 8107 	bmi.w	8008b4e <_printf_float+0x462>
 8008940:	68e0      	ldr	r0, [r4, #12]
 8008942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008944:	4298      	cmp	r0, r3
 8008946:	bfb8      	it	lt
 8008948:	4618      	movlt	r0, r3
 800894a:	e730      	b.n	80087ae <_printf_float+0xc2>
 800894c:	2301      	movs	r3, #1
 800894e:	464a      	mov	r2, r9
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f af27 	beq.w	80087aa <_printf_float+0xbe>
 800895c:	f108 0801 	add.w	r8, r8, #1
 8008960:	e7e6      	b.n	8008930 <_printf_float+0x244>
 8008962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc39      	bgt.n	80089dc <_printf_float+0x2f0>
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <_printf_float+0x2ec>)
 800896a:	2301      	movs	r3, #1
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f af19 	beq.w	80087aa <_printf_float+0xbe>
 8008978:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800897c:	4313      	orrs	r3, r2
 800897e:	d102      	bne.n	8008986 <_printf_float+0x29a>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	d5d8      	bpl.n	8008938 <_printf_float+0x24c>
 8008986:	ee18 3a10 	vmov	r3, s16
 800898a:	4652      	mov	r2, sl
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af09 	beq.w	80087aa <_printf_float+0xbe>
 8008998:	f04f 0900 	mov.w	r9, #0
 800899c:	f104 0a1a 	add.w	sl, r4, #26
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	425b      	negs	r3, r3
 80089a4:	454b      	cmp	r3, r9
 80089a6:	dc01      	bgt.n	80089ac <_printf_float+0x2c0>
 80089a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089aa:	e792      	b.n	80088d2 <_printf_float+0x1e6>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4652      	mov	r2, sl
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f aef7 	beq.w	80087aa <_printf_float+0xbe>
 80089bc:	f109 0901 	add.w	r9, r9, #1
 80089c0:	e7ee      	b.n	80089a0 <_printf_float+0x2b4>
 80089c2:	bf00      	nop
 80089c4:	7fefffff 	.word	0x7fefffff
 80089c8:	0800cfbc 	.word	0x0800cfbc
 80089cc:	0800cfc0 	.word	0x0800cfc0
 80089d0:	0800cfc4 	.word	0x0800cfc4
 80089d4:	0800cfc8 	.word	0x0800cfc8
 80089d8:	0800cfcc 	.word	0x0800cfcc
 80089dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089e0:	429a      	cmp	r2, r3
 80089e2:	bfa8      	it	ge
 80089e4:	461a      	movge	r2, r3
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	4691      	mov	r9, r2
 80089ea:	dc37      	bgt.n	8008a5c <_printf_float+0x370>
 80089ec:	f04f 0b00 	mov.w	fp, #0
 80089f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089f4:	f104 021a 	add.w	r2, r4, #26
 80089f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	eba3 0309 	sub.w	r3, r3, r9
 8008a00:	455b      	cmp	r3, fp
 8008a02:	dc33      	bgt.n	8008a6c <_printf_float+0x380>
 8008a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	db3b      	blt.n	8008a84 <_printf_float+0x398>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	07da      	lsls	r2, r3, #31
 8008a10:	d438      	bmi.n	8008a84 <_printf_float+0x398>
 8008a12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a16:	eba2 0903 	sub.w	r9, r2, r3
 8008a1a:	9b05      	ldr	r3, [sp, #20]
 8008a1c:	1ad2      	subs	r2, r2, r3
 8008a1e:	4591      	cmp	r9, r2
 8008a20:	bfa8      	it	ge
 8008a22:	4691      	movge	r9, r2
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	dc35      	bgt.n	8008a96 <_printf_float+0x3aa>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a32:	f104 0a1a 	add.w	sl, r4, #26
 8008a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	eba3 0309 	sub.w	r3, r3, r9
 8008a40:	4543      	cmp	r3, r8
 8008a42:	f77f af79 	ble.w	8008938 <_printf_float+0x24c>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	f43f aeaa 	beq.w	80087aa <_printf_float+0xbe>
 8008a56:	f108 0801 	add.w	r8, r8, #1
 8008a5a:	e7ec      	b.n	8008a36 <_printf_float+0x34a>
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4642      	mov	r2, r8
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	d1c0      	bne.n	80089ec <_printf_float+0x300>
 8008a6a:	e69e      	b.n	80087aa <_printf_float+0xbe>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	9205      	str	r2, [sp, #20]
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	f43f ae97 	beq.w	80087aa <_printf_float+0xbe>
 8008a7c:	9a05      	ldr	r2, [sp, #20]
 8008a7e:	f10b 0b01 	add.w	fp, fp, #1
 8008a82:	e7b9      	b.n	80089f8 <_printf_float+0x30c>
 8008a84:	ee18 3a10 	vmov	r3, s16
 8008a88:	4652      	mov	r2, sl
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	d1be      	bne.n	8008a12 <_printf_float+0x326>
 8008a94:	e689      	b.n	80087aa <_printf_float+0xbe>
 8008a96:	9a05      	ldr	r2, [sp, #20]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	4442      	add	r2, r8
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d1c1      	bne.n	8008a2a <_printf_float+0x33e>
 8008aa6:	e680      	b.n	80087aa <_printf_float+0xbe>
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	2a01      	cmp	r2, #1
 8008aac:	dc01      	bgt.n	8008ab2 <_printf_float+0x3c6>
 8008aae:	07db      	lsls	r3, r3, #31
 8008ab0:	d53a      	bpl.n	8008b28 <_printf_float+0x43c>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f ae74 	beq.w	80087aa <_printf_float+0xbe>
 8008ac2:	ee18 3a10 	vmov	r3, s16
 8008ac6:	4652      	mov	r2, sl
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f43f ae6b 	beq.w	80087aa <_printf_float+0xbe>
 8008ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2300      	movs	r3, #0
 8008adc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008ae0:	f7f7 fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ae4:	b9d8      	cbnz	r0, 8008b1e <_printf_float+0x432>
 8008ae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008aea:	f108 0201 	add.w	r2, r8, #1
 8008aee:	4631      	mov	r1, r6
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b8      	blx	r7
 8008af4:	3001      	adds	r0, #1
 8008af6:	d10e      	bne.n	8008b16 <_printf_float+0x42a>
 8008af8:	e657      	b.n	80087aa <_printf_float+0xbe>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4652      	mov	r2, sl
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	f43f ae50 	beq.w	80087aa <_printf_float+0xbe>
 8008b0a:	f108 0801 	add.w	r8, r8, #1
 8008b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b10:	3b01      	subs	r3, #1
 8008b12:	4543      	cmp	r3, r8
 8008b14:	dcf1      	bgt.n	8008afa <_printf_float+0x40e>
 8008b16:	464b      	mov	r3, r9
 8008b18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b1c:	e6da      	b.n	80088d4 <_printf_float+0x1e8>
 8008b1e:	f04f 0800 	mov.w	r8, #0
 8008b22:	f104 0a1a 	add.w	sl, r4, #26
 8008b26:	e7f2      	b.n	8008b0e <_printf_float+0x422>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4642      	mov	r2, r8
 8008b2c:	e7df      	b.n	8008aee <_printf_float+0x402>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	464a      	mov	r2, r9
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	f43f ae36 	beq.w	80087aa <_printf_float+0xbe>
 8008b3e:	f108 0801 	add.w	r8, r8, #1
 8008b42:	68e3      	ldr	r3, [r4, #12]
 8008b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b46:	1a5b      	subs	r3, r3, r1
 8008b48:	4543      	cmp	r3, r8
 8008b4a:	dcf0      	bgt.n	8008b2e <_printf_float+0x442>
 8008b4c:	e6f8      	b.n	8008940 <_printf_float+0x254>
 8008b4e:	f04f 0800 	mov.w	r8, #0
 8008b52:	f104 0919 	add.w	r9, r4, #25
 8008b56:	e7f4      	b.n	8008b42 <_printf_float+0x456>

08008b58 <_printf_common>:
 8008b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	4699      	mov	r9, r3
 8008b60:	688a      	ldr	r2, [r1, #8]
 8008b62:	690b      	ldr	r3, [r1, #16]
 8008b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	bfb8      	it	lt
 8008b6c:	4613      	movlt	r3, r2
 8008b6e:	6033      	str	r3, [r6, #0]
 8008b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b74:	4607      	mov	r7, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	b10a      	cbz	r2, 8008b7e <_printf_common+0x26>
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	0699      	lsls	r1, r3, #26
 8008b82:	bf42      	ittt	mi
 8008b84:	6833      	ldrmi	r3, [r6, #0]
 8008b86:	3302      	addmi	r3, #2
 8008b88:	6033      	strmi	r3, [r6, #0]
 8008b8a:	6825      	ldr	r5, [r4, #0]
 8008b8c:	f015 0506 	ands.w	r5, r5, #6
 8008b90:	d106      	bne.n	8008ba0 <_printf_common+0x48>
 8008b92:	f104 0a19 	add.w	sl, r4, #25
 8008b96:	68e3      	ldr	r3, [r4, #12]
 8008b98:	6832      	ldr	r2, [r6, #0]
 8008b9a:	1a9b      	subs	r3, r3, r2
 8008b9c:	42ab      	cmp	r3, r5
 8008b9e:	dc26      	bgt.n	8008bee <_printf_common+0x96>
 8008ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ba4:	1e13      	subs	r3, r2, #0
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	bf18      	it	ne
 8008baa:	2301      	movne	r3, #1
 8008bac:	0692      	lsls	r2, r2, #26
 8008bae:	d42b      	bmi.n	8008c08 <_printf_common+0xb0>
 8008bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	47c0      	blx	r8
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d01e      	beq.n	8008bfc <_printf_common+0xa4>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	6922      	ldr	r2, [r4, #16]
 8008bc2:	f003 0306 	and.w	r3, r3, #6
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	bf02      	ittt	eq
 8008bca:	68e5      	ldreq	r5, [r4, #12]
 8008bcc:	6833      	ldreq	r3, [r6, #0]
 8008bce:	1aed      	subeq	r5, r5, r3
 8008bd0:	68a3      	ldr	r3, [r4, #8]
 8008bd2:	bf0c      	ite	eq
 8008bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd8:	2500      	movne	r5, #0
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bfc4      	itt	gt
 8008bde:	1a9b      	subgt	r3, r3, r2
 8008be0:	18ed      	addgt	r5, r5, r3
 8008be2:	2600      	movs	r6, #0
 8008be4:	341a      	adds	r4, #26
 8008be6:	42b5      	cmp	r5, r6
 8008be8:	d11a      	bne.n	8008c20 <_printf_common+0xc8>
 8008bea:	2000      	movs	r0, #0
 8008bec:	e008      	b.n	8008c00 <_printf_common+0xa8>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4652      	mov	r2, sl
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	47c0      	blx	r8
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d103      	bne.n	8008c04 <_printf_common+0xac>
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c04:	3501      	adds	r5, #1
 8008c06:	e7c6      	b.n	8008b96 <_printf_common+0x3e>
 8008c08:	18e1      	adds	r1, r4, r3
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	2030      	movs	r0, #48	; 0x30
 8008c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c12:	4422      	add	r2, r4
 8008c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	e7c7      	b.n	8008bb0 <_printf_common+0x58>
 8008c20:	2301      	movs	r3, #1
 8008c22:	4622      	mov	r2, r4
 8008c24:	4649      	mov	r1, r9
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c0      	blx	r8
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d0e6      	beq.n	8008bfc <_printf_common+0xa4>
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7d9      	b.n	8008be6 <_printf_common+0x8e>
	...

08008c34 <_printf_i>:
 8008c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	7e0f      	ldrb	r7, [r1, #24]
 8008c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c3c:	2f78      	cmp	r7, #120	; 0x78
 8008c3e:	4691      	mov	r9, r2
 8008c40:	4680      	mov	r8, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	469a      	mov	sl, r3
 8008c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c4a:	d807      	bhi.n	8008c5c <_printf_i+0x28>
 8008c4c:	2f62      	cmp	r7, #98	; 0x62
 8008c4e:	d80a      	bhi.n	8008c66 <_printf_i+0x32>
 8008c50:	2f00      	cmp	r7, #0
 8008c52:	f000 80d4 	beq.w	8008dfe <_printf_i+0x1ca>
 8008c56:	2f58      	cmp	r7, #88	; 0x58
 8008c58:	f000 80c0 	beq.w	8008ddc <_printf_i+0x1a8>
 8008c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c64:	e03a      	b.n	8008cdc <_printf_i+0xa8>
 8008c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c6a:	2b15      	cmp	r3, #21
 8008c6c:	d8f6      	bhi.n	8008c5c <_printf_i+0x28>
 8008c6e:	a101      	add	r1, pc, #4	; (adr r1, 8008c74 <_printf_i+0x40>)
 8008c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c74:	08008ccd 	.word	0x08008ccd
 8008c78:	08008ce1 	.word	0x08008ce1
 8008c7c:	08008c5d 	.word	0x08008c5d
 8008c80:	08008c5d 	.word	0x08008c5d
 8008c84:	08008c5d 	.word	0x08008c5d
 8008c88:	08008c5d 	.word	0x08008c5d
 8008c8c:	08008ce1 	.word	0x08008ce1
 8008c90:	08008c5d 	.word	0x08008c5d
 8008c94:	08008c5d 	.word	0x08008c5d
 8008c98:	08008c5d 	.word	0x08008c5d
 8008c9c:	08008c5d 	.word	0x08008c5d
 8008ca0:	08008de5 	.word	0x08008de5
 8008ca4:	08008d0d 	.word	0x08008d0d
 8008ca8:	08008d9f 	.word	0x08008d9f
 8008cac:	08008c5d 	.word	0x08008c5d
 8008cb0:	08008c5d 	.word	0x08008c5d
 8008cb4:	08008e07 	.word	0x08008e07
 8008cb8:	08008c5d 	.word	0x08008c5d
 8008cbc:	08008d0d 	.word	0x08008d0d
 8008cc0:	08008c5d 	.word	0x08008c5d
 8008cc4:	08008c5d 	.word	0x08008c5d
 8008cc8:	08008da7 	.word	0x08008da7
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	602a      	str	r2, [r5, #0]
 8008cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e09f      	b.n	8008e20 <_printf_i+0x1ec>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	0607      	lsls	r7, r0, #24
 8008ce6:	f103 0104 	add.w	r1, r3, #4
 8008cea:	6029      	str	r1, [r5, #0]
 8008cec:	d501      	bpl.n	8008cf2 <_printf_i+0xbe>
 8008cee:	681e      	ldr	r6, [r3, #0]
 8008cf0:	e003      	b.n	8008cfa <_printf_i+0xc6>
 8008cf2:	0646      	lsls	r6, r0, #25
 8008cf4:	d5fb      	bpl.n	8008cee <_printf_i+0xba>
 8008cf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	da03      	bge.n	8008d06 <_printf_i+0xd2>
 8008cfe:	232d      	movs	r3, #45	; 0x2d
 8008d00:	4276      	negs	r6, r6
 8008d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d06:	485a      	ldr	r0, [pc, #360]	; (8008e70 <_printf_i+0x23c>)
 8008d08:	230a      	movs	r3, #10
 8008d0a:	e012      	b.n	8008d32 <_printf_i+0xfe>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	1d19      	adds	r1, r3, #4
 8008d12:	6029      	str	r1, [r5, #0]
 8008d14:	0605      	lsls	r5, r0, #24
 8008d16:	d501      	bpl.n	8008d1c <_printf_i+0xe8>
 8008d18:	681e      	ldr	r6, [r3, #0]
 8008d1a:	e002      	b.n	8008d22 <_printf_i+0xee>
 8008d1c:	0641      	lsls	r1, r0, #25
 8008d1e:	d5fb      	bpl.n	8008d18 <_printf_i+0xe4>
 8008d20:	881e      	ldrh	r6, [r3, #0]
 8008d22:	4853      	ldr	r0, [pc, #332]	; (8008e70 <_printf_i+0x23c>)
 8008d24:	2f6f      	cmp	r7, #111	; 0x6f
 8008d26:	bf0c      	ite	eq
 8008d28:	2308      	moveq	r3, #8
 8008d2a:	230a      	movne	r3, #10
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d32:	6865      	ldr	r5, [r4, #4]
 8008d34:	60a5      	str	r5, [r4, #8]
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	bfa2      	ittt	ge
 8008d3a:	6821      	ldrge	r1, [r4, #0]
 8008d3c:	f021 0104 	bicge.w	r1, r1, #4
 8008d40:	6021      	strge	r1, [r4, #0]
 8008d42:	b90e      	cbnz	r6, 8008d48 <_printf_i+0x114>
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	d04b      	beq.n	8008de0 <_printf_i+0x1ac>
 8008d48:	4615      	mov	r5, r2
 8008d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d52:	5dc7      	ldrb	r7, [r0, r7]
 8008d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d58:	4637      	mov	r7, r6
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	d9f4      	bls.n	8008d4a <_printf_i+0x116>
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d10b      	bne.n	8008d7c <_printf_i+0x148>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07de      	lsls	r6, r3, #31
 8008d68:	d508      	bpl.n	8008d7c <_printf_i+0x148>
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	bfde      	ittt	le
 8008d72:	2330      	movle	r3, #48	; 0x30
 8008d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d7c:	1b52      	subs	r2, r2, r5
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	f8cd a000 	str.w	sl, [sp]
 8008d84:	464b      	mov	r3, r9
 8008d86:	aa03      	add	r2, sp, #12
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f7ff fee4 	bl	8008b58 <_printf_common>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d14a      	bne.n	8008e2a <_printf_i+0x1f6>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b004      	add	sp, #16
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f043 0320 	orr.w	r3, r3, #32
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	4833      	ldr	r0, [pc, #204]	; (8008e74 <_printf_i+0x240>)
 8008da8:	2778      	movs	r7, #120	; 0x78
 8008daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	6829      	ldr	r1, [r5, #0]
 8008db2:	061f      	lsls	r7, r3, #24
 8008db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008db8:	d402      	bmi.n	8008dc0 <_printf_i+0x18c>
 8008dba:	065f      	lsls	r7, r3, #25
 8008dbc:	bf48      	it	mi
 8008dbe:	b2b6      	uxthmi	r6, r6
 8008dc0:	07df      	lsls	r7, r3, #31
 8008dc2:	bf48      	it	mi
 8008dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008dc8:	6029      	str	r1, [r5, #0]
 8008dca:	bf48      	it	mi
 8008dcc:	6023      	strmi	r3, [r4, #0]
 8008dce:	b91e      	cbnz	r6, 8008dd8 <_printf_i+0x1a4>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	f023 0320 	bic.w	r3, r3, #32
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	2310      	movs	r3, #16
 8008dda:	e7a7      	b.n	8008d2c <_printf_i+0xf8>
 8008ddc:	4824      	ldr	r0, [pc, #144]	; (8008e70 <_printf_i+0x23c>)
 8008dde:	e7e4      	b.n	8008daa <_printf_i+0x176>
 8008de0:	4615      	mov	r5, r2
 8008de2:	e7bd      	b.n	8008d60 <_printf_i+0x12c>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	6826      	ldr	r6, [r4, #0]
 8008de8:	6961      	ldr	r1, [r4, #20]
 8008dea:	1d18      	adds	r0, r3, #4
 8008dec:	6028      	str	r0, [r5, #0]
 8008dee:	0635      	lsls	r5, r6, #24
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	d501      	bpl.n	8008df8 <_printf_i+0x1c4>
 8008df4:	6019      	str	r1, [r3, #0]
 8008df6:	e002      	b.n	8008dfe <_printf_i+0x1ca>
 8008df8:	0670      	lsls	r0, r6, #25
 8008dfa:	d5fb      	bpl.n	8008df4 <_printf_i+0x1c0>
 8008dfc:	8019      	strh	r1, [r3, #0]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	4615      	mov	r5, r2
 8008e04:	e7bc      	b.n	8008d80 <_printf_i+0x14c>
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	1d1a      	adds	r2, r3, #4
 8008e0a:	602a      	str	r2, [r5, #0]
 8008e0c:	681d      	ldr	r5, [r3, #0]
 8008e0e:	6862      	ldr	r2, [r4, #4]
 8008e10:	2100      	movs	r1, #0
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7f7 f9e4 	bl	80001e0 <memchr>
 8008e18:	b108      	cbz	r0, 8008e1e <_printf_i+0x1ea>
 8008e1a:	1b40      	subs	r0, r0, r5
 8008e1c:	6060      	str	r0, [r4, #4]
 8008e1e:	6863      	ldr	r3, [r4, #4]
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	2300      	movs	r3, #0
 8008e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e28:	e7aa      	b.n	8008d80 <_printf_i+0x14c>
 8008e2a:	6923      	ldr	r3, [r4, #16]
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	4649      	mov	r1, r9
 8008e30:	4640      	mov	r0, r8
 8008e32:	47d0      	blx	sl
 8008e34:	3001      	adds	r0, #1
 8008e36:	d0ad      	beq.n	8008d94 <_printf_i+0x160>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	079b      	lsls	r3, r3, #30
 8008e3c:	d413      	bmi.n	8008e66 <_printf_i+0x232>
 8008e3e:	68e0      	ldr	r0, [r4, #12]
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	4298      	cmp	r0, r3
 8008e44:	bfb8      	it	lt
 8008e46:	4618      	movlt	r0, r3
 8008e48:	e7a6      	b.n	8008d98 <_printf_i+0x164>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	47d0      	blx	sl
 8008e54:	3001      	adds	r0, #1
 8008e56:	d09d      	beq.n	8008d94 <_printf_i+0x160>
 8008e58:	3501      	adds	r5, #1
 8008e5a:	68e3      	ldr	r3, [r4, #12]
 8008e5c:	9903      	ldr	r1, [sp, #12]
 8008e5e:	1a5b      	subs	r3, r3, r1
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	dcf2      	bgt.n	8008e4a <_printf_i+0x216>
 8008e64:	e7eb      	b.n	8008e3e <_printf_i+0x20a>
 8008e66:	2500      	movs	r5, #0
 8008e68:	f104 0619 	add.w	r6, r4, #25
 8008e6c:	e7f5      	b.n	8008e5a <_printf_i+0x226>
 8008e6e:	bf00      	nop
 8008e70:	0800cfce 	.word	0x0800cfce
 8008e74:	0800cfdf 	.word	0x0800cfdf

08008e78 <_scanf_float>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	b087      	sub	sp, #28
 8008e7e:	4617      	mov	r7, r2
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	688b      	ldr	r3, [r1, #8]
 8008e84:	1e5a      	subs	r2, r3, #1
 8008e86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e8a:	bf83      	ittte	hi
 8008e8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e90:	195b      	addhi	r3, r3, r5
 8008e92:	9302      	strhi	r3, [sp, #8]
 8008e94:	2300      	movls	r3, #0
 8008e96:	bf86      	itte	hi
 8008e98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e9c:	608b      	strhi	r3, [r1, #8]
 8008e9e:	9302      	strls	r3, [sp, #8]
 8008ea0:	680b      	ldr	r3, [r1, #0]
 8008ea2:	468b      	mov	fp, r1
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008eaa:	f84b 3b1c 	str.w	r3, [fp], #28
 8008eae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	465e      	mov	r6, fp
 8008eb8:	46aa      	mov	sl, r5
 8008eba:	46a9      	mov	r9, r5
 8008ebc:	9501      	str	r5, [sp, #4]
 8008ebe:	68a2      	ldr	r2, [r4, #8]
 8008ec0:	b152      	cbz	r2, 8008ed8 <_scanf_float+0x60>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b4e      	cmp	r3, #78	; 0x4e
 8008ec8:	d864      	bhi.n	8008f94 <_scanf_float+0x11c>
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	d83c      	bhi.n	8008f48 <_scanf_float+0xd0>
 8008ece:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ed2:	b2c8      	uxtb	r0, r1
 8008ed4:	280e      	cmp	r0, #14
 8008ed6:	d93a      	bls.n	8008f4e <_scanf_float+0xd6>
 8008ed8:	f1b9 0f00 	cmp.w	r9, #0
 8008edc:	d003      	beq.n	8008ee6 <_scanf_float+0x6e>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eea:	f1ba 0f01 	cmp.w	sl, #1
 8008eee:	f200 8113 	bhi.w	8009118 <_scanf_float+0x2a0>
 8008ef2:	455e      	cmp	r6, fp
 8008ef4:	f200 8105 	bhi.w	8009102 <_scanf_float+0x28a>
 8008ef8:	2501      	movs	r5, #1
 8008efa:	4628      	mov	r0, r5
 8008efc:	b007      	add	sp, #28
 8008efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008f06:	2a0d      	cmp	r2, #13
 8008f08:	d8e6      	bhi.n	8008ed8 <_scanf_float+0x60>
 8008f0a:	a101      	add	r1, pc, #4	; (adr r1, 8008f10 <_scanf_float+0x98>)
 8008f0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f10:	0800904f 	.word	0x0800904f
 8008f14:	08008ed9 	.word	0x08008ed9
 8008f18:	08008ed9 	.word	0x08008ed9
 8008f1c:	08008ed9 	.word	0x08008ed9
 8008f20:	080090af 	.word	0x080090af
 8008f24:	08009087 	.word	0x08009087
 8008f28:	08008ed9 	.word	0x08008ed9
 8008f2c:	08008ed9 	.word	0x08008ed9
 8008f30:	0800905d 	.word	0x0800905d
 8008f34:	08008ed9 	.word	0x08008ed9
 8008f38:	08008ed9 	.word	0x08008ed9
 8008f3c:	08008ed9 	.word	0x08008ed9
 8008f40:	08008ed9 	.word	0x08008ed9
 8008f44:	08009015 	.word	0x08009015
 8008f48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f4c:	e7db      	b.n	8008f06 <_scanf_float+0x8e>
 8008f4e:	290e      	cmp	r1, #14
 8008f50:	d8c2      	bhi.n	8008ed8 <_scanf_float+0x60>
 8008f52:	a001      	add	r0, pc, #4	; (adr r0, 8008f58 <_scanf_float+0xe0>)
 8008f54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f58:	08009007 	.word	0x08009007
 8008f5c:	08008ed9 	.word	0x08008ed9
 8008f60:	08009007 	.word	0x08009007
 8008f64:	0800909b 	.word	0x0800909b
 8008f68:	08008ed9 	.word	0x08008ed9
 8008f6c:	08008fb5 	.word	0x08008fb5
 8008f70:	08008ff1 	.word	0x08008ff1
 8008f74:	08008ff1 	.word	0x08008ff1
 8008f78:	08008ff1 	.word	0x08008ff1
 8008f7c:	08008ff1 	.word	0x08008ff1
 8008f80:	08008ff1 	.word	0x08008ff1
 8008f84:	08008ff1 	.word	0x08008ff1
 8008f88:	08008ff1 	.word	0x08008ff1
 8008f8c:	08008ff1 	.word	0x08008ff1
 8008f90:	08008ff1 	.word	0x08008ff1
 8008f94:	2b6e      	cmp	r3, #110	; 0x6e
 8008f96:	d809      	bhi.n	8008fac <_scanf_float+0x134>
 8008f98:	2b60      	cmp	r3, #96	; 0x60
 8008f9a:	d8b2      	bhi.n	8008f02 <_scanf_float+0x8a>
 8008f9c:	2b54      	cmp	r3, #84	; 0x54
 8008f9e:	d077      	beq.n	8009090 <_scanf_float+0x218>
 8008fa0:	2b59      	cmp	r3, #89	; 0x59
 8008fa2:	d199      	bne.n	8008ed8 <_scanf_float+0x60>
 8008fa4:	2d07      	cmp	r5, #7
 8008fa6:	d197      	bne.n	8008ed8 <_scanf_float+0x60>
 8008fa8:	2508      	movs	r5, #8
 8008faa:	e029      	b.n	8009000 <_scanf_float+0x188>
 8008fac:	2b74      	cmp	r3, #116	; 0x74
 8008fae:	d06f      	beq.n	8009090 <_scanf_float+0x218>
 8008fb0:	2b79      	cmp	r3, #121	; 0x79
 8008fb2:	e7f6      	b.n	8008fa2 <_scanf_float+0x12a>
 8008fb4:	6821      	ldr	r1, [r4, #0]
 8008fb6:	05c8      	lsls	r0, r1, #23
 8008fb8:	d51a      	bpl.n	8008ff0 <_scanf_float+0x178>
 8008fba:	9b02      	ldr	r3, [sp, #8]
 8008fbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008fc0:	6021      	str	r1, [r4, #0]
 8008fc2:	f109 0901 	add.w	r9, r9, #1
 8008fc6:	b11b      	cbz	r3, 8008fd0 <_scanf_float+0x158>
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	3201      	adds	r2, #1
 8008fcc:	9302      	str	r3, [sp, #8]
 8008fce:	60a2      	str	r2, [r4, #8]
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	60a3      	str	r3, [r4, #8]
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	f340 8084 	ble.w	80090f0 <_scanf_float+0x278>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	603b      	str	r3, [r7, #0]
 8008fee:	e766      	b.n	8008ebe <_scanf_float+0x46>
 8008ff0:	eb1a 0f05 	cmn.w	sl, r5
 8008ff4:	f47f af70 	bne.w	8008ed8 <_scanf_float+0x60>
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008ffe:	6022      	str	r2, [r4, #0]
 8009000:	f806 3b01 	strb.w	r3, [r6], #1
 8009004:	e7e4      	b.n	8008fd0 <_scanf_float+0x158>
 8009006:	6822      	ldr	r2, [r4, #0]
 8009008:	0610      	lsls	r0, r2, #24
 800900a:	f57f af65 	bpl.w	8008ed8 <_scanf_float+0x60>
 800900e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009012:	e7f4      	b.n	8008ffe <_scanf_float+0x186>
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	d10e      	bne.n	8009038 <_scanf_float+0x1c0>
 800901a:	f1b9 0f00 	cmp.w	r9, #0
 800901e:	d10e      	bne.n	800903e <_scanf_float+0x1c6>
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009026:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800902a:	d108      	bne.n	800903e <_scanf_float+0x1c6>
 800902c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	f04f 0a01 	mov.w	sl, #1
 8009036:	e7e3      	b.n	8009000 <_scanf_float+0x188>
 8009038:	f1ba 0f02 	cmp.w	sl, #2
 800903c:	d055      	beq.n	80090ea <_scanf_float+0x272>
 800903e:	2d01      	cmp	r5, #1
 8009040:	d002      	beq.n	8009048 <_scanf_float+0x1d0>
 8009042:	2d04      	cmp	r5, #4
 8009044:	f47f af48 	bne.w	8008ed8 <_scanf_float+0x60>
 8009048:	3501      	adds	r5, #1
 800904a:	b2ed      	uxtb	r5, r5
 800904c:	e7d8      	b.n	8009000 <_scanf_float+0x188>
 800904e:	f1ba 0f01 	cmp.w	sl, #1
 8009052:	f47f af41 	bne.w	8008ed8 <_scanf_float+0x60>
 8009056:	f04f 0a02 	mov.w	sl, #2
 800905a:	e7d1      	b.n	8009000 <_scanf_float+0x188>
 800905c:	b97d      	cbnz	r5, 800907e <_scanf_float+0x206>
 800905e:	f1b9 0f00 	cmp.w	r9, #0
 8009062:	f47f af3c 	bne.w	8008ede <_scanf_float+0x66>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800906c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009070:	f47f af39 	bne.w	8008ee6 <_scanf_float+0x6e>
 8009074:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009078:	6022      	str	r2, [r4, #0]
 800907a:	2501      	movs	r5, #1
 800907c:	e7c0      	b.n	8009000 <_scanf_float+0x188>
 800907e:	2d03      	cmp	r5, #3
 8009080:	d0e2      	beq.n	8009048 <_scanf_float+0x1d0>
 8009082:	2d05      	cmp	r5, #5
 8009084:	e7de      	b.n	8009044 <_scanf_float+0x1cc>
 8009086:	2d02      	cmp	r5, #2
 8009088:	f47f af26 	bne.w	8008ed8 <_scanf_float+0x60>
 800908c:	2503      	movs	r5, #3
 800908e:	e7b7      	b.n	8009000 <_scanf_float+0x188>
 8009090:	2d06      	cmp	r5, #6
 8009092:	f47f af21 	bne.w	8008ed8 <_scanf_float+0x60>
 8009096:	2507      	movs	r5, #7
 8009098:	e7b2      	b.n	8009000 <_scanf_float+0x188>
 800909a:	6822      	ldr	r2, [r4, #0]
 800909c:	0591      	lsls	r1, r2, #22
 800909e:	f57f af1b 	bpl.w	8008ed8 <_scanf_float+0x60>
 80090a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80090a6:	6022      	str	r2, [r4, #0]
 80090a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80090ac:	e7a8      	b.n	8009000 <_scanf_float+0x188>
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80090b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80090b8:	d006      	beq.n	80090c8 <_scanf_float+0x250>
 80090ba:	0550      	lsls	r0, r2, #21
 80090bc:	f57f af0c 	bpl.w	8008ed8 <_scanf_float+0x60>
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	f43f af0f 	beq.w	8008ee6 <_scanf_float+0x6e>
 80090c8:	0591      	lsls	r1, r2, #22
 80090ca:	bf58      	it	pl
 80090cc:	9901      	ldrpl	r1, [sp, #4]
 80090ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090d2:	bf58      	it	pl
 80090d4:	eba9 0101 	subpl.w	r1, r9, r1
 80090d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80090dc:	bf58      	it	pl
 80090de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	f04f 0900 	mov.w	r9, #0
 80090e8:	e78a      	b.n	8009000 <_scanf_float+0x188>
 80090ea:	f04f 0a03 	mov.w	sl, #3
 80090ee:	e787      	b.n	8009000 <_scanf_float+0x188>
 80090f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090f4:	4639      	mov	r1, r7
 80090f6:	4640      	mov	r0, r8
 80090f8:	4798      	blx	r3
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f43f aedf 	beq.w	8008ebe <_scanf_float+0x46>
 8009100:	e6ea      	b.n	8008ed8 <_scanf_float+0x60>
 8009102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800910a:	463a      	mov	r2, r7
 800910c:	4640      	mov	r0, r8
 800910e:	4798      	blx	r3
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	3b01      	subs	r3, #1
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	e6ec      	b.n	8008ef2 <_scanf_float+0x7a>
 8009118:	1e6b      	subs	r3, r5, #1
 800911a:	2b06      	cmp	r3, #6
 800911c:	d825      	bhi.n	800916a <_scanf_float+0x2f2>
 800911e:	2d02      	cmp	r5, #2
 8009120:	d836      	bhi.n	8009190 <_scanf_float+0x318>
 8009122:	455e      	cmp	r6, fp
 8009124:	f67f aee8 	bls.w	8008ef8 <_scanf_float+0x80>
 8009128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800912c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009130:	463a      	mov	r2, r7
 8009132:	4640      	mov	r0, r8
 8009134:	4798      	blx	r3
 8009136:	6923      	ldr	r3, [r4, #16]
 8009138:	3b01      	subs	r3, #1
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	e7f1      	b.n	8009122 <_scanf_float+0x2aa>
 800913e:	9802      	ldr	r0, [sp, #8]
 8009140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009144:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009148:	9002      	str	r0, [sp, #8]
 800914a:	463a      	mov	r2, r7
 800914c:	4640      	mov	r0, r8
 800914e:	4798      	blx	r3
 8009150:	6923      	ldr	r3, [r4, #16]
 8009152:	3b01      	subs	r3, #1
 8009154:	6123      	str	r3, [r4, #16]
 8009156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800915a:	fa5f fa8a 	uxtb.w	sl, sl
 800915e:	f1ba 0f02 	cmp.w	sl, #2
 8009162:	d1ec      	bne.n	800913e <_scanf_float+0x2c6>
 8009164:	3d03      	subs	r5, #3
 8009166:	b2ed      	uxtb	r5, r5
 8009168:	1b76      	subs	r6, r6, r5
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	05da      	lsls	r2, r3, #23
 800916e:	d52f      	bpl.n	80091d0 <_scanf_float+0x358>
 8009170:	055b      	lsls	r3, r3, #21
 8009172:	d510      	bpl.n	8009196 <_scanf_float+0x31e>
 8009174:	455e      	cmp	r6, fp
 8009176:	f67f aebf 	bls.w	8008ef8 <_scanf_float+0x80>
 800917a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800917e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009182:	463a      	mov	r2, r7
 8009184:	4640      	mov	r0, r8
 8009186:	4798      	blx	r3
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	3b01      	subs	r3, #1
 800918c:	6123      	str	r3, [r4, #16]
 800918e:	e7f1      	b.n	8009174 <_scanf_float+0x2fc>
 8009190:	46aa      	mov	sl, r5
 8009192:	9602      	str	r6, [sp, #8]
 8009194:	e7df      	b.n	8009156 <_scanf_float+0x2de>
 8009196:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	2965      	cmp	r1, #101	; 0x65
 800919e:	f103 33ff 	add.w	r3, r3, #4294967295
 80091a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	d00c      	beq.n	80091c4 <_scanf_float+0x34c>
 80091aa:	2945      	cmp	r1, #69	; 0x45
 80091ac:	d00a      	beq.n	80091c4 <_scanf_float+0x34c>
 80091ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091b2:	463a      	mov	r2, r7
 80091b4:	4640      	mov	r0, r8
 80091b6:	4798      	blx	r3
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80091be:	3b01      	subs	r3, #1
 80091c0:	1eb5      	subs	r5, r6, #2
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c8:	463a      	mov	r2, r7
 80091ca:	4640      	mov	r0, r8
 80091cc:	4798      	blx	r3
 80091ce:	462e      	mov	r6, r5
 80091d0:	6825      	ldr	r5, [r4, #0]
 80091d2:	f015 0510 	ands.w	r5, r5, #16
 80091d6:	d158      	bne.n	800928a <_scanf_float+0x412>
 80091d8:	7035      	strb	r5, [r6, #0]
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091e4:	d11c      	bne.n	8009220 <_scanf_float+0x3a8>
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	454b      	cmp	r3, r9
 80091ea:	eba3 0209 	sub.w	r2, r3, r9
 80091ee:	d124      	bne.n	800923a <_scanf_float+0x3c2>
 80091f0:	2200      	movs	r2, #0
 80091f2:	4659      	mov	r1, fp
 80091f4:	4640      	mov	r0, r8
 80091f6:	f002 fcc7 	bl	800bb88 <_strtod_r>
 80091fa:	9b03      	ldr	r3, [sp, #12]
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f011 0f02 	tst.w	r1, #2
 8009204:	ec57 6b10 	vmov	r6, r7, d0
 8009208:	f103 0204 	add.w	r2, r3, #4
 800920c:	d020      	beq.n	8009250 <_scanf_float+0x3d8>
 800920e:	9903      	ldr	r1, [sp, #12]
 8009210:	600a      	str	r2, [r1, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	e9c3 6700 	strd	r6, r7, [r3]
 8009218:	68e3      	ldr	r3, [r4, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60e3      	str	r3, [r4, #12]
 800921e:	e66c      	b.n	8008efa <_scanf_float+0x82>
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0e4      	beq.n	80091f0 <_scanf_float+0x378>
 8009226:	9905      	ldr	r1, [sp, #20]
 8009228:	230a      	movs	r3, #10
 800922a:	462a      	mov	r2, r5
 800922c:	3101      	adds	r1, #1
 800922e:	4640      	mov	r0, r8
 8009230:	f002 fd32 	bl	800bc98 <_strtol_r>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	9e05      	ldr	r6, [sp, #20]
 8009238:	1ac2      	subs	r2, r0, r3
 800923a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800923e:	429e      	cmp	r6, r3
 8009240:	bf28      	it	cs
 8009242:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009246:	4912      	ldr	r1, [pc, #72]	; (8009290 <_scanf_float+0x418>)
 8009248:	4630      	mov	r0, r6
 800924a:	f000 f91b 	bl	8009484 <siprintf>
 800924e:	e7cf      	b.n	80091f0 <_scanf_float+0x378>
 8009250:	f011 0f04 	tst.w	r1, #4
 8009254:	9903      	ldr	r1, [sp, #12]
 8009256:	600a      	str	r2, [r1, #0]
 8009258:	d1db      	bne.n	8009212 <_scanf_float+0x39a>
 800925a:	f8d3 8000 	ldr.w	r8, [r3]
 800925e:	ee10 2a10 	vmov	r2, s0
 8009262:	ee10 0a10 	vmov	r0, s0
 8009266:	463b      	mov	r3, r7
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 fc67 	bl	8000b3c <__aeabi_dcmpun>
 800926e:	b128      	cbz	r0, 800927c <_scanf_float+0x404>
 8009270:	4808      	ldr	r0, [pc, #32]	; (8009294 <_scanf_float+0x41c>)
 8009272:	f000 fa4f 	bl	8009714 <nanf>
 8009276:	ed88 0a00 	vstr	s0, [r8]
 800927a:	e7cd      	b.n	8009218 <_scanf_float+0x3a0>
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 fcba 	bl	8000bf8 <__aeabi_d2f>
 8009284:	f8c8 0000 	str.w	r0, [r8]
 8009288:	e7c6      	b.n	8009218 <_scanf_float+0x3a0>
 800928a:	2500      	movs	r5, #0
 800928c:	e635      	b.n	8008efa <_scanf_float+0x82>
 800928e:	bf00      	nop
 8009290:	0800cff0 	.word	0x0800cff0
 8009294:	0800d385 	.word	0x0800d385

08009298 <std>:
 8009298:	2300      	movs	r3, #0
 800929a:	b510      	push	{r4, lr}
 800929c:	4604      	mov	r4, r0
 800929e:	e9c0 3300 	strd	r3, r3, [r0]
 80092a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092a6:	6083      	str	r3, [r0, #8]
 80092a8:	8181      	strh	r1, [r0, #12]
 80092aa:	6643      	str	r3, [r0, #100]	; 0x64
 80092ac:	81c2      	strh	r2, [r0, #14]
 80092ae:	6183      	str	r3, [r0, #24]
 80092b0:	4619      	mov	r1, r3
 80092b2:	2208      	movs	r2, #8
 80092b4:	305c      	adds	r0, #92	; 0x5c
 80092b6:	f000 f948 	bl	800954a <memset>
 80092ba:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <std+0x58>)
 80092bc:	6263      	str	r3, [r4, #36]	; 0x24
 80092be:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <std+0x5c>)
 80092c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <std+0x60>)
 80092c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092c6:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <std+0x64>)
 80092c8:	6323      	str	r3, [r4, #48]	; 0x30
 80092ca:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <std+0x68>)
 80092cc:	6224      	str	r4, [r4, #32]
 80092ce:	429c      	cmp	r4, r3
 80092d0:	d006      	beq.n	80092e0 <std+0x48>
 80092d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80092d6:	4294      	cmp	r4, r2
 80092d8:	d002      	beq.n	80092e0 <std+0x48>
 80092da:	33d0      	adds	r3, #208	; 0xd0
 80092dc:	429c      	cmp	r4, r3
 80092de:	d105      	bne.n	80092ec <std+0x54>
 80092e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e8:	f000 ba02 	b.w	80096f0 <__retarget_lock_init_recursive>
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	080094c5 	.word	0x080094c5
 80092f4:	080094e7 	.word	0x080094e7
 80092f8:	0800951f 	.word	0x0800951f
 80092fc:	08009543 	.word	0x08009543
 8009300:	200015b8 	.word	0x200015b8

08009304 <stdio_exit_handler>:
 8009304:	4a02      	ldr	r2, [pc, #8]	; (8009310 <stdio_exit_handler+0xc>)
 8009306:	4903      	ldr	r1, [pc, #12]	; (8009314 <stdio_exit_handler+0x10>)
 8009308:	4803      	ldr	r0, [pc, #12]	; (8009318 <stdio_exit_handler+0x14>)
 800930a:	f000 b869 	b.w	80093e0 <_fwalk_sglue>
 800930e:	bf00      	nop
 8009310:	20000018 	.word	0x20000018
 8009314:	0800c059 	.word	0x0800c059
 8009318:	20000024 	.word	0x20000024

0800931c <cleanup_stdio>:
 800931c:	6841      	ldr	r1, [r0, #4]
 800931e:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <cleanup_stdio+0x34>)
 8009320:	4299      	cmp	r1, r3
 8009322:	b510      	push	{r4, lr}
 8009324:	4604      	mov	r4, r0
 8009326:	d001      	beq.n	800932c <cleanup_stdio+0x10>
 8009328:	f002 fe96 	bl	800c058 <_fflush_r>
 800932c:	68a1      	ldr	r1, [r4, #8]
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <cleanup_stdio+0x38>)
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <cleanup_stdio+0x1e>
 8009334:	4620      	mov	r0, r4
 8009336:	f002 fe8f 	bl	800c058 <_fflush_r>
 800933a:	68e1      	ldr	r1, [r4, #12]
 800933c:	4b06      	ldr	r3, [pc, #24]	; (8009358 <cleanup_stdio+0x3c>)
 800933e:	4299      	cmp	r1, r3
 8009340:	d004      	beq.n	800934c <cleanup_stdio+0x30>
 8009342:	4620      	mov	r0, r4
 8009344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009348:	f002 be86 	b.w	800c058 <_fflush_r>
 800934c:	bd10      	pop	{r4, pc}
 800934e:	bf00      	nop
 8009350:	200015b8 	.word	0x200015b8
 8009354:	20001620 	.word	0x20001620
 8009358:	20001688 	.word	0x20001688

0800935c <global_stdio_init.part.0>:
 800935c:	b510      	push	{r4, lr}
 800935e:	4b0b      	ldr	r3, [pc, #44]	; (800938c <global_stdio_init.part.0+0x30>)
 8009360:	4c0b      	ldr	r4, [pc, #44]	; (8009390 <global_stdio_init.part.0+0x34>)
 8009362:	4a0c      	ldr	r2, [pc, #48]	; (8009394 <global_stdio_init.part.0+0x38>)
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	4620      	mov	r0, r4
 8009368:	2200      	movs	r2, #0
 800936a:	2104      	movs	r1, #4
 800936c:	f7ff ff94 	bl	8009298 <std>
 8009370:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009374:	2201      	movs	r2, #1
 8009376:	2109      	movs	r1, #9
 8009378:	f7ff ff8e 	bl	8009298 <std>
 800937c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009380:	2202      	movs	r2, #2
 8009382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009386:	2112      	movs	r1, #18
 8009388:	f7ff bf86 	b.w	8009298 <std>
 800938c:	200016f0 	.word	0x200016f0
 8009390:	200015b8 	.word	0x200015b8
 8009394:	08009305 	.word	0x08009305

08009398 <__sfp_lock_acquire>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__sfp_lock_acquire+0x8>)
 800939a:	f000 b9aa 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	200016f9 	.word	0x200016f9

080093a4 <__sfp_lock_release>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__sfp_lock_release+0x8>)
 80093a6:	f000 b9a5 	b.w	80096f4 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	200016f9 	.word	0x200016f9

080093b0 <__sinit>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	4604      	mov	r4, r0
 80093b4:	f7ff fff0 	bl	8009398 <__sfp_lock_acquire>
 80093b8:	6a23      	ldr	r3, [r4, #32]
 80093ba:	b11b      	cbz	r3, 80093c4 <__sinit+0x14>
 80093bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c0:	f7ff bff0 	b.w	80093a4 <__sfp_lock_release>
 80093c4:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <__sinit+0x28>)
 80093c6:	6223      	str	r3, [r4, #32]
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <__sinit+0x2c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f5      	bne.n	80093bc <__sinit+0xc>
 80093d0:	f7ff ffc4 	bl	800935c <global_stdio_init.part.0>
 80093d4:	e7f2      	b.n	80093bc <__sinit+0xc>
 80093d6:	bf00      	nop
 80093d8:	0800931d 	.word	0x0800931d
 80093dc:	200016f0 	.word	0x200016f0

080093e0 <_fwalk_sglue>:
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	4607      	mov	r7, r0
 80093e6:	4688      	mov	r8, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	2600      	movs	r6, #0
 80093ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f0:	f1b9 0901 	subs.w	r9, r9, #1
 80093f4:	d505      	bpl.n	8009402 <_fwalk_sglue+0x22>
 80093f6:	6824      	ldr	r4, [r4, #0]
 80093f8:	2c00      	cmp	r4, #0
 80093fa:	d1f7      	bne.n	80093ec <_fwalk_sglue+0xc>
 80093fc:	4630      	mov	r0, r6
 80093fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d907      	bls.n	8009418 <_fwalk_sglue+0x38>
 8009408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800940c:	3301      	adds	r3, #1
 800940e:	d003      	beq.n	8009418 <_fwalk_sglue+0x38>
 8009410:	4629      	mov	r1, r5
 8009412:	4638      	mov	r0, r7
 8009414:	47c0      	blx	r8
 8009416:	4306      	orrs	r6, r0
 8009418:	3568      	adds	r5, #104	; 0x68
 800941a:	e7e9      	b.n	80093f0 <_fwalk_sglue+0x10>

0800941c <sniprintf>:
 800941c:	b40c      	push	{r2, r3}
 800941e:	b530      	push	{r4, r5, lr}
 8009420:	4b17      	ldr	r3, [pc, #92]	; (8009480 <sniprintf+0x64>)
 8009422:	1e0c      	subs	r4, r1, #0
 8009424:	681d      	ldr	r5, [r3, #0]
 8009426:	b09d      	sub	sp, #116	; 0x74
 8009428:	da08      	bge.n	800943c <sniprintf+0x20>
 800942a:	238b      	movs	r3, #139	; 0x8b
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f04f 30ff 	mov.w	r0, #4294967295
 8009432:	b01d      	add	sp, #116	; 0x74
 8009434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009438:	b002      	add	sp, #8
 800943a:	4770      	bx	lr
 800943c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009444:	bf14      	ite	ne
 8009446:	f104 33ff 	addne.w	r3, r4, #4294967295
 800944a:	4623      	moveq	r3, r4
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009454:	9002      	str	r0, [sp, #8]
 8009456:	9006      	str	r0, [sp, #24]
 8009458:	f8ad 3016 	strh.w	r3, [sp, #22]
 800945c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800945e:	ab21      	add	r3, sp, #132	; 0x84
 8009460:	a902      	add	r1, sp, #8
 8009462:	4628      	mov	r0, r5
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	f002 fc73 	bl	800bd50 <_svfiprintf_r>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	bfbc      	itt	lt
 800946e:	238b      	movlt	r3, #139	; 0x8b
 8009470:	602b      	strlt	r3, [r5, #0]
 8009472:	2c00      	cmp	r4, #0
 8009474:	d0dd      	beq.n	8009432 <sniprintf+0x16>
 8009476:	9b02      	ldr	r3, [sp, #8]
 8009478:	2200      	movs	r2, #0
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	e7d9      	b.n	8009432 <sniprintf+0x16>
 800947e:	bf00      	nop
 8009480:	20000070 	.word	0x20000070

08009484 <siprintf>:
 8009484:	b40e      	push	{r1, r2, r3}
 8009486:	b500      	push	{lr}
 8009488:	b09c      	sub	sp, #112	; 0x70
 800948a:	ab1d      	add	r3, sp, #116	; 0x74
 800948c:	9002      	str	r0, [sp, #8]
 800948e:	9006      	str	r0, [sp, #24]
 8009490:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009494:	4809      	ldr	r0, [pc, #36]	; (80094bc <siprintf+0x38>)
 8009496:	9107      	str	r1, [sp, #28]
 8009498:	9104      	str	r1, [sp, #16]
 800949a:	4909      	ldr	r1, [pc, #36]	; (80094c0 <siprintf+0x3c>)
 800949c:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a0:	9105      	str	r1, [sp, #20]
 80094a2:	6800      	ldr	r0, [r0, #0]
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	a902      	add	r1, sp, #8
 80094a8:	f002 fc52 	bl	800bd50 <_svfiprintf_r>
 80094ac:	9b02      	ldr	r3, [sp, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	b01c      	add	sp, #112	; 0x70
 80094b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b8:	b003      	add	sp, #12
 80094ba:	4770      	bx	lr
 80094bc:	20000070 	.word	0x20000070
 80094c0:	ffff0208 	.word	0xffff0208

080094c4 <__sread>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	460c      	mov	r4, r1
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	f000 f8c2 	bl	8009654 <_read_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	bfab      	itete	ge
 80094d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094d6:	89a3      	ldrhlt	r3, [r4, #12]
 80094d8:	181b      	addge	r3, r3, r0
 80094da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094de:	bfac      	ite	ge
 80094e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80094e2:	81a3      	strhlt	r3, [r4, #12]
 80094e4:	bd10      	pop	{r4, pc}

080094e6 <__swrite>:
 80094e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ea:	461f      	mov	r7, r3
 80094ec:	898b      	ldrh	r3, [r1, #12]
 80094ee:	05db      	lsls	r3, r3, #23
 80094f0:	4605      	mov	r5, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4616      	mov	r6, r2
 80094f6:	d505      	bpl.n	8009504 <__swrite+0x1e>
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	2302      	movs	r3, #2
 80094fe:	2200      	movs	r2, #0
 8009500:	f000 f896 	bl	8009630 <_lseek_r>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800950a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	4632      	mov	r2, r6
 8009512:	463b      	mov	r3, r7
 8009514:	4628      	mov	r0, r5
 8009516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	f000 b8ad 	b.w	8009678 <_write_r>

0800951e <__sseek>:
 800951e:	b510      	push	{r4, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009526:	f000 f883 	bl	8009630 <_lseek_r>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	bf15      	itete	ne
 8009530:	6560      	strne	r0, [r4, #84]	; 0x54
 8009532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800953a:	81a3      	strheq	r3, [r4, #12]
 800953c:	bf18      	it	ne
 800953e:	81a3      	strhne	r3, [r4, #12]
 8009540:	bd10      	pop	{r4, pc}

08009542 <__sclose>:
 8009542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009546:	f000 b80d 	b.w	8009564 <_close_r>

0800954a <memset>:
 800954a:	4402      	add	r2, r0
 800954c:	4603      	mov	r3, r0
 800954e:	4293      	cmp	r3, r2
 8009550:	d100      	bne.n	8009554 <memset+0xa>
 8009552:	4770      	bx	lr
 8009554:	f803 1b01 	strb.w	r1, [r3], #1
 8009558:	e7f9      	b.n	800954e <memset+0x4>
	...

0800955c <_localeconv_r>:
 800955c:	4800      	ldr	r0, [pc, #0]	; (8009560 <_localeconv_r+0x4>)
 800955e:	4770      	bx	lr
 8009560:	20000164 	.word	0x20000164

08009564 <_close_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d06      	ldr	r5, [pc, #24]	; (8009580 <_close_r+0x1c>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f8 fea1 	bl	80022b6 <_close>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_close_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_close_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	200016f4 	.word	0x200016f4

08009584 <_reclaim_reent>:
 8009584:	4b29      	ldr	r3, [pc, #164]	; (800962c <_reclaim_reent+0xa8>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4283      	cmp	r3, r0
 800958a:	b570      	push	{r4, r5, r6, lr}
 800958c:	4604      	mov	r4, r0
 800958e:	d04b      	beq.n	8009628 <_reclaim_reent+0xa4>
 8009590:	69c3      	ldr	r3, [r0, #28]
 8009592:	b143      	cbz	r3, 80095a6 <_reclaim_reent+0x22>
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d144      	bne.n	8009624 <_reclaim_reent+0xa0>
 800959a:	69e3      	ldr	r3, [r4, #28]
 800959c:	6819      	ldr	r1, [r3, #0]
 800959e:	b111      	cbz	r1, 80095a6 <_reclaim_reent+0x22>
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 ff37 	bl	800a414 <_free_r>
 80095a6:	6961      	ldr	r1, [r4, #20]
 80095a8:	b111      	cbz	r1, 80095b0 <_reclaim_reent+0x2c>
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 ff32 	bl	800a414 <_free_r>
 80095b0:	69e1      	ldr	r1, [r4, #28]
 80095b2:	b111      	cbz	r1, 80095ba <_reclaim_reent+0x36>
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 ff2d 	bl	800a414 <_free_r>
 80095ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80095bc:	b111      	cbz	r1, 80095c4 <_reclaim_reent+0x40>
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 ff28 	bl	800a414 <_free_r>
 80095c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c6:	b111      	cbz	r1, 80095ce <_reclaim_reent+0x4a>
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 ff23 	bl	800a414 <_free_r>
 80095ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095d0:	b111      	cbz	r1, 80095d8 <_reclaim_reent+0x54>
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 ff1e 	bl	800a414 <_free_r>
 80095d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80095da:	b111      	cbz	r1, 80095e2 <_reclaim_reent+0x5e>
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 ff19 	bl	800a414 <_free_r>
 80095e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80095e4:	b111      	cbz	r1, 80095ec <_reclaim_reent+0x68>
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 ff14 	bl	800a414 <_free_r>
 80095ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80095ee:	b111      	cbz	r1, 80095f6 <_reclaim_reent+0x72>
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 ff0f 	bl	800a414 <_free_r>
 80095f6:	6a23      	ldr	r3, [r4, #32]
 80095f8:	b1b3      	cbz	r3, 8009628 <_reclaim_reent+0xa4>
 80095fa:	4620      	mov	r0, r4
 80095fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009600:	4718      	bx	r3
 8009602:	5949      	ldr	r1, [r1, r5]
 8009604:	b941      	cbnz	r1, 8009618 <_reclaim_reent+0x94>
 8009606:	3504      	adds	r5, #4
 8009608:	69e3      	ldr	r3, [r4, #28]
 800960a:	2d80      	cmp	r5, #128	; 0x80
 800960c:	68d9      	ldr	r1, [r3, #12]
 800960e:	d1f8      	bne.n	8009602 <_reclaim_reent+0x7e>
 8009610:	4620      	mov	r0, r4
 8009612:	f000 feff 	bl	800a414 <_free_r>
 8009616:	e7c0      	b.n	800959a <_reclaim_reent+0x16>
 8009618:	680e      	ldr	r6, [r1, #0]
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fefa 	bl	800a414 <_free_r>
 8009620:	4631      	mov	r1, r6
 8009622:	e7ef      	b.n	8009604 <_reclaim_reent+0x80>
 8009624:	2500      	movs	r5, #0
 8009626:	e7ef      	b.n	8009608 <_reclaim_reent+0x84>
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	bf00      	nop
 800962c:	20000070 	.word	0x20000070

08009630 <_lseek_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d07      	ldr	r5, [pc, #28]	; (8009650 <_lseek_r+0x20>)
 8009634:	4604      	mov	r4, r0
 8009636:	4608      	mov	r0, r1
 8009638:	4611      	mov	r1, r2
 800963a:	2200      	movs	r2, #0
 800963c:	602a      	str	r2, [r5, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f7f8 fe60 	bl	8002304 <_lseek>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_lseek_r+0x1e>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_lseek_r+0x1e>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	200016f4 	.word	0x200016f4

08009654 <_read_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_read_r+0x20>)
 8009658:	4604      	mov	r4, r0
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	2200      	movs	r2, #0
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f8 fdee 	bl	8002244 <_read>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_read_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_read_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	200016f4 	.word	0x200016f4

08009678 <_write_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	; (8009698 <_write_r+0x20>)
 800967c:	4604      	mov	r4, r0
 800967e:	4608      	mov	r0, r1
 8009680:	4611      	mov	r1, r2
 8009682:	2200      	movs	r2, #0
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f8 fdf9 	bl	800227e <_write>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_write_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_write_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200016f4 	.word	0x200016f4

0800969c <__errno>:
 800969c:	4b01      	ldr	r3, [pc, #4]	; (80096a4 <__errno+0x8>)
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000070 	.word	0x20000070

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4d0d      	ldr	r5, [pc, #52]	; (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	; (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2600      	movs	r6, #0
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4d0b      	ldr	r5, [pc, #44]	; (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	; (80096ec <__libc_init_array+0x44>)
 80096bc:	f003 fbd4 	bl	800ce68 <_init>
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2600      	movs	r6, #0
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	0800d3e8 	.word	0x0800d3e8
 80096e4:	0800d3e8 	.word	0x0800d3e8
 80096e8:	0800d3e8 	.word	0x0800d3e8
 80096ec:	0800d3ec 	.word	0x0800d3ec

080096f0 <__retarget_lock_init_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <__retarget_lock_acquire_recursive>:
 80096f2:	4770      	bx	lr

080096f4 <__retarget_lock_release_recursive>:
 80096f4:	4770      	bx	lr

080096f6 <memcpy>:
 80096f6:	440a      	add	r2, r1
 80096f8:	4291      	cmp	r1, r2
 80096fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80096fe:	d100      	bne.n	8009702 <memcpy+0xc>
 8009700:	4770      	bx	lr
 8009702:	b510      	push	{r4, lr}
 8009704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970c:	4291      	cmp	r1, r2
 800970e:	d1f9      	bne.n	8009704 <memcpy+0xe>
 8009710:	bd10      	pop	{r4, pc}
	...

08009714 <nanf>:
 8009714:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800971c <nanf+0x8>
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	7fc00000 	.word	0x7fc00000

08009720 <quorem>:
 8009720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	6903      	ldr	r3, [r0, #16]
 8009726:	690c      	ldr	r4, [r1, #16]
 8009728:	42a3      	cmp	r3, r4
 800972a:	4607      	mov	r7, r0
 800972c:	db7e      	blt.n	800982c <quorem+0x10c>
 800972e:	3c01      	subs	r4, #1
 8009730:	f101 0814 	add.w	r8, r1, #20
 8009734:	f100 0514 	add.w	r5, r0, #20
 8009738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009746:	3301      	adds	r3, #1
 8009748:	429a      	cmp	r2, r3
 800974a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800974e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009752:	fbb2 f6f3 	udiv	r6, r2, r3
 8009756:	d331      	bcc.n	80097bc <quorem+0x9c>
 8009758:	f04f 0e00 	mov.w	lr, #0
 800975c:	4640      	mov	r0, r8
 800975e:	46ac      	mov	ip, r5
 8009760:	46f2      	mov	sl, lr
 8009762:	f850 2b04 	ldr.w	r2, [r0], #4
 8009766:	b293      	uxth	r3, r2
 8009768:	fb06 e303 	mla	r3, r6, r3, lr
 800976c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009770:	0c1a      	lsrs	r2, r3, #16
 8009772:	b29b      	uxth	r3, r3
 8009774:	ebaa 0303 	sub.w	r3, sl, r3
 8009778:	f8dc a000 	ldr.w	sl, [ip]
 800977c:	fa13 f38a 	uxtah	r3, r3, sl
 8009780:	fb06 220e 	mla	r2, r6, lr, r2
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800978c:	b292      	uxth	r2, r2
 800978e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009796:	f8bd 3000 	ldrh.w	r3, [sp]
 800979a:	4581      	cmp	r9, r0
 800979c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a0:	f84c 3b04 	str.w	r3, [ip], #4
 80097a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097a8:	d2db      	bcs.n	8009762 <quorem+0x42>
 80097aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80097ae:	b92b      	cbnz	r3, 80097bc <quorem+0x9c>
 80097b0:	9b01      	ldr	r3, [sp, #4]
 80097b2:	3b04      	subs	r3, #4
 80097b4:	429d      	cmp	r5, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	d32c      	bcc.n	8009814 <quorem+0xf4>
 80097ba:	613c      	str	r4, [r7, #16]
 80097bc:	4638      	mov	r0, r7
 80097be:	f001 f9ef 	bl	800aba0 <__mcmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	db22      	blt.n	800980c <quorem+0xec>
 80097c6:	3601      	adds	r6, #1
 80097c8:	4629      	mov	r1, r5
 80097ca:	2000      	movs	r0, #0
 80097cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80097d0:	f8d1 c000 	ldr.w	ip, [r1]
 80097d4:	b293      	uxth	r3, r2
 80097d6:	1ac3      	subs	r3, r0, r3
 80097d8:	0c12      	lsrs	r2, r2, #16
 80097da:	fa13 f38c 	uxtah	r3, r3, ip
 80097de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ec:	45c1      	cmp	r9, r8
 80097ee:	f841 3b04 	str.w	r3, [r1], #4
 80097f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097f6:	d2e9      	bcs.n	80097cc <quorem+0xac>
 80097f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009800:	b922      	cbnz	r2, 800980c <quorem+0xec>
 8009802:	3b04      	subs	r3, #4
 8009804:	429d      	cmp	r5, r3
 8009806:	461a      	mov	r2, r3
 8009808:	d30a      	bcc.n	8009820 <quorem+0x100>
 800980a:	613c      	str	r4, [r7, #16]
 800980c:	4630      	mov	r0, r6
 800980e:	b003      	add	sp, #12
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	6812      	ldr	r2, [r2, #0]
 8009816:	3b04      	subs	r3, #4
 8009818:	2a00      	cmp	r2, #0
 800981a:	d1ce      	bne.n	80097ba <quorem+0x9a>
 800981c:	3c01      	subs	r4, #1
 800981e:	e7c9      	b.n	80097b4 <quorem+0x94>
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	3b04      	subs	r3, #4
 8009824:	2a00      	cmp	r2, #0
 8009826:	d1f0      	bne.n	800980a <quorem+0xea>
 8009828:	3c01      	subs	r4, #1
 800982a:	e7eb      	b.n	8009804 <quorem+0xe4>
 800982c:	2000      	movs	r0, #0
 800982e:	e7ee      	b.n	800980e <quorem+0xee>

08009830 <_dtoa_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ed2d 8b04 	vpush	{d8-d9}
 8009838:	69c5      	ldr	r5, [r0, #28]
 800983a:	b093      	sub	sp, #76	; 0x4c
 800983c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009840:	ec57 6b10 	vmov	r6, r7, d0
 8009844:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009848:	9107      	str	r1, [sp, #28]
 800984a:	4604      	mov	r4, r0
 800984c:	920a      	str	r2, [sp, #40]	; 0x28
 800984e:	930d      	str	r3, [sp, #52]	; 0x34
 8009850:	b975      	cbnz	r5, 8009870 <_dtoa_r+0x40>
 8009852:	2010      	movs	r0, #16
 8009854:	f000 fe2a 	bl	800a4ac <malloc>
 8009858:	4602      	mov	r2, r0
 800985a:	61e0      	str	r0, [r4, #28]
 800985c:	b920      	cbnz	r0, 8009868 <_dtoa_r+0x38>
 800985e:	4bae      	ldr	r3, [pc, #696]	; (8009b18 <_dtoa_r+0x2e8>)
 8009860:	21ef      	movs	r1, #239	; 0xef
 8009862:	48ae      	ldr	r0, [pc, #696]	; (8009b1c <_dtoa_r+0x2ec>)
 8009864:	f002 fc64 	bl	800c130 <__assert_func>
 8009868:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800986c:	6005      	str	r5, [r0, #0]
 800986e:	60c5      	str	r5, [r0, #12]
 8009870:	69e3      	ldr	r3, [r4, #28]
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	b151      	cbz	r1, 800988c <_dtoa_r+0x5c>
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	604a      	str	r2, [r1, #4]
 800987a:	2301      	movs	r3, #1
 800987c:	4093      	lsls	r3, r2
 800987e:	608b      	str	r3, [r1, #8]
 8009880:	4620      	mov	r0, r4
 8009882:	f000 ff07 	bl	800a694 <_Bfree>
 8009886:	69e3      	ldr	r3, [r4, #28]
 8009888:	2200      	movs	r2, #0
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	1e3b      	subs	r3, r7, #0
 800988e:	bfbb      	ittet	lt
 8009890:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009894:	9303      	strlt	r3, [sp, #12]
 8009896:	2300      	movge	r3, #0
 8009898:	2201      	movlt	r2, #1
 800989a:	bfac      	ite	ge
 800989c:	f8c8 3000 	strge.w	r3, [r8]
 80098a0:	f8c8 2000 	strlt.w	r2, [r8]
 80098a4:	4b9e      	ldr	r3, [pc, #632]	; (8009b20 <_dtoa_r+0x2f0>)
 80098a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80098aa:	ea33 0308 	bics.w	r3, r3, r8
 80098ae:	d11b      	bne.n	80098e8 <_dtoa_r+0xb8>
 80098b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098bc:	4333      	orrs	r3, r6
 80098be:	f000 8593 	beq.w	800a3e8 <_dtoa_r+0xbb8>
 80098c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c4:	b963      	cbnz	r3, 80098e0 <_dtoa_r+0xb0>
 80098c6:	4b97      	ldr	r3, [pc, #604]	; (8009b24 <_dtoa_r+0x2f4>)
 80098c8:	e027      	b.n	800991a <_dtoa_r+0xea>
 80098ca:	4b97      	ldr	r3, [pc, #604]	; (8009b28 <_dtoa_r+0x2f8>)
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	3308      	adds	r3, #8
 80098d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	9800      	ldr	r0, [sp, #0]
 80098d6:	b013      	add	sp, #76	; 0x4c
 80098d8:	ecbd 8b04 	vpop	{d8-d9}
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	4b90      	ldr	r3, [pc, #576]	; (8009b24 <_dtoa_r+0x2f4>)
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	3303      	adds	r3, #3
 80098e6:	e7f3      	b.n	80098d0 <_dtoa_r+0xa0>
 80098e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098ec:	2200      	movs	r2, #0
 80098ee:	ec51 0b17 	vmov	r0, r1, d7
 80098f2:	eeb0 8a47 	vmov.f32	s16, s14
 80098f6:	eef0 8a67 	vmov.f32	s17, s15
 80098fa:	2300      	movs	r3, #0
 80098fc:	f7f7 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8009900:	4681      	mov	r9, r0
 8009902:	b160      	cbz	r0, 800991e <_dtoa_r+0xee>
 8009904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009906:	2301      	movs	r3, #1
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8568 	beq.w	800a3e2 <_dtoa_r+0xbb2>
 8009912:	4b86      	ldr	r3, [pc, #536]	; (8009b2c <_dtoa_r+0x2fc>)
 8009914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	3b01      	subs	r3, #1
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	e7da      	b.n	80098d4 <_dtoa_r+0xa4>
 800991e:	aa10      	add	r2, sp, #64	; 0x40
 8009920:	a911      	add	r1, sp, #68	; 0x44
 8009922:	4620      	mov	r0, r4
 8009924:	eeb0 0a48 	vmov.f32	s0, s16
 8009928:	eef0 0a68 	vmov.f32	s1, s17
 800992c:	f001 fa4e 	bl	800adcc <__d2b>
 8009930:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009934:	4682      	mov	sl, r0
 8009936:	2d00      	cmp	r5, #0
 8009938:	d07f      	beq.n	8009a3a <_dtoa_r+0x20a>
 800993a:	ee18 3a90 	vmov	r3, s17
 800993e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009942:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009946:	ec51 0b18 	vmov	r0, r1, d8
 800994a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800994e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009952:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009956:	4619      	mov	r1, r3
 8009958:	2200      	movs	r2, #0
 800995a:	4b75      	ldr	r3, [pc, #468]	; (8009b30 <_dtoa_r+0x300>)
 800995c:	f7f6 fc9c 	bl	8000298 <__aeabi_dsub>
 8009960:	a367      	add	r3, pc, #412	; (adr r3, 8009b00 <_dtoa_r+0x2d0>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fe4f 	bl	8000608 <__aeabi_dmul>
 800996a:	a367      	add	r3, pc, #412	; (adr r3, 8009b08 <_dtoa_r+0x2d8>)
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	f7f6 fc94 	bl	800029c <__adddf3>
 8009974:	4606      	mov	r6, r0
 8009976:	4628      	mov	r0, r5
 8009978:	460f      	mov	r7, r1
 800997a:	f7f6 fddb 	bl	8000534 <__aeabi_i2d>
 800997e:	a364      	add	r3, pc, #400	; (adr r3, 8009b10 <_dtoa_r+0x2e0>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fe40 	bl	8000608 <__aeabi_dmul>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	f7f6 fc84 	bl	800029c <__adddf3>
 8009994:	4606      	mov	r6, r0
 8009996:	460f      	mov	r7, r1
 8009998:	f7f7 f8e6 	bl	8000b68 <__aeabi_d2iz>
 800999c:	2200      	movs	r2, #0
 800999e:	4683      	mov	fp, r0
 80099a0:	2300      	movs	r3, #0
 80099a2:	4630      	mov	r0, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	f7f7 f8a1 	bl	8000aec <__aeabi_dcmplt>
 80099aa:	b148      	cbz	r0, 80099c0 <_dtoa_r+0x190>
 80099ac:	4658      	mov	r0, fp
 80099ae:	f7f6 fdc1 	bl	8000534 <__aeabi_i2d>
 80099b2:	4632      	mov	r2, r6
 80099b4:	463b      	mov	r3, r7
 80099b6:	f7f7 f88f 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ba:	b908      	cbnz	r0, 80099c0 <_dtoa_r+0x190>
 80099bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099c0:	f1bb 0f16 	cmp.w	fp, #22
 80099c4:	d857      	bhi.n	8009a76 <_dtoa_r+0x246>
 80099c6:	4b5b      	ldr	r3, [pc, #364]	; (8009b34 <_dtoa_r+0x304>)
 80099c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	ec51 0b18 	vmov	r0, r1, d8
 80099d4:	f7f7 f88a 	bl	8000aec <__aeabi_dcmplt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d04e      	beq.n	8009a7a <_dtoa_r+0x24a>
 80099dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099e0:	2300      	movs	r3, #0
 80099e2:	930c      	str	r3, [sp, #48]	; 0x30
 80099e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099e6:	1b5b      	subs	r3, r3, r5
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	bf45      	ittet	mi
 80099ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80099f0:	9305      	strmi	r3, [sp, #20]
 80099f2:	2300      	movpl	r3, #0
 80099f4:	2300      	movmi	r3, #0
 80099f6:	9206      	str	r2, [sp, #24]
 80099f8:	bf54      	ite	pl
 80099fa:	9305      	strpl	r3, [sp, #20]
 80099fc:	9306      	strmi	r3, [sp, #24]
 80099fe:	f1bb 0f00 	cmp.w	fp, #0
 8009a02:	db3c      	blt.n	8009a7e <_dtoa_r+0x24e>
 8009a04:	9b06      	ldr	r3, [sp, #24]
 8009a06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009a0a:	445b      	add	r3, fp
 8009a0c:	9306      	str	r3, [sp, #24]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	9b07      	ldr	r3, [sp, #28]
 8009a14:	2b09      	cmp	r3, #9
 8009a16:	d868      	bhi.n	8009aea <_dtoa_r+0x2ba>
 8009a18:	2b05      	cmp	r3, #5
 8009a1a:	bfc4      	itt	gt
 8009a1c:	3b04      	subgt	r3, #4
 8009a1e:	9307      	strgt	r3, [sp, #28]
 8009a20:	9b07      	ldr	r3, [sp, #28]
 8009a22:	f1a3 0302 	sub.w	r3, r3, #2
 8009a26:	bfcc      	ite	gt
 8009a28:	2500      	movgt	r5, #0
 8009a2a:	2501      	movle	r5, #1
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	f200 8085 	bhi.w	8009b3c <_dtoa_r+0x30c>
 8009a32:	e8df f003 	tbb	[pc, r3]
 8009a36:	3b2e      	.short	0x3b2e
 8009a38:	5839      	.short	0x5839
 8009a3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a3e:	441d      	add	r5, r3
 8009a40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	bfc1      	itttt	gt
 8009a48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a58:	bfd6      	itet	le
 8009a5a:	f1c3 0320 	rsble	r3, r3, #32
 8009a5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a62:	fa06 f003 	lslle.w	r0, r6, r3
 8009a66:	f7f6 fd55 	bl	8000514 <__aeabi_ui2d>
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a70:	3d01      	subs	r5, #1
 8009a72:	920e      	str	r2, [sp, #56]	; 0x38
 8009a74:	e76f      	b.n	8009956 <_dtoa_r+0x126>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7b3      	b.n	80099e2 <_dtoa_r+0x1b2>
 8009a7a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a7c:	e7b2      	b.n	80099e4 <_dtoa_r+0x1b4>
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	eba3 030b 	sub.w	r3, r3, fp
 8009a84:	9305      	str	r3, [sp, #20]
 8009a86:	f1cb 0300 	rsb	r3, fp, #0
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a90:	e7bf      	b.n	8009a12 <_dtoa_r+0x1e2>
 8009a92:	2300      	movs	r3, #0
 8009a94:	9309      	str	r3, [sp, #36]	; 0x24
 8009a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc52      	bgt.n	8009b42 <_dtoa_r+0x312>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	920a      	str	r2, [sp, #40]	; 0x28
 8009aa6:	e00b      	b.n	8009ac0 <_dtoa_r+0x290>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e7f3      	b.n	8009a94 <_dtoa_r+0x264>
 8009aac:	2300      	movs	r3, #0
 8009aae:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab2:	445b      	add	r3, fp
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	bfb8      	it	lt
 8009abe:	2301      	movlt	r3, #1
 8009ac0:	69e0      	ldr	r0, [r4, #28]
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	f102 0614 	add.w	r6, r2, #20
 8009aca:	429e      	cmp	r6, r3
 8009acc:	d93d      	bls.n	8009b4a <_dtoa_r+0x31a>
 8009ace:	6041      	str	r1, [r0, #4]
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fd9f 	bl	800a614 <_Balloc>
 8009ad6:	9000      	str	r0, [sp, #0]
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d139      	bne.n	8009b50 <_dtoa_r+0x320>
 8009adc:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <_dtoa_r+0x308>)
 8009ade:	4602      	mov	r2, r0
 8009ae0:	f240 11af 	movw	r1, #431	; 0x1af
 8009ae4:	e6bd      	b.n	8009862 <_dtoa_r+0x32>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e7e1      	b.n	8009aae <_dtoa_r+0x27e>
 8009aea:	2501      	movs	r5, #1
 8009aec:	2300      	movs	r3, #0
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	9509      	str	r5, [sp, #36]	; 0x24
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	2200      	movs	r2, #0
 8009afc:	2312      	movs	r3, #18
 8009afe:	e7d1      	b.n	8009aa4 <_dtoa_r+0x274>
 8009b00:	636f4361 	.word	0x636f4361
 8009b04:	3fd287a7 	.word	0x3fd287a7
 8009b08:	8b60c8b3 	.word	0x8b60c8b3
 8009b0c:	3fc68a28 	.word	0x3fc68a28
 8009b10:	509f79fb 	.word	0x509f79fb
 8009b14:	3fd34413 	.word	0x3fd34413
 8009b18:	0800d002 	.word	0x0800d002
 8009b1c:	0800d019 	.word	0x0800d019
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	0800cffe 	.word	0x0800cffe
 8009b28:	0800cff5 	.word	0x0800cff5
 8009b2c:	0800cfcd 	.word	0x0800cfcd
 8009b30:	3ff80000 	.word	0x3ff80000
 8009b34:	0800d108 	.word	0x0800d108
 8009b38:	0800d071 	.word	0x0800d071
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b40:	e7d7      	b.n	8009af2 <_dtoa_r+0x2c2>
 8009b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b44:	9301      	str	r3, [sp, #4]
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	e7ba      	b.n	8009ac0 <_dtoa_r+0x290>
 8009b4a:	3101      	adds	r1, #1
 8009b4c:	0052      	lsls	r2, r2, #1
 8009b4e:	e7ba      	b.n	8009ac6 <_dtoa_r+0x296>
 8009b50:	69e3      	ldr	r3, [r4, #28]
 8009b52:	9a00      	ldr	r2, [sp, #0]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	2b0e      	cmp	r3, #14
 8009b5a:	f200 80a8 	bhi.w	8009cae <_dtoa_r+0x47e>
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	f000 80a5 	beq.w	8009cae <_dtoa_r+0x47e>
 8009b64:	f1bb 0f00 	cmp.w	fp, #0
 8009b68:	dd38      	ble.n	8009bdc <_dtoa_r+0x3ac>
 8009b6a:	4bc0      	ldr	r3, [pc, #768]	; (8009e6c <_dtoa_r+0x63c>)
 8009b6c:	f00b 020f 	and.w	r2, fp, #15
 8009b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b78:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009b80:	d019      	beq.n	8009bb6 <_dtoa_r+0x386>
 8009b82:	4bbb      	ldr	r3, [pc, #748]	; (8009e70 <_dtoa_r+0x640>)
 8009b84:	ec51 0b18 	vmov	r0, r1, d8
 8009b88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b8c:	f7f6 fe66 	bl	800085c <__aeabi_ddiv>
 8009b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b94:	f008 080f 	and.w	r8, r8, #15
 8009b98:	2503      	movs	r5, #3
 8009b9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009e70 <_dtoa_r+0x640>
 8009b9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ba2:	d10a      	bne.n	8009bba <_dtoa_r+0x38a>
 8009ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba8:	4632      	mov	r2, r6
 8009baa:	463b      	mov	r3, r7
 8009bac:	f7f6 fe56 	bl	800085c <__aeabi_ddiv>
 8009bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bb4:	e02b      	b.n	8009c0e <_dtoa_r+0x3de>
 8009bb6:	2502      	movs	r5, #2
 8009bb8:	e7ef      	b.n	8009b9a <_dtoa_r+0x36a>
 8009bba:	f018 0f01 	tst.w	r8, #1
 8009bbe:	d008      	beq.n	8009bd2 <_dtoa_r+0x3a2>
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009bc8:	f7f6 fd1e 	bl	8000608 <__aeabi_dmul>
 8009bcc:	3501      	adds	r5, #1
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460f      	mov	r7, r1
 8009bd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009bd6:	f109 0908 	add.w	r9, r9, #8
 8009bda:	e7e0      	b.n	8009b9e <_dtoa_r+0x36e>
 8009bdc:	f000 809f 	beq.w	8009d1e <_dtoa_r+0x4ee>
 8009be0:	f1cb 0600 	rsb	r6, fp, #0
 8009be4:	4ba1      	ldr	r3, [pc, #644]	; (8009e6c <_dtoa_r+0x63c>)
 8009be6:	4fa2      	ldr	r7, [pc, #648]	; (8009e70 <_dtoa_r+0x640>)
 8009be8:	f006 020f 	and.w	r2, r6, #15
 8009bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	ec51 0b18 	vmov	r0, r1, d8
 8009bf8:	f7f6 fd06 	bl	8000608 <__aeabi_dmul>
 8009bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c00:	1136      	asrs	r6, r6, #4
 8009c02:	2300      	movs	r3, #0
 8009c04:	2502      	movs	r5, #2
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d17e      	bne.n	8009d08 <_dtoa_r+0x4d8>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1d0      	bne.n	8009bb0 <_dtoa_r+0x380>
 8009c0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 8084 	beq.w	8009d22 <_dtoa_r+0x4f2>
 8009c1a:	4b96      	ldr	r3, [pc, #600]	; (8009e74 <_dtoa_r+0x644>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f6 ff63 	bl	8000aec <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d07b      	beq.n	8009d22 <_dtoa_r+0x4f2>
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d078      	beq.n	8009d22 <_dtoa_r+0x4f2>
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	dd39      	ble.n	8009caa <_dtoa_r+0x47a>
 8009c36:	4b90      	ldr	r3, [pc, #576]	; (8009e78 <_dtoa_r+0x648>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fce3 	bl	8000608 <__aeabi_dmul>
 8009c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c46:	9e01      	ldr	r6, [sp, #4]
 8009c48:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7f6 fc6e 	bl	8000534 <__aeabi_i2d>
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	f7f6 fcd4 	bl	8000608 <__aeabi_dmul>
 8009c60:	4b86      	ldr	r3, [pc, #536]	; (8009e7c <_dtoa_r+0x64c>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	f7f6 fb1a 	bl	800029c <__adddf3>
 8009c68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	d158      	bne.n	8009d28 <_dtoa_r+0x4f8>
 8009c76:	4b82      	ldr	r3, [pc, #520]	; (8009e80 <_dtoa_r+0x650>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 fb0b 	bl	8000298 <__aeabi_dsub>
 8009c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c86:	4680      	mov	r8, r0
 8009c88:	4689      	mov	r9, r1
 8009c8a:	f7f6 ff4d 	bl	8000b28 <__aeabi_dcmpgt>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 8296 	bne.w	800a1c0 <_dtoa_r+0x990>
 8009c94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c98:	4640      	mov	r0, r8
 8009c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	f7f6 ff24 	bl	8000aec <__aeabi_dcmplt>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f040 8289 	bne.w	800a1bc <_dtoa_r+0x98c>
 8009caa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f2c0 814e 	blt.w	8009f52 <_dtoa_r+0x722>
 8009cb6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cba:	f300 814a 	bgt.w	8009f52 <_dtoa_r+0x722>
 8009cbe:	4b6b      	ldr	r3, [pc, #428]	; (8009e6c <_dtoa_r+0x63c>)
 8009cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f280 80dc 	bge.w	8009e88 <_dtoa_r+0x658>
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f300 80d8 	bgt.w	8009e88 <_dtoa_r+0x658>
 8009cd8:	f040 826f 	bne.w	800a1ba <_dtoa_r+0x98a>
 8009cdc:	4b68      	ldr	r3, [pc, #416]	; (8009e80 <_dtoa_r+0x650>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	f7f6 fc90 	bl	8000608 <__aeabi_dmul>
 8009ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cec:	f7f6 ff12 	bl	8000b14 <__aeabi_dcmpge>
 8009cf0:	9e04      	ldr	r6, [sp, #16]
 8009cf2:	4637      	mov	r7, r6
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f040 8245 	bne.w	800a184 <_dtoa_r+0x954>
 8009cfa:	9d00      	ldr	r5, [sp, #0]
 8009cfc:	2331      	movs	r3, #49	; 0x31
 8009cfe:	f805 3b01 	strb.w	r3, [r5], #1
 8009d02:	f10b 0b01 	add.w	fp, fp, #1
 8009d06:	e241      	b.n	800a18c <_dtoa_r+0x95c>
 8009d08:	07f2      	lsls	r2, r6, #31
 8009d0a:	d505      	bpl.n	8009d18 <_dtoa_r+0x4e8>
 8009d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d10:	f7f6 fc7a 	bl	8000608 <__aeabi_dmul>
 8009d14:	3501      	adds	r5, #1
 8009d16:	2301      	movs	r3, #1
 8009d18:	1076      	asrs	r6, r6, #1
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	e773      	b.n	8009c06 <_dtoa_r+0x3d6>
 8009d1e:	2502      	movs	r5, #2
 8009d20:	e775      	b.n	8009c0e <_dtoa_r+0x3de>
 8009d22:	9e04      	ldr	r6, [sp, #16]
 8009d24:	465f      	mov	r7, fp
 8009d26:	e792      	b.n	8009c4e <_dtoa_r+0x41e>
 8009d28:	9900      	ldr	r1, [sp, #0]
 8009d2a:	4b50      	ldr	r3, [pc, #320]	; (8009e6c <_dtoa_r+0x63c>)
 8009d2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d30:	4431      	add	r1, r6
 8009d32:	9102      	str	r1, [sp, #8]
 8009d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d36:	eeb0 9a47 	vmov.f32	s18, s14
 8009d3a:	eef0 9a67 	vmov.f32	s19, s15
 8009d3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d46:	2900      	cmp	r1, #0
 8009d48:	d044      	beq.n	8009dd4 <_dtoa_r+0x5a4>
 8009d4a:	494e      	ldr	r1, [pc, #312]	; (8009e84 <_dtoa_r+0x654>)
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	f7f6 fd85 	bl	800085c <__aeabi_ddiv>
 8009d52:	ec53 2b19 	vmov	r2, r3, d9
 8009d56:	f7f6 fa9f 	bl	8000298 <__aeabi_dsub>
 8009d5a:	9d00      	ldr	r5, [sp, #0]
 8009d5c:	ec41 0b19 	vmov	d9, r0, r1
 8009d60:	4649      	mov	r1, r9
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7f6 ff00 	bl	8000b68 <__aeabi_d2iz>
 8009d68:	4606      	mov	r6, r0
 8009d6a:	f7f6 fbe3 	bl	8000534 <__aeabi_i2d>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4640      	mov	r0, r8
 8009d74:	4649      	mov	r1, r9
 8009d76:	f7f6 fa8f 	bl	8000298 <__aeabi_dsub>
 8009d7a:	3630      	adds	r6, #48	; 0x30
 8009d7c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d80:	ec53 2b19 	vmov	r2, r3, d9
 8009d84:	4680      	mov	r8, r0
 8009d86:	4689      	mov	r9, r1
 8009d88:	f7f6 feb0 	bl	8000aec <__aeabi_dcmplt>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d164      	bne.n	8009e5a <_dtoa_r+0x62a>
 8009d90:	4642      	mov	r2, r8
 8009d92:	464b      	mov	r3, r9
 8009d94:	4937      	ldr	r1, [pc, #220]	; (8009e74 <_dtoa_r+0x644>)
 8009d96:	2000      	movs	r0, #0
 8009d98:	f7f6 fa7e 	bl	8000298 <__aeabi_dsub>
 8009d9c:	ec53 2b19 	vmov	r2, r3, d9
 8009da0:	f7f6 fea4 	bl	8000aec <__aeabi_dcmplt>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f040 80b6 	bne.w	8009f16 <_dtoa_r+0x6e6>
 8009daa:	9b02      	ldr	r3, [sp, #8]
 8009dac:	429d      	cmp	r5, r3
 8009dae:	f43f af7c 	beq.w	8009caa <_dtoa_r+0x47a>
 8009db2:	4b31      	ldr	r3, [pc, #196]	; (8009e78 <_dtoa_r+0x648>)
 8009db4:	ec51 0b19 	vmov	r0, r1, d9
 8009db8:	2200      	movs	r2, #0
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	4b2e      	ldr	r3, [pc, #184]	; (8009e78 <_dtoa_r+0x648>)
 8009dc0:	ec41 0b19 	vmov	d9, r0, r1
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	4649      	mov	r1, r9
 8009dca:	f7f6 fc1d 	bl	8000608 <__aeabi_dmul>
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4689      	mov	r9, r1
 8009dd2:	e7c5      	b.n	8009d60 <_dtoa_r+0x530>
 8009dd4:	ec51 0b17 	vmov	r0, r1, d7
 8009dd8:	f7f6 fc16 	bl	8000608 <__aeabi_dmul>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	9d00      	ldr	r5, [sp, #0]
 8009de0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de2:	ec41 0b19 	vmov	d9, r0, r1
 8009de6:	4649      	mov	r1, r9
 8009de8:	4640      	mov	r0, r8
 8009dea:	f7f6 febd 	bl	8000b68 <__aeabi_d2iz>
 8009dee:	4606      	mov	r6, r0
 8009df0:	f7f6 fba0 	bl	8000534 <__aeabi_i2d>
 8009df4:	3630      	adds	r6, #48	; 0x30
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	f7f6 fa4b 	bl	8000298 <__aeabi_dsub>
 8009e02:	f805 6b01 	strb.w	r6, [r5], #1
 8009e06:	9b02      	ldr	r3, [sp, #8]
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	4689      	mov	r9, r1
 8009e0e:	f04f 0200 	mov.w	r2, #0
 8009e12:	d124      	bne.n	8009e5e <_dtoa_r+0x62e>
 8009e14:	4b1b      	ldr	r3, [pc, #108]	; (8009e84 <_dtoa_r+0x654>)
 8009e16:	ec51 0b19 	vmov	r0, r1, d9
 8009e1a:	f7f6 fa3f 	bl	800029c <__adddf3>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f7f6 fe7f 	bl	8000b28 <__aeabi_dcmpgt>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d173      	bne.n	8009f16 <_dtoa_r+0x6e6>
 8009e2e:	ec53 2b19 	vmov	r2, r3, d9
 8009e32:	4914      	ldr	r1, [pc, #80]	; (8009e84 <_dtoa_r+0x654>)
 8009e34:	2000      	movs	r0, #0
 8009e36:	f7f6 fa2f 	bl	8000298 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 fe53 	bl	8000aec <__aeabi_dcmplt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f af2f 	beq.w	8009caa <_dtoa_r+0x47a>
 8009e4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e4e:	1e6b      	subs	r3, r5, #1
 8009e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e56:	2b30      	cmp	r3, #48	; 0x30
 8009e58:	d0f8      	beq.n	8009e4c <_dtoa_r+0x61c>
 8009e5a:	46bb      	mov	fp, r7
 8009e5c:	e04a      	b.n	8009ef4 <_dtoa_r+0x6c4>
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <_dtoa_r+0x648>)
 8009e60:	f7f6 fbd2 	bl	8000608 <__aeabi_dmul>
 8009e64:	4680      	mov	r8, r0
 8009e66:	4689      	mov	r9, r1
 8009e68:	e7bd      	b.n	8009de6 <_dtoa_r+0x5b6>
 8009e6a:	bf00      	nop
 8009e6c:	0800d108 	.word	0x0800d108
 8009e70:	0800d0e0 	.word	0x0800d0e0
 8009e74:	3ff00000 	.word	0x3ff00000
 8009e78:	40240000 	.word	0x40240000
 8009e7c:	401c0000 	.word	0x401c0000
 8009e80:	40140000 	.word	0x40140000
 8009e84:	3fe00000 	.word	0x3fe00000
 8009e88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e8c:	9d00      	ldr	r5, [sp, #0]
 8009e8e:	4642      	mov	r2, r8
 8009e90:	464b      	mov	r3, r9
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 fce1 	bl	800085c <__aeabi_ddiv>
 8009e9a:	f7f6 fe65 	bl	8000b68 <__aeabi_d2iz>
 8009e9e:	9001      	str	r0, [sp, #4]
 8009ea0:	f7f6 fb48 	bl	8000534 <__aeabi_i2d>
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	f7f6 fbae 	bl	8000608 <__aeabi_dmul>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	f7f6 f9f0 	bl	8000298 <__aeabi_dsub>
 8009eb8:	9e01      	ldr	r6, [sp, #4]
 8009eba:	9f04      	ldr	r7, [sp, #16]
 8009ebc:	3630      	adds	r6, #48	; 0x30
 8009ebe:	f805 6b01 	strb.w	r6, [r5], #1
 8009ec2:	9e00      	ldr	r6, [sp, #0]
 8009ec4:	1bae      	subs	r6, r5, r6
 8009ec6:	42b7      	cmp	r7, r6
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	d134      	bne.n	8009f38 <_dtoa_r+0x708>
 8009ece:	f7f6 f9e5 	bl	800029c <__adddf3>
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	460f      	mov	r7, r1
 8009eda:	f7f6 fe25 	bl	8000b28 <__aeabi_dcmpgt>
 8009ede:	b9c8      	cbnz	r0, 8009f14 <_dtoa_r+0x6e4>
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	464b      	mov	r3, r9
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	f7f6 fdf6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eec:	b110      	cbz	r0, 8009ef4 <_dtoa_r+0x6c4>
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	07db      	lsls	r3, r3, #31
 8009ef2:	d40f      	bmi.n	8009f14 <_dtoa_r+0x6e4>
 8009ef4:	4651      	mov	r1, sl
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 fbcc 	bl	800a694 <_Bfree>
 8009efc:	2300      	movs	r3, #0
 8009efe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f00:	702b      	strb	r3, [r5, #0]
 8009f02:	f10b 0301 	add.w	r3, fp, #1
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f43f ace2 	beq.w	80098d4 <_dtoa_r+0xa4>
 8009f10:	601d      	str	r5, [r3, #0]
 8009f12:	e4df      	b.n	80098d4 <_dtoa_r+0xa4>
 8009f14:	465f      	mov	r7, fp
 8009f16:	462b      	mov	r3, r5
 8009f18:	461d      	mov	r5, r3
 8009f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f1e:	2a39      	cmp	r2, #57	; 0x39
 8009f20:	d106      	bne.n	8009f30 <_dtoa_r+0x700>
 8009f22:	9a00      	ldr	r2, [sp, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d1f7      	bne.n	8009f18 <_dtoa_r+0x6e8>
 8009f28:	9900      	ldr	r1, [sp, #0]
 8009f2a:	2230      	movs	r2, #48	; 0x30
 8009f2c:	3701      	adds	r7, #1
 8009f2e:	700a      	strb	r2, [r1, #0]
 8009f30:	781a      	ldrb	r2, [r3, #0]
 8009f32:	3201      	adds	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e790      	b.n	8009e5a <_dtoa_r+0x62a>
 8009f38:	4ba3      	ldr	r3, [pc, #652]	; (800a1c8 <_dtoa_r+0x998>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f7f6 fb64 	bl	8000608 <__aeabi_dmul>
 8009f40:	2200      	movs	r2, #0
 8009f42:	2300      	movs	r3, #0
 8009f44:	4606      	mov	r6, r0
 8009f46:	460f      	mov	r7, r1
 8009f48:	f7f6 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d09e      	beq.n	8009e8e <_dtoa_r+0x65e>
 8009f50:	e7d0      	b.n	8009ef4 <_dtoa_r+0x6c4>
 8009f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	f000 80ca 	beq.w	800a0ee <_dtoa_r+0x8be>
 8009f5a:	9a07      	ldr	r2, [sp, #28]
 8009f5c:	2a01      	cmp	r2, #1
 8009f5e:	f300 80ad 	bgt.w	800a0bc <_dtoa_r+0x88c>
 8009f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	f000 80a5 	beq.w	800a0b4 <_dtoa_r+0x884>
 8009f6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f6e:	9e08      	ldr	r6, [sp, #32]
 8009f70:	9d05      	ldr	r5, [sp, #20]
 8009f72:	9a05      	ldr	r2, [sp, #20]
 8009f74:	441a      	add	r2, r3
 8009f76:	9205      	str	r2, [sp, #20]
 8009f78:	9a06      	ldr	r2, [sp, #24]
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	441a      	add	r2, r3
 8009f7e:	4620      	mov	r0, r4
 8009f80:	9206      	str	r2, [sp, #24]
 8009f82:	f000 fc87 	bl	800a894 <__i2b>
 8009f86:	4607      	mov	r7, r0
 8009f88:	b165      	cbz	r5, 8009fa4 <_dtoa_r+0x774>
 8009f8a:	9b06      	ldr	r3, [sp, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dd09      	ble.n	8009fa4 <_dtoa_r+0x774>
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	9a05      	ldr	r2, [sp, #20]
 8009f94:	bfa8      	it	ge
 8009f96:	462b      	movge	r3, r5
 8009f98:	1ad2      	subs	r2, r2, r3
 8009f9a:	9205      	str	r2, [sp, #20]
 8009f9c:	9a06      	ldr	r2, [sp, #24]
 8009f9e:	1aed      	subs	r5, r5, r3
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	9306      	str	r3, [sp, #24]
 8009fa4:	9b08      	ldr	r3, [sp, #32]
 8009fa6:	b1f3      	cbz	r3, 8009fe6 <_dtoa_r+0x7b6>
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 80a3 	beq.w	800a0f6 <_dtoa_r+0x8c6>
 8009fb0:	2e00      	cmp	r6, #0
 8009fb2:	dd10      	ble.n	8009fd6 <_dtoa_r+0x7a6>
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 fd2b 	bl	800aa14 <__pow5mult>
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fc7b 	bl	800a8c0 <__multiply>
 8009fca:	4651      	mov	r1, sl
 8009fcc:	4680      	mov	r8, r0
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 fb60 	bl	800a694 <_Bfree>
 8009fd4:	46c2      	mov	sl, r8
 8009fd6:	9b08      	ldr	r3, [sp, #32]
 8009fd8:	1b9a      	subs	r2, r3, r6
 8009fda:	d004      	beq.n	8009fe6 <_dtoa_r+0x7b6>
 8009fdc:	4651      	mov	r1, sl
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fd18 	bl	800aa14 <__pow5mult>
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fc53 	bl	800a894 <__i2b>
 8009fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	f340 8081 	ble.w	800a0fa <_dtoa_r+0x8ca>
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4601      	mov	r1, r0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f000 fd09 	bl	800aa14 <__pow5mult>
 800a002:	9b07      	ldr	r3, [sp, #28]
 800a004:	2b01      	cmp	r3, #1
 800a006:	4606      	mov	r6, r0
 800a008:	dd7a      	ble.n	800a100 <_dtoa_r+0x8d0>
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	6933      	ldr	r3, [r6, #16]
 800a010:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a014:	6918      	ldr	r0, [r3, #16]
 800a016:	f000 fbef 	bl	800a7f8 <__hi0bits>
 800a01a:	f1c0 0020 	rsb	r0, r0, #32
 800a01e:	9b06      	ldr	r3, [sp, #24]
 800a020:	4418      	add	r0, r3
 800a022:	f010 001f 	ands.w	r0, r0, #31
 800a026:	f000 8094 	beq.w	800a152 <_dtoa_r+0x922>
 800a02a:	f1c0 0320 	rsb	r3, r0, #32
 800a02e:	2b04      	cmp	r3, #4
 800a030:	f340 8085 	ble.w	800a13e <_dtoa_r+0x90e>
 800a034:	9b05      	ldr	r3, [sp, #20]
 800a036:	f1c0 001c 	rsb	r0, r0, #28
 800a03a:	4403      	add	r3, r0
 800a03c:	9305      	str	r3, [sp, #20]
 800a03e:	9b06      	ldr	r3, [sp, #24]
 800a040:	4403      	add	r3, r0
 800a042:	4405      	add	r5, r0
 800a044:	9306      	str	r3, [sp, #24]
 800a046:	9b05      	ldr	r3, [sp, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	dd05      	ble.n	800a058 <_dtoa_r+0x828>
 800a04c:	4651      	mov	r1, sl
 800a04e:	461a      	mov	r2, r3
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fd39 	bl	800aac8 <__lshift>
 800a056:	4682      	mov	sl, r0
 800a058:	9b06      	ldr	r3, [sp, #24]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dd05      	ble.n	800a06a <_dtoa_r+0x83a>
 800a05e:	4631      	mov	r1, r6
 800a060:	461a      	mov	r2, r3
 800a062:	4620      	mov	r0, r4
 800a064:	f000 fd30 	bl	800aac8 <__lshift>
 800a068:	4606      	mov	r6, r0
 800a06a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d072      	beq.n	800a156 <_dtoa_r+0x926>
 800a070:	4631      	mov	r1, r6
 800a072:	4650      	mov	r0, sl
 800a074:	f000 fd94 	bl	800aba0 <__mcmp>
 800a078:	2800      	cmp	r0, #0
 800a07a:	da6c      	bge.n	800a156 <_dtoa_r+0x926>
 800a07c:	2300      	movs	r3, #0
 800a07e:	4651      	mov	r1, sl
 800a080:	220a      	movs	r2, #10
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fb28 	bl	800a6d8 <__multadd>
 800a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a08e:	4682      	mov	sl, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 81b0 	beq.w	800a3f6 <_dtoa_r+0xbc6>
 800a096:	2300      	movs	r3, #0
 800a098:	4639      	mov	r1, r7
 800a09a:	220a      	movs	r2, #10
 800a09c:	4620      	mov	r0, r4
 800a09e:	f000 fb1b 	bl	800a6d8 <__multadd>
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	f300 8096 	bgt.w	800a1d8 <_dtoa_r+0x9a8>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	dc59      	bgt.n	800a166 <_dtoa_r+0x936>
 800a0b2:	e091      	b.n	800a1d8 <_dtoa_r+0x9a8>
 800a0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ba:	e758      	b.n	8009f6e <_dtoa_r+0x73e>
 800a0bc:	9b04      	ldr	r3, [sp, #16]
 800a0be:	1e5e      	subs	r6, r3, #1
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	42b3      	cmp	r3, r6
 800a0c4:	bfbf      	itttt	lt
 800a0c6:	9b08      	ldrlt	r3, [sp, #32]
 800a0c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a0ca:	9608      	strlt	r6, [sp, #32]
 800a0cc:	1af3      	sublt	r3, r6, r3
 800a0ce:	bfb4      	ite	lt
 800a0d0:	18d2      	addlt	r2, r2, r3
 800a0d2:	1b9e      	subge	r6, r3, r6
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	bfbc      	itt	lt
 800a0d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a0da:	2600      	movlt	r6, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfb7      	itett	lt
 800a0e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a0e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a0e8:	1a9d      	sublt	r5, r3, r2
 800a0ea:	2300      	movlt	r3, #0
 800a0ec:	e741      	b.n	8009f72 <_dtoa_r+0x742>
 800a0ee:	9e08      	ldr	r6, [sp, #32]
 800a0f0:	9d05      	ldr	r5, [sp, #20]
 800a0f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0f4:	e748      	b.n	8009f88 <_dtoa_r+0x758>
 800a0f6:	9a08      	ldr	r2, [sp, #32]
 800a0f8:	e770      	b.n	8009fdc <_dtoa_r+0x7ac>
 800a0fa:	9b07      	ldr	r3, [sp, #28]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	dc19      	bgt.n	800a134 <_dtoa_r+0x904>
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	b9bb      	cbnz	r3, 800a134 <_dtoa_r+0x904>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a10a:	b99b      	cbnz	r3, 800a134 <_dtoa_r+0x904>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a112:	0d1b      	lsrs	r3, r3, #20
 800a114:	051b      	lsls	r3, r3, #20
 800a116:	b183      	cbz	r3, 800a13a <_dtoa_r+0x90a>
 800a118:	9b05      	ldr	r3, [sp, #20]
 800a11a:	3301      	adds	r3, #1
 800a11c:	9305      	str	r3, [sp, #20]
 800a11e:	9b06      	ldr	r3, [sp, #24]
 800a120:	3301      	adds	r3, #1
 800a122:	9306      	str	r3, [sp, #24]
 800a124:	f04f 0801 	mov.w	r8, #1
 800a128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f47f af6f 	bne.w	800a00e <_dtoa_r+0x7de>
 800a130:	2001      	movs	r0, #1
 800a132:	e774      	b.n	800a01e <_dtoa_r+0x7ee>
 800a134:	f04f 0800 	mov.w	r8, #0
 800a138:	e7f6      	b.n	800a128 <_dtoa_r+0x8f8>
 800a13a:	4698      	mov	r8, r3
 800a13c:	e7f4      	b.n	800a128 <_dtoa_r+0x8f8>
 800a13e:	d082      	beq.n	800a046 <_dtoa_r+0x816>
 800a140:	9a05      	ldr	r2, [sp, #20]
 800a142:	331c      	adds	r3, #28
 800a144:	441a      	add	r2, r3
 800a146:	9205      	str	r2, [sp, #20]
 800a148:	9a06      	ldr	r2, [sp, #24]
 800a14a:	441a      	add	r2, r3
 800a14c:	441d      	add	r5, r3
 800a14e:	9206      	str	r2, [sp, #24]
 800a150:	e779      	b.n	800a046 <_dtoa_r+0x816>
 800a152:	4603      	mov	r3, r0
 800a154:	e7f4      	b.n	800a140 <_dtoa_r+0x910>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dc37      	bgt.n	800a1cc <_dtoa_r+0x99c>
 800a15c:	9b07      	ldr	r3, [sp, #28]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	dd34      	ble.n	800a1cc <_dtoa_r+0x99c>
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	b963      	cbnz	r3, 800a184 <_dtoa_r+0x954>
 800a16a:	4631      	mov	r1, r6
 800a16c:	2205      	movs	r2, #5
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 fab2 	bl	800a6d8 <__multadd>
 800a174:	4601      	mov	r1, r0
 800a176:	4606      	mov	r6, r0
 800a178:	4650      	mov	r0, sl
 800a17a:	f000 fd11 	bl	800aba0 <__mcmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	f73f adbb 	bgt.w	8009cfa <_dtoa_r+0x4ca>
 800a184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a186:	9d00      	ldr	r5, [sp, #0]
 800a188:	ea6f 0b03 	mvn.w	fp, r3
 800a18c:	f04f 0800 	mov.w	r8, #0
 800a190:	4631      	mov	r1, r6
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fa7e 	bl	800a694 <_Bfree>
 800a198:	2f00      	cmp	r7, #0
 800a19a:	f43f aeab 	beq.w	8009ef4 <_dtoa_r+0x6c4>
 800a19e:	f1b8 0f00 	cmp.w	r8, #0
 800a1a2:	d005      	beq.n	800a1b0 <_dtoa_r+0x980>
 800a1a4:	45b8      	cmp	r8, r7
 800a1a6:	d003      	beq.n	800a1b0 <_dtoa_r+0x980>
 800a1a8:	4641      	mov	r1, r8
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fa72 	bl	800a694 <_Bfree>
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fa6e 	bl	800a694 <_Bfree>
 800a1b8:	e69c      	b.n	8009ef4 <_dtoa_r+0x6c4>
 800a1ba:	2600      	movs	r6, #0
 800a1bc:	4637      	mov	r7, r6
 800a1be:	e7e1      	b.n	800a184 <_dtoa_r+0x954>
 800a1c0:	46bb      	mov	fp, r7
 800a1c2:	4637      	mov	r7, r6
 800a1c4:	e599      	b.n	8009cfa <_dtoa_r+0x4ca>
 800a1c6:	bf00      	nop
 800a1c8:	40240000 	.word	0x40240000
 800a1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80c8 	beq.w	800a364 <_dtoa_r+0xb34>
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	2d00      	cmp	r5, #0
 800a1da:	dd05      	ble.n	800a1e8 <_dtoa_r+0x9b8>
 800a1dc:	4639      	mov	r1, r7
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fc71 	bl	800aac8 <__lshift>
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ec:	d05b      	beq.n	800a2a6 <_dtoa_r+0xa76>
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fa0f 	bl	800a614 <_Balloc>
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <_dtoa_r+0x9d6>
 800a1fa:	4b83      	ldr	r3, [pc, #524]	; (800a408 <_dtoa_r+0xbd8>)
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a202:	f7ff bb2e 	b.w	8009862 <_dtoa_r+0x32>
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	3202      	adds	r2, #2
 800a20a:	0092      	lsls	r2, r2, #2
 800a20c:	f107 010c 	add.w	r1, r7, #12
 800a210:	300c      	adds	r0, #12
 800a212:	f7ff fa70 	bl	80096f6 <memcpy>
 800a216:	2201      	movs	r2, #1
 800a218:	4629      	mov	r1, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 fc54 	bl	800aac8 <__lshift>
 800a220:	9b00      	ldr	r3, [sp, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	9304      	str	r3, [sp, #16]
 800a226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a22a:	4413      	add	r3, r2
 800a22c:	9308      	str	r3, [sp, #32]
 800a22e:	9b02      	ldr	r3, [sp, #8]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	46b8      	mov	r8, r7
 800a236:	9306      	str	r3, [sp, #24]
 800a238:	4607      	mov	r7, r0
 800a23a:	9b04      	ldr	r3, [sp, #16]
 800a23c:	4631      	mov	r1, r6
 800a23e:	3b01      	subs	r3, #1
 800a240:	4650      	mov	r0, sl
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	f7ff fa6c 	bl	8009720 <quorem>
 800a248:	4641      	mov	r1, r8
 800a24a:	9002      	str	r0, [sp, #8]
 800a24c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a250:	4650      	mov	r0, sl
 800a252:	f000 fca5 	bl	800aba0 <__mcmp>
 800a256:	463a      	mov	r2, r7
 800a258:	9005      	str	r0, [sp, #20]
 800a25a:	4631      	mov	r1, r6
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 fcbb 	bl	800abd8 <__mdiff>
 800a262:	68c2      	ldr	r2, [r0, #12]
 800a264:	4605      	mov	r5, r0
 800a266:	bb02      	cbnz	r2, 800a2aa <_dtoa_r+0xa7a>
 800a268:	4601      	mov	r1, r0
 800a26a:	4650      	mov	r0, sl
 800a26c:	f000 fc98 	bl	800aba0 <__mcmp>
 800a270:	4602      	mov	r2, r0
 800a272:	4629      	mov	r1, r5
 800a274:	4620      	mov	r0, r4
 800a276:	9209      	str	r2, [sp, #36]	; 0x24
 800a278:	f000 fa0c 	bl	800a694 <_Bfree>
 800a27c:	9b07      	ldr	r3, [sp, #28]
 800a27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a280:	9d04      	ldr	r5, [sp, #16]
 800a282:	ea43 0102 	orr.w	r1, r3, r2
 800a286:	9b06      	ldr	r3, [sp, #24]
 800a288:	4319      	orrs	r1, r3
 800a28a:	d110      	bne.n	800a2ae <_dtoa_r+0xa7e>
 800a28c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a290:	d029      	beq.n	800a2e6 <_dtoa_r+0xab6>
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd02      	ble.n	800a29e <_dtoa_r+0xa6e>
 800a298:	9b02      	ldr	r3, [sp, #8]
 800a29a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	f883 9000 	strb.w	r9, [r3]
 800a2a4:	e774      	b.n	800a190 <_dtoa_r+0x960>
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	e7ba      	b.n	800a220 <_dtoa_r+0x9f0>
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	e7e1      	b.n	800a272 <_dtoa_r+0xa42>
 800a2ae:	9b05      	ldr	r3, [sp, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	db04      	blt.n	800a2be <_dtoa_r+0xa8e>
 800a2b4:	9907      	ldr	r1, [sp, #28]
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	9906      	ldr	r1, [sp, #24]
 800a2ba:	430b      	orrs	r3, r1
 800a2bc:	d120      	bne.n	800a300 <_dtoa_r+0xad0>
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	dded      	ble.n	800a29e <_dtoa_r+0xa6e>
 800a2c2:	4651      	mov	r1, sl
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fbfe 	bl	800aac8 <__lshift>
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4682      	mov	sl, r0
 800a2d0:	f000 fc66 	bl	800aba0 <__mcmp>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	dc03      	bgt.n	800a2e0 <_dtoa_r+0xab0>
 800a2d8:	d1e1      	bne.n	800a29e <_dtoa_r+0xa6e>
 800a2da:	f019 0f01 	tst.w	r9, #1
 800a2de:	d0de      	beq.n	800a29e <_dtoa_r+0xa6e>
 800a2e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2e4:	d1d8      	bne.n	800a298 <_dtoa_r+0xa68>
 800a2e6:	9a01      	ldr	r2, [sp, #4]
 800a2e8:	2339      	movs	r3, #57	; 0x39
 800a2ea:	7013      	strb	r3, [r2, #0]
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	461d      	mov	r5, r3
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2f6:	2a39      	cmp	r2, #57	; 0x39
 800a2f8:	d06c      	beq.n	800a3d4 <_dtoa_r+0xba4>
 800a2fa:	3201      	adds	r2, #1
 800a2fc:	701a      	strb	r2, [r3, #0]
 800a2fe:	e747      	b.n	800a190 <_dtoa_r+0x960>
 800a300:	2a00      	cmp	r2, #0
 800a302:	dd07      	ble.n	800a314 <_dtoa_r+0xae4>
 800a304:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a308:	d0ed      	beq.n	800a2e6 <_dtoa_r+0xab6>
 800a30a:	9a01      	ldr	r2, [sp, #4]
 800a30c:	f109 0301 	add.w	r3, r9, #1
 800a310:	7013      	strb	r3, [r2, #0]
 800a312:	e73d      	b.n	800a190 <_dtoa_r+0x960>
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	9a08      	ldr	r2, [sp, #32]
 800a318:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d043      	beq.n	800a3a8 <_dtoa_r+0xb78>
 800a320:	4651      	mov	r1, sl
 800a322:	2300      	movs	r3, #0
 800a324:	220a      	movs	r2, #10
 800a326:	4620      	mov	r0, r4
 800a328:	f000 f9d6 	bl	800a6d8 <__multadd>
 800a32c:	45b8      	cmp	r8, r7
 800a32e:	4682      	mov	sl, r0
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	f04f 020a 	mov.w	r2, #10
 800a338:	4641      	mov	r1, r8
 800a33a:	4620      	mov	r0, r4
 800a33c:	d107      	bne.n	800a34e <_dtoa_r+0xb1e>
 800a33e:	f000 f9cb 	bl	800a6d8 <__multadd>
 800a342:	4680      	mov	r8, r0
 800a344:	4607      	mov	r7, r0
 800a346:	9b04      	ldr	r3, [sp, #16]
 800a348:	3301      	adds	r3, #1
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	e775      	b.n	800a23a <_dtoa_r+0xa0a>
 800a34e:	f000 f9c3 	bl	800a6d8 <__multadd>
 800a352:	4639      	mov	r1, r7
 800a354:	4680      	mov	r8, r0
 800a356:	2300      	movs	r3, #0
 800a358:	220a      	movs	r2, #10
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 f9bc 	bl	800a6d8 <__multadd>
 800a360:	4607      	mov	r7, r0
 800a362:	e7f0      	b.n	800a346 <_dtoa_r+0xb16>
 800a364:	9b04      	ldr	r3, [sp, #16]
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	9d00      	ldr	r5, [sp, #0]
 800a36a:	4631      	mov	r1, r6
 800a36c:	4650      	mov	r0, sl
 800a36e:	f7ff f9d7 	bl	8009720 <quorem>
 800a372:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a376:	9b00      	ldr	r3, [sp, #0]
 800a378:	f805 9b01 	strb.w	r9, [r5], #1
 800a37c:	1aea      	subs	r2, r5, r3
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	4293      	cmp	r3, r2
 800a382:	dd07      	ble.n	800a394 <_dtoa_r+0xb64>
 800a384:	4651      	mov	r1, sl
 800a386:	2300      	movs	r3, #0
 800a388:	220a      	movs	r2, #10
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 f9a4 	bl	800a6d8 <__multadd>
 800a390:	4682      	mov	sl, r0
 800a392:	e7ea      	b.n	800a36a <_dtoa_r+0xb3a>
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	bfc8      	it	gt
 800a39a:	461d      	movgt	r5, r3
 800a39c:	9b00      	ldr	r3, [sp, #0]
 800a39e:	bfd8      	it	le
 800a3a0:	2501      	movle	r5, #1
 800a3a2:	441d      	add	r5, r3
 800a3a4:	f04f 0800 	mov.w	r8, #0
 800a3a8:	4651      	mov	r1, sl
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 fb8b 	bl	800aac8 <__lshift>
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4682      	mov	sl, r0
 800a3b6:	f000 fbf3 	bl	800aba0 <__mcmp>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	dc96      	bgt.n	800a2ec <_dtoa_r+0xabc>
 800a3be:	d102      	bne.n	800a3c6 <_dtoa_r+0xb96>
 800a3c0:	f019 0f01 	tst.w	r9, #1
 800a3c4:	d192      	bne.n	800a2ec <_dtoa_r+0xabc>
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	461d      	mov	r5, r3
 800a3ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ce:	2a30      	cmp	r2, #48	; 0x30
 800a3d0:	d0fa      	beq.n	800a3c8 <_dtoa_r+0xb98>
 800a3d2:	e6dd      	b.n	800a190 <_dtoa_r+0x960>
 800a3d4:	9a00      	ldr	r2, [sp, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d189      	bne.n	800a2ee <_dtoa_r+0xabe>
 800a3da:	f10b 0b01 	add.w	fp, fp, #1
 800a3de:	2331      	movs	r3, #49	; 0x31
 800a3e0:	e796      	b.n	800a310 <_dtoa_r+0xae0>
 800a3e2:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <_dtoa_r+0xbdc>)
 800a3e4:	f7ff ba99 	b.w	800991a <_dtoa_r+0xea>
 800a3e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f47f aa6d 	bne.w	80098ca <_dtoa_r+0x9a>
 800a3f0:	4b07      	ldr	r3, [pc, #28]	; (800a410 <_dtoa_r+0xbe0>)
 800a3f2:	f7ff ba92 	b.w	800991a <_dtoa_r+0xea>
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dcb5      	bgt.n	800a368 <_dtoa_r+0xb38>
 800a3fc:	9b07      	ldr	r3, [sp, #28]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	f73f aeb1 	bgt.w	800a166 <_dtoa_r+0x936>
 800a404:	e7b0      	b.n	800a368 <_dtoa_r+0xb38>
 800a406:	bf00      	nop
 800a408:	0800d071 	.word	0x0800d071
 800a40c:	0800cfcc 	.word	0x0800cfcc
 800a410:	0800cff5 	.word	0x0800cff5

0800a414 <_free_r>:
 800a414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a416:	2900      	cmp	r1, #0
 800a418:	d044      	beq.n	800a4a4 <_free_r+0x90>
 800a41a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41e:	9001      	str	r0, [sp, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f1a1 0404 	sub.w	r4, r1, #4
 800a426:	bfb8      	it	lt
 800a428:	18e4      	addlt	r4, r4, r3
 800a42a:	f000 f8e7 	bl	800a5fc <__malloc_lock>
 800a42e:	4a1e      	ldr	r2, [pc, #120]	; (800a4a8 <_free_r+0x94>)
 800a430:	9801      	ldr	r0, [sp, #4]
 800a432:	6813      	ldr	r3, [r2, #0]
 800a434:	b933      	cbnz	r3, 800a444 <_free_r+0x30>
 800a436:	6063      	str	r3, [r4, #4]
 800a438:	6014      	str	r4, [r2, #0]
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a440:	f000 b8e2 	b.w	800a608 <__malloc_unlock>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d908      	bls.n	800a45a <_free_r+0x46>
 800a448:	6825      	ldr	r5, [r4, #0]
 800a44a:	1961      	adds	r1, r4, r5
 800a44c:	428b      	cmp	r3, r1
 800a44e:	bf01      	itttt	eq
 800a450:	6819      	ldreq	r1, [r3, #0]
 800a452:	685b      	ldreq	r3, [r3, #4]
 800a454:	1949      	addeq	r1, r1, r5
 800a456:	6021      	streq	r1, [r4, #0]
 800a458:	e7ed      	b.n	800a436 <_free_r+0x22>
 800a45a:	461a      	mov	r2, r3
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	b10b      	cbz	r3, 800a464 <_free_r+0x50>
 800a460:	42a3      	cmp	r3, r4
 800a462:	d9fa      	bls.n	800a45a <_free_r+0x46>
 800a464:	6811      	ldr	r1, [r2, #0]
 800a466:	1855      	adds	r5, r2, r1
 800a468:	42a5      	cmp	r5, r4
 800a46a:	d10b      	bne.n	800a484 <_free_r+0x70>
 800a46c:	6824      	ldr	r4, [r4, #0]
 800a46e:	4421      	add	r1, r4
 800a470:	1854      	adds	r4, r2, r1
 800a472:	42a3      	cmp	r3, r4
 800a474:	6011      	str	r1, [r2, #0]
 800a476:	d1e0      	bne.n	800a43a <_free_r+0x26>
 800a478:	681c      	ldr	r4, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	6053      	str	r3, [r2, #4]
 800a47e:	440c      	add	r4, r1
 800a480:	6014      	str	r4, [r2, #0]
 800a482:	e7da      	b.n	800a43a <_free_r+0x26>
 800a484:	d902      	bls.n	800a48c <_free_r+0x78>
 800a486:	230c      	movs	r3, #12
 800a488:	6003      	str	r3, [r0, #0]
 800a48a:	e7d6      	b.n	800a43a <_free_r+0x26>
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	428b      	cmp	r3, r1
 800a492:	bf04      	itt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	6063      	str	r3, [r4, #4]
 800a49a:	bf04      	itt	eq
 800a49c:	1949      	addeq	r1, r1, r5
 800a49e:	6021      	streq	r1, [r4, #0]
 800a4a0:	6054      	str	r4, [r2, #4]
 800a4a2:	e7ca      	b.n	800a43a <_free_r+0x26>
 800a4a4:	b003      	add	sp, #12
 800a4a6:	bd30      	pop	{r4, r5, pc}
 800a4a8:	200016fc 	.word	0x200016fc

0800a4ac <malloc>:
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <malloc+0xc>)
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	f000 b823 	b.w	800a4fc <_malloc_r>
 800a4b6:	bf00      	nop
 800a4b8:	20000070 	.word	0x20000070

0800a4bc <sbrk_aligned>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	4e0e      	ldr	r6, [pc, #56]	; (800a4f8 <sbrk_aligned+0x3c>)
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	6831      	ldr	r1, [r6, #0]
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	b911      	cbnz	r1, 800a4ce <sbrk_aligned+0x12>
 800a4c8:	f001 fe1a 	bl	800c100 <_sbrk_r>
 800a4cc:	6030      	str	r0, [r6, #0]
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f001 fe15 	bl	800c100 <_sbrk_r>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d00a      	beq.n	800a4f0 <sbrk_aligned+0x34>
 800a4da:	1cc4      	adds	r4, r0, #3
 800a4dc:	f024 0403 	bic.w	r4, r4, #3
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d007      	beq.n	800a4f4 <sbrk_aligned+0x38>
 800a4e4:	1a21      	subs	r1, r4, r0
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f001 fe0a 	bl	800c100 <_sbrk_r>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d101      	bne.n	800a4f4 <sbrk_aligned+0x38>
 800a4f0:	f04f 34ff 	mov.w	r4, #4294967295
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	20001700 	.word	0x20001700

0800a4fc <_malloc_r>:
 800a4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a500:	1ccd      	adds	r5, r1, #3
 800a502:	f025 0503 	bic.w	r5, r5, #3
 800a506:	3508      	adds	r5, #8
 800a508:	2d0c      	cmp	r5, #12
 800a50a:	bf38      	it	cc
 800a50c:	250c      	movcc	r5, #12
 800a50e:	2d00      	cmp	r5, #0
 800a510:	4607      	mov	r7, r0
 800a512:	db01      	blt.n	800a518 <_malloc_r+0x1c>
 800a514:	42a9      	cmp	r1, r5
 800a516:	d905      	bls.n	800a524 <_malloc_r+0x28>
 800a518:	230c      	movs	r3, #12
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	2600      	movs	r6, #0
 800a51e:	4630      	mov	r0, r6
 800a520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a524:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5f8 <_malloc_r+0xfc>
 800a528:	f000 f868 	bl	800a5fc <__malloc_lock>
 800a52c:	f8d8 3000 	ldr.w	r3, [r8]
 800a530:	461c      	mov	r4, r3
 800a532:	bb5c      	cbnz	r4, 800a58c <_malloc_r+0x90>
 800a534:	4629      	mov	r1, r5
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ffc0 	bl	800a4bc <sbrk_aligned>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	4604      	mov	r4, r0
 800a540:	d155      	bne.n	800a5ee <_malloc_r+0xf2>
 800a542:	f8d8 4000 	ldr.w	r4, [r8]
 800a546:	4626      	mov	r6, r4
 800a548:	2e00      	cmp	r6, #0
 800a54a:	d145      	bne.n	800a5d8 <_malloc_r+0xdc>
 800a54c:	2c00      	cmp	r4, #0
 800a54e:	d048      	beq.n	800a5e2 <_malloc_r+0xe6>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	4631      	mov	r1, r6
 800a554:	4638      	mov	r0, r7
 800a556:	eb04 0903 	add.w	r9, r4, r3
 800a55a:	f001 fdd1 	bl	800c100 <_sbrk_r>
 800a55e:	4581      	cmp	r9, r0
 800a560:	d13f      	bne.n	800a5e2 <_malloc_r+0xe6>
 800a562:	6821      	ldr	r1, [r4, #0]
 800a564:	1a6d      	subs	r5, r5, r1
 800a566:	4629      	mov	r1, r5
 800a568:	4638      	mov	r0, r7
 800a56a:	f7ff ffa7 	bl	800a4bc <sbrk_aligned>
 800a56e:	3001      	adds	r0, #1
 800a570:	d037      	beq.n	800a5e2 <_malloc_r+0xe6>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	442b      	add	r3, r5
 800a576:	6023      	str	r3, [r4, #0]
 800a578:	f8d8 3000 	ldr.w	r3, [r8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d038      	beq.n	800a5f2 <_malloc_r+0xf6>
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	42a2      	cmp	r2, r4
 800a584:	d12b      	bne.n	800a5de <_malloc_r+0xe2>
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
 800a58a:	e00f      	b.n	800a5ac <_malloc_r+0xb0>
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	1b52      	subs	r2, r2, r5
 800a590:	d41f      	bmi.n	800a5d2 <_malloc_r+0xd6>
 800a592:	2a0b      	cmp	r2, #11
 800a594:	d917      	bls.n	800a5c6 <_malloc_r+0xca>
 800a596:	1961      	adds	r1, r4, r5
 800a598:	42a3      	cmp	r3, r4
 800a59a:	6025      	str	r5, [r4, #0]
 800a59c:	bf18      	it	ne
 800a59e:	6059      	strne	r1, [r3, #4]
 800a5a0:	6863      	ldr	r3, [r4, #4]
 800a5a2:	bf08      	it	eq
 800a5a4:	f8c8 1000 	streq.w	r1, [r8]
 800a5a8:	5162      	str	r2, [r4, r5]
 800a5aa:	604b      	str	r3, [r1, #4]
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f104 060b 	add.w	r6, r4, #11
 800a5b2:	f000 f829 	bl	800a608 <__malloc_unlock>
 800a5b6:	f026 0607 	bic.w	r6, r6, #7
 800a5ba:	1d23      	adds	r3, r4, #4
 800a5bc:	1af2      	subs	r2, r6, r3
 800a5be:	d0ae      	beq.n	800a51e <_malloc_r+0x22>
 800a5c0:	1b9b      	subs	r3, r3, r6
 800a5c2:	50a3      	str	r3, [r4, r2]
 800a5c4:	e7ab      	b.n	800a51e <_malloc_r+0x22>
 800a5c6:	42a3      	cmp	r3, r4
 800a5c8:	6862      	ldr	r2, [r4, #4]
 800a5ca:	d1dd      	bne.n	800a588 <_malloc_r+0x8c>
 800a5cc:	f8c8 2000 	str.w	r2, [r8]
 800a5d0:	e7ec      	b.n	800a5ac <_malloc_r+0xb0>
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	6864      	ldr	r4, [r4, #4]
 800a5d6:	e7ac      	b.n	800a532 <_malloc_r+0x36>
 800a5d8:	4634      	mov	r4, r6
 800a5da:	6876      	ldr	r6, [r6, #4]
 800a5dc:	e7b4      	b.n	800a548 <_malloc_r+0x4c>
 800a5de:	4613      	mov	r3, r2
 800a5e0:	e7cc      	b.n	800a57c <_malloc_r+0x80>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	603b      	str	r3, [r7, #0]
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f000 f80e 	bl	800a608 <__malloc_unlock>
 800a5ec:	e797      	b.n	800a51e <_malloc_r+0x22>
 800a5ee:	6025      	str	r5, [r4, #0]
 800a5f0:	e7dc      	b.n	800a5ac <_malloc_r+0xb0>
 800a5f2:	605b      	str	r3, [r3, #4]
 800a5f4:	deff      	udf	#255	; 0xff
 800a5f6:	bf00      	nop
 800a5f8:	200016fc 	.word	0x200016fc

0800a5fc <__malloc_lock>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	; (800a604 <__malloc_lock+0x8>)
 800a5fe:	f7ff b878 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 800a602:	bf00      	nop
 800a604:	200016f8 	.word	0x200016f8

0800a608 <__malloc_unlock>:
 800a608:	4801      	ldr	r0, [pc, #4]	; (800a610 <__malloc_unlock+0x8>)
 800a60a:	f7ff b873 	b.w	80096f4 <__retarget_lock_release_recursive>
 800a60e:	bf00      	nop
 800a610:	200016f8 	.word	0x200016f8

0800a614 <_Balloc>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	69c6      	ldr	r6, [r0, #28]
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	b976      	cbnz	r6, 800a63c <_Balloc+0x28>
 800a61e:	2010      	movs	r0, #16
 800a620:	f7ff ff44 	bl	800a4ac <malloc>
 800a624:	4602      	mov	r2, r0
 800a626:	61e0      	str	r0, [r4, #28]
 800a628:	b920      	cbnz	r0, 800a634 <_Balloc+0x20>
 800a62a:	4b18      	ldr	r3, [pc, #96]	; (800a68c <_Balloc+0x78>)
 800a62c:	4818      	ldr	r0, [pc, #96]	; (800a690 <_Balloc+0x7c>)
 800a62e:	216b      	movs	r1, #107	; 0x6b
 800a630:	f001 fd7e 	bl	800c130 <__assert_func>
 800a634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a638:	6006      	str	r6, [r0, #0]
 800a63a:	60c6      	str	r6, [r0, #12]
 800a63c:	69e6      	ldr	r6, [r4, #28]
 800a63e:	68f3      	ldr	r3, [r6, #12]
 800a640:	b183      	cbz	r3, 800a664 <_Balloc+0x50>
 800a642:	69e3      	ldr	r3, [r4, #28]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a64a:	b9b8      	cbnz	r0, 800a67c <_Balloc+0x68>
 800a64c:	2101      	movs	r1, #1
 800a64e:	fa01 f605 	lsl.w	r6, r1, r5
 800a652:	1d72      	adds	r2, r6, #5
 800a654:	0092      	lsls	r2, r2, #2
 800a656:	4620      	mov	r0, r4
 800a658:	f001 fd88 	bl	800c16c <_calloc_r>
 800a65c:	b160      	cbz	r0, 800a678 <_Balloc+0x64>
 800a65e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a662:	e00e      	b.n	800a682 <_Balloc+0x6e>
 800a664:	2221      	movs	r2, #33	; 0x21
 800a666:	2104      	movs	r1, #4
 800a668:	4620      	mov	r0, r4
 800a66a:	f001 fd7f 	bl	800c16c <_calloc_r>
 800a66e:	69e3      	ldr	r3, [r4, #28]
 800a670:	60f0      	str	r0, [r6, #12]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e4      	bne.n	800a642 <_Balloc+0x2e>
 800a678:	2000      	movs	r0, #0
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	6802      	ldr	r2, [r0, #0]
 800a67e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a682:	2300      	movs	r3, #0
 800a684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a688:	e7f7      	b.n	800a67a <_Balloc+0x66>
 800a68a:	bf00      	nop
 800a68c:	0800d002 	.word	0x0800d002
 800a690:	0800d082 	.word	0x0800d082

0800a694 <_Bfree>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	69c6      	ldr	r6, [r0, #28]
 800a698:	4605      	mov	r5, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	b976      	cbnz	r6, 800a6bc <_Bfree+0x28>
 800a69e:	2010      	movs	r0, #16
 800a6a0:	f7ff ff04 	bl	800a4ac <malloc>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	61e8      	str	r0, [r5, #28]
 800a6a8:	b920      	cbnz	r0, 800a6b4 <_Bfree+0x20>
 800a6aa:	4b09      	ldr	r3, [pc, #36]	; (800a6d0 <_Bfree+0x3c>)
 800a6ac:	4809      	ldr	r0, [pc, #36]	; (800a6d4 <_Bfree+0x40>)
 800a6ae:	218f      	movs	r1, #143	; 0x8f
 800a6b0:	f001 fd3e 	bl	800c130 <__assert_func>
 800a6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6b8:	6006      	str	r6, [r0, #0]
 800a6ba:	60c6      	str	r6, [r0, #12]
 800a6bc:	b13c      	cbz	r4, 800a6ce <_Bfree+0x3a>
 800a6be:	69eb      	ldr	r3, [r5, #28]
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6c8:	6021      	str	r1, [r4, #0]
 800a6ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	0800d002 	.word	0x0800d002
 800a6d4:	0800d082 	.word	0x0800d082

0800a6d8 <__multadd>:
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	690d      	ldr	r5, [r1, #16]
 800a6de:	4607      	mov	r7, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	461e      	mov	r6, r3
 800a6e4:	f101 0c14 	add.w	ip, r1, #20
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ee:	b299      	uxth	r1, r3
 800a6f0:	fb02 6101 	mla	r1, r2, r1, r6
 800a6f4:	0c1e      	lsrs	r6, r3, #16
 800a6f6:	0c0b      	lsrs	r3, r1, #16
 800a6f8:	fb02 3306 	mla	r3, r2, r6, r3
 800a6fc:	b289      	uxth	r1, r1
 800a6fe:	3001      	adds	r0, #1
 800a700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a704:	4285      	cmp	r5, r0
 800a706:	f84c 1b04 	str.w	r1, [ip], #4
 800a70a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a70e:	dcec      	bgt.n	800a6ea <__multadd+0x12>
 800a710:	b30e      	cbz	r6, 800a756 <__multadd+0x7e>
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	42ab      	cmp	r3, r5
 800a716:	dc19      	bgt.n	800a74c <__multadd+0x74>
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	4638      	mov	r0, r7
 800a71c:	3101      	adds	r1, #1
 800a71e:	f7ff ff79 	bl	800a614 <_Balloc>
 800a722:	4680      	mov	r8, r0
 800a724:	b928      	cbnz	r0, 800a732 <__multadd+0x5a>
 800a726:	4602      	mov	r2, r0
 800a728:	4b0c      	ldr	r3, [pc, #48]	; (800a75c <__multadd+0x84>)
 800a72a:	480d      	ldr	r0, [pc, #52]	; (800a760 <__multadd+0x88>)
 800a72c:	21ba      	movs	r1, #186	; 0xba
 800a72e:	f001 fcff 	bl	800c130 <__assert_func>
 800a732:	6922      	ldr	r2, [r4, #16]
 800a734:	3202      	adds	r2, #2
 800a736:	f104 010c 	add.w	r1, r4, #12
 800a73a:	0092      	lsls	r2, r2, #2
 800a73c:	300c      	adds	r0, #12
 800a73e:	f7fe ffda 	bl	80096f6 <memcpy>
 800a742:	4621      	mov	r1, r4
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff ffa5 	bl	800a694 <_Bfree>
 800a74a:	4644      	mov	r4, r8
 800a74c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a750:	3501      	adds	r5, #1
 800a752:	615e      	str	r6, [r3, #20]
 800a754:	6125      	str	r5, [r4, #16]
 800a756:	4620      	mov	r0, r4
 800a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75c:	0800d071 	.word	0x0800d071
 800a760:	0800d082 	.word	0x0800d082

0800a764 <__s2b>:
 800a764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a768:	460c      	mov	r4, r1
 800a76a:	4615      	mov	r5, r2
 800a76c:	461f      	mov	r7, r3
 800a76e:	2209      	movs	r2, #9
 800a770:	3308      	adds	r3, #8
 800a772:	4606      	mov	r6, r0
 800a774:	fb93 f3f2 	sdiv	r3, r3, r2
 800a778:	2100      	movs	r1, #0
 800a77a:	2201      	movs	r2, #1
 800a77c:	429a      	cmp	r2, r3
 800a77e:	db09      	blt.n	800a794 <__s2b+0x30>
 800a780:	4630      	mov	r0, r6
 800a782:	f7ff ff47 	bl	800a614 <_Balloc>
 800a786:	b940      	cbnz	r0, 800a79a <__s2b+0x36>
 800a788:	4602      	mov	r2, r0
 800a78a:	4b19      	ldr	r3, [pc, #100]	; (800a7f0 <__s2b+0x8c>)
 800a78c:	4819      	ldr	r0, [pc, #100]	; (800a7f4 <__s2b+0x90>)
 800a78e:	21d3      	movs	r1, #211	; 0xd3
 800a790:	f001 fcce 	bl	800c130 <__assert_func>
 800a794:	0052      	lsls	r2, r2, #1
 800a796:	3101      	adds	r1, #1
 800a798:	e7f0      	b.n	800a77c <__s2b+0x18>
 800a79a:	9b08      	ldr	r3, [sp, #32]
 800a79c:	6143      	str	r3, [r0, #20]
 800a79e:	2d09      	cmp	r5, #9
 800a7a0:	f04f 0301 	mov.w	r3, #1
 800a7a4:	6103      	str	r3, [r0, #16]
 800a7a6:	dd16      	ble.n	800a7d6 <__s2b+0x72>
 800a7a8:	f104 0909 	add.w	r9, r4, #9
 800a7ac:	46c8      	mov	r8, r9
 800a7ae:	442c      	add	r4, r5
 800a7b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7b4:	4601      	mov	r1, r0
 800a7b6:	3b30      	subs	r3, #48	; 0x30
 800a7b8:	220a      	movs	r2, #10
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ff8c 	bl	800a6d8 <__multadd>
 800a7c0:	45a0      	cmp	r8, r4
 800a7c2:	d1f5      	bne.n	800a7b0 <__s2b+0x4c>
 800a7c4:	f1a5 0408 	sub.w	r4, r5, #8
 800a7c8:	444c      	add	r4, r9
 800a7ca:	1b2d      	subs	r5, r5, r4
 800a7cc:	1963      	adds	r3, r4, r5
 800a7ce:	42bb      	cmp	r3, r7
 800a7d0:	db04      	blt.n	800a7dc <__s2b+0x78>
 800a7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d6:	340a      	adds	r4, #10
 800a7d8:	2509      	movs	r5, #9
 800a7da:	e7f6      	b.n	800a7ca <__s2b+0x66>
 800a7dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	3b30      	subs	r3, #48	; 0x30
 800a7e4:	220a      	movs	r2, #10
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7ff ff76 	bl	800a6d8 <__multadd>
 800a7ec:	e7ee      	b.n	800a7cc <__s2b+0x68>
 800a7ee:	bf00      	nop
 800a7f0:	0800d071 	.word	0x0800d071
 800a7f4:	0800d082 	.word	0x0800d082

0800a7f8 <__hi0bits>:
 800a7f8:	0c03      	lsrs	r3, r0, #16
 800a7fa:	041b      	lsls	r3, r3, #16
 800a7fc:	b9d3      	cbnz	r3, 800a834 <__hi0bits+0x3c>
 800a7fe:	0400      	lsls	r0, r0, #16
 800a800:	2310      	movs	r3, #16
 800a802:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a806:	bf04      	itt	eq
 800a808:	0200      	lsleq	r0, r0, #8
 800a80a:	3308      	addeq	r3, #8
 800a80c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a810:	bf04      	itt	eq
 800a812:	0100      	lsleq	r0, r0, #4
 800a814:	3304      	addeq	r3, #4
 800a816:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a81a:	bf04      	itt	eq
 800a81c:	0080      	lsleq	r0, r0, #2
 800a81e:	3302      	addeq	r3, #2
 800a820:	2800      	cmp	r0, #0
 800a822:	db05      	blt.n	800a830 <__hi0bits+0x38>
 800a824:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a828:	f103 0301 	add.w	r3, r3, #1
 800a82c:	bf08      	it	eq
 800a82e:	2320      	moveq	r3, #32
 800a830:	4618      	mov	r0, r3
 800a832:	4770      	bx	lr
 800a834:	2300      	movs	r3, #0
 800a836:	e7e4      	b.n	800a802 <__hi0bits+0xa>

0800a838 <__lo0bits>:
 800a838:	6803      	ldr	r3, [r0, #0]
 800a83a:	f013 0207 	ands.w	r2, r3, #7
 800a83e:	d00c      	beq.n	800a85a <__lo0bits+0x22>
 800a840:	07d9      	lsls	r1, r3, #31
 800a842:	d422      	bmi.n	800a88a <__lo0bits+0x52>
 800a844:	079a      	lsls	r2, r3, #30
 800a846:	bf49      	itett	mi
 800a848:	085b      	lsrmi	r3, r3, #1
 800a84a:	089b      	lsrpl	r3, r3, #2
 800a84c:	6003      	strmi	r3, [r0, #0]
 800a84e:	2201      	movmi	r2, #1
 800a850:	bf5c      	itt	pl
 800a852:	6003      	strpl	r3, [r0, #0]
 800a854:	2202      	movpl	r2, #2
 800a856:	4610      	mov	r0, r2
 800a858:	4770      	bx	lr
 800a85a:	b299      	uxth	r1, r3
 800a85c:	b909      	cbnz	r1, 800a862 <__lo0bits+0x2a>
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	2210      	movs	r2, #16
 800a862:	b2d9      	uxtb	r1, r3
 800a864:	b909      	cbnz	r1, 800a86a <__lo0bits+0x32>
 800a866:	3208      	adds	r2, #8
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	0719      	lsls	r1, r3, #28
 800a86c:	bf04      	itt	eq
 800a86e:	091b      	lsreq	r3, r3, #4
 800a870:	3204      	addeq	r2, #4
 800a872:	0799      	lsls	r1, r3, #30
 800a874:	bf04      	itt	eq
 800a876:	089b      	lsreq	r3, r3, #2
 800a878:	3202      	addeq	r2, #2
 800a87a:	07d9      	lsls	r1, r3, #31
 800a87c:	d403      	bmi.n	800a886 <__lo0bits+0x4e>
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	f102 0201 	add.w	r2, r2, #1
 800a884:	d003      	beq.n	800a88e <__lo0bits+0x56>
 800a886:	6003      	str	r3, [r0, #0]
 800a888:	e7e5      	b.n	800a856 <__lo0bits+0x1e>
 800a88a:	2200      	movs	r2, #0
 800a88c:	e7e3      	b.n	800a856 <__lo0bits+0x1e>
 800a88e:	2220      	movs	r2, #32
 800a890:	e7e1      	b.n	800a856 <__lo0bits+0x1e>
	...

0800a894 <__i2b>:
 800a894:	b510      	push	{r4, lr}
 800a896:	460c      	mov	r4, r1
 800a898:	2101      	movs	r1, #1
 800a89a:	f7ff febb 	bl	800a614 <_Balloc>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	b928      	cbnz	r0, 800a8ae <__i2b+0x1a>
 800a8a2:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <__i2b+0x24>)
 800a8a4:	4805      	ldr	r0, [pc, #20]	; (800a8bc <__i2b+0x28>)
 800a8a6:	f240 1145 	movw	r1, #325	; 0x145
 800a8aa:	f001 fc41 	bl	800c130 <__assert_func>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	6144      	str	r4, [r0, #20]
 800a8b2:	6103      	str	r3, [r0, #16]
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800d071 	.word	0x0800d071
 800a8bc:	0800d082 	.word	0x0800d082

0800a8c0 <__multiply>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	4691      	mov	r9, r2
 800a8c6:	690a      	ldr	r2, [r1, #16]
 800a8c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bfb8      	it	lt
 800a8d0:	460b      	movlt	r3, r1
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	bfbc      	itt	lt
 800a8d6:	464c      	movlt	r4, r9
 800a8d8:	4699      	movlt	r9, r3
 800a8da:	6927      	ldr	r7, [r4, #16]
 800a8dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8e0:	68a3      	ldr	r3, [r4, #8]
 800a8e2:	6861      	ldr	r1, [r4, #4]
 800a8e4:	eb07 060a 	add.w	r6, r7, sl
 800a8e8:	42b3      	cmp	r3, r6
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	bfb8      	it	lt
 800a8ee:	3101      	addlt	r1, #1
 800a8f0:	f7ff fe90 	bl	800a614 <_Balloc>
 800a8f4:	b930      	cbnz	r0, 800a904 <__multiply+0x44>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	4b44      	ldr	r3, [pc, #272]	; (800aa0c <__multiply+0x14c>)
 800a8fa:	4845      	ldr	r0, [pc, #276]	; (800aa10 <__multiply+0x150>)
 800a8fc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a900:	f001 fc16 	bl	800c130 <__assert_func>
 800a904:	f100 0514 	add.w	r5, r0, #20
 800a908:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a90c:	462b      	mov	r3, r5
 800a90e:	2200      	movs	r2, #0
 800a910:	4543      	cmp	r3, r8
 800a912:	d321      	bcc.n	800a958 <__multiply+0x98>
 800a914:	f104 0314 	add.w	r3, r4, #20
 800a918:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a91c:	f109 0314 	add.w	r3, r9, #20
 800a920:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a924:	9202      	str	r2, [sp, #8]
 800a926:	1b3a      	subs	r2, r7, r4
 800a928:	3a15      	subs	r2, #21
 800a92a:	f022 0203 	bic.w	r2, r2, #3
 800a92e:	3204      	adds	r2, #4
 800a930:	f104 0115 	add.w	r1, r4, #21
 800a934:	428f      	cmp	r7, r1
 800a936:	bf38      	it	cc
 800a938:	2204      	movcc	r2, #4
 800a93a:	9201      	str	r2, [sp, #4]
 800a93c:	9a02      	ldr	r2, [sp, #8]
 800a93e:	9303      	str	r3, [sp, #12]
 800a940:	429a      	cmp	r2, r3
 800a942:	d80c      	bhi.n	800a95e <__multiply+0x9e>
 800a944:	2e00      	cmp	r6, #0
 800a946:	dd03      	ble.n	800a950 <__multiply+0x90>
 800a948:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d05b      	beq.n	800aa08 <__multiply+0x148>
 800a950:	6106      	str	r6, [r0, #16]
 800a952:	b005      	add	sp, #20
 800a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a958:	f843 2b04 	str.w	r2, [r3], #4
 800a95c:	e7d8      	b.n	800a910 <__multiply+0x50>
 800a95e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a962:	f1ba 0f00 	cmp.w	sl, #0
 800a966:	d024      	beq.n	800a9b2 <__multiply+0xf2>
 800a968:	f104 0e14 	add.w	lr, r4, #20
 800a96c:	46a9      	mov	r9, r5
 800a96e:	f04f 0c00 	mov.w	ip, #0
 800a972:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a976:	f8d9 1000 	ldr.w	r1, [r9]
 800a97a:	fa1f fb82 	uxth.w	fp, r2
 800a97e:	b289      	uxth	r1, r1
 800a980:	fb0a 110b 	mla	r1, sl, fp, r1
 800a984:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a988:	f8d9 2000 	ldr.w	r2, [r9]
 800a98c:	4461      	add	r1, ip
 800a98e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a992:	fb0a c20b 	mla	r2, sl, fp, ip
 800a996:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a99a:	b289      	uxth	r1, r1
 800a99c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9a0:	4577      	cmp	r7, lr
 800a9a2:	f849 1b04 	str.w	r1, [r9], #4
 800a9a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9aa:	d8e2      	bhi.n	800a972 <__multiply+0xb2>
 800a9ac:	9a01      	ldr	r2, [sp, #4]
 800a9ae:	f845 c002 	str.w	ip, [r5, r2]
 800a9b2:	9a03      	ldr	r2, [sp, #12]
 800a9b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	f1b9 0f00 	cmp.w	r9, #0
 800a9be:	d021      	beq.n	800aa04 <__multiply+0x144>
 800a9c0:	6829      	ldr	r1, [r5, #0]
 800a9c2:	f104 0c14 	add.w	ip, r4, #20
 800a9c6:	46ae      	mov	lr, r5
 800a9c8:	f04f 0a00 	mov.w	sl, #0
 800a9cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a9d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a9d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a9d8:	4452      	add	r2, sl
 800a9da:	b289      	uxth	r1, r1
 800a9dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a9e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a9e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9ec:	f8be 1000 	ldrh.w	r1, [lr]
 800a9f0:	fb09 110a 	mla	r1, r9, sl, r1
 800a9f4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a9f8:	4567      	cmp	r7, ip
 800a9fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9fe:	d8e5      	bhi.n	800a9cc <__multiply+0x10c>
 800aa00:	9a01      	ldr	r2, [sp, #4]
 800aa02:	50a9      	str	r1, [r5, r2]
 800aa04:	3504      	adds	r5, #4
 800aa06:	e799      	b.n	800a93c <__multiply+0x7c>
 800aa08:	3e01      	subs	r6, #1
 800aa0a:	e79b      	b.n	800a944 <__multiply+0x84>
 800aa0c:	0800d071 	.word	0x0800d071
 800aa10:	0800d082 	.word	0x0800d082

0800aa14 <__pow5mult>:
 800aa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	4615      	mov	r5, r2
 800aa1a:	f012 0203 	ands.w	r2, r2, #3
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460f      	mov	r7, r1
 800aa22:	d007      	beq.n	800aa34 <__pow5mult+0x20>
 800aa24:	4c25      	ldr	r4, [pc, #148]	; (800aabc <__pow5mult+0xa8>)
 800aa26:	3a01      	subs	r2, #1
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa2e:	f7ff fe53 	bl	800a6d8 <__multadd>
 800aa32:	4607      	mov	r7, r0
 800aa34:	10ad      	asrs	r5, r5, #2
 800aa36:	d03d      	beq.n	800aab4 <__pow5mult+0xa0>
 800aa38:	69f4      	ldr	r4, [r6, #28]
 800aa3a:	b97c      	cbnz	r4, 800aa5c <__pow5mult+0x48>
 800aa3c:	2010      	movs	r0, #16
 800aa3e:	f7ff fd35 	bl	800a4ac <malloc>
 800aa42:	4602      	mov	r2, r0
 800aa44:	61f0      	str	r0, [r6, #28]
 800aa46:	b928      	cbnz	r0, 800aa54 <__pow5mult+0x40>
 800aa48:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <__pow5mult+0xac>)
 800aa4a:	481e      	ldr	r0, [pc, #120]	; (800aac4 <__pow5mult+0xb0>)
 800aa4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aa50:	f001 fb6e 	bl	800c130 <__assert_func>
 800aa54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa58:	6004      	str	r4, [r0, #0]
 800aa5a:	60c4      	str	r4, [r0, #12]
 800aa5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aa60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa64:	b94c      	cbnz	r4, 800aa7a <__pow5mult+0x66>
 800aa66:	f240 2171 	movw	r1, #625	; 0x271
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ff12 	bl	800a894 <__i2b>
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa76:	4604      	mov	r4, r0
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	f04f 0900 	mov.w	r9, #0
 800aa7e:	07eb      	lsls	r3, r5, #31
 800aa80:	d50a      	bpl.n	800aa98 <__pow5mult+0x84>
 800aa82:	4639      	mov	r1, r7
 800aa84:	4622      	mov	r2, r4
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ff1a 	bl	800a8c0 <__multiply>
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	4680      	mov	r8, r0
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7ff fdff 	bl	800a694 <_Bfree>
 800aa96:	4647      	mov	r7, r8
 800aa98:	106d      	asrs	r5, r5, #1
 800aa9a:	d00b      	beq.n	800aab4 <__pow5mult+0xa0>
 800aa9c:	6820      	ldr	r0, [r4, #0]
 800aa9e:	b938      	cbnz	r0, 800aab0 <__pow5mult+0x9c>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7ff ff0b 	bl	800a8c0 <__multiply>
 800aaaa:	6020      	str	r0, [r4, #0]
 800aaac:	f8c0 9000 	str.w	r9, [r0]
 800aab0:	4604      	mov	r4, r0
 800aab2:	e7e4      	b.n	800aa7e <__pow5mult+0x6a>
 800aab4:	4638      	mov	r0, r7
 800aab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaba:	bf00      	nop
 800aabc:	0800d1d0 	.word	0x0800d1d0
 800aac0:	0800d002 	.word	0x0800d002
 800aac4:	0800d082 	.word	0x0800d082

0800aac8 <__lshift>:
 800aac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	460c      	mov	r4, r1
 800aace:	6849      	ldr	r1, [r1, #4]
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aad6:	68a3      	ldr	r3, [r4, #8]
 800aad8:	4607      	mov	r7, r0
 800aada:	4691      	mov	r9, r2
 800aadc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aae0:	f108 0601 	add.w	r6, r8, #1
 800aae4:	42b3      	cmp	r3, r6
 800aae6:	db0b      	blt.n	800ab00 <__lshift+0x38>
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff fd93 	bl	800a614 <_Balloc>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b948      	cbnz	r0, 800ab06 <__lshift+0x3e>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4b28      	ldr	r3, [pc, #160]	; (800ab98 <__lshift+0xd0>)
 800aaf6:	4829      	ldr	r0, [pc, #164]	; (800ab9c <__lshift+0xd4>)
 800aaf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aafc:	f001 fb18 	bl	800c130 <__assert_func>
 800ab00:	3101      	adds	r1, #1
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	e7ee      	b.n	800aae4 <__lshift+0x1c>
 800ab06:	2300      	movs	r3, #0
 800ab08:	f100 0114 	add.w	r1, r0, #20
 800ab0c:	f100 0210 	add.w	r2, r0, #16
 800ab10:	4618      	mov	r0, r3
 800ab12:	4553      	cmp	r3, sl
 800ab14:	db33      	blt.n	800ab7e <__lshift+0xb6>
 800ab16:	6920      	ldr	r0, [r4, #16]
 800ab18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab1c:	f104 0314 	add.w	r3, r4, #20
 800ab20:	f019 091f 	ands.w	r9, r9, #31
 800ab24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab2c:	d02b      	beq.n	800ab86 <__lshift+0xbe>
 800ab2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab32:	468a      	mov	sl, r1
 800ab34:	2200      	movs	r2, #0
 800ab36:	6818      	ldr	r0, [r3, #0]
 800ab38:	fa00 f009 	lsl.w	r0, r0, r9
 800ab3c:	4310      	orrs	r0, r2
 800ab3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ab42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab46:	459c      	cmp	ip, r3
 800ab48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab4c:	d8f3      	bhi.n	800ab36 <__lshift+0x6e>
 800ab4e:	ebac 0304 	sub.w	r3, ip, r4
 800ab52:	3b15      	subs	r3, #21
 800ab54:	f023 0303 	bic.w	r3, r3, #3
 800ab58:	3304      	adds	r3, #4
 800ab5a:	f104 0015 	add.w	r0, r4, #21
 800ab5e:	4584      	cmp	ip, r0
 800ab60:	bf38      	it	cc
 800ab62:	2304      	movcc	r3, #4
 800ab64:	50ca      	str	r2, [r1, r3]
 800ab66:	b10a      	cbz	r2, 800ab6c <__lshift+0xa4>
 800ab68:	f108 0602 	add.w	r6, r8, #2
 800ab6c:	3e01      	subs	r6, #1
 800ab6e:	4638      	mov	r0, r7
 800ab70:	612e      	str	r6, [r5, #16]
 800ab72:	4621      	mov	r1, r4
 800ab74:	f7ff fd8e 	bl	800a694 <_Bfree>
 800ab78:	4628      	mov	r0, r5
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab82:	3301      	adds	r3, #1
 800ab84:	e7c5      	b.n	800ab12 <__lshift+0x4a>
 800ab86:	3904      	subs	r1, #4
 800ab88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab90:	459c      	cmp	ip, r3
 800ab92:	d8f9      	bhi.n	800ab88 <__lshift+0xc0>
 800ab94:	e7ea      	b.n	800ab6c <__lshift+0xa4>
 800ab96:	bf00      	nop
 800ab98:	0800d071 	.word	0x0800d071
 800ab9c:	0800d082 	.word	0x0800d082

0800aba0 <__mcmp>:
 800aba0:	b530      	push	{r4, r5, lr}
 800aba2:	6902      	ldr	r2, [r0, #16]
 800aba4:	690c      	ldr	r4, [r1, #16]
 800aba6:	1b12      	subs	r2, r2, r4
 800aba8:	d10e      	bne.n	800abc8 <__mcmp+0x28>
 800abaa:	f100 0314 	add.w	r3, r0, #20
 800abae:	3114      	adds	r1, #20
 800abb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800abc0:	42a5      	cmp	r5, r4
 800abc2:	d003      	beq.n	800abcc <__mcmp+0x2c>
 800abc4:	d305      	bcc.n	800abd2 <__mcmp+0x32>
 800abc6:	2201      	movs	r2, #1
 800abc8:	4610      	mov	r0, r2
 800abca:	bd30      	pop	{r4, r5, pc}
 800abcc:	4283      	cmp	r3, r0
 800abce:	d3f3      	bcc.n	800abb8 <__mcmp+0x18>
 800abd0:	e7fa      	b.n	800abc8 <__mcmp+0x28>
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	e7f7      	b.n	800abc8 <__mcmp+0x28>

0800abd8 <__mdiff>:
 800abd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	4606      	mov	r6, r0
 800abe0:	4611      	mov	r1, r2
 800abe2:	4620      	mov	r0, r4
 800abe4:	4690      	mov	r8, r2
 800abe6:	f7ff ffdb 	bl	800aba0 <__mcmp>
 800abea:	1e05      	subs	r5, r0, #0
 800abec:	d110      	bne.n	800ac10 <__mdiff+0x38>
 800abee:	4629      	mov	r1, r5
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff fd0f 	bl	800a614 <_Balloc>
 800abf6:	b930      	cbnz	r0, 800ac06 <__mdiff+0x2e>
 800abf8:	4b3a      	ldr	r3, [pc, #232]	; (800ace4 <__mdiff+0x10c>)
 800abfa:	4602      	mov	r2, r0
 800abfc:	f240 2137 	movw	r1, #567	; 0x237
 800ac00:	4839      	ldr	r0, [pc, #228]	; (800ace8 <__mdiff+0x110>)
 800ac02:	f001 fa95 	bl	800c130 <__assert_func>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac10:	bfa4      	itt	ge
 800ac12:	4643      	movge	r3, r8
 800ac14:	46a0      	movge	r8, r4
 800ac16:	4630      	mov	r0, r6
 800ac18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac1c:	bfa6      	itte	ge
 800ac1e:	461c      	movge	r4, r3
 800ac20:	2500      	movge	r5, #0
 800ac22:	2501      	movlt	r5, #1
 800ac24:	f7ff fcf6 	bl	800a614 <_Balloc>
 800ac28:	b920      	cbnz	r0, 800ac34 <__mdiff+0x5c>
 800ac2a:	4b2e      	ldr	r3, [pc, #184]	; (800ace4 <__mdiff+0x10c>)
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	f240 2145 	movw	r1, #581	; 0x245
 800ac32:	e7e5      	b.n	800ac00 <__mdiff+0x28>
 800ac34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac38:	6926      	ldr	r6, [r4, #16]
 800ac3a:	60c5      	str	r5, [r0, #12]
 800ac3c:	f104 0914 	add.w	r9, r4, #20
 800ac40:	f108 0514 	add.w	r5, r8, #20
 800ac44:	f100 0e14 	add.w	lr, r0, #20
 800ac48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac50:	f108 0210 	add.w	r2, r8, #16
 800ac54:	46f2      	mov	sl, lr
 800ac56:	2100      	movs	r1, #0
 800ac58:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac60:	fa11 f88b 	uxtah	r8, r1, fp
 800ac64:	b299      	uxth	r1, r3
 800ac66:	0c1b      	lsrs	r3, r3, #16
 800ac68:	eba8 0801 	sub.w	r8, r8, r1
 800ac6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac74:	fa1f f888 	uxth.w	r8, r8
 800ac78:	1419      	asrs	r1, r3, #16
 800ac7a:	454e      	cmp	r6, r9
 800ac7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac80:	f84a 3b04 	str.w	r3, [sl], #4
 800ac84:	d8e8      	bhi.n	800ac58 <__mdiff+0x80>
 800ac86:	1b33      	subs	r3, r6, r4
 800ac88:	3b15      	subs	r3, #21
 800ac8a:	f023 0303 	bic.w	r3, r3, #3
 800ac8e:	3304      	adds	r3, #4
 800ac90:	3415      	adds	r4, #21
 800ac92:	42a6      	cmp	r6, r4
 800ac94:	bf38      	it	cc
 800ac96:	2304      	movcc	r3, #4
 800ac98:	441d      	add	r5, r3
 800ac9a:	4473      	add	r3, lr
 800ac9c:	469e      	mov	lr, r3
 800ac9e:	462e      	mov	r6, r5
 800aca0:	4566      	cmp	r6, ip
 800aca2:	d30e      	bcc.n	800acc2 <__mdiff+0xea>
 800aca4:	f10c 0203 	add.w	r2, ip, #3
 800aca8:	1b52      	subs	r2, r2, r5
 800acaa:	f022 0203 	bic.w	r2, r2, #3
 800acae:	3d03      	subs	r5, #3
 800acb0:	45ac      	cmp	ip, r5
 800acb2:	bf38      	it	cc
 800acb4:	2200      	movcc	r2, #0
 800acb6:	4413      	add	r3, r2
 800acb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800acbc:	b17a      	cbz	r2, 800acde <__mdiff+0x106>
 800acbe:	6107      	str	r7, [r0, #16]
 800acc0:	e7a4      	b.n	800ac0c <__mdiff+0x34>
 800acc2:	f856 8b04 	ldr.w	r8, [r6], #4
 800acc6:	fa11 f288 	uxtah	r2, r1, r8
 800acca:	1414      	asrs	r4, r2, #16
 800accc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800acd0:	b292      	uxth	r2, r2
 800acd2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800acd6:	f84e 2b04 	str.w	r2, [lr], #4
 800acda:	1421      	asrs	r1, r4, #16
 800acdc:	e7e0      	b.n	800aca0 <__mdiff+0xc8>
 800acde:	3f01      	subs	r7, #1
 800ace0:	e7ea      	b.n	800acb8 <__mdiff+0xe0>
 800ace2:	bf00      	nop
 800ace4:	0800d071 	.word	0x0800d071
 800ace8:	0800d082 	.word	0x0800d082

0800acec <__ulp>:
 800acec:	b082      	sub	sp, #8
 800acee:	ed8d 0b00 	vstr	d0, [sp]
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <__ulp+0x48>)
 800acf6:	4013      	ands	r3, r2
 800acf8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dc08      	bgt.n	800ad12 <__ulp+0x26>
 800ad00:	425b      	negs	r3, r3
 800ad02:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ad06:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad0a:	da04      	bge.n	800ad16 <__ulp+0x2a>
 800ad0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad10:	4113      	asrs	r3, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	e008      	b.n	800ad28 <__ulp+0x3c>
 800ad16:	f1a2 0314 	sub.w	r3, r2, #20
 800ad1a:	2b1e      	cmp	r3, #30
 800ad1c:	bfda      	itte	le
 800ad1e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ad22:	40da      	lsrle	r2, r3
 800ad24:	2201      	movgt	r2, #1
 800ad26:	2300      	movs	r3, #0
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	ec41 0b10 	vmov	d0, r0, r1
 800ad30:	b002      	add	sp, #8
 800ad32:	4770      	bx	lr
 800ad34:	7ff00000 	.word	0x7ff00000

0800ad38 <__b2d>:
 800ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	6906      	ldr	r6, [r0, #16]
 800ad3e:	f100 0814 	add.w	r8, r0, #20
 800ad42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ad46:	1f37      	subs	r7, r6, #4
 800ad48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7ff fd53 	bl	800a7f8 <__hi0bits>
 800ad52:	f1c0 0320 	rsb	r3, r0, #32
 800ad56:	280a      	cmp	r0, #10
 800ad58:	600b      	str	r3, [r1, #0]
 800ad5a:	491b      	ldr	r1, [pc, #108]	; (800adc8 <__b2d+0x90>)
 800ad5c:	dc15      	bgt.n	800ad8a <__b2d+0x52>
 800ad5e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ad62:	fa22 f30c 	lsr.w	r3, r2, ip
 800ad66:	45b8      	cmp	r8, r7
 800ad68:	ea43 0501 	orr.w	r5, r3, r1
 800ad6c:	bf34      	ite	cc
 800ad6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ad72:	2300      	movcs	r3, #0
 800ad74:	3015      	adds	r0, #21
 800ad76:	fa02 f000 	lsl.w	r0, r2, r0
 800ad7a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ad7e:	4303      	orrs	r3, r0
 800ad80:	461c      	mov	r4, r3
 800ad82:	ec45 4b10 	vmov	d0, r4, r5
 800ad86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8a:	45b8      	cmp	r8, r7
 800ad8c:	bf3a      	itte	cc
 800ad8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ad92:	f1a6 0708 	subcc.w	r7, r6, #8
 800ad96:	2300      	movcs	r3, #0
 800ad98:	380b      	subs	r0, #11
 800ad9a:	d012      	beq.n	800adc2 <__b2d+0x8a>
 800ad9c:	f1c0 0120 	rsb	r1, r0, #32
 800ada0:	fa23 f401 	lsr.w	r4, r3, r1
 800ada4:	4082      	lsls	r2, r0
 800ada6:	4322      	orrs	r2, r4
 800ada8:	4547      	cmp	r7, r8
 800adaa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800adae:	bf8c      	ite	hi
 800adb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800adb4:	2200      	movls	r2, #0
 800adb6:	4083      	lsls	r3, r0
 800adb8:	40ca      	lsrs	r2, r1
 800adba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800adbe:	4313      	orrs	r3, r2
 800adc0:	e7de      	b.n	800ad80 <__b2d+0x48>
 800adc2:	ea42 0501 	orr.w	r5, r2, r1
 800adc6:	e7db      	b.n	800ad80 <__b2d+0x48>
 800adc8:	3ff00000 	.word	0x3ff00000

0800adcc <__d2b>:
 800adcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800add0:	460f      	mov	r7, r1
 800add2:	2101      	movs	r1, #1
 800add4:	ec59 8b10 	vmov	r8, r9, d0
 800add8:	4616      	mov	r6, r2
 800adda:	f7ff fc1b 	bl	800a614 <_Balloc>
 800adde:	4604      	mov	r4, r0
 800ade0:	b930      	cbnz	r0, 800adf0 <__d2b+0x24>
 800ade2:	4602      	mov	r2, r0
 800ade4:	4b24      	ldr	r3, [pc, #144]	; (800ae78 <__d2b+0xac>)
 800ade6:	4825      	ldr	r0, [pc, #148]	; (800ae7c <__d2b+0xb0>)
 800ade8:	f240 310f 	movw	r1, #783	; 0x30f
 800adec:	f001 f9a0 	bl	800c130 <__assert_func>
 800adf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adf8:	bb2d      	cbnz	r5, 800ae46 <__d2b+0x7a>
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	f1b8 0300 	subs.w	r3, r8, #0
 800ae00:	d026      	beq.n	800ae50 <__d2b+0x84>
 800ae02:	4668      	mov	r0, sp
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	f7ff fd17 	bl	800a838 <__lo0bits>
 800ae0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae0e:	b1e8      	cbz	r0, 800ae4c <__d2b+0x80>
 800ae10:	f1c0 0320 	rsb	r3, r0, #32
 800ae14:	fa02 f303 	lsl.w	r3, r2, r3
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	40c2      	lsrs	r2, r0
 800ae1c:	6163      	str	r3, [r4, #20]
 800ae1e:	9201      	str	r2, [sp, #4]
 800ae20:	9b01      	ldr	r3, [sp, #4]
 800ae22:	61a3      	str	r3, [r4, #24]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	bf14      	ite	ne
 800ae28:	2202      	movne	r2, #2
 800ae2a:	2201      	moveq	r2, #1
 800ae2c:	6122      	str	r2, [r4, #16]
 800ae2e:	b1bd      	cbz	r5, 800ae60 <__d2b+0x94>
 800ae30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae34:	4405      	add	r5, r0
 800ae36:	603d      	str	r5, [r7, #0]
 800ae38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4620      	mov	r0, r4
 800ae40:	b003      	add	sp, #12
 800ae42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae4a:	e7d6      	b.n	800adfa <__d2b+0x2e>
 800ae4c:	6161      	str	r1, [r4, #20]
 800ae4e:	e7e7      	b.n	800ae20 <__d2b+0x54>
 800ae50:	a801      	add	r0, sp, #4
 800ae52:	f7ff fcf1 	bl	800a838 <__lo0bits>
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	6163      	str	r3, [r4, #20]
 800ae5a:	3020      	adds	r0, #32
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	e7e5      	b.n	800ae2c <__d2b+0x60>
 800ae60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae68:	6038      	str	r0, [r7, #0]
 800ae6a:	6918      	ldr	r0, [r3, #16]
 800ae6c:	f7ff fcc4 	bl	800a7f8 <__hi0bits>
 800ae70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae74:	e7e2      	b.n	800ae3c <__d2b+0x70>
 800ae76:	bf00      	nop
 800ae78:	0800d071 	.word	0x0800d071
 800ae7c:	0800d082 	.word	0x0800d082

0800ae80 <__ratio>:
 800ae80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4688      	mov	r8, r1
 800ae86:	4669      	mov	r1, sp
 800ae88:	4681      	mov	r9, r0
 800ae8a:	f7ff ff55 	bl	800ad38 <__b2d>
 800ae8e:	a901      	add	r1, sp, #4
 800ae90:	4640      	mov	r0, r8
 800ae92:	ec55 4b10 	vmov	r4, r5, d0
 800ae96:	f7ff ff4f 	bl	800ad38 <__b2d>
 800ae9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aea2:	eba3 0c02 	sub.w	ip, r3, r2
 800aea6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aeaa:	1a9b      	subs	r3, r3, r2
 800aeac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aeb0:	ec51 0b10 	vmov	r0, r1, d0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfd6      	itet	le
 800aeb8:	460a      	movle	r2, r1
 800aeba:	462a      	movgt	r2, r5
 800aebc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aec0:	468b      	mov	fp, r1
 800aec2:	462f      	mov	r7, r5
 800aec4:	bfd4      	ite	le
 800aec6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aeca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aece:	4620      	mov	r0, r4
 800aed0:	ee10 2a10 	vmov	r2, s0
 800aed4:	465b      	mov	r3, fp
 800aed6:	4639      	mov	r1, r7
 800aed8:	f7f5 fcc0 	bl	800085c <__aeabi_ddiv>
 800aedc:	ec41 0b10 	vmov	d0, r0, r1
 800aee0:	b003      	add	sp, #12
 800aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aee6 <__copybits>:
 800aee6:	3901      	subs	r1, #1
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	1149      	asrs	r1, r1, #5
 800aeec:	6914      	ldr	r4, [r2, #16]
 800aeee:	3101      	adds	r1, #1
 800aef0:	f102 0314 	add.w	r3, r2, #20
 800aef4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aef8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aefc:	1f05      	subs	r5, r0, #4
 800aefe:	42a3      	cmp	r3, r4
 800af00:	d30c      	bcc.n	800af1c <__copybits+0x36>
 800af02:	1aa3      	subs	r3, r4, r2
 800af04:	3b11      	subs	r3, #17
 800af06:	f023 0303 	bic.w	r3, r3, #3
 800af0a:	3211      	adds	r2, #17
 800af0c:	42a2      	cmp	r2, r4
 800af0e:	bf88      	it	hi
 800af10:	2300      	movhi	r3, #0
 800af12:	4418      	add	r0, r3
 800af14:	2300      	movs	r3, #0
 800af16:	4288      	cmp	r0, r1
 800af18:	d305      	bcc.n	800af26 <__copybits+0x40>
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
 800af1c:	f853 6b04 	ldr.w	r6, [r3], #4
 800af20:	f845 6f04 	str.w	r6, [r5, #4]!
 800af24:	e7eb      	b.n	800aefe <__copybits+0x18>
 800af26:	f840 3b04 	str.w	r3, [r0], #4
 800af2a:	e7f4      	b.n	800af16 <__copybits+0x30>

0800af2c <__any_on>:
 800af2c:	f100 0214 	add.w	r2, r0, #20
 800af30:	6900      	ldr	r0, [r0, #16]
 800af32:	114b      	asrs	r3, r1, #5
 800af34:	4298      	cmp	r0, r3
 800af36:	b510      	push	{r4, lr}
 800af38:	db11      	blt.n	800af5e <__any_on+0x32>
 800af3a:	dd0a      	ble.n	800af52 <__any_on+0x26>
 800af3c:	f011 011f 	ands.w	r1, r1, #31
 800af40:	d007      	beq.n	800af52 <__any_on+0x26>
 800af42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af46:	fa24 f001 	lsr.w	r0, r4, r1
 800af4a:	fa00 f101 	lsl.w	r1, r0, r1
 800af4e:	428c      	cmp	r4, r1
 800af50:	d10b      	bne.n	800af6a <__any_on+0x3e>
 800af52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af56:	4293      	cmp	r3, r2
 800af58:	d803      	bhi.n	800af62 <__any_on+0x36>
 800af5a:	2000      	movs	r0, #0
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	4603      	mov	r3, r0
 800af60:	e7f7      	b.n	800af52 <__any_on+0x26>
 800af62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af66:	2900      	cmp	r1, #0
 800af68:	d0f5      	beq.n	800af56 <__any_on+0x2a>
 800af6a:	2001      	movs	r0, #1
 800af6c:	e7f6      	b.n	800af5c <__any_on+0x30>

0800af6e <sulp>:
 800af6e:	b570      	push	{r4, r5, r6, lr}
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	ec45 4b10 	vmov	d0, r4, r5
 800af78:	4616      	mov	r6, r2
 800af7a:	f7ff feb7 	bl	800acec <__ulp>
 800af7e:	ec51 0b10 	vmov	r0, r1, d0
 800af82:	b17e      	cbz	r6, 800afa4 <sulp+0x36>
 800af84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800af88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	dd09      	ble.n	800afa4 <sulp+0x36>
 800af90:	051b      	lsls	r3, r3, #20
 800af92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800af96:	2400      	movs	r4, #0
 800af98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800af9c:	4622      	mov	r2, r4
 800af9e:	462b      	mov	r3, r5
 800afa0:	f7f5 fb32 	bl	8000608 <__aeabi_dmul>
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afa8 <_strtod_l>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	ed2d 8b02 	vpush	{d8}
 800afb0:	b09b      	sub	sp, #108	; 0x6c
 800afb2:	4604      	mov	r4, r0
 800afb4:	9213      	str	r2, [sp, #76]	; 0x4c
 800afb6:	2200      	movs	r2, #0
 800afb8:	9216      	str	r2, [sp, #88]	; 0x58
 800afba:	460d      	mov	r5, r1
 800afbc:	f04f 0800 	mov.w	r8, #0
 800afc0:	f04f 0900 	mov.w	r9, #0
 800afc4:	460a      	mov	r2, r1
 800afc6:	9215      	str	r2, [sp, #84]	; 0x54
 800afc8:	7811      	ldrb	r1, [r2, #0]
 800afca:	292b      	cmp	r1, #43	; 0x2b
 800afcc:	d04c      	beq.n	800b068 <_strtod_l+0xc0>
 800afce:	d83a      	bhi.n	800b046 <_strtod_l+0x9e>
 800afd0:	290d      	cmp	r1, #13
 800afd2:	d834      	bhi.n	800b03e <_strtod_l+0x96>
 800afd4:	2908      	cmp	r1, #8
 800afd6:	d834      	bhi.n	800b042 <_strtod_l+0x9a>
 800afd8:	2900      	cmp	r1, #0
 800afda:	d03d      	beq.n	800b058 <_strtod_l+0xb0>
 800afdc:	2200      	movs	r2, #0
 800afde:	920a      	str	r2, [sp, #40]	; 0x28
 800afe0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800afe2:	7832      	ldrb	r2, [r6, #0]
 800afe4:	2a30      	cmp	r2, #48	; 0x30
 800afe6:	f040 80b4 	bne.w	800b152 <_strtod_l+0x1aa>
 800afea:	7872      	ldrb	r2, [r6, #1]
 800afec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aff0:	2a58      	cmp	r2, #88	; 0x58
 800aff2:	d170      	bne.n	800b0d6 <_strtod_l+0x12e>
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	ab16      	add	r3, sp, #88	; 0x58
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	4a8e      	ldr	r2, [pc, #568]	; (800b238 <_strtod_l+0x290>)
 800b000:	ab17      	add	r3, sp, #92	; 0x5c
 800b002:	a915      	add	r1, sp, #84	; 0x54
 800b004:	4620      	mov	r0, r4
 800b006:	f001 f92f 	bl	800c268 <__gethex>
 800b00a:	f010 070f 	ands.w	r7, r0, #15
 800b00e:	4605      	mov	r5, r0
 800b010:	d005      	beq.n	800b01e <_strtod_l+0x76>
 800b012:	2f06      	cmp	r7, #6
 800b014:	d12a      	bne.n	800b06c <_strtod_l+0xc4>
 800b016:	3601      	adds	r6, #1
 800b018:	2300      	movs	r3, #0
 800b01a:	9615      	str	r6, [sp, #84]	; 0x54
 800b01c:	930a      	str	r3, [sp, #40]	; 0x28
 800b01e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b020:	2b00      	cmp	r3, #0
 800b022:	f040 857f 	bne.w	800bb24 <_strtod_l+0xb7c>
 800b026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b028:	b1db      	cbz	r3, 800b062 <_strtod_l+0xba>
 800b02a:	4642      	mov	r2, r8
 800b02c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b030:	ec43 2b10 	vmov	d0, r2, r3
 800b034:	b01b      	add	sp, #108	; 0x6c
 800b036:	ecbd 8b02 	vpop	{d8}
 800b03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03e:	2920      	cmp	r1, #32
 800b040:	d1cc      	bne.n	800afdc <_strtod_l+0x34>
 800b042:	3201      	adds	r2, #1
 800b044:	e7bf      	b.n	800afc6 <_strtod_l+0x1e>
 800b046:	292d      	cmp	r1, #45	; 0x2d
 800b048:	d1c8      	bne.n	800afdc <_strtod_l+0x34>
 800b04a:	2101      	movs	r1, #1
 800b04c:	910a      	str	r1, [sp, #40]	; 0x28
 800b04e:	1c51      	adds	r1, r2, #1
 800b050:	9115      	str	r1, [sp, #84]	; 0x54
 800b052:	7852      	ldrb	r2, [r2, #1]
 800b054:	2a00      	cmp	r2, #0
 800b056:	d1c3      	bne.n	800afe0 <_strtod_l+0x38>
 800b058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b05a:	9515      	str	r5, [sp, #84]	; 0x54
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f040 855f 	bne.w	800bb20 <_strtod_l+0xb78>
 800b062:	4642      	mov	r2, r8
 800b064:	464b      	mov	r3, r9
 800b066:	e7e3      	b.n	800b030 <_strtod_l+0x88>
 800b068:	2100      	movs	r1, #0
 800b06a:	e7ef      	b.n	800b04c <_strtod_l+0xa4>
 800b06c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b06e:	b13a      	cbz	r2, 800b080 <_strtod_l+0xd8>
 800b070:	2135      	movs	r1, #53	; 0x35
 800b072:	a818      	add	r0, sp, #96	; 0x60
 800b074:	f7ff ff37 	bl	800aee6 <__copybits>
 800b078:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7ff fb0a 	bl	800a694 <_Bfree>
 800b080:	3f01      	subs	r7, #1
 800b082:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b084:	2f04      	cmp	r7, #4
 800b086:	d806      	bhi.n	800b096 <_strtod_l+0xee>
 800b088:	e8df f007 	tbb	[pc, r7]
 800b08c:	201d0314 	.word	0x201d0314
 800b090:	14          	.byte	0x14
 800b091:	00          	.byte	0x00
 800b092:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b096:	05e9      	lsls	r1, r5, #23
 800b098:	bf48      	it	mi
 800b09a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b09e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0a2:	0d1b      	lsrs	r3, r3, #20
 800b0a4:	051b      	lsls	r3, r3, #20
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1b9      	bne.n	800b01e <_strtod_l+0x76>
 800b0aa:	f7fe faf7 	bl	800969c <__errno>
 800b0ae:	2322      	movs	r3, #34	; 0x22
 800b0b0:	6003      	str	r3, [r0, #0]
 800b0b2:	e7b4      	b.n	800b01e <_strtod_l+0x76>
 800b0b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b0b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b0bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b0c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b0c4:	e7e7      	b.n	800b096 <_strtod_l+0xee>
 800b0c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b240 <_strtod_l+0x298>
 800b0ca:	e7e4      	b.n	800b096 <_strtod_l+0xee>
 800b0cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b0d0:	f04f 38ff 	mov.w	r8, #4294967295
 800b0d4:	e7df      	b.n	800b096 <_strtod_l+0xee>
 800b0d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	9215      	str	r2, [sp, #84]	; 0x54
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2b30      	cmp	r3, #48	; 0x30
 800b0e0:	d0f9      	beq.n	800b0d6 <_strtod_l+0x12e>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d09b      	beq.n	800b01e <_strtod_l+0x76>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	f04f 0a00 	mov.w	sl, #0
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b0f6:	46d3      	mov	fp, sl
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b0fc:	7806      	ldrb	r6, [r0, #0]
 800b0fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b102:	b2d9      	uxtb	r1, r3
 800b104:	2909      	cmp	r1, #9
 800b106:	d926      	bls.n	800b156 <_strtod_l+0x1ae>
 800b108:	494c      	ldr	r1, [pc, #304]	; (800b23c <_strtod_l+0x294>)
 800b10a:	2201      	movs	r2, #1
 800b10c:	f000 ffe6 	bl	800c0dc <strncmp>
 800b110:	2800      	cmp	r0, #0
 800b112:	d030      	beq.n	800b176 <_strtod_l+0x1ce>
 800b114:	2000      	movs	r0, #0
 800b116:	4632      	mov	r2, r6
 800b118:	9005      	str	r0, [sp, #20]
 800b11a:	465e      	mov	r6, fp
 800b11c:	4603      	mov	r3, r0
 800b11e:	2a65      	cmp	r2, #101	; 0x65
 800b120:	d001      	beq.n	800b126 <_strtod_l+0x17e>
 800b122:	2a45      	cmp	r2, #69	; 0x45
 800b124:	d113      	bne.n	800b14e <_strtod_l+0x1a6>
 800b126:	b91e      	cbnz	r6, 800b130 <_strtod_l+0x188>
 800b128:	9a04      	ldr	r2, [sp, #16]
 800b12a:	4302      	orrs	r2, r0
 800b12c:	d094      	beq.n	800b058 <_strtod_l+0xb0>
 800b12e:	2600      	movs	r6, #0
 800b130:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b132:	1c6a      	adds	r2, r5, #1
 800b134:	9215      	str	r2, [sp, #84]	; 0x54
 800b136:	786a      	ldrb	r2, [r5, #1]
 800b138:	2a2b      	cmp	r2, #43	; 0x2b
 800b13a:	d074      	beq.n	800b226 <_strtod_l+0x27e>
 800b13c:	2a2d      	cmp	r2, #45	; 0x2d
 800b13e:	d078      	beq.n	800b232 <_strtod_l+0x28a>
 800b140:	f04f 0c00 	mov.w	ip, #0
 800b144:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b148:	2909      	cmp	r1, #9
 800b14a:	d97f      	bls.n	800b24c <_strtod_l+0x2a4>
 800b14c:	9515      	str	r5, [sp, #84]	; 0x54
 800b14e:	2700      	movs	r7, #0
 800b150:	e09e      	b.n	800b290 <_strtod_l+0x2e8>
 800b152:	2300      	movs	r3, #0
 800b154:	e7c8      	b.n	800b0e8 <_strtod_l+0x140>
 800b156:	f1bb 0f08 	cmp.w	fp, #8
 800b15a:	bfd8      	it	le
 800b15c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b15e:	f100 0001 	add.w	r0, r0, #1
 800b162:	bfda      	itte	le
 800b164:	fb02 3301 	mlale	r3, r2, r1, r3
 800b168:	9309      	strle	r3, [sp, #36]	; 0x24
 800b16a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b16e:	f10b 0b01 	add.w	fp, fp, #1
 800b172:	9015      	str	r0, [sp, #84]	; 0x54
 800b174:	e7c1      	b.n	800b0fa <_strtod_l+0x152>
 800b176:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	9215      	str	r2, [sp, #84]	; 0x54
 800b17c:	785a      	ldrb	r2, [r3, #1]
 800b17e:	f1bb 0f00 	cmp.w	fp, #0
 800b182:	d037      	beq.n	800b1f4 <_strtod_l+0x24c>
 800b184:	9005      	str	r0, [sp, #20]
 800b186:	465e      	mov	r6, fp
 800b188:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b18c:	2b09      	cmp	r3, #9
 800b18e:	d912      	bls.n	800b1b6 <_strtod_l+0x20e>
 800b190:	2301      	movs	r3, #1
 800b192:	e7c4      	b.n	800b11e <_strtod_l+0x176>
 800b194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	9215      	str	r2, [sp, #84]	; 0x54
 800b19a:	785a      	ldrb	r2, [r3, #1]
 800b19c:	3001      	adds	r0, #1
 800b19e:	2a30      	cmp	r2, #48	; 0x30
 800b1a0:	d0f8      	beq.n	800b194 <_strtod_l+0x1ec>
 800b1a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b1a6:	2b08      	cmp	r3, #8
 800b1a8:	f200 84c1 	bhi.w	800bb2e <_strtod_l+0xb86>
 800b1ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ae:	9005      	str	r0, [sp, #20]
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	3a30      	subs	r2, #48	; 0x30
 800b1b8:	f100 0301 	add.w	r3, r0, #1
 800b1bc:	d014      	beq.n	800b1e8 <_strtod_l+0x240>
 800b1be:	9905      	ldr	r1, [sp, #20]
 800b1c0:	4419      	add	r1, r3
 800b1c2:	9105      	str	r1, [sp, #20]
 800b1c4:	4633      	mov	r3, r6
 800b1c6:	eb00 0c06 	add.w	ip, r0, r6
 800b1ca:	210a      	movs	r1, #10
 800b1cc:	4563      	cmp	r3, ip
 800b1ce:	d113      	bne.n	800b1f8 <_strtod_l+0x250>
 800b1d0:	1833      	adds	r3, r6, r0
 800b1d2:	2b08      	cmp	r3, #8
 800b1d4:	f106 0601 	add.w	r6, r6, #1
 800b1d8:	4406      	add	r6, r0
 800b1da:	dc1a      	bgt.n	800b212 <_strtod_l+0x26a>
 800b1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1de:	230a      	movs	r3, #10
 800b1e0:	fb03 2301 	mla	r3, r3, r1, r2
 800b1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b1ea:	1c51      	adds	r1, r2, #1
 800b1ec:	9115      	str	r1, [sp, #84]	; 0x54
 800b1ee:	7852      	ldrb	r2, [r2, #1]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	e7c9      	b.n	800b188 <_strtod_l+0x1e0>
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	e7d2      	b.n	800b19e <_strtod_l+0x1f6>
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	f103 0301 	add.w	r3, r3, #1
 800b1fe:	dc03      	bgt.n	800b208 <_strtod_l+0x260>
 800b200:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b202:	434f      	muls	r7, r1
 800b204:	9709      	str	r7, [sp, #36]	; 0x24
 800b206:	e7e1      	b.n	800b1cc <_strtod_l+0x224>
 800b208:	2b10      	cmp	r3, #16
 800b20a:	bfd8      	it	le
 800b20c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b210:	e7dc      	b.n	800b1cc <_strtod_l+0x224>
 800b212:	2e10      	cmp	r6, #16
 800b214:	bfdc      	itt	le
 800b216:	230a      	movle	r3, #10
 800b218:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b21c:	e7e3      	b.n	800b1e6 <_strtod_l+0x23e>
 800b21e:	2300      	movs	r3, #0
 800b220:	9305      	str	r3, [sp, #20]
 800b222:	2301      	movs	r3, #1
 800b224:	e780      	b.n	800b128 <_strtod_l+0x180>
 800b226:	f04f 0c00 	mov.w	ip, #0
 800b22a:	1caa      	adds	r2, r5, #2
 800b22c:	9215      	str	r2, [sp, #84]	; 0x54
 800b22e:	78aa      	ldrb	r2, [r5, #2]
 800b230:	e788      	b.n	800b144 <_strtod_l+0x19c>
 800b232:	f04f 0c01 	mov.w	ip, #1
 800b236:	e7f8      	b.n	800b22a <_strtod_l+0x282>
 800b238:	0800d1e0 	.word	0x0800d1e0
 800b23c:	0800d1dc 	.word	0x0800d1dc
 800b240:	7ff00000 	.word	0x7ff00000
 800b244:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b246:	1c51      	adds	r1, r2, #1
 800b248:	9115      	str	r1, [sp, #84]	; 0x54
 800b24a:	7852      	ldrb	r2, [r2, #1]
 800b24c:	2a30      	cmp	r2, #48	; 0x30
 800b24e:	d0f9      	beq.n	800b244 <_strtod_l+0x29c>
 800b250:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b254:	2908      	cmp	r1, #8
 800b256:	f63f af7a 	bhi.w	800b14e <_strtod_l+0x1a6>
 800b25a:	3a30      	subs	r2, #48	; 0x30
 800b25c:	9208      	str	r2, [sp, #32]
 800b25e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b260:	920c      	str	r2, [sp, #48]	; 0x30
 800b262:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b264:	1c57      	adds	r7, r2, #1
 800b266:	9715      	str	r7, [sp, #84]	; 0x54
 800b268:	7852      	ldrb	r2, [r2, #1]
 800b26a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b26e:	f1be 0f09 	cmp.w	lr, #9
 800b272:	d938      	bls.n	800b2e6 <_strtod_l+0x33e>
 800b274:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b276:	1a7f      	subs	r7, r7, r1
 800b278:	2f08      	cmp	r7, #8
 800b27a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b27e:	dc03      	bgt.n	800b288 <_strtod_l+0x2e0>
 800b280:	9908      	ldr	r1, [sp, #32]
 800b282:	428f      	cmp	r7, r1
 800b284:	bfa8      	it	ge
 800b286:	460f      	movge	r7, r1
 800b288:	f1bc 0f00 	cmp.w	ip, #0
 800b28c:	d000      	beq.n	800b290 <_strtod_l+0x2e8>
 800b28e:	427f      	negs	r7, r7
 800b290:	2e00      	cmp	r6, #0
 800b292:	d14f      	bne.n	800b334 <_strtod_l+0x38c>
 800b294:	9904      	ldr	r1, [sp, #16]
 800b296:	4301      	orrs	r1, r0
 800b298:	f47f aec1 	bne.w	800b01e <_strtod_l+0x76>
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f47f aedb 	bne.w	800b058 <_strtod_l+0xb0>
 800b2a2:	2a69      	cmp	r2, #105	; 0x69
 800b2a4:	d029      	beq.n	800b2fa <_strtod_l+0x352>
 800b2a6:	dc26      	bgt.n	800b2f6 <_strtod_l+0x34e>
 800b2a8:	2a49      	cmp	r2, #73	; 0x49
 800b2aa:	d026      	beq.n	800b2fa <_strtod_l+0x352>
 800b2ac:	2a4e      	cmp	r2, #78	; 0x4e
 800b2ae:	f47f aed3 	bne.w	800b058 <_strtod_l+0xb0>
 800b2b2:	499b      	ldr	r1, [pc, #620]	; (800b520 <_strtod_l+0x578>)
 800b2b4:	a815      	add	r0, sp, #84	; 0x54
 800b2b6:	f001 fa17 	bl	800c6e8 <__match>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	f43f aecc 	beq.w	800b058 <_strtod_l+0xb0>
 800b2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b28      	cmp	r3, #40	; 0x28
 800b2c6:	d12f      	bne.n	800b328 <_strtod_l+0x380>
 800b2c8:	4996      	ldr	r1, [pc, #600]	; (800b524 <_strtod_l+0x57c>)
 800b2ca:	aa18      	add	r2, sp, #96	; 0x60
 800b2cc:	a815      	add	r0, sp, #84	; 0x54
 800b2ce:	f001 fa1f 	bl	800c710 <__hexnan>
 800b2d2:	2805      	cmp	r0, #5
 800b2d4:	d128      	bne.n	800b328 <_strtod_l+0x380>
 800b2d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b2dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b2e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b2e4:	e69b      	b.n	800b01e <_strtod_l+0x76>
 800b2e6:	9f08      	ldr	r7, [sp, #32]
 800b2e8:	210a      	movs	r1, #10
 800b2ea:	fb01 2107 	mla	r1, r1, r7, r2
 800b2ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b2f2:	9208      	str	r2, [sp, #32]
 800b2f4:	e7b5      	b.n	800b262 <_strtod_l+0x2ba>
 800b2f6:	2a6e      	cmp	r2, #110	; 0x6e
 800b2f8:	e7d9      	b.n	800b2ae <_strtod_l+0x306>
 800b2fa:	498b      	ldr	r1, [pc, #556]	; (800b528 <_strtod_l+0x580>)
 800b2fc:	a815      	add	r0, sp, #84	; 0x54
 800b2fe:	f001 f9f3 	bl	800c6e8 <__match>
 800b302:	2800      	cmp	r0, #0
 800b304:	f43f aea8 	beq.w	800b058 <_strtod_l+0xb0>
 800b308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b30a:	4988      	ldr	r1, [pc, #544]	; (800b52c <_strtod_l+0x584>)
 800b30c:	3b01      	subs	r3, #1
 800b30e:	a815      	add	r0, sp, #84	; 0x54
 800b310:	9315      	str	r3, [sp, #84]	; 0x54
 800b312:	f001 f9e9 	bl	800c6e8 <__match>
 800b316:	b910      	cbnz	r0, 800b31e <_strtod_l+0x376>
 800b318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b31a:	3301      	adds	r3, #1
 800b31c:	9315      	str	r3, [sp, #84]	; 0x54
 800b31e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b53c <_strtod_l+0x594>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	e67a      	b.n	800b01e <_strtod_l+0x76>
 800b328:	4881      	ldr	r0, [pc, #516]	; (800b530 <_strtod_l+0x588>)
 800b32a:	f000 fef9 	bl	800c120 <nan>
 800b32e:	ec59 8b10 	vmov	r8, r9, d0
 800b332:	e674      	b.n	800b01e <_strtod_l+0x76>
 800b334:	9b05      	ldr	r3, [sp, #20]
 800b336:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b338:	1afb      	subs	r3, r7, r3
 800b33a:	f1bb 0f00 	cmp.w	fp, #0
 800b33e:	bf08      	it	eq
 800b340:	46b3      	moveq	fp, r6
 800b342:	2e10      	cmp	r6, #16
 800b344:	9308      	str	r3, [sp, #32]
 800b346:	4635      	mov	r5, r6
 800b348:	bfa8      	it	ge
 800b34a:	2510      	movge	r5, #16
 800b34c:	f7f5 f8e2 	bl	8000514 <__aeabi_ui2d>
 800b350:	2e09      	cmp	r6, #9
 800b352:	4680      	mov	r8, r0
 800b354:	4689      	mov	r9, r1
 800b356:	dd13      	ble.n	800b380 <_strtod_l+0x3d8>
 800b358:	4b76      	ldr	r3, [pc, #472]	; (800b534 <_strtod_l+0x58c>)
 800b35a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b35e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b362:	f7f5 f951 	bl	8000608 <__aeabi_dmul>
 800b366:	4680      	mov	r8, r0
 800b368:	4650      	mov	r0, sl
 800b36a:	4689      	mov	r9, r1
 800b36c:	f7f5 f8d2 	bl	8000514 <__aeabi_ui2d>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4640      	mov	r0, r8
 800b376:	4649      	mov	r1, r9
 800b378:	f7f4 ff90 	bl	800029c <__adddf3>
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	2e0f      	cmp	r6, #15
 800b382:	dc38      	bgt.n	800b3f6 <_strtod_l+0x44e>
 800b384:	9b08      	ldr	r3, [sp, #32]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f43f ae49 	beq.w	800b01e <_strtod_l+0x76>
 800b38c:	dd24      	ble.n	800b3d8 <_strtod_l+0x430>
 800b38e:	2b16      	cmp	r3, #22
 800b390:	dc0b      	bgt.n	800b3aa <_strtod_l+0x402>
 800b392:	4968      	ldr	r1, [pc, #416]	; (800b534 <_strtod_l+0x58c>)
 800b394:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	f7f5 f932 	bl	8000608 <__aeabi_dmul>
 800b3a4:	4680      	mov	r8, r0
 800b3a6:	4689      	mov	r9, r1
 800b3a8:	e639      	b.n	800b01e <_strtod_l+0x76>
 800b3aa:	9a08      	ldr	r2, [sp, #32]
 800b3ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	db20      	blt.n	800b3f6 <_strtod_l+0x44e>
 800b3b4:	4c5f      	ldr	r4, [pc, #380]	; (800b534 <_strtod_l+0x58c>)
 800b3b6:	f1c6 060f 	rsb	r6, r6, #15
 800b3ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b3be:	4642      	mov	r2, r8
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3c6:	f7f5 f91f 	bl	8000608 <__aeabi_dmul>
 800b3ca:	9b08      	ldr	r3, [sp, #32]
 800b3cc:	1b9e      	subs	r6, r3, r6
 800b3ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b3d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b3d6:	e7e3      	b.n	800b3a0 <_strtod_l+0x3f8>
 800b3d8:	9b08      	ldr	r3, [sp, #32]
 800b3da:	3316      	adds	r3, #22
 800b3dc:	db0b      	blt.n	800b3f6 <_strtod_l+0x44e>
 800b3de:	9b05      	ldr	r3, [sp, #20]
 800b3e0:	1bdf      	subs	r7, r3, r7
 800b3e2:	4b54      	ldr	r3, [pc, #336]	; (800b534 <_strtod_l+0x58c>)
 800b3e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	f7f5 fa34 	bl	800085c <__aeabi_ddiv>
 800b3f4:	e7d6      	b.n	800b3a4 <_strtod_l+0x3fc>
 800b3f6:	9b08      	ldr	r3, [sp, #32]
 800b3f8:	1b75      	subs	r5, r6, r5
 800b3fa:	441d      	add	r5, r3
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	dd70      	ble.n	800b4e2 <_strtod_l+0x53a>
 800b400:	f015 030f 	ands.w	r3, r5, #15
 800b404:	d00a      	beq.n	800b41c <_strtod_l+0x474>
 800b406:	494b      	ldr	r1, [pc, #300]	; (800b534 <_strtod_l+0x58c>)
 800b408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b40c:	4642      	mov	r2, r8
 800b40e:	464b      	mov	r3, r9
 800b410:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b414:	f7f5 f8f8 	bl	8000608 <__aeabi_dmul>
 800b418:	4680      	mov	r8, r0
 800b41a:	4689      	mov	r9, r1
 800b41c:	f035 050f 	bics.w	r5, r5, #15
 800b420:	d04d      	beq.n	800b4be <_strtod_l+0x516>
 800b422:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b426:	dd22      	ble.n	800b46e <_strtod_l+0x4c6>
 800b428:	2500      	movs	r5, #0
 800b42a:	46ab      	mov	fp, r5
 800b42c:	9509      	str	r5, [sp, #36]	; 0x24
 800b42e:	9505      	str	r5, [sp, #20]
 800b430:	2322      	movs	r3, #34	; 0x22
 800b432:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b53c <_strtod_l+0x594>
 800b436:	6023      	str	r3, [r4, #0]
 800b438:	f04f 0800 	mov.w	r8, #0
 800b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f43f aded 	beq.w	800b01e <_strtod_l+0x76>
 800b444:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b446:	4620      	mov	r0, r4
 800b448:	f7ff f924 	bl	800a694 <_Bfree>
 800b44c:	9905      	ldr	r1, [sp, #20]
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff f920 	bl	800a694 <_Bfree>
 800b454:	4659      	mov	r1, fp
 800b456:	4620      	mov	r0, r4
 800b458:	f7ff f91c 	bl	800a694 <_Bfree>
 800b45c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff f918 	bl	800a694 <_Bfree>
 800b464:	4629      	mov	r1, r5
 800b466:	4620      	mov	r0, r4
 800b468:	f7ff f914 	bl	800a694 <_Bfree>
 800b46c:	e5d7      	b.n	800b01e <_strtod_l+0x76>
 800b46e:	4b32      	ldr	r3, [pc, #200]	; (800b538 <_strtod_l+0x590>)
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	2300      	movs	r3, #0
 800b474:	112d      	asrs	r5, r5, #4
 800b476:	4640      	mov	r0, r8
 800b478:	4649      	mov	r1, r9
 800b47a:	469a      	mov	sl, r3
 800b47c:	2d01      	cmp	r5, #1
 800b47e:	dc21      	bgt.n	800b4c4 <_strtod_l+0x51c>
 800b480:	b10b      	cbz	r3, 800b486 <_strtod_l+0x4de>
 800b482:	4680      	mov	r8, r0
 800b484:	4689      	mov	r9, r1
 800b486:	492c      	ldr	r1, [pc, #176]	; (800b538 <_strtod_l+0x590>)
 800b488:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b48c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b490:	4642      	mov	r2, r8
 800b492:	464b      	mov	r3, r9
 800b494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b498:	f7f5 f8b6 	bl	8000608 <__aeabi_dmul>
 800b49c:	4b27      	ldr	r3, [pc, #156]	; (800b53c <_strtod_l+0x594>)
 800b49e:	460a      	mov	r2, r1
 800b4a0:	400b      	ands	r3, r1
 800b4a2:	4927      	ldr	r1, [pc, #156]	; (800b540 <_strtod_l+0x598>)
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	4680      	mov	r8, r0
 800b4a8:	d8be      	bhi.n	800b428 <_strtod_l+0x480>
 800b4aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b4ae:	428b      	cmp	r3, r1
 800b4b0:	bf86      	itte	hi
 800b4b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b544 <_strtod_l+0x59c>
 800b4b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800b4ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	e07b      	b.n	800b5bc <_strtod_l+0x614>
 800b4c4:	07ea      	lsls	r2, r5, #31
 800b4c6:	d505      	bpl.n	800b4d4 <_strtod_l+0x52c>
 800b4c8:	9b04      	ldr	r3, [sp, #16]
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7f5 f89b 	bl	8000608 <__aeabi_dmul>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9a04      	ldr	r2, [sp, #16]
 800b4d6:	3208      	adds	r2, #8
 800b4d8:	f10a 0a01 	add.w	sl, sl, #1
 800b4dc:	106d      	asrs	r5, r5, #1
 800b4de:	9204      	str	r2, [sp, #16]
 800b4e0:	e7cc      	b.n	800b47c <_strtod_l+0x4d4>
 800b4e2:	d0ec      	beq.n	800b4be <_strtod_l+0x516>
 800b4e4:	426d      	negs	r5, r5
 800b4e6:	f015 020f 	ands.w	r2, r5, #15
 800b4ea:	d00a      	beq.n	800b502 <_strtod_l+0x55a>
 800b4ec:	4b11      	ldr	r3, [pc, #68]	; (800b534 <_strtod_l+0x58c>)
 800b4ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	4649      	mov	r1, r9
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f5 f9af 	bl	800085c <__aeabi_ddiv>
 800b4fe:	4680      	mov	r8, r0
 800b500:	4689      	mov	r9, r1
 800b502:	112d      	asrs	r5, r5, #4
 800b504:	d0db      	beq.n	800b4be <_strtod_l+0x516>
 800b506:	2d1f      	cmp	r5, #31
 800b508:	dd1e      	ble.n	800b548 <_strtod_l+0x5a0>
 800b50a:	2500      	movs	r5, #0
 800b50c:	46ab      	mov	fp, r5
 800b50e:	9509      	str	r5, [sp, #36]	; 0x24
 800b510:	9505      	str	r5, [sp, #20]
 800b512:	2322      	movs	r3, #34	; 0x22
 800b514:	f04f 0800 	mov.w	r8, #0
 800b518:	f04f 0900 	mov.w	r9, #0
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	e78d      	b.n	800b43c <_strtod_l+0x494>
 800b520:	0800cfc9 	.word	0x0800cfc9
 800b524:	0800d1f4 	.word	0x0800d1f4
 800b528:	0800cfc1 	.word	0x0800cfc1
 800b52c:	0800cff8 	.word	0x0800cff8
 800b530:	0800d385 	.word	0x0800d385
 800b534:	0800d108 	.word	0x0800d108
 800b538:	0800d0e0 	.word	0x0800d0e0
 800b53c:	7ff00000 	.word	0x7ff00000
 800b540:	7ca00000 	.word	0x7ca00000
 800b544:	7fefffff 	.word	0x7fefffff
 800b548:	f015 0310 	ands.w	r3, r5, #16
 800b54c:	bf18      	it	ne
 800b54e:	236a      	movne	r3, #106	; 0x6a
 800b550:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b8f4 <_strtod_l+0x94c>
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	4640      	mov	r0, r8
 800b558:	4649      	mov	r1, r9
 800b55a:	2300      	movs	r3, #0
 800b55c:	07ea      	lsls	r2, r5, #31
 800b55e:	d504      	bpl.n	800b56a <_strtod_l+0x5c2>
 800b560:	e9da 2300 	ldrd	r2, r3, [sl]
 800b564:	f7f5 f850 	bl	8000608 <__aeabi_dmul>
 800b568:	2301      	movs	r3, #1
 800b56a:	106d      	asrs	r5, r5, #1
 800b56c:	f10a 0a08 	add.w	sl, sl, #8
 800b570:	d1f4      	bne.n	800b55c <_strtod_l+0x5b4>
 800b572:	b10b      	cbz	r3, 800b578 <_strtod_l+0x5d0>
 800b574:	4680      	mov	r8, r0
 800b576:	4689      	mov	r9, r1
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	b1bb      	cbz	r3, 800b5ac <_strtod_l+0x604>
 800b57c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b580:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b584:	2b00      	cmp	r3, #0
 800b586:	4649      	mov	r1, r9
 800b588:	dd10      	ble.n	800b5ac <_strtod_l+0x604>
 800b58a:	2b1f      	cmp	r3, #31
 800b58c:	f340 811e 	ble.w	800b7cc <_strtod_l+0x824>
 800b590:	2b34      	cmp	r3, #52	; 0x34
 800b592:	bfde      	ittt	le
 800b594:	f04f 33ff 	movle.w	r3, #4294967295
 800b598:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b59c:	4093      	lslle	r3, r2
 800b59e:	f04f 0800 	mov.w	r8, #0
 800b5a2:	bfcc      	ite	gt
 800b5a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b5a8:	ea03 0901 	andle.w	r9, r3, r1
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	f7f5 fa90 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d1a6      	bne.n	800b50a <_strtod_l+0x562>
 800b5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5c2:	4633      	mov	r3, r6
 800b5c4:	465a      	mov	r2, fp
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff f8cc 	bl	800a764 <__s2b>
 800b5cc:	9009      	str	r0, [sp, #36]	; 0x24
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f af2a 	beq.w	800b428 <_strtod_l+0x480>
 800b5d4:	9a08      	ldr	r2, [sp, #32]
 800b5d6:	9b05      	ldr	r3, [sp, #20]
 800b5d8:	2a00      	cmp	r2, #0
 800b5da:	eba3 0307 	sub.w	r3, r3, r7
 800b5de:	bfa8      	it	ge
 800b5e0:	2300      	movge	r3, #0
 800b5e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b5ea:	9312      	str	r3, [sp, #72]	; 0x48
 800b5ec:	46ab      	mov	fp, r5
 800b5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	6859      	ldr	r1, [r3, #4]
 800b5f4:	f7ff f80e 	bl	800a614 <_Balloc>
 800b5f8:	9005      	str	r0, [sp, #20]
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	f43f af18 	beq.w	800b430 <_strtod_l+0x488>
 800b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	3202      	adds	r2, #2
 800b606:	f103 010c 	add.w	r1, r3, #12
 800b60a:	0092      	lsls	r2, r2, #2
 800b60c:	300c      	adds	r0, #12
 800b60e:	f7fe f872 	bl	80096f6 <memcpy>
 800b612:	ec49 8b10 	vmov	d0, r8, r9
 800b616:	aa18      	add	r2, sp, #96	; 0x60
 800b618:	a917      	add	r1, sp, #92	; 0x5c
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff fbd6 	bl	800adcc <__d2b>
 800b620:	ec49 8b18 	vmov	d8, r8, r9
 800b624:	9016      	str	r0, [sp, #88]	; 0x58
 800b626:	2800      	cmp	r0, #0
 800b628:	f43f af02 	beq.w	800b430 <_strtod_l+0x488>
 800b62c:	2101      	movs	r1, #1
 800b62e:	4620      	mov	r0, r4
 800b630:	f7ff f930 	bl	800a894 <__i2b>
 800b634:	4683      	mov	fp, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	f43f aefa 	beq.w	800b430 <_strtod_l+0x488>
 800b63c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b63e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b640:	2e00      	cmp	r6, #0
 800b642:	bfab      	itete	ge
 800b644:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b646:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b648:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b64a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b64e:	bfac      	ite	ge
 800b650:	eb06 0a03 	addge.w	sl, r6, r3
 800b654:	1b9f      	sublt	r7, r3, r6
 800b656:	9b04      	ldr	r3, [sp, #16]
 800b658:	1af6      	subs	r6, r6, r3
 800b65a:	4416      	add	r6, r2
 800b65c:	4ba0      	ldr	r3, [pc, #640]	; (800b8e0 <_strtod_l+0x938>)
 800b65e:	3e01      	subs	r6, #1
 800b660:	429e      	cmp	r6, r3
 800b662:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b666:	f280 80c4 	bge.w	800b7f2 <_strtod_l+0x84a>
 800b66a:	1b9b      	subs	r3, r3, r6
 800b66c:	2b1f      	cmp	r3, #31
 800b66e:	eba2 0203 	sub.w	r2, r2, r3
 800b672:	f04f 0101 	mov.w	r1, #1
 800b676:	f300 80b0 	bgt.w	800b7da <_strtod_l+0x832>
 800b67a:	fa01 f303 	lsl.w	r3, r1, r3
 800b67e:	930e      	str	r3, [sp, #56]	; 0x38
 800b680:	2300      	movs	r3, #0
 800b682:	930d      	str	r3, [sp, #52]	; 0x34
 800b684:	eb0a 0602 	add.w	r6, sl, r2
 800b688:	9b04      	ldr	r3, [sp, #16]
 800b68a:	45b2      	cmp	sl, r6
 800b68c:	4417      	add	r7, r2
 800b68e:	441f      	add	r7, r3
 800b690:	4653      	mov	r3, sl
 800b692:	bfa8      	it	ge
 800b694:	4633      	movge	r3, r6
 800b696:	42bb      	cmp	r3, r7
 800b698:	bfa8      	it	ge
 800b69a:	463b      	movge	r3, r7
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfc2      	ittt	gt
 800b6a0:	1af6      	subgt	r6, r6, r3
 800b6a2:	1aff      	subgt	r7, r7, r3
 800b6a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	dd17      	ble.n	800b6de <_strtod_l+0x736>
 800b6ae:	4659      	mov	r1, fp
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7ff f9ae 	bl	800aa14 <__pow5mult>
 800b6b8:	4683      	mov	fp, r0
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	f43f aeb8 	beq.w	800b430 <_strtod_l+0x488>
 800b6c0:	4601      	mov	r1, r0
 800b6c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f7ff f8fb 	bl	800a8c0 <__multiply>
 800b6ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	f43f aeaf 	beq.w	800b430 <_strtod_l+0x488>
 800b6d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f7fe ffdd 	bl	800a694 <_Bfree>
 800b6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6dc:	9316      	str	r3, [sp, #88]	; 0x58
 800b6de:	2e00      	cmp	r6, #0
 800b6e0:	f300 808c 	bgt.w	800b7fc <_strtod_l+0x854>
 800b6e4:	9b08      	ldr	r3, [sp, #32]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	dd08      	ble.n	800b6fc <_strtod_l+0x754>
 800b6ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ec:	9905      	ldr	r1, [sp, #20]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f7ff f990 	bl	800aa14 <__pow5mult>
 800b6f4:	9005      	str	r0, [sp, #20]
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f43f ae9a 	beq.w	800b430 <_strtod_l+0x488>
 800b6fc:	2f00      	cmp	r7, #0
 800b6fe:	dd08      	ble.n	800b712 <_strtod_l+0x76a>
 800b700:	9905      	ldr	r1, [sp, #20]
 800b702:	463a      	mov	r2, r7
 800b704:	4620      	mov	r0, r4
 800b706:	f7ff f9df 	bl	800aac8 <__lshift>
 800b70a:	9005      	str	r0, [sp, #20]
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f43f ae8f 	beq.w	800b430 <_strtod_l+0x488>
 800b712:	f1ba 0f00 	cmp.w	sl, #0
 800b716:	dd08      	ble.n	800b72a <_strtod_l+0x782>
 800b718:	4659      	mov	r1, fp
 800b71a:	4652      	mov	r2, sl
 800b71c:	4620      	mov	r0, r4
 800b71e:	f7ff f9d3 	bl	800aac8 <__lshift>
 800b722:	4683      	mov	fp, r0
 800b724:	2800      	cmp	r0, #0
 800b726:	f43f ae83 	beq.w	800b430 <_strtod_l+0x488>
 800b72a:	9a05      	ldr	r2, [sp, #20]
 800b72c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b72e:	4620      	mov	r0, r4
 800b730:	f7ff fa52 	bl	800abd8 <__mdiff>
 800b734:	4605      	mov	r5, r0
 800b736:	2800      	cmp	r0, #0
 800b738:	f43f ae7a 	beq.w	800b430 <_strtod_l+0x488>
 800b73c:	68c3      	ldr	r3, [r0, #12]
 800b73e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b740:	2300      	movs	r3, #0
 800b742:	60c3      	str	r3, [r0, #12]
 800b744:	4659      	mov	r1, fp
 800b746:	f7ff fa2b 	bl	800aba0 <__mcmp>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	da60      	bge.n	800b810 <_strtod_l+0x868>
 800b74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b750:	ea53 0308 	orrs.w	r3, r3, r8
 800b754:	f040 8084 	bne.w	800b860 <_strtod_l+0x8b8>
 800b758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d17f      	bne.n	800b860 <_strtod_l+0x8b8>
 800b760:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b764:	0d1b      	lsrs	r3, r3, #20
 800b766:	051b      	lsls	r3, r3, #20
 800b768:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b76c:	d978      	bls.n	800b860 <_strtod_l+0x8b8>
 800b76e:	696b      	ldr	r3, [r5, #20]
 800b770:	b913      	cbnz	r3, 800b778 <_strtod_l+0x7d0>
 800b772:	692b      	ldr	r3, [r5, #16]
 800b774:	2b01      	cmp	r3, #1
 800b776:	dd73      	ble.n	800b860 <_strtod_l+0x8b8>
 800b778:	4629      	mov	r1, r5
 800b77a:	2201      	movs	r2, #1
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7ff f9a3 	bl	800aac8 <__lshift>
 800b782:	4659      	mov	r1, fp
 800b784:	4605      	mov	r5, r0
 800b786:	f7ff fa0b 	bl	800aba0 <__mcmp>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	dd68      	ble.n	800b860 <_strtod_l+0x8b8>
 800b78e:	9904      	ldr	r1, [sp, #16]
 800b790:	4a54      	ldr	r2, [pc, #336]	; (800b8e4 <_strtod_l+0x93c>)
 800b792:	464b      	mov	r3, r9
 800b794:	2900      	cmp	r1, #0
 800b796:	f000 8084 	beq.w	800b8a2 <_strtod_l+0x8fa>
 800b79a:	ea02 0109 	and.w	r1, r2, r9
 800b79e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b7a2:	dc7e      	bgt.n	800b8a2 <_strtod_l+0x8fa>
 800b7a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b7a8:	f77f aeb3 	ble.w	800b512 <_strtod_l+0x56a>
 800b7ac:	4b4e      	ldr	r3, [pc, #312]	; (800b8e8 <_strtod_l+0x940>)
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f7f4 ff28 	bl	8000608 <__aeabi_dmul>
 800b7b8:	4b4a      	ldr	r3, [pc, #296]	; (800b8e4 <_strtod_l+0x93c>)
 800b7ba:	400b      	ands	r3, r1
 800b7bc:	4680      	mov	r8, r0
 800b7be:	4689      	mov	r9, r1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f47f ae3f 	bne.w	800b444 <_strtod_l+0x49c>
 800b7c6:	2322      	movs	r3, #34	; 0x22
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	e63b      	b.n	800b444 <_strtod_l+0x49c>
 800b7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d4:	ea03 0808 	and.w	r8, r3, r8
 800b7d8:	e6e8      	b.n	800b5ac <_strtod_l+0x604>
 800b7da:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b7de:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b7e2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b7e6:	36e2      	adds	r6, #226	; 0xe2
 800b7e8:	fa01 f306 	lsl.w	r3, r1, r6
 800b7ec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b7f0:	e748      	b.n	800b684 <_strtod_l+0x6dc>
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b7fa:	e743      	b.n	800b684 <_strtod_l+0x6dc>
 800b7fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7fe:	4632      	mov	r2, r6
 800b800:	4620      	mov	r0, r4
 800b802:	f7ff f961 	bl	800aac8 <__lshift>
 800b806:	9016      	str	r0, [sp, #88]	; 0x58
 800b808:	2800      	cmp	r0, #0
 800b80a:	f47f af6b 	bne.w	800b6e4 <_strtod_l+0x73c>
 800b80e:	e60f      	b.n	800b430 <_strtod_l+0x488>
 800b810:	46ca      	mov	sl, r9
 800b812:	d171      	bne.n	800b8f8 <_strtod_l+0x950>
 800b814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b81a:	b352      	cbz	r2, 800b872 <_strtod_l+0x8ca>
 800b81c:	4a33      	ldr	r2, [pc, #204]	; (800b8ec <_strtod_l+0x944>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d12a      	bne.n	800b878 <_strtod_l+0x8d0>
 800b822:	9b04      	ldr	r3, [sp, #16]
 800b824:	4641      	mov	r1, r8
 800b826:	b1fb      	cbz	r3, 800b868 <_strtod_l+0x8c0>
 800b828:	4b2e      	ldr	r3, [pc, #184]	; (800b8e4 <_strtod_l+0x93c>)
 800b82a:	ea09 0303 	and.w	r3, r9, r3
 800b82e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b832:	f04f 32ff 	mov.w	r2, #4294967295
 800b836:	d81a      	bhi.n	800b86e <_strtod_l+0x8c6>
 800b838:	0d1b      	lsrs	r3, r3, #20
 800b83a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b83e:	fa02 f303 	lsl.w	r3, r2, r3
 800b842:	4299      	cmp	r1, r3
 800b844:	d118      	bne.n	800b878 <_strtod_l+0x8d0>
 800b846:	4b2a      	ldr	r3, [pc, #168]	; (800b8f0 <_strtod_l+0x948>)
 800b848:	459a      	cmp	sl, r3
 800b84a:	d102      	bne.n	800b852 <_strtod_l+0x8aa>
 800b84c:	3101      	adds	r1, #1
 800b84e:	f43f adef 	beq.w	800b430 <_strtod_l+0x488>
 800b852:	4b24      	ldr	r3, [pc, #144]	; (800b8e4 <_strtod_l+0x93c>)
 800b854:	ea0a 0303 	and.w	r3, sl, r3
 800b858:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b85c:	f04f 0800 	mov.w	r8, #0
 800b860:	9b04      	ldr	r3, [sp, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1a2      	bne.n	800b7ac <_strtod_l+0x804>
 800b866:	e5ed      	b.n	800b444 <_strtod_l+0x49c>
 800b868:	f04f 33ff 	mov.w	r3, #4294967295
 800b86c:	e7e9      	b.n	800b842 <_strtod_l+0x89a>
 800b86e:	4613      	mov	r3, r2
 800b870:	e7e7      	b.n	800b842 <_strtod_l+0x89a>
 800b872:	ea53 0308 	orrs.w	r3, r3, r8
 800b876:	d08a      	beq.n	800b78e <_strtod_l+0x7e6>
 800b878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b87a:	b1e3      	cbz	r3, 800b8b6 <_strtod_l+0x90e>
 800b87c:	ea13 0f0a 	tst.w	r3, sl
 800b880:	d0ee      	beq.n	800b860 <_strtod_l+0x8b8>
 800b882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b884:	9a04      	ldr	r2, [sp, #16]
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	b1c3      	cbz	r3, 800b8be <_strtod_l+0x916>
 800b88c:	f7ff fb6f 	bl	800af6e <sulp>
 800b890:	4602      	mov	r2, r0
 800b892:	460b      	mov	r3, r1
 800b894:	ec51 0b18 	vmov	r0, r1, d8
 800b898:	f7f4 fd00 	bl	800029c <__adddf3>
 800b89c:	4680      	mov	r8, r0
 800b89e:	4689      	mov	r9, r1
 800b8a0:	e7de      	b.n	800b860 <_strtod_l+0x8b8>
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b8a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b8ac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b8b0:	f04f 38ff 	mov.w	r8, #4294967295
 800b8b4:	e7d4      	b.n	800b860 <_strtod_l+0x8b8>
 800b8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8b8:	ea13 0f08 	tst.w	r3, r8
 800b8bc:	e7e0      	b.n	800b880 <_strtod_l+0x8d8>
 800b8be:	f7ff fb56 	bl	800af6e <sulp>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	ec51 0b18 	vmov	r0, r1, d8
 800b8ca:	f7f4 fce5 	bl	8000298 <__aeabi_dsub>
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	4689      	mov	r9, r1
 800b8d6:	f7f5 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d0c0      	beq.n	800b860 <_strtod_l+0x8b8>
 800b8de:	e618      	b.n	800b512 <_strtod_l+0x56a>
 800b8e0:	fffffc02 	.word	0xfffffc02
 800b8e4:	7ff00000 	.word	0x7ff00000
 800b8e8:	39500000 	.word	0x39500000
 800b8ec:	000fffff 	.word	0x000fffff
 800b8f0:	7fefffff 	.word	0x7fefffff
 800b8f4:	0800d208 	.word	0x0800d208
 800b8f8:	4659      	mov	r1, fp
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f7ff fac0 	bl	800ae80 <__ratio>
 800b900:	ec57 6b10 	vmov	r6, r7, d0
 800b904:	ee10 0a10 	vmov	r0, s0
 800b908:	2200      	movs	r2, #0
 800b90a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b90e:	4639      	mov	r1, r7
 800b910:	f7f5 f8f6 	bl	8000b00 <__aeabi_dcmple>
 800b914:	2800      	cmp	r0, #0
 800b916:	d071      	beq.n	800b9fc <_strtod_l+0xa54>
 800b918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d17c      	bne.n	800ba18 <_strtod_l+0xa70>
 800b91e:	f1b8 0f00 	cmp.w	r8, #0
 800b922:	d15a      	bne.n	800b9da <_strtod_l+0xa32>
 800b924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d15d      	bne.n	800b9e8 <_strtod_l+0xa40>
 800b92c:	4b90      	ldr	r3, [pc, #576]	; (800bb70 <_strtod_l+0xbc8>)
 800b92e:	2200      	movs	r2, #0
 800b930:	4630      	mov	r0, r6
 800b932:	4639      	mov	r1, r7
 800b934:	f7f5 f8da 	bl	8000aec <__aeabi_dcmplt>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d15c      	bne.n	800b9f6 <_strtod_l+0xa4e>
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	4b8c      	ldr	r3, [pc, #560]	; (800bb74 <_strtod_l+0xbcc>)
 800b942:	2200      	movs	r2, #0
 800b944:	f7f4 fe60 	bl	8000608 <__aeabi_dmul>
 800b948:	4606      	mov	r6, r0
 800b94a:	460f      	mov	r7, r1
 800b94c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b950:	9606      	str	r6, [sp, #24]
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b958:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b95c:	4b86      	ldr	r3, [pc, #536]	; (800bb78 <_strtod_l+0xbd0>)
 800b95e:	ea0a 0303 	and.w	r3, sl, r3
 800b962:	930d      	str	r3, [sp, #52]	; 0x34
 800b964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b966:	4b85      	ldr	r3, [pc, #532]	; (800bb7c <_strtod_l+0xbd4>)
 800b968:	429a      	cmp	r2, r3
 800b96a:	f040 8090 	bne.w	800ba8e <_strtod_l+0xae6>
 800b96e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b972:	ec49 8b10 	vmov	d0, r8, r9
 800b976:	f7ff f9b9 	bl	800acec <__ulp>
 800b97a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b97e:	ec51 0b10 	vmov	r0, r1, d0
 800b982:	f7f4 fe41 	bl	8000608 <__aeabi_dmul>
 800b986:	4642      	mov	r2, r8
 800b988:	464b      	mov	r3, r9
 800b98a:	f7f4 fc87 	bl	800029c <__adddf3>
 800b98e:	460b      	mov	r3, r1
 800b990:	4979      	ldr	r1, [pc, #484]	; (800bb78 <_strtod_l+0xbd0>)
 800b992:	4a7b      	ldr	r2, [pc, #492]	; (800bb80 <_strtod_l+0xbd8>)
 800b994:	4019      	ands	r1, r3
 800b996:	4291      	cmp	r1, r2
 800b998:	4680      	mov	r8, r0
 800b99a:	d944      	bls.n	800ba26 <_strtod_l+0xa7e>
 800b99c:	ee18 2a90 	vmov	r2, s17
 800b9a0:	4b78      	ldr	r3, [pc, #480]	; (800bb84 <_strtod_l+0xbdc>)
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d104      	bne.n	800b9b0 <_strtod_l+0xa08>
 800b9a6:	ee18 3a10 	vmov	r3, s16
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	f43f ad40 	beq.w	800b430 <_strtod_l+0x488>
 800b9b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bb84 <_strtod_l+0xbdc>
 800b9b4:	f04f 38ff 	mov.w	r8, #4294967295
 800b9b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f7fe fe6a 	bl	800a694 <_Bfree>
 800b9c0:	9905      	ldr	r1, [sp, #20]
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f7fe fe66 	bl	800a694 <_Bfree>
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7fe fe62 	bl	800a694 <_Bfree>
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f7fe fe5e 	bl	800a694 <_Bfree>
 800b9d8:	e609      	b.n	800b5ee <_strtod_l+0x646>
 800b9da:	f1b8 0f01 	cmp.w	r8, #1
 800b9de:	d103      	bne.n	800b9e8 <_strtod_l+0xa40>
 800b9e0:	f1b9 0f00 	cmp.w	r9, #0
 800b9e4:	f43f ad95 	beq.w	800b512 <_strtod_l+0x56a>
 800b9e8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bb40 <_strtod_l+0xb98>
 800b9ec:	4f60      	ldr	r7, [pc, #384]	; (800bb70 <_strtod_l+0xbc8>)
 800b9ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	e7ae      	b.n	800b954 <_strtod_l+0x9ac>
 800b9f6:	4f5f      	ldr	r7, [pc, #380]	; (800bb74 <_strtod_l+0xbcc>)
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	e7a7      	b.n	800b94c <_strtod_l+0x9a4>
 800b9fc:	4b5d      	ldr	r3, [pc, #372]	; (800bb74 <_strtod_l+0xbcc>)
 800b9fe:	4630      	mov	r0, r6
 800ba00:	4639      	mov	r1, r7
 800ba02:	2200      	movs	r2, #0
 800ba04:	f7f4 fe00 	bl	8000608 <__aeabi_dmul>
 800ba08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d09c      	beq.n	800b94c <_strtod_l+0x9a4>
 800ba12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ba16:	e79d      	b.n	800b954 <_strtod_l+0x9ac>
 800ba18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bb48 <_strtod_l+0xba0>
 800ba1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba20:	ec57 6b17 	vmov	r6, r7, d7
 800ba24:	e796      	b.n	800b954 <_strtod_l+0x9ac>
 800ba26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ba2a:	9b04      	ldr	r3, [sp, #16]
 800ba2c:	46ca      	mov	sl, r9
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1c2      	bne.n	800b9b8 <_strtod_l+0xa10>
 800ba32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba38:	0d1b      	lsrs	r3, r3, #20
 800ba3a:	051b      	lsls	r3, r3, #20
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d1bb      	bne.n	800b9b8 <_strtod_l+0xa10>
 800ba40:	4630      	mov	r0, r6
 800ba42:	4639      	mov	r1, r7
 800ba44:	f7f5 f928 	bl	8000c98 <__aeabi_d2lz>
 800ba48:	f7f4 fdb0 	bl	80005ac <__aeabi_l2d>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4630      	mov	r0, r6
 800ba52:	4639      	mov	r1, r7
 800ba54:	f7f4 fc20 	bl	8000298 <__aeabi_dsub>
 800ba58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba5e:	ea43 0308 	orr.w	r3, r3, r8
 800ba62:	4313      	orrs	r3, r2
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	d054      	beq.n	800bb14 <_strtod_l+0xb6c>
 800ba6a:	a339      	add	r3, pc, #228	; (adr r3, 800bb50 <_strtod_l+0xba8>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f5 f83c 	bl	8000aec <__aeabi_dcmplt>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f47f ace5 	bne.w	800b444 <_strtod_l+0x49c>
 800ba7a:	a337      	add	r3, pc, #220	; (adr r3, 800bb58 <_strtod_l+0xbb0>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f5 f850 	bl	8000b28 <__aeabi_dcmpgt>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d095      	beq.n	800b9b8 <_strtod_l+0xa10>
 800ba8c:	e4da      	b.n	800b444 <_strtod_l+0x49c>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	b333      	cbz	r3, 800bae0 <_strtod_l+0xb38>
 800ba92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba98:	d822      	bhi.n	800bae0 <_strtod_l+0xb38>
 800ba9a:	a331      	add	r3, pc, #196	; (adr r3, 800bb60 <_strtod_l+0xbb8>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	4630      	mov	r0, r6
 800baa2:	4639      	mov	r1, r7
 800baa4:	f7f5 f82c 	bl	8000b00 <__aeabi_dcmple>
 800baa8:	b1a0      	cbz	r0, 800bad4 <_strtod_l+0xb2c>
 800baaa:	4639      	mov	r1, r7
 800baac:	4630      	mov	r0, r6
 800baae:	f7f5 f883 	bl	8000bb8 <__aeabi_d2uiz>
 800bab2:	2801      	cmp	r0, #1
 800bab4:	bf38      	it	cc
 800bab6:	2001      	movcc	r0, #1
 800bab8:	f7f4 fd2c 	bl	8000514 <__aeabi_ui2d>
 800babc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800babe:	4606      	mov	r6, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	bb23      	cbnz	r3, 800bb0e <_strtod_l+0xb66>
 800bac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bac8:	9010      	str	r0, [sp, #64]	; 0x40
 800baca:	9311      	str	r3, [sp, #68]	; 0x44
 800bacc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bad0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bad8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	930f      	str	r3, [sp, #60]	; 0x3c
 800bae0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bae4:	eeb0 0a48 	vmov.f32	s0, s16
 800bae8:	eef0 0a68 	vmov.f32	s1, s17
 800baec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800baf0:	f7ff f8fc 	bl	800acec <__ulp>
 800baf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800baf8:	ec53 2b10 	vmov	r2, r3, d0
 800bafc:	f7f4 fd84 	bl	8000608 <__aeabi_dmul>
 800bb00:	ec53 2b18 	vmov	r2, r3, d8
 800bb04:	f7f4 fbca 	bl	800029c <__adddf3>
 800bb08:	4680      	mov	r8, r0
 800bb0a:	4689      	mov	r9, r1
 800bb0c:	e78d      	b.n	800ba2a <_strtod_l+0xa82>
 800bb0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bb12:	e7db      	b.n	800bacc <_strtod_l+0xb24>
 800bb14:	a314      	add	r3, pc, #80	; (adr r3, 800bb68 <_strtod_l+0xbc0>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f7f4 ffe7 	bl	8000aec <__aeabi_dcmplt>
 800bb1e:	e7b3      	b.n	800ba88 <_strtod_l+0xae0>
 800bb20:	2300      	movs	r3, #0
 800bb22:	930a      	str	r3, [sp, #40]	; 0x28
 800bb24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	f7ff ba7c 	b.w	800b026 <_strtod_l+0x7e>
 800bb2e:	2a65      	cmp	r2, #101	; 0x65
 800bb30:	f43f ab75 	beq.w	800b21e <_strtod_l+0x276>
 800bb34:	2a45      	cmp	r2, #69	; 0x45
 800bb36:	f43f ab72 	beq.w	800b21e <_strtod_l+0x276>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	f7ff bbaa 	b.w	800b294 <_strtod_l+0x2ec>
 800bb40:	00000000 	.word	0x00000000
 800bb44:	bff00000 	.word	0xbff00000
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	3ff00000 	.word	0x3ff00000
 800bb50:	94a03595 	.word	0x94a03595
 800bb54:	3fdfffff 	.word	0x3fdfffff
 800bb58:	35afe535 	.word	0x35afe535
 800bb5c:	3fe00000 	.word	0x3fe00000
 800bb60:	ffc00000 	.word	0xffc00000
 800bb64:	41dfffff 	.word	0x41dfffff
 800bb68:	94a03595 	.word	0x94a03595
 800bb6c:	3fcfffff 	.word	0x3fcfffff
 800bb70:	3ff00000 	.word	0x3ff00000
 800bb74:	3fe00000 	.word	0x3fe00000
 800bb78:	7ff00000 	.word	0x7ff00000
 800bb7c:	7fe00000 	.word	0x7fe00000
 800bb80:	7c9fffff 	.word	0x7c9fffff
 800bb84:	7fefffff 	.word	0x7fefffff

0800bb88 <_strtod_r>:
 800bb88:	4b01      	ldr	r3, [pc, #4]	; (800bb90 <_strtod_r+0x8>)
 800bb8a:	f7ff ba0d 	b.w	800afa8 <_strtod_l>
 800bb8e:	bf00      	nop
 800bb90:	20000074 	.word	0x20000074

0800bb94 <_strtol_l.constprop.0>:
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9a:	d001      	beq.n	800bba0 <_strtol_l.constprop.0+0xc>
 800bb9c:	2b24      	cmp	r3, #36	; 0x24
 800bb9e:	d906      	bls.n	800bbae <_strtol_l.constprop.0+0x1a>
 800bba0:	f7fd fd7c 	bl	800969c <__errno>
 800bba4:	2316      	movs	r3, #22
 800bba6:	6003      	str	r3, [r0, #0]
 800bba8:	2000      	movs	r0, #0
 800bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc94 <_strtol_l.constprop.0+0x100>
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	462e      	mov	r6, r5
 800bbb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bbbe:	f017 0708 	ands.w	r7, r7, #8
 800bbc2:	d1f7      	bne.n	800bbb4 <_strtol_l.constprop.0+0x20>
 800bbc4:	2c2d      	cmp	r4, #45	; 0x2d
 800bbc6:	d132      	bne.n	800bc2e <_strtol_l.constprop.0+0x9a>
 800bbc8:	782c      	ldrb	r4, [r5, #0]
 800bbca:	2701      	movs	r7, #1
 800bbcc:	1cb5      	adds	r5, r6, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d05b      	beq.n	800bc8a <_strtol_l.constprop.0+0xf6>
 800bbd2:	2b10      	cmp	r3, #16
 800bbd4:	d109      	bne.n	800bbea <_strtol_l.constprop.0+0x56>
 800bbd6:	2c30      	cmp	r4, #48	; 0x30
 800bbd8:	d107      	bne.n	800bbea <_strtol_l.constprop.0+0x56>
 800bbda:	782c      	ldrb	r4, [r5, #0]
 800bbdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bbe0:	2c58      	cmp	r4, #88	; 0x58
 800bbe2:	d14d      	bne.n	800bc80 <_strtol_l.constprop.0+0xec>
 800bbe4:	786c      	ldrb	r4, [r5, #1]
 800bbe6:	2310      	movs	r3, #16
 800bbe8:	3502      	adds	r5, #2
 800bbea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bbee:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbf2:	f04f 0e00 	mov.w	lr, #0
 800bbf6:	fbb8 f9f3 	udiv	r9, r8, r3
 800bbfa:	4676      	mov	r6, lr
 800bbfc:	fb03 8a19 	mls	sl, r3, r9, r8
 800bc00:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc04:	f1bc 0f09 	cmp.w	ip, #9
 800bc08:	d816      	bhi.n	800bc38 <_strtol_l.constprop.0+0xa4>
 800bc0a:	4664      	mov	r4, ip
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	dd24      	ble.n	800bc5a <_strtol_l.constprop.0+0xc6>
 800bc10:	f1be 3fff 	cmp.w	lr, #4294967295
 800bc14:	d008      	beq.n	800bc28 <_strtol_l.constprop.0+0x94>
 800bc16:	45b1      	cmp	r9, r6
 800bc18:	d31c      	bcc.n	800bc54 <_strtol_l.constprop.0+0xc0>
 800bc1a:	d101      	bne.n	800bc20 <_strtol_l.constprop.0+0x8c>
 800bc1c:	45a2      	cmp	sl, r4
 800bc1e:	db19      	blt.n	800bc54 <_strtol_l.constprop.0+0xc0>
 800bc20:	fb06 4603 	mla	r6, r6, r3, r4
 800bc24:	f04f 0e01 	mov.w	lr, #1
 800bc28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc2c:	e7e8      	b.n	800bc00 <_strtol_l.constprop.0+0x6c>
 800bc2e:	2c2b      	cmp	r4, #43	; 0x2b
 800bc30:	bf04      	itt	eq
 800bc32:	782c      	ldrbeq	r4, [r5, #0]
 800bc34:	1cb5      	addeq	r5, r6, #2
 800bc36:	e7ca      	b.n	800bbce <_strtol_l.constprop.0+0x3a>
 800bc38:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bc3c:	f1bc 0f19 	cmp.w	ip, #25
 800bc40:	d801      	bhi.n	800bc46 <_strtol_l.constprop.0+0xb2>
 800bc42:	3c37      	subs	r4, #55	; 0x37
 800bc44:	e7e2      	b.n	800bc0c <_strtol_l.constprop.0+0x78>
 800bc46:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bc4a:	f1bc 0f19 	cmp.w	ip, #25
 800bc4e:	d804      	bhi.n	800bc5a <_strtol_l.constprop.0+0xc6>
 800bc50:	3c57      	subs	r4, #87	; 0x57
 800bc52:	e7db      	b.n	800bc0c <_strtol_l.constprop.0+0x78>
 800bc54:	f04f 3eff 	mov.w	lr, #4294967295
 800bc58:	e7e6      	b.n	800bc28 <_strtol_l.constprop.0+0x94>
 800bc5a:	f1be 3fff 	cmp.w	lr, #4294967295
 800bc5e:	d105      	bne.n	800bc6c <_strtol_l.constprop.0+0xd8>
 800bc60:	2322      	movs	r3, #34	; 0x22
 800bc62:	6003      	str	r3, [r0, #0]
 800bc64:	4646      	mov	r6, r8
 800bc66:	b942      	cbnz	r2, 800bc7a <_strtol_l.constprop.0+0xe6>
 800bc68:	4630      	mov	r0, r6
 800bc6a:	e79e      	b.n	800bbaa <_strtol_l.constprop.0+0x16>
 800bc6c:	b107      	cbz	r7, 800bc70 <_strtol_l.constprop.0+0xdc>
 800bc6e:	4276      	negs	r6, r6
 800bc70:	2a00      	cmp	r2, #0
 800bc72:	d0f9      	beq.n	800bc68 <_strtol_l.constprop.0+0xd4>
 800bc74:	f1be 0f00 	cmp.w	lr, #0
 800bc78:	d000      	beq.n	800bc7c <_strtol_l.constprop.0+0xe8>
 800bc7a:	1e69      	subs	r1, r5, #1
 800bc7c:	6011      	str	r1, [r2, #0]
 800bc7e:	e7f3      	b.n	800bc68 <_strtol_l.constprop.0+0xd4>
 800bc80:	2430      	movs	r4, #48	; 0x30
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1b1      	bne.n	800bbea <_strtol_l.constprop.0+0x56>
 800bc86:	2308      	movs	r3, #8
 800bc88:	e7af      	b.n	800bbea <_strtol_l.constprop.0+0x56>
 800bc8a:	2c30      	cmp	r4, #48	; 0x30
 800bc8c:	d0a5      	beq.n	800bbda <_strtol_l.constprop.0+0x46>
 800bc8e:	230a      	movs	r3, #10
 800bc90:	e7ab      	b.n	800bbea <_strtol_l.constprop.0+0x56>
 800bc92:	bf00      	nop
 800bc94:	0800d231 	.word	0x0800d231

0800bc98 <_strtol_r>:
 800bc98:	f7ff bf7c 	b.w	800bb94 <_strtol_l.constprop.0>

0800bc9c <__ssputs_r>:
 800bc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca0:	688e      	ldr	r6, [r1, #8]
 800bca2:	461f      	mov	r7, r3
 800bca4:	42be      	cmp	r6, r7
 800bca6:	680b      	ldr	r3, [r1, #0]
 800bca8:	4682      	mov	sl, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	4690      	mov	r8, r2
 800bcae:	d82c      	bhi.n	800bd0a <__ssputs_r+0x6e>
 800bcb0:	898a      	ldrh	r2, [r1, #12]
 800bcb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcb6:	d026      	beq.n	800bd06 <__ssputs_r+0x6a>
 800bcb8:	6965      	ldr	r5, [r4, #20]
 800bcba:	6909      	ldr	r1, [r1, #16]
 800bcbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcc0:	eba3 0901 	sub.w	r9, r3, r1
 800bcc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcc8:	1c7b      	adds	r3, r7, #1
 800bcca:	444b      	add	r3, r9
 800bccc:	106d      	asrs	r5, r5, #1
 800bcce:	429d      	cmp	r5, r3
 800bcd0:	bf38      	it	cc
 800bcd2:	461d      	movcc	r5, r3
 800bcd4:	0553      	lsls	r3, r2, #21
 800bcd6:	d527      	bpl.n	800bd28 <__ssputs_r+0x8c>
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7fe fc0f 	bl	800a4fc <_malloc_r>
 800bcde:	4606      	mov	r6, r0
 800bce0:	b360      	cbz	r0, 800bd3c <__ssputs_r+0xa0>
 800bce2:	6921      	ldr	r1, [r4, #16]
 800bce4:	464a      	mov	r2, r9
 800bce6:	f7fd fd06 	bl	80096f6 <memcpy>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf4:	81a3      	strh	r3, [r4, #12]
 800bcf6:	6126      	str	r6, [r4, #16]
 800bcf8:	6165      	str	r5, [r4, #20]
 800bcfa:	444e      	add	r6, r9
 800bcfc:	eba5 0509 	sub.w	r5, r5, r9
 800bd00:	6026      	str	r6, [r4, #0]
 800bd02:	60a5      	str	r5, [r4, #8]
 800bd04:	463e      	mov	r6, r7
 800bd06:	42be      	cmp	r6, r7
 800bd08:	d900      	bls.n	800bd0c <__ssputs_r+0x70>
 800bd0a:	463e      	mov	r6, r7
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	4632      	mov	r2, r6
 800bd10:	4641      	mov	r1, r8
 800bd12:	f000 f9c9 	bl	800c0a8 <memmove>
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	1b9b      	subs	r3, r3, r6
 800bd1a:	60a3      	str	r3, [r4, #8]
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	4433      	add	r3, r6
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	2000      	movs	r0, #0
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	462a      	mov	r2, r5
 800bd2a:	f000 fd9e 	bl	800c86a <_realloc_r>
 800bd2e:	4606      	mov	r6, r0
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d1e0      	bne.n	800bcf6 <__ssputs_r+0x5a>
 800bd34:	6921      	ldr	r1, [r4, #16]
 800bd36:	4650      	mov	r0, sl
 800bd38:	f7fe fb6c 	bl	800a414 <_free_r>
 800bd3c:	230c      	movs	r3, #12
 800bd3e:	f8ca 3000 	str.w	r3, [sl]
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	e7e9      	b.n	800bd24 <__ssputs_r+0x88>

0800bd50 <_svfiprintf_r>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4698      	mov	r8, r3
 800bd56:	898b      	ldrh	r3, [r1, #12]
 800bd58:	061b      	lsls	r3, r3, #24
 800bd5a:	b09d      	sub	sp, #116	; 0x74
 800bd5c:	4607      	mov	r7, r0
 800bd5e:	460d      	mov	r5, r1
 800bd60:	4614      	mov	r4, r2
 800bd62:	d50e      	bpl.n	800bd82 <_svfiprintf_r+0x32>
 800bd64:	690b      	ldr	r3, [r1, #16]
 800bd66:	b963      	cbnz	r3, 800bd82 <_svfiprintf_r+0x32>
 800bd68:	2140      	movs	r1, #64	; 0x40
 800bd6a:	f7fe fbc7 	bl	800a4fc <_malloc_r>
 800bd6e:	6028      	str	r0, [r5, #0]
 800bd70:	6128      	str	r0, [r5, #16]
 800bd72:	b920      	cbnz	r0, 800bd7e <_svfiprintf_r+0x2e>
 800bd74:	230c      	movs	r3, #12
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7c:	e0d0      	b.n	800bf20 <_svfiprintf_r+0x1d0>
 800bd7e:	2340      	movs	r3, #64	; 0x40
 800bd80:	616b      	str	r3, [r5, #20]
 800bd82:	2300      	movs	r3, #0
 800bd84:	9309      	str	r3, [sp, #36]	; 0x24
 800bd86:	2320      	movs	r3, #32
 800bd88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd90:	2330      	movs	r3, #48	; 0x30
 800bd92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf38 <_svfiprintf_r+0x1e8>
 800bd96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd9a:	f04f 0901 	mov.w	r9, #1
 800bd9e:	4623      	mov	r3, r4
 800bda0:	469a      	mov	sl, r3
 800bda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bda6:	b10a      	cbz	r2, 800bdac <_svfiprintf_r+0x5c>
 800bda8:	2a25      	cmp	r2, #37	; 0x25
 800bdaa:	d1f9      	bne.n	800bda0 <_svfiprintf_r+0x50>
 800bdac:	ebba 0b04 	subs.w	fp, sl, r4
 800bdb0:	d00b      	beq.n	800bdca <_svfiprintf_r+0x7a>
 800bdb2:	465b      	mov	r3, fp
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f7ff ff6f 	bl	800bc9c <__ssputs_r>
 800bdbe:	3001      	adds	r0, #1
 800bdc0:	f000 80a9 	beq.w	800bf16 <_svfiprintf_r+0x1c6>
 800bdc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdc6:	445a      	add	r2, fp
 800bdc8:	9209      	str	r2, [sp, #36]	; 0x24
 800bdca:	f89a 3000 	ldrb.w	r3, [sl]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 80a1 	beq.w	800bf16 <_svfiprintf_r+0x1c6>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdde:	f10a 0a01 	add.w	sl, sl, #1
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	9307      	str	r3, [sp, #28]
 800bde6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdea:	931a      	str	r3, [sp, #104]	; 0x68
 800bdec:	4654      	mov	r4, sl
 800bdee:	2205      	movs	r2, #5
 800bdf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf4:	4850      	ldr	r0, [pc, #320]	; (800bf38 <_svfiprintf_r+0x1e8>)
 800bdf6:	f7f4 f9f3 	bl	80001e0 <memchr>
 800bdfa:	9a04      	ldr	r2, [sp, #16]
 800bdfc:	b9d8      	cbnz	r0, 800be36 <_svfiprintf_r+0xe6>
 800bdfe:	06d0      	lsls	r0, r2, #27
 800be00:	bf44      	itt	mi
 800be02:	2320      	movmi	r3, #32
 800be04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be08:	0711      	lsls	r1, r2, #28
 800be0a:	bf44      	itt	mi
 800be0c:	232b      	movmi	r3, #43	; 0x2b
 800be0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be12:	f89a 3000 	ldrb.w	r3, [sl]
 800be16:	2b2a      	cmp	r3, #42	; 0x2a
 800be18:	d015      	beq.n	800be46 <_svfiprintf_r+0xf6>
 800be1a:	9a07      	ldr	r2, [sp, #28]
 800be1c:	4654      	mov	r4, sl
 800be1e:	2000      	movs	r0, #0
 800be20:	f04f 0c0a 	mov.w	ip, #10
 800be24:	4621      	mov	r1, r4
 800be26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be2a:	3b30      	subs	r3, #48	; 0x30
 800be2c:	2b09      	cmp	r3, #9
 800be2e:	d94d      	bls.n	800becc <_svfiprintf_r+0x17c>
 800be30:	b1b0      	cbz	r0, 800be60 <_svfiprintf_r+0x110>
 800be32:	9207      	str	r2, [sp, #28]
 800be34:	e014      	b.n	800be60 <_svfiprintf_r+0x110>
 800be36:	eba0 0308 	sub.w	r3, r0, r8
 800be3a:	fa09 f303 	lsl.w	r3, r9, r3
 800be3e:	4313      	orrs	r3, r2
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	46a2      	mov	sl, r4
 800be44:	e7d2      	b.n	800bdec <_svfiprintf_r+0x9c>
 800be46:	9b03      	ldr	r3, [sp, #12]
 800be48:	1d19      	adds	r1, r3, #4
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	9103      	str	r1, [sp, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	bfbb      	ittet	lt
 800be52:	425b      	neglt	r3, r3
 800be54:	f042 0202 	orrlt.w	r2, r2, #2
 800be58:	9307      	strge	r3, [sp, #28]
 800be5a:	9307      	strlt	r3, [sp, #28]
 800be5c:	bfb8      	it	lt
 800be5e:	9204      	strlt	r2, [sp, #16]
 800be60:	7823      	ldrb	r3, [r4, #0]
 800be62:	2b2e      	cmp	r3, #46	; 0x2e
 800be64:	d10c      	bne.n	800be80 <_svfiprintf_r+0x130>
 800be66:	7863      	ldrb	r3, [r4, #1]
 800be68:	2b2a      	cmp	r3, #42	; 0x2a
 800be6a:	d134      	bne.n	800bed6 <_svfiprintf_r+0x186>
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	1d1a      	adds	r2, r3, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	9203      	str	r2, [sp, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	bfb8      	it	lt
 800be78:	f04f 33ff 	movlt.w	r3, #4294967295
 800be7c:	3402      	adds	r4, #2
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf48 <_svfiprintf_r+0x1f8>
 800be84:	7821      	ldrb	r1, [r4, #0]
 800be86:	2203      	movs	r2, #3
 800be88:	4650      	mov	r0, sl
 800be8a:	f7f4 f9a9 	bl	80001e0 <memchr>
 800be8e:	b138      	cbz	r0, 800bea0 <_svfiprintf_r+0x150>
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	eba0 000a 	sub.w	r0, r0, sl
 800be96:	2240      	movs	r2, #64	; 0x40
 800be98:	4082      	lsls	r2, r0
 800be9a:	4313      	orrs	r3, r2
 800be9c:	3401      	adds	r4, #1
 800be9e:	9304      	str	r3, [sp, #16]
 800bea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea4:	4825      	ldr	r0, [pc, #148]	; (800bf3c <_svfiprintf_r+0x1ec>)
 800bea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800beaa:	2206      	movs	r2, #6
 800beac:	f7f4 f998 	bl	80001e0 <memchr>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d038      	beq.n	800bf26 <_svfiprintf_r+0x1d6>
 800beb4:	4b22      	ldr	r3, [pc, #136]	; (800bf40 <_svfiprintf_r+0x1f0>)
 800beb6:	bb1b      	cbnz	r3, 800bf00 <_svfiprintf_r+0x1b0>
 800beb8:	9b03      	ldr	r3, [sp, #12]
 800beba:	3307      	adds	r3, #7
 800bebc:	f023 0307 	bic.w	r3, r3, #7
 800bec0:	3308      	adds	r3, #8
 800bec2:	9303      	str	r3, [sp, #12]
 800bec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec6:	4433      	add	r3, r6
 800bec8:	9309      	str	r3, [sp, #36]	; 0x24
 800beca:	e768      	b.n	800bd9e <_svfiprintf_r+0x4e>
 800becc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bed0:	460c      	mov	r4, r1
 800bed2:	2001      	movs	r0, #1
 800bed4:	e7a6      	b.n	800be24 <_svfiprintf_r+0xd4>
 800bed6:	2300      	movs	r3, #0
 800bed8:	3401      	adds	r4, #1
 800beda:	9305      	str	r3, [sp, #20]
 800bedc:	4619      	mov	r1, r3
 800bede:	f04f 0c0a 	mov.w	ip, #10
 800bee2:	4620      	mov	r0, r4
 800bee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee8:	3a30      	subs	r2, #48	; 0x30
 800beea:	2a09      	cmp	r2, #9
 800beec:	d903      	bls.n	800bef6 <_svfiprintf_r+0x1a6>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0c6      	beq.n	800be80 <_svfiprintf_r+0x130>
 800bef2:	9105      	str	r1, [sp, #20]
 800bef4:	e7c4      	b.n	800be80 <_svfiprintf_r+0x130>
 800bef6:	fb0c 2101 	mla	r1, ip, r1, r2
 800befa:	4604      	mov	r4, r0
 800befc:	2301      	movs	r3, #1
 800befe:	e7f0      	b.n	800bee2 <_svfiprintf_r+0x192>
 800bf00:	ab03      	add	r3, sp, #12
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	462a      	mov	r2, r5
 800bf06:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <_svfiprintf_r+0x1f4>)
 800bf08:	a904      	add	r1, sp, #16
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f7fc fbee 	bl	80086ec <_printf_float>
 800bf10:	1c42      	adds	r2, r0, #1
 800bf12:	4606      	mov	r6, r0
 800bf14:	d1d6      	bne.n	800bec4 <_svfiprintf_r+0x174>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	065b      	lsls	r3, r3, #25
 800bf1a:	f53f af2d 	bmi.w	800bd78 <_svfiprintf_r+0x28>
 800bf1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf20:	b01d      	add	sp, #116	; 0x74
 800bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf26:	ab03      	add	r3, sp, #12
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	462a      	mov	r2, r5
 800bf2c:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <_svfiprintf_r+0x1f4>)
 800bf2e:	a904      	add	r1, sp, #16
 800bf30:	4638      	mov	r0, r7
 800bf32:	f7fc fe7f 	bl	8008c34 <_printf_i>
 800bf36:	e7eb      	b.n	800bf10 <_svfiprintf_r+0x1c0>
 800bf38:	0800d331 	.word	0x0800d331
 800bf3c:	0800d33b 	.word	0x0800d33b
 800bf40:	080086ed 	.word	0x080086ed
 800bf44:	0800bc9d 	.word	0x0800bc9d
 800bf48:	0800d337 	.word	0x0800d337

0800bf4c <__sflush_r>:
 800bf4c:	898a      	ldrh	r2, [r1, #12]
 800bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf52:	4605      	mov	r5, r0
 800bf54:	0710      	lsls	r0, r2, #28
 800bf56:	460c      	mov	r4, r1
 800bf58:	d458      	bmi.n	800c00c <__sflush_r+0xc0>
 800bf5a:	684b      	ldr	r3, [r1, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dc05      	bgt.n	800bf6c <__sflush_r+0x20>
 800bf60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	dc02      	bgt.n	800bf6c <__sflush_r+0x20>
 800bf66:	2000      	movs	r0, #0
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf6e:	2e00      	cmp	r6, #0
 800bf70:	d0f9      	beq.n	800bf66 <__sflush_r+0x1a>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf78:	682f      	ldr	r7, [r5, #0]
 800bf7a:	6a21      	ldr	r1, [r4, #32]
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	d032      	beq.n	800bfe6 <__sflush_r+0x9a>
 800bf80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	075a      	lsls	r2, r3, #29
 800bf86:	d505      	bpl.n	800bf94 <__sflush_r+0x48>
 800bf88:	6863      	ldr	r3, [r4, #4]
 800bf8a:	1ac0      	subs	r0, r0, r3
 800bf8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf8e:	b10b      	cbz	r3, 800bf94 <__sflush_r+0x48>
 800bf90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf92:	1ac0      	subs	r0, r0, r3
 800bf94:	2300      	movs	r3, #0
 800bf96:	4602      	mov	r2, r0
 800bf98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf9a:	6a21      	ldr	r1, [r4, #32]
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	47b0      	blx	r6
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	d106      	bne.n	800bfb4 <__sflush_r+0x68>
 800bfa6:	6829      	ldr	r1, [r5, #0]
 800bfa8:	291d      	cmp	r1, #29
 800bfaa:	d82b      	bhi.n	800c004 <__sflush_r+0xb8>
 800bfac:	4a29      	ldr	r2, [pc, #164]	; (800c054 <__sflush_r+0x108>)
 800bfae:	410a      	asrs	r2, r1
 800bfb0:	07d6      	lsls	r6, r2, #31
 800bfb2:	d427      	bmi.n	800c004 <__sflush_r+0xb8>
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	6062      	str	r2, [r4, #4]
 800bfb8:	04d9      	lsls	r1, r3, #19
 800bfba:	6922      	ldr	r2, [r4, #16]
 800bfbc:	6022      	str	r2, [r4, #0]
 800bfbe:	d504      	bpl.n	800bfca <__sflush_r+0x7e>
 800bfc0:	1c42      	adds	r2, r0, #1
 800bfc2:	d101      	bne.n	800bfc8 <__sflush_r+0x7c>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	b903      	cbnz	r3, 800bfca <__sflush_r+0x7e>
 800bfc8:	6560      	str	r0, [r4, #84]	; 0x54
 800bfca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfcc:	602f      	str	r7, [r5, #0]
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	d0c9      	beq.n	800bf66 <__sflush_r+0x1a>
 800bfd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	d002      	beq.n	800bfe0 <__sflush_r+0x94>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f7fe fa1a 	bl	800a414 <_free_r>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	6360      	str	r0, [r4, #52]	; 0x34
 800bfe4:	e7c0      	b.n	800bf68 <__sflush_r+0x1c>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4628      	mov	r0, r5
 800bfea:	47b0      	blx	r6
 800bfec:	1c41      	adds	r1, r0, #1
 800bfee:	d1c8      	bne.n	800bf82 <__sflush_r+0x36>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d0c5      	beq.n	800bf82 <__sflush_r+0x36>
 800bff6:	2b1d      	cmp	r3, #29
 800bff8:	d001      	beq.n	800bffe <__sflush_r+0xb2>
 800bffa:	2b16      	cmp	r3, #22
 800bffc:	d101      	bne.n	800c002 <__sflush_r+0xb6>
 800bffe:	602f      	str	r7, [r5, #0]
 800c000:	e7b1      	b.n	800bf66 <__sflush_r+0x1a>
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c008:	81a3      	strh	r3, [r4, #12]
 800c00a:	e7ad      	b.n	800bf68 <__sflush_r+0x1c>
 800c00c:	690f      	ldr	r7, [r1, #16]
 800c00e:	2f00      	cmp	r7, #0
 800c010:	d0a9      	beq.n	800bf66 <__sflush_r+0x1a>
 800c012:	0793      	lsls	r3, r2, #30
 800c014:	680e      	ldr	r6, [r1, #0]
 800c016:	bf08      	it	eq
 800c018:	694b      	ldreq	r3, [r1, #20]
 800c01a:	600f      	str	r7, [r1, #0]
 800c01c:	bf18      	it	ne
 800c01e:	2300      	movne	r3, #0
 800c020:	eba6 0807 	sub.w	r8, r6, r7
 800c024:	608b      	str	r3, [r1, #8]
 800c026:	f1b8 0f00 	cmp.w	r8, #0
 800c02a:	dd9c      	ble.n	800bf66 <__sflush_r+0x1a>
 800c02c:	6a21      	ldr	r1, [r4, #32]
 800c02e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c030:	4643      	mov	r3, r8
 800c032:	463a      	mov	r2, r7
 800c034:	4628      	mov	r0, r5
 800c036:	47b0      	blx	r6
 800c038:	2800      	cmp	r0, #0
 800c03a:	dc06      	bgt.n	800c04a <__sflush_r+0xfe>
 800c03c:	89a3      	ldrh	r3, [r4, #12]
 800c03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	e78e      	b.n	800bf68 <__sflush_r+0x1c>
 800c04a:	4407      	add	r7, r0
 800c04c:	eba8 0800 	sub.w	r8, r8, r0
 800c050:	e7e9      	b.n	800c026 <__sflush_r+0xda>
 800c052:	bf00      	nop
 800c054:	dfbffffe 	.word	0xdfbffffe

0800c058 <_fflush_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	690b      	ldr	r3, [r1, #16]
 800c05c:	4605      	mov	r5, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	b913      	cbnz	r3, 800c068 <_fflush_r+0x10>
 800c062:	2500      	movs	r5, #0
 800c064:	4628      	mov	r0, r5
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	b118      	cbz	r0, 800c072 <_fflush_r+0x1a>
 800c06a:	6a03      	ldr	r3, [r0, #32]
 800c06c:	b90b      	cbnz	r3, 800c072 <_fflush_r+0x1a>
 800c06e:	f7fd f99f 	bl	80093b0 <__sinit>
 800c072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0f3      	beq.n	800c062 <_fflush_r+0xa>
 800c07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c07c:	07d0      	lsls	r0, r2, #31
 800c07e:	d404      	bmi.n	800c08a <_fflush_r+0x32>
 800c080:	0599      	lsls	r1, r3, #22
 800c082:	d402      	bmi.n	800c08a <_fflush_r+0x32>
 800c084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c086:	f7fd fb34 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800c08a:	4628      	mov	r0, r5
 800c08c:	4621      	mov	r1, r4
 800c08e:	f7ff ff5d 	bl	800bf4c <__sflush_r>
 800c092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c094:	07da      	lsls	r2, r3, #31
 800c096:	4605      	mov	r5, r0
 800c098:	d4e4      	bmi.n	800c064 <_fflush_r+0xc>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	059b      	lsls	r3, r3, #22
 800c09e:	d4e1      	bmi.n	800c064 <_fflush_r+0xc>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0a2:	f7fd fb27 	bl	80096f4 <__retarget_lock_release_recursive>
 800c0a6:	e7dd      	b.n	800c064 <_fflush_r+0xc>

0800c0a8 <memmove>:
 800c0a8:	4288      	cmp	r0, r1
 800c0aa:	b510      	push	{r4, lr}
 800c0ac:	eb01 0402 	add.w	r4, r1, r2
 800c0b0:	d902      	bls.n	800c0b8 <memmove+0x10>
 800c0b2:	4284      	cmp	r4, r0
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	d807      	bhi.n	800c0c8 <memmove+0x20>
 800c0b8:	1e43      	subs	r3, r0, #1
 800c0ba:	42a1      	cmp	r1, r4
 800c0bc:	d008      	beq.n	800c0d0 <memmove+0x28>
 800c0be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0c6:	e7f8      	b.n	800c0ba <memmove+0x12>
 800c0c8:	4402      	add	r2, r0
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	428a      	cmp	r2, r1
 800c0ce:	d100      	bne.n	800c0d2 <memmove+0x2a>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0da:	e7f7      	b.n	800c0cc <memmove+0x24>

0800c0dc <strncmp>:
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	b16a      	cbz	r2, 800c0fc <strncmp+0x20>
 800c0e0:	3901      	subs	r1, #1
 800c0e2:	1884      	adds	r4, r0, r2
 800c0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d103      	bne.n	800c0f8 <strncmp+0x1c>
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d001      	beq.n	800c0f8 <strncmp+0x1c>
 800c0f4:	2a00      	cmp	r2, #0
 800c0f6:	d1f5      	bne.n	800c0e4 <strncmp+0x8>
 800c0f8:	1ad0      	subs	r0, r2, r3
 800c0fa:	bd10      	pop	{r4, pc}
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	e7fc      	b.n	800c0fa <strncmp+0x1e>

0800c100 <_sbrk_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d06      	ldr	r5, [pc, #24]	; (800c11c <_sbrk_r+0x1c>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	f7f6 f908 	bl	8002320 <_sbrk>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_sbrk_r+0x1a>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_sbrk_r+0x1a>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	200016f4 	.word	0x200016f4

0800c120 <nan>:
 800c120:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c128 <nan+0x8>
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	00000000 	.word	0x00000000
 800c12c:	7ff80000 	.word	0x7ff80000

0800c130 <__assert_func>:
 800c130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c132:	4614      	mov	r4, r2
 800c134:	461a      	mov	r2, r3
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <__assert_func+0x2c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4605      	mov	r5, r0
 800c13c:	68d8      	ldr	r0, [r3, #12]
 800c13e:	b14c      	cbz	r4, 800c154 <__assert_func+0x24>
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <__assert_func+0x30>)
 800c142:	9100      	str	r1, [sp, #0]
 800c144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c148:	4906      	ldr	r1, [pc, #24]	; (800c164 <__assert_func+0x34>)
 800c14a:	462b      	mov	r3, r5
 800c14c:	f000 fbca 	bl	800c8e4 <fiprintf>
 800c150:	f000 fbda 	bl	800c908 <abort>
 800c154:	4b04      	ldr	r3, [pc, #16]	; (800c168 <__assert_func+0x38>)
 800c156:	461c      	mov	r4, r3
 800c158:	e7f3      	b.n	800c142 <__assert_func+0x12>
 800c15a:	bf00      	nop
 800c15c:	20000070 	.word	0x20000070
 800c160:	0800d34a 	.word	0x0800d34a
 800c164:	0800d357 	.word	0x0800d357
 800c168:	0800d385 	.word	0x0800d385

0800c16c <_calloc_r>:
 800c16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c16e:	fba1 2402 	umull	r2, r4, r1, r2
 800c172:	b94c      	cbnz	r4, 800c188 <_calloc_r+0x1c>
 800c174:	4611      	mov	r1, r2
 800c176:	9201      	str	r2, [sp, #4]
 800c178:	f7fe f9c0 	bl	800a4fc <_malloc_r>
 800c17c:	9a01      	ldr	r2, [sp, #4]
 800c17e:	4605      	mov	r5, r0
 800c180:	b930      	cbnz	r0, 800c190 <_calloc_r+0x24>
 800c182:	4628      	mov	r0, r5
 800c184:	b003      	add	sp, #12
 800c186:	bd30      	pop	{r4, r5, pc}
 800c188:	220c      	movs	r2, #12
 800c18a:	6002      	str	r2, [r0, #0]
 800c18c:	2500      	movs	r5, #0
 800c18e:	e7f8      	b.n	800c182 <_calloc_r+0x16>
 800c190:	4621      	mov	r1, r4
 800c192:	f7fd f9da 	bl	800954a <memset>
 800c196:	e7f4      	b.n	800c182 <_calloc_r+0x16>

0800c198 <rshift>:
 800c198:	6903      	ldr	r3, [r0, #16]
 800c19a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c19e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1a6:	f100 0414 	add.w	r4, r0, #20
 800c1aa:	dd45      	ble.n	800c238 <rshift+0xa0>
 800c1ac:	f011 011f 	ands.w	r1, r1, #31
 800c1b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1b8:	d10c      	bne.n	800c1d4 <rshift+0x3c>
 800c1ba:	f100 0710 	add.w	r7, r0, #16
 800c1be:	4629      	mov	r1, r5
 800c1c0:	42b1      	cmp	r1, r6
 800c1c2:	d334      	bcc.n	800c22e <rshift+0x96>
 800c1c4:	1a9b      	subs	r3, r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	1eea      	subs	r2, r5, #3
 800c1ca:	4296      	cmp	r6, r2
 800c1cc:	bf38      	it	cc
 800c1ce:	2300      	movcc	r3, #0
 800c1d0:	4423      	add	r3, r4
 800c1d2:	e015      	b.n	800c200 <rshift+0x68>
 800c1d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1d8:	f1c1 0820 	rsb	r8, r1, #32
 800c1dc:	40cf      	lsrs	r7, r1
 800c1de:	f105 0e04 	add.w	lr, r5, #4
 800c1e2:	46a1      	mov	r9, r4
 800c1e4:	4576      	cmp	r6, lr
 800c1e6:	46f4      	mov	ip, lr
 800c1e8:	d815      	bhi.n	800c216 <rshift+0x7e>
 800c1ea:	1a9a      	subs	r2, r3, r2
 800c1ec:	0092      	lsls	r2, r2, #2
 800c1ee:	3a04      	subs	r2, #4
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	42ae      	cmp	r6, r5
 800c1f4:	bf38      	it	cc
 800c1f6:	2200      	movcc	r2, #0
 800c1f8:	18a3      	adds	r3, r4, r2
 800c1fa:	50a7      	str	r7, [r4, r2]
 800c1fc:	b107      	cbz	r7, 800c200 <rshift+0x68>
 800c1fe:	3304      	adds	r3, #4
 800c200:	1b1a      	subs	r2, r3, r4
 800c202:	42a3      	cmp	r3, r4
 800c204:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c208:	bf08      	it	eq
 800c20a:	2300      	moveq	r3, #0
 800c20c:	6102      	str	r2, [r0, #16]
 800c20e:	bf08      	it	eq
 800c210:	6143      	streq	r3, [r0, #20]
 800c212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c216:	f8dc c000 	ldr.w	ip, [ip]
 800c21a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c21e:	ea4c 0707 	orr.w	r7, ip, r7
 800c222:	f849 7b04 	str.w	r7, [r9], #4
 800c226:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c22a:	40cf      	lsrs	r7, r1
 800c22c:	e7da      	b.n	800c1e4 <rshift+0x4c>
 800c22e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c232:	f847 cf04 	str.w	ip, [r7, #4]!
 800c236:	e7c3      	b.n	800c1c0 <rshift+0x28>
 800c238:	4623      	mov	r3, r4
 800c23a:	e7e1      	b.n	800c200 <rshift+0x68>

0800c23c <__hexdig_fun>:
 800c23c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c240:	2b09      	cmp	r3, #9
 800c242:	d802      	bhi.n	800c24a <__hexdig_fun+0xe>
 800c244:	3820      	subs	r0, #32
 800c246:	b2c0      	uxtb	r0, r0
 800c248:	4770      	bx	lr
 800c24a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c24e:	2b05      	cmp	r3, #5
 800c250:	d801      	bhi.n	800c256 <__hexdig_fun+0x1a>
 800c252:	3847      	subs	r0, #71	; 0x47
 800c254:	e7f7      	b.n	800c246 <__hexdig_fun+0xa>
 800c256:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d801      	bhi.n	800c262 <__hexdig_fun+0x26>
 800c25e:	3827      	subs	r0, #39	; 0x27
 800c260:	e7f1      	b.n	800c246 <__hexdig_fun+0xa>
 800c262:	2000      	movs	r0, #0
 800c264:	4770      	bx	lr
	...

0800c268 <__gethex>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	4617      	mov	r7, r2
 800c26e:	680a      	ldr	r2, [r1, #0]
 800c270:	b085      	sub	sp, #20
 800c272:	f102 0b02 	add.w	fp, r2, #2
 800c276:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c27a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c27e:	4681      	mov	r9, r0
 800c280:	468a      	mov	sl, r1
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	32fe      	adds	r2, #254	; 0xfe
 800c286:	eb02 030b 	add.w	r3, r2, fp
 800c28a:	46d8      	mov	r8, fp
 800c28c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	2830      	cmp	r0, #48	; 0x30
 800c294:	d0f7      	beq.n	800c286 <__gethex+0x1e>
 800c296:	f7ff ffd1 	bl	800c23c <__hexdig_fun>
 800c29a:	4604      	mov	r4, r0
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d138      	bne.n	800c312 <__gethex+0xaa>
 800c2a0:	49a7      	ldr	r1, [pc, #668]	; (800c540 <__gethex+0x2d8>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	f7ff ff19 	bl	800c0dc <strncmp>
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d169      	bne.n	800c384 <__gethex+0x11c>
 800c2b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c2b4:	465d      	mov	r5, fp
 800c2b6:	f7ff ffc1 	bl	800c23c <__hexdig_fun>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d064      	beq.n	800c388 <__gethex+0x120>
 800c2be:	465a      	mov	r2, fp
 800c2c0:	7810      	ldrb	r0, [r2, #0]
 800c2c2:	2830      	cmp	r0, #48	; 0x30
 800c2c4:	4690      	mov	r8, r2
 800c2c6:	f102 0201 	add.w	r2, r2, #1
 800c2ca:	d0f9      	beq.n	800c2c0 <__gethex+0x58>
 800c2cc:	f7ff ffb6 	bl	800c23c <__hexdig_fun>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	fab0 f480 	clz	r4, r0
 800c2d6:	0964      	lsrs	r4, r4, #5
 800c2d8:	465e      	mov	r6, fp
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	4642      	mov	r2, r8
 800c2de:	4615      	mov	r5, r2
 800c2e0:	3201      	adds	r2, #1
 800c2e2:	7828      	ldrb	r0, [r5, #0]
 800c2e4:	f7ff ffaa 	bl	800c23c <__hexdig_fun>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d1f8      	bne.n	800c2de <__gethex+0x76>
 800c2ec:	4994      	ldr	r1, [pc, #592]	; (800c540 <__gethex+0x2d8>)
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f7ff fef3 	bl	800c0dc <strncmp>
 800c2f6:	b978      	cbnz	r0, 800c318 <__gethex+0xb0>
 800c2f8:	b946      	cbnz	r6, 800c30c <__gethex+0xa4>
 800c2fa:	1c6e      	adds	r6, r5, #1
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	4615      	mov	r5, r2
 800c300:	3201      	adds	r2, #1
 800c302:	7828      	ldrb	r0, [r5, #0]
 800c304:	f7ff ff9a 	bl	800c23c <__hexdig_fun>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d1f8      	bne.n	800c2fe <__gethex+0x96>
 800c30c:	1b73      	subs	r3, r6, r5
 800c30e:	009e      	lsls	r6, r3, #2
 800c310:	e004      	b.n	800c31c <__gethex+0xb4>
 800c312:	2400      	movs	r4, #0
 800c314:	4626      	mov	r6, r4
 800c316:	e7e1      	b.n	800c2dc <__gethex+0x74>
 800c318:	2e00      	cmp	r6, #0
 800c31a:	d1f7      	bne.n	800c30c <__gethex+0xa4>
 800c31c:	782b      	ldrb	r3, [r5, #0]
 800c31e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c322:	2b50      	cmp	r3, #80	; 0x50
 800c324:	d13d      	bne.n	800c3a2 <__gethex+0x13a>
 800c326:	786b      	ldrb	r3, [r5, #1]
 800c328:	2b2b      	cmp	r3, #43	; 0x2b
 800c32a:	d02f      	beq.n	800c38c <__gethex+0x124>
 800c32c:	2b2d      	cmp	r3, #45	; 0x2d
 800c32e:	d031      	beq.n	800c394 <__gethex+0x12c>
 800c330:	1c69      	adds	r1, r5, #1
 800c332:	f04f 0b00 	mov.w	fp, #0
 800c336:	7808      	ldrb	r0, [r1, #0]
 800c338:	f7ff ff80 	bl	800c23c <__hexdig_fun>
 800c33c:	1e42      	subs	r2, r0, #1
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	2a18      	cmp	r2, #24
 800c342:	d82e      	bhi.n	800c3a2 <__gethex+0x13a>
 800c344:	f1a0 0210 	sub.w	r2, r0, #16
 800c348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c34c:	f7ff ff76 	bl	800c23c <__hexdig_fun>
 800c350:	f100 3cff 	add.w	ip, r0, #4294967295
 800c354:	fa5f fc8c 	uxtb.w	ip, ip
 800c358:	f1bc 0f18 	cmp.w	ip, #24
 800c35c:	d91d      	bls.n	800c39a <__gethex+0x132>
 800c35e:	f1bb 0f00 	cmp.w	fp, #0
 800c362:	d000      	beq.n	800c366 <__gethex+0xfe>
 800c364:	4252      	negs	r2, r2
 800c366:	4416      	add	r6, r2
 800c368:	f8ca 1000 	str.w	r1, [sl]
 800c36c:	b1dc      	cbz	r4, 800c3a6 <__gethex+0x13e>
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	bf14      	ite	ne
 800c374:	f04f 0800 	movne.w	r8, #0
 800c378:	f04f 0806 	moveq.w	r8, #6
 800c37c:	4640      	mov	r0, r8
 800c37e:	b005      	add	sp, #20
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c384:	4645      	mov	r5, r8
 800c386:	4626      	mov	r6, r4
 800c388:	2401      	movs	r4, #1
 800c38a:	e7c7      	b.n	800c31c <__gethex+0xb4>
 800c38c:	f04f 0b00 	mov.w	fp, #0
 800c390:	1ca9      	adds	r1, r5, #2
 800c392:	e7d0      	b.n	800c336 <__gethex+0xce>
 800c394:	f04f 0b01 	mov.w	fp, #1
 800c398:	e7fa      	b.n	800c390 <__gethex+0x128>
 800c39a:	230a      	movs	r3, #10
 800c39c:	fb03 0002 	mla	r0, r3, r2, r0
 800c3a0:	e7d0      	b.n	800c344 <__gethex+0xdc>
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	e7e0      	b.n	800c368 <__gethex+0x100>
 800c3a6:	eba5 0308 	sub.w	r3, r5, r8
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	2b07      	cmp	r3, #7
 800c3b0:	dc0a      	bgt.n	800c3c8 <__gethex+0x160>
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f7fe f92e 	bl	800a614 <_Balloc>
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	b940      	cbnz	r0, 800c3ce <__gethex+0x166>
 800c3bc:	4b61      	ldr	r3, [pc, #388]	; (800c544 <__gethex+0x2dc>)
 800c3be:	4602      	mov	r2, r0
 800c3c0:	21e4      	movs	r1, #228	; 0xe4
 800c3c2:	4861      	ldr	r0, [pc, #388]	; (800c548 <__gethex+0x2e0>)
 800c3c4:	f7ff feb4 	bl	800c130 <__assert_func>
 800c3c8:	3101      	adds	r1, #1
 800c3ca:	105b      	asrs	r3, r3, #1
 800c3cc:	e7ef      	b.n	800c3ae <__gethex+0x146>
 800c3ce:	f100 0a14 	add.w	sl, r0, #20
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	495a      	ldr	r1, [pc, #360]	; (800c540 <__gethex+0x2d8>)
 800c3d6:	f8cd a004 	str.w	sl, [sp, #4]
 800c3da:	469b      	mov	fp, r3
 800c3dc:	45a8      	cmp	r8, r5
 800c3de:	d342      	bcc.n	800c466 <__gethex+0x1fe>
 800c3e0:	9801      	ldr	r0, [sp, #4]
 800c3e2:	f840 bb04 	str.w	fp, [r0], #4
 800c3e6:	eba0 000a 	sub.w	r0, r0, sl
 800c3ea:	1080      	asrs	r0, r0, #2
 800c3ec:	6120      	str	r0, [r4, #16]
 800c3ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c3f2:	4658      	mov	r0, fp
 800c3f4:	f7fe fa00 	bl	800a7f8 <__hi0bits>
 800c3f8:	683d      	ldr	r5, [r7, #0]
 800c3fa:	eba8 0000 	sub.w	r0, r8, r0
 800c3fe:	42a8      	cmp	r0, r5
 800c400:	dd59      	ble.n	800c4b6 <__gethex+0x24e>
 800c402:	eba0 0805 	sub.w	r8, r0, r5
 800c406:	4641      	mov	r1, r8
 800c408:	4620      	mov	r0, r4
 800c40a:	f7fe fd8f 	bl	800af2c <__any_on>
 800c40e:	4683      	mov	fp, r0
 800c410:	b1b8      	cbz	r0, 800c442 <__gethex+0x1da>
 800c412:	f108 33ff 	add.w	r3, r8, #4294967295
 800c416:	1159      	asrs	r1, r3, #5
 800c418:	f003 021f 	and.w	r2, r3, #31
 800c41c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c420:	f04f 0b01 	mov.w	fp, #1
 800c424:	fa0b f202 	lsl.w	r2, fp, r2
 800c428:	420a      	tst	r2, r1
 800c42a:	d00a      	beq.n	800c442 <__gethex+0x1da>
 800c42c:	455b      	cmp	r3, fp
 800c42e:	dd06      	ble.n	800c43e <__gethex+0x1d6>
 800c430:	f1a8 0102 	sub.w	r1, r8, #2
 800c434:	4620      	mov	r0, r4
 800c436:	f7fe fd79 	bl	800af2c <__any_on>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d138      	bne.n	800c4b0 <__gethex+0x248>
 800c43e:	f04f 0b02 	mov.w	fp, #2
 800c442:	4641      	mov	r1, r8
 800c444:	4620      	mov	r0, r4
 800c446:	f7ff fea7 	bl	800c198 <rshift>
 800c44a:	4446      	add	r6, r8
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	42b3      	cmp	r3, r6
 800c450:	da41      	bge.n	800c4d6 <__gethex+0x26e>
 800c452:	4621      	mov	r1, r4
 800c454:	4648      	mov	r0, r9
 800c456:	f7fe f91d 	bl	800a694 <_Bfree>
 800c45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c45c:	2300      	movs	r3, #0
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c464:	e78a      	b.n	800c37c <__gethex+0x114>
 800c466:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c46a:	2a2e      	cmp	r2, #46	; 0x2e
 800c46c:	d014      	beq.n	800c498 <__gethex+0x230>
 800c46e:	2b20      	cmp	r3, #32
 800c470:	d106      	bne.n	800c480 <__gethex+0x218>
 800c472:	9b01      	ldr	r3, [sp, #4]
 800c474:	f843 bb04 	str.w	fp, [r3], #4
 800c478:	f04f 0b00 	mov.w	fp, #0
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	465b      	mov	r3, fp
 800c480:	7828      	ldrb	r0, [r5, #0]
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	f7ff feda 	bl	800c23c <__hexdig_fun>
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	f000 000f 	and.w	r0, r0, #15
 800c48e:	4098      	lsls	r0, r3
 800c490:	ea4b 0b00 	orr.w	fp, fp, r0
 800c494:	3304      	adds	r3, #4
 800c496:	e7a1      	b.n	800c3dc <__gethex+0x174>
 800c498:	45a8      	cmp	r8, r5
 800c49a:	d8e8      	bhi.n	800c46e <__gethex+0x206>
 800c49c:	2201      	movs	r2, #1
 800c49e:	4628      	mov	r0, r5
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	f7ff fe1b 	bl	800c0dc <strncmp>
 800c4a6:	4926      	ldr	r1, [pc, #152]	; (800c540 <__gethex+0x2d8>)
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d1df      	bne.n	800c46e <__gethex+0x206>
 800c4ae:	e795      	b.n	800c3dc <__gethex+0x174>
 800c4b0:	f04f 0b03 	mov.w	fp, #3
 800c4b4:	e7c5      	b.n	800c442 <__gethex+0x1da>
 800c4b6:	da0b      	bge.n	800c4d0 <__gethex+0x268>
 800c4b8:	eba5 0800 	sub.w	r8, r5, r0
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4642      	mov	r2, r8
 800c4c0:	4648      	mov	r0, r9
 800c4c2:	f7fe fb01 	bl	800aac8 <__lshift>
 800c4c6:	eba6 0608 	sub.w	r6, r6, r8
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	f100 0a14 	add.w	sl, r0, #20
 800c4d0:	f04f 0b00 	mov.w	fp, #0
 800c4d4:	e7ba      	b.n	800c44c <__gethex+0x1e4>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	42b3      	cmp	r3, r6
 800c4da:	dd73      	ble.n	800c5c4 <__gethex+0x35c>
 800c4dc:	1b9e      	subs	r6, r3, r6
 800c4de:	42b5      	cmp	r5, r6
 800c4e0:	dc34      	bgt.n	800c54c <__gethex+0x2e4>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d023      	beq.n	800c530 <__gethex+0x2c8>
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d025      	beq.n	800c538 <__gethex+0x2d0>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d115      	bne.n	800c51c <__gethex+0x2b4>
 800c4f0:	42b5      	cmp	r5, r6
 800c4f2:	d113      	bne.n	800c51c <__gethex+0x2b4>
 800c4f4:	2d01      	cmp	r5, #1
 800c4f6:	d10b      	bne.n	800c510 <__gethex+0x2a8>
 800c4f8:	9a02      	ldr	r2, [sp, #8]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	2301      	movs	r3, #1
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	f8ca 3000 	str.w	r3, [sl]
 800c506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c508:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c50c:	601c      	str	r4, [r3, #0]
 800c50e:	e735      	b.n	800c37c <__gethex+0x114>
 800c510:	1e69      	subs	r1, r5, #1
 800c512:	4620      	mov	r0, r4
 800c514:	f7fe fd0a 	bl	800af2c <__any_on>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d1ed      	bne.n	800c4f8 <__gethex+0x290>
 800c51c:	4621      	mov	r1, r4
 800c51e:	4648      	mov	r0, r9
 800c520:	f7fe f8b8 	bl	800a694 <_Bfree>
 800c524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c526:	2300      	movs	r3, #0
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c52e:	e725      	b.n	800c37c <__gethex+0x114>
 800c530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1f2      	bne.n	800c51c <__gethex+0x2b4>
 800c536:	e7df      	b.n	800c4f8 <__gethex+0x290>
 800c538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1dc      	bne.n	800c4f8 <__gethex+0x290>
 800c53e:	e7ed      	b.n	800c51c <__gethex+0x2b4>
 800c540:	0800d1dc 	.word	0x0800d1dc
 800c544:	0800d071 	.word	0x0800d071
 800c548:	0800d386 	.word	0x0800d386
 800c54c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c550:	f1bb 0f00 	cmp.w	fp, #0
 800c554:	d133      	bne.n	800c5be <__gethex+0x356>
 800c556:	f1b8 0f00 	cmp.w	r8, #0
 800c55a:	d004      	beq.n	800c566 <__gethex+0x2fe>
 800c55c:	4641      	mov	r1, r8
 800c55e:	4620      	mov	r0, r4
 800c560:	f7fe fce4 	bl	800af2c <__any_on>
 800c564:	4683      	mov	fp, r0
 800c566:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c56a:	2301      	movs	r3, #1
 800c56c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c570:	f008 081f 	and.w	r8, r8, #31
 800c574:	fa03 f308 	lsl.w	r3, r3, r8
 800c578:	4213      	tst	r3, r2
 800c57a:	4631      	mov	r1, r6
 800c57c:	4620      	mov	r0, r4
 800c57e:	bf18      	it	ne
 800c580:	f04b 0b02 	orrne.w	fp, fp, #2
 800c584:	1bad      	subs	r5, r5, r6
 800c586:	f7ff fe07 	bl	800c198 <rshift>
 800c58a:	687e      	ldr	r6, [r7, #4]
 800c58c:	f04f 0802 	mov.w	r8, #2
 800c590:	f1bb 0f00 	cmp.w	fp, #0
 800c594:	d04a      	beq.n	800c62c <__gethex+0x3c4>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d016      	beq.n	800c5ca <__gethex+0x362>
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d018      	beq.n	800c5d2 <__gethex+0x36a>
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d109      	bne.n	800c5b8 <__gethex+0x350>
 800c5a4:	f01b 0f02 	tst.w	fp, #2
 800c5a8:	d006      	beq.n	800c5b8 <__gethex+0x350>
 800c5aa:	f8da 3000 	ldr.w	r3, [sl]
 800c5ae:	ea4b 0b03 	orr.w	fp, fp, r3
 800c5b2:	f01b 0f01 	tst.w	fp, #1
 800c5b6:	d10f      	bne.n	800c5d8 <__gethex+0x370>
 800c5b8:	f048 0810 	orr.w	r8, r8, #16
 800c5bc:	e036      	b.n	800c62c <__gethex+0x3c4>
 800c5be:	f04f 0b01 	mov.w	fp, #1
 800c5c2:	e7d0      	b.n	800c566 <__gethex+0x2fe>
 800c5c4:	f04f 0801 	mov.w	r8, #1
 800c5c8:	e7e2      	b.n	800c590 <__gethex+0x328>
 800c5ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5cc:	f1c3 0301 	rsb	r3, r3, #1
 800c5d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0ef      	beq.n	800c5b8 <__gethex+0x350>
 800c5d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5dc:	f104 0214 	add.w	r2, r4, #20
 800c5e0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	4694      	mov	ip, r2
 800c5ee:	f852 1b04 	ldr.w	r1, [r2], #4
 800c5f2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c5f6:	d01e      	beq.n	800c636 <__gethex+0x3ce>
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	f8cc 1000 	str.w	r1, [ip]
 800c5fe:	f1b8 0f02 	cmp.w	r8, #2
 800c602:	f104 0214 	add.w	r2, r4, #20
 800c606:	d13d      	bne.n	800c684 <__gethex+0x41c>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	d10b      	bne.n	800c628 <__gethex+0x3c0>
 800c610:	1169      	asrs	r1, r5, #5
 800c612:	2301      	movs	r3, #1
 800c614:	f005 051f 	and.w	r5, r5, #31
 800c618:	fa03 f505 	lsl.w	r5, r3, r5
 800c61c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c620:	421d      	tst	r5, r3
 800c622:	bf18      	it	ne
 800c624:	f04f 0801 	movne.w	r8, #1
 800c628:	f048 0820 	orr.w	r8, r8, #32
 800c62c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c62e:	601c      	str	r4, [r3, #0]
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	601e      	str	r6, [r3, #0]
 800c634:	e6a2      	b.n	800c37c <__gethex+0x114>
 800c636:	4290      	cmp	r0, r2
 800c638:	f842 3c04 	str.w	r3, [r2, #-4]
 800c63c:	d8d6      	bhi.n	800c5ec <__gethex+0x384>
 800c63e:	68a2      	ldr	r2, [r4, #8]
 800c640:	4593      	cmp	fp, r2
 800c642:	db17      	blt.n	800c674 <__gethex+0x40c>
 800c644:	6861      	ldr	r1, [r4, #4]
 800c646:	4648      	mov	r0, r9
 800c648:	3101      	adds	r1, #1
 800c64a:	f7fd ffe3 	bl	800a614 <_Balloc>
 800c64e:	4682      	mov	sl, r0
 800c650:	b918      	cbnz	r0, 800c65a <__gethex+0x3f2>
 800c652:	4b1b      	ldr	r3, [pc, #108]	; (800c6c0 <__gethex+0x458>)
 800c654:	4602      	mov	r2, r0
 800c656:	2184      	movs	r1, #132	; 0x84
 800c658:	e6b3      	b.n	800c3c2 <__gethex+0x15a>
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	3202      	adds	r2, #2
 800c65e:	f104 010c 	add.w	r1, r4, #12
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	300c      	adds	r0, #12
 800c666:	f7fd f846 	bl	80096f6 <memcpy>
 800c66a:	4621      	mov	r1, r4
 800c66c:	4648      	mov	r0, r9
 800c66e:	f7fe f811 	bl	800a694 <_Bfree>
 800c672:	4654      	mov	r4, sl
 800c674:	6922      	ldr	r2, [r4, #16]
 800c676:	1c51      	adds	r1, r2, #1
 800c678:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c67c:	6121      	str	r1, [r4, #16]
 800c67e:	2101      	movs	r1, #1
 800c680:	6151      	str	r1, [r2, #20]
 800c682:	e7bc      	b.n	800c5fe <__gethex+0x396>
 800c684:	6921      	ldr	r1, [r4, #16]
 800c686:	4559      	cmp	r1, fp
 800c688:	dd0b      	ble.n	800c6a2 <__gethex+0x43a>
 800c68a:	2101      	movs	r1, #1
 800c68c:	4620      	mov	r0, r4
 800c68e:	f7ff fd83 	bl	800c198 <rshift>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	3601      	adds	r6, #1
 800c696:	42b3      	cmp	r3, r6
 800c698:	f6ff aedb 	blt.w	800c452 <__gethex+0x1ea>
 800c69c:	f04f 0801 	mov.w	r8, #1
 800c6a0:	e7c2      	b.n	800c628 <__gethex+0x3c0>
 800c6a2:	f015 051f 	ands.w	r5, r5, #31
 800c6a6:	d0f9      	beq.n	800c69c <__gethex+0x434>
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	441a      	add	r2, r3
 800c6ac:	f1c5 0520 	rsb	r5, r5, #32
 800c6b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c6b4:	f7fe f8a0 	bl	800a7f8 <__hi0bits>
 800c6b8:	42a8      	cmp	r0, r5
 800c6ba:	dbe6      	blt.n	800c68a <__gethex+0x422>
 800c6bc:	e7ee      	b.n	800c69c <__gethex+0x434>
 800c6be:	bf00      	nop
 800c6c0:	0800d071 	.word	0x0800d071

0800c6c4 <L_shift>:
 800c6c4:	f1c2 0208 	rsb	r2, r2, #8
 800c6c8:	0092      	lsls	r2, r2, #2
 800c6ca:	b570      	push	{r4, r5, r6, lr}
 800c6cc:	f1c2 0620 	rsb	r6, r2, #32
 800c6d0:	6843      	ldr	r3, [r0, #4]
 800c6d2:	6804      	ldr	r4, [r0, #0]
 800c6d4:	fa03 f506 	lsl.w	r5, r3, r6
 800c6d8:	432c      	orrs	r4, r5
 800c6da:	40d3      	lsrs	r3, r2
 800c6dc:	6004      	str	r4, [r0, #0]
 800c6de:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6e2:	4288      	cmp	r0, r1
 800c6e4:	d3f4      	bcc.n	800c6d0 <L_shift+0xc>
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}

0800c6e8 <__match>:
 800c6e8:	b530      	push	{r4, r5, lr}
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6f2:	b914      	cbnz	r4, 800c6fa <__match+0x12>
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	bd30      	pop	{r4, r5, pc}
 800c6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c702:	2d19      	cmp	r5, #25
 800c704:	bf98      	it	ls
 800c706:	3220      	addls	r2, #32
 800c708:	42a2      	cmp	r2, r4
 800c70a:	d0f0      	beq.n	800c6ee <__match+0x6>
 800c70c:	2000      	movs	r0, #0
 800c70e:	e7f3      	b.n	800c6f8 <__match+0x10>

0800c710 <__hexnan>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	680b      	ldr	r3, [r1, #0]
 800c716:	6801      	ldr	r1, [r0, #0]
 800c718:	115e      	asrs	r6, r3, #5
 800c71a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c71e:	f013 031f 	ands.w	r3, r3, #31
 800c722:	b087      	sub	sp, #28
 800c724:	bf18      	it	ne
 800c726:	3604      	addne	r6, #4
 800c728:	2500      	movs	r5, #0
 800c72a:	1f37      	subs	r7, r6, #4
 800c72c:	4682      	mov	sl, r0
 800c72e:	4690      	mov	r8, r2
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	f846 5c04 	str.w	r5, [r6, #-4]
 800c736:	46b9      	mov	r9, r7
 800c738:	463c      	mov	r4, r7
 800c73a:	9502      	str	r5, [sp, #8]
 800c73c:	46ab      	mov	fp, r5
 800c73e:	784a      	ldrb	r2, [r1, #1]
 800c740:	1c4b      	adds	r3, r1, #1
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	b342      	cbz	r2, 800c798 <__hexnan+0x88>
 800c746:	4610      	mov	r0, r2
 800c748:	9105      	str	r1, [sp, #20]
 800c74a:	9204      	str	r2, [sp, #16]
 800c74c:	f7ff fd76 	bl	800c23c <__hexdig_fun>
 800c750:	2800      	cmp	r0, #0
 800c752:	d14f      	bne.n	800c7f4 <__hexnan+0xe4>
 800c754:	9a04      	ldr	r2, [sp, #16]
 800c756:	9905      	ldr	r1, [sp, #20]
 800c758:	2a20      	cmp	r2, #32
 800c75a:	d818      	bhi.n	800c78e <__hexnan+0x7e>
 800c75c:	9b02      	ldr	r3, [sp, #8]
 800c75e:	459b      	cmp	fp, r3
 800c760:	dd13      	ble.n	800c78a <__hexnan+0x7a>
 800c762:	454c      	cmp	r4, r9
 800c764:	d206      	bcs.n	800c774 <__hexnan+0x64>
 800c766:	2d07      	cmp	r5, #7
 800c768:	dc04      	bgt.n	800c774 <__hexnan+0x64>
 800c76a:	462a      	mov	r2, r5
 800c76c:	4649      	mov	r1, r9
 800c76e:	4620      	mov	r0, r4
 800c770:	f7ff ffa8 	bl	800c6c4 <L_shift>
 800c774:	4544      	cmp	r4, r8
 800c776:	d950      	bls.n	800c81a <__hexnan+0x10a>
 800c778:	2300      	movs	r3, #0
 800c77a:	f1a4 0904 	sub.w	r9, r4, #4
 800c77e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c782:	f8cd b008 	str.w	fp, [sp, #8]
 800c786:	464c      	mov	r4, r9
 800c788:	461d      	mov	r5, r3
 800c78a:	9903      	ldr	r1, [sp, #12]
 800c78c:	e7d7      	b.n	800c73e <__hexnan+0x2e>
 800c78e:	2a29      	cmp	r2, #41	; 0x29
 800c790:	d155      	bne.n	800c83e <__hexnan+0x12e>
 800c792:	3102      	adds	r1, #2
 800c794:	f8ca 1000 	str.w	r1, [sl]
 800c798:	f1bb 0f00 	cmp.w	fp, #0
 800c79c:	d04f      	beq.n	800c83e <__hexnan+0x12e>
 800c79e:	454c      	cmp	r4, r9
 800c7a0:	d206      	bcs.n	800c7b0 <__hexnan+0xa0>
 800c7a2:	2d07      	cmp	r5, #7
 800c7a4:	dc04      	bgt.n	800c7b0 <__hexnan+0xa0>
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7ff ff8a 	bl	800c6c4 <L_shift>
 800c7b0:	4544      	cmp	r4, r8
 800c7b2:	d934      	bls.n	800c81e <__hexnan+0x10e>
 800c7b4:	f1a8 0204 	sub.w	r2, r8, #4
 800c7b8:	4623      	mov	r3, r4
 800c7ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7be:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7c2:	429f      	cmp	r7, r3
 800c7c4:	d2f9      	bcs.n	800c7ba <__hexnan+0xaa>
 800c7c6:	1b3b      	subs	r3, r7, r4
 800c7c8:	f023 0303 	bic.w	r3, r3, #3
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	3e03      	subs	r6, #3
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	42a6      	cmp	r6, r4
 800c7d4:	bf38      	it	cc
 800c7d6:	2304      	movcc	r3, #4
 800c7d8:	4443      	add	r3, r8
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f843 2b04 	str.w	r2, [r3], #4
 800c7e0:	429f      	cmp	r7, r3
 800c7e2:	d2fb      	bcs.n	800c7dc <__hexnan+0xcc>
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	b91b      	cbnz	r3, 800c7f0 <__hexnan+0xe0>
 800c7e8:	4547      	cmp	r7, r8
 800c7ea:	d126      	bne.n	800c83a <__hexnan+0x12a>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	2005      	movs	r0, #5
 800c7f2:	e025      	b.n	800c840 <__hexnan+0x130>
 800c7f4:	3501      	adds	r5, #1
 800c7f6:	2d08      	cmp	r5, #8
 800c7f8:	f10b 0b01 	add.w	fp, fp, #1
 800c7fc:	dd06      	ble.n	800c80c <__hexnan+0xfc>
 800c7fe:	4544      	cmp	r4, r8
 800c800:	d9c3      	bls.n	800c78a <__hexnan+0x7a>
 800c802:	2300      	movs	r3, #0
 800c804:	f844 3c04 	str.w	r3, [r4, #-4]
 800c808:	2501      	movs	r5, #1
 800c80a:	3c04      	subs	r4, #4
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	f000 000f 	and.w	r0, r0, #15
 800c812:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	e7b7      	b.n	800c78a <__hexnan+0x7a>
 800c81a:	2508      	movs	r5, #8
 800c81c:	e7b5      	b.n	800c78a <__hexnan+0x7a>
 800c81e:	9b01      	ldr	r3, [sp, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d0df      	beq.n	800c7e4 <__hexnan+0xd4>
 800c824:	f1c3 0320 	rsb	r3, r3, #32
 800c828:	f04f 32ff 	mov.w	r2, #4294967295
 800c82c:	40da      	lsrs	r2, r3
 800c82e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c832:	4013      	ands	r3, r2
 800c834:	f846 3c04 	str.w	r3, [r6, #-4]
 800c838:	e7d4      	b.n	800c7e4 <__hexnan+0xd4>
 800c83a:	3f04      	subs	r7, #4
 800c83c:	e7d2      	b.n	800c7e4 <__hexnan+0xd4>
 800c83e:	2004      	movs	r0, #4
 800c840:	b007      	add	sp, #28
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c846 <__ascii_mbtowc>:
 800c846:	b082      	sub	sp, #8
 800c848:	b901      	cbnz	r1, 800c84c <__ascii_mbtowc+0x6>
 800c84a:	a901      	add	r1, sp, #4
 800c84c:	b142      	cbz	r2, 800c860 <__ascii_mbtowc+0x1a>
 800c84e:	b14b      	cbz	r3, 800c864 <__ascii_mbtowc+0x1e>
 800c850:	7813      	ldrb	r3, [r2, #0]
 800c852:	600b      	str	r3, [r1, #0]
 800c854:	7812      	ldrb	r2, [r2, #0]
 800c856:	1e10      	subs	r0, r2, #0
 800c858:	bf18      	it	ne
 800c85a:	2001      	movne	r0, #1
 800c85c:	b002      	add	sp, #8
 800c85e:	4770      	bx	lr
 800c860:	4610      	mov	r0, r2
 800c862:	e7fb      	b.n	800c85c <__ascii_mbtowc+0x16>
 800c864:	f06f 0001 	mvn.w	r0, #1
 800c868:	e7f8      	b.n	800c85c <__ascii_mbtowc+0x16>

0800c86a <_realloc_r>:
 800c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86e:	4680      	mov	r8, r0
 800c870:	4614      	mov	r4, r2
 800c872:	460e      	mov	r6, r1
 800c874:	b921      	cbnz	r1, 800c880 <_realloc_r+0x16>
 800c876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c87a:	4611      	mov	r1, r2
 800c87c:	f7fd be3e 	b.w	800a4fc <_malloc_r>
 800c880:	b92a      	cbnz	r2, 800c88e <_realloc_r+0x24>
 800c882:	f7fd fdc7 	bl	800a414 <_free_r>
 800c886:	4625      	mov	r5, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c88e:	f000 f842 	bl	800c916 <_malloc_usable_size_r>
 800c892:	4284      	cmp	r4, r0
 800c894:	4607      	mov	r7, r0
 800c896:	d802      	bhi.n	800c89e <_realloc_r+0x34>
 800c898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c89c:	d812      	bhi.n	800c8c4 <_realloc_r+0x5a>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	f7fd fe2b 	bl	800a4fc <_malloc_r>
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d0ed      	beq.n	800c888 <_realloc_r+0x1e>
 800c8ac:	42bc      	cmp	r4, r7
 800c8ae:	4622      	mov	r2, r4
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	bf28      	it	cs
 800c8b4:	463a      	movcs	r2, r7
 800c8b6:	f7fc ff1e 	bl	80096f6 <memcpy>
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4640      	mov	r0, r8
 800c8be:	f7fd fda9 	bl	800a414 <_free_r>
 800c8c2:	e7e1      	b.n	800c888 <_realloc_r+0x1e>
 800c8c4:	4635      	mov	r5, r6
 800c8c6:	e7df      	b.n	800c888 <_realloc_r+0x1e>

0800c8c8 <__ascii_wctomb>:
 800c8c8:	b149      	cbz	r1, 800c8de <__ascii_wctomb+0x16>
 800c8ca:	2aff      	cmp	r2, #255	; 0xff
 800c8cc:	bf85      	ittet	hi
 800c8ce:	238a      	movhi	r3, #138	; 0x8a
 800c8d0:	6003      	strhi	r3, [r0, #0]
 800c8d2:	700a      	strbls	r2, [r1, #0]
 800c8d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8d8:	bf98      	it	ls
 800c8da:	2001      	movls	r0, #1
 800c8dc:	4770      	bx	lr
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4770      	bx	lr
	...

0800c8e4 <fiprintf>:
 800c8e4:	b40e      	push	{r1, r2, r3}
 800c8e6:	b503      	push	{r0, r1, lr}
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	ab03      	add	r3, sp, #12
 800c8ec:	4805      	ldr	r0, [pc, #20]	; (800c904 <fiprintf+0x20>)
 800c8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f2:	6800      	ldr	r0, [r0, #0]
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	f000 f83f 	bl	800c978 <_vfiprintf_r>
 800c8fa:	b002      	add	sp, #8
 800c8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c900:	b003      	add	sp, #12
 800c902:	4770      	bx	lr
 800c904:	20000070 	.word	0x20000070

0800c908 <abort>:
 800c908:	b508      	push	{r3, lr}
 800c90a:	2006      	movs	r0, #6
 800c90c:	f000 fa0c 	bl	800cd28 <raise>
 800c910:	2001      	movs	r0, #1
 800c912:	f7f5 fc8d 	bl	8002230 <_exit>

0800c916 <_malloc_usable_size_r>:
 800c916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91a:	1f18      	subs	r0, r3, #4
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfbc      	itt	lt
 800c920:	580b      	ldrlt	r3, [r1, r0]
 800c922:	18c0      	addlt	r0, r0, r3
 800c924:	4770      	bx	lr

0800c926 <__sfputc_r>:
 800c926:	6893      	ldr	r3, [r2, #8]
 800c928:	3b01      	subs	r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	b410      	push	{r4}
 800c92e:	6093      	str	r3, [r2, #8]
 800c930:	da08      	bge.n	800c944 <__sfputc_r+0x1e>
 800c932:	6994      	ldr	r4, [r2, #24]
 800c934:	42a3      	cmp	r3, r4
 800c936:	db01      	blt.n	800c93c <__sfputc_r+0x16>
 800c938:	290a      	cmp	r1, #10
 800c93a:	d103      	bne.n	800c944 <__sfputc_r+0x1e>
 800c93c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c940:	f000 b934 	b.w	800cbac <__swbuf_r>
 800c944:	6813      	ldr	r3, [r2, #0]
 800c946:	1c58      	adds	r0, r3, #1
 800c948:	6010      	str	r0, [r2, #0]
 800c94a:	7019      	strb	r1, [r3, #0]
 800c94c:	4608      	mov	r0, r1
 800c94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <__sfputs_r>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	4606      	mov	r6, r0
 800c958:	460f      	mov	r7, r1
 800c95a:	4614      	mov	r4, r2
 800c95c:	18d5      	adds	r5, r2, r3
 800c95e:	42ac      	cmp	r4, r5
 800c960:	d101      	bne.n	800c966 <__sfputs_r+0x12>
 800c962:	2000      	movs	r0, #0
 800c964:	e007      	b.n	800c976 <__sfputs_r+0x22>
 800c966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c96a:	463a      	mov	r2, r7
 800c96c:	4630      	mov	r0, r6
 800c96e:	f7ff ffda 	bl	800c926 <__sfputc_r>
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	d1f3      	bne.n	800c95e <__sfputs_r+0xa>
 800c976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c978 <_vfiprintf_r>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	460d      	mov	r5, r1
 800c97e:	b09d      	sub	sp, #116	; 0x74
 800c980:	4614      	mov	r4, r2
 800c982:	4698      	mov	r8, r3
 800c984:	4606      	mov	r6, r0
 800c986:	b118      	cbz	r0, 800c990 <_vfiprintf_r+0x18>
 800c988:	6a03      	ldr	r3, [r0, #32]
 800c98a:	b90b      	cbnz	r3, 800c990 <_vfiprintf_r+0x18>
 800c98c:	f7fc fd10 	bl	80093b0 <__sinit>
 800c990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c992:	07d9      	lsls	r1, r3, #31
 800c994:	d405      	bmi.n	800c9a2 <_vfiprintf_r+0x2a>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	059a      	lsls	r2, r3, #22
 800c99a:	d402      	bmi.n	800c9a2 <_vfiprintf_r+0x2a>
 800c99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c99e:	f7fc fea8 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800c9a2:	89ab      	ldrh	r3, [r5, #12]
 800c9a4:	071b      	lsls	r3, r3, #28
 800c9a6:	d501      	bpl.n	800c9ac <_vfiprintf_r+0x34>
 800c9a8:	692b      	ldr	r3, [r5, #16]
 800c9aa:	b99b      	cbnz	r3, 800c9d4 <_vfiprintf_r+0x5c>
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f000 f93a 	bl	800cc28 <__swsetup_r>
 800c9b4:	b170      	cbz	r0, 800c9d4 <_vfiprintf_r+0x5c>
 800c9b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9b8:	07dc      	lsls	r4, r3, #31
 800c9ba:	d504      	bpl.n	800c9c6 <_vfiprintf_r+0x4e>
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	b01d      	add	sp, #116	; 0x74
 800c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	0598      	lsls	r0, r3, #22
 800c9ca:	d4f7      	bmi.n	800c9bc <_vfiprintf_r+0x44>
 800c9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ce:	f7fc fe91 	bl	80096f4 <__retarget_lock_release_recursive>
 800c9d2:	e7f3      	b.n	800c9bc <_vfiprintf_r+0x44>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d8:	2320      	movs	r3, #32
 800c9da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e2:	2330      	movs	r3, #48	; 0x30
 800c9e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb98 <_vfiprintf_r+0x220>
 800c9e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ec:	f04f 0901 	mov.w	r9, #1
 800c9f0:	4623      	mov	r3, r4
 800c9f2:	469a      	mov	sl, r3
 800c9f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f8:	b10a      	cbz	r2, 800c9fe <_vfiprintf_r+0x86>
 800c9fa:	2a25      	cmp	r2, #37	; 0x25
 800c9fc:	d1f9      	bne.n	800c9f2 <_vfiprintf_r+0x7a>
 800c9fe:	ebba 0b04 	subs.w	fp, sl, r4
 800ca02:	d00b      	beq.n	800ca1c <_vfiprintf_r+0xa4>
 800ca04:	465b      	mov	r3, fp
 800ca06:	4622      	mov	r2, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff ffa2 	bl	800c954 <__sfputs_r>
 800ca10:	3001      	adds	r0, #1
 800ca12:	f000 80a9 	beq.w	800cb68 <_vfiprintf_r+0x1f0>
 800ca16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca18:	445a      	add	r2, fp
 800ca1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80a1 	beq.w	800cb68 <_vfiprintf_r+0x1f0>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca30:	f10a 0a01 	add.w	sl, sl, #1
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	9307      	str	r3, [sp, #28]
 800ca38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca3e:	4654      	mov	r4, sl
 800ca40:	2205      	movs	r2, #5
 800ca42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca46:	4854      	ldr	r0, [pc, #336]	; (800cb98 <_vfiprintf_r+0x220>)
 800ca48:	f7f3 fbca 	bl	80001e0 <memchr>
 800ca4c:	9a04      	ldr	r2, [sp, #16]
 800ca4e:	b9d8      	cbnz	r0, 800ca88 <_vfiprintf_r+0x110>
 800ca50:	06d1      	lsls	r1, r2, #27
 800ca52:	bf44      	itt	mi
 800ca54:	2320      	movmi	r3, #32
 800ca56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca5a:	0713      	lsls	r3, r2, #28
 800ca5c:	bf44      	itt	mi
 800ca5e:	232b      	movmi	r3, #43	; 0x2b
 800ca60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca64:	f89a 3000 	ldrb.w	r3, [sl]
 800ca68:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6a:	d015      	beq.n	800ca98 <_vfiprintf_r+0x120>
 800ca6c:	9a07      	ldr	r2, [sp, #28]
 800ca6e:	4654      	mov	r4, sl
 800ca70:	2000      	movs	r0, #0
 800ca72:	f04f 0c0a 	mov.w	ip, #10
 800ca76:	4621      	mov	r1, r4
 800ca78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7c:	3b30      	subs	r3, #48	; 0x30
 800ca7e:	2b09      	cmp	r3, #9
 800ca80:	d94d      	bls.n	800cb1e <_vfiprintf_r+0x1a6>
 800ca82:	b1b0      	cbz	r0, 800cab2 <_vfiprintf_r+0x13a>
 800ca84:	9207      	str	r2, [sp, #28]
 800ca86:	e014      	b.n	800cab2 <_vfiprintf_r+0x13a>
 800ca88:	eba0 0308 	sub.w	r3, r0, r8
 800ca8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca90:	4313      	orrs	r3, r2
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	46a2      	mov	sl, r4
 800ca96:	e7d2      	b.n	800ca3e <_vfiprintf_r+0xc6>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	1d19      	adds	r1, r3, #4
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	9103      	str	r1, [sp, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	bfbb      	ittet	lt
 800caa4:	425b      	neglt	r3, r3
 800caa6:	f042 0202 	orrlt.w	r2, r2, #2
 800caaa:	9307      	strge	r3, [sp, #28]
 800caac:	9307      	strlt	r3, [sp, #28]
 800caae:	bfb8      	it	lt
 800cab0:	9204      	strlt	r2, [sp, #16]
 800cab2:	7823      	ldrb	r3, [r4, #0]
 800cab4:	2b2e      	cmp	r3, #46	; 0x2e
 800cab6:	d10c      	bne.n	800cad2 <_vfiprintf_r+0x15a>
 800cab8:	7863      	ldrb	r3, [r4, #1]
 800caba:	2b2a      	cmp	r3, #42	; 0x2a
 800cabc:	d134      	bne.n	800cb28 <_vfiprintf_r+0x1b0>
 800cabe:	9b03      	ldr	r3, [sp, #12]
 800cac0:	1d1a      	adds	r2, r3, #4
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	9203      	str	r2, [sp, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bfb8      	it	lt
 800caca:	f04f 33ff 	movlt.w	r3, #4294967295
 800cace:	3402      	adds	r4, #2
 800cad0:	9305      	str	r3, [sp, #20]
 800cad2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cba8 <_vfiprintf_r+0x230>
 800cad6:	7821      	ldrb	r1, [r4, #0]
 800cad8:	2203      	movs	r2, #3
 800cada:	4650      	mov	r0, sl
 800cadc:	f7f3 fb80 	bl	80001e0 <memchr>
 800cae0:	b138      	cbz	r0, 800caf2 <_vfiprintf_r+0x17a>
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	eba0 000a 	sub.w	r0, r0, sl
 800cae8:	2240      	movs	r2, #64	; 0x40
 800caea:	4082      	lsls	r2, r0
 800caec:	4313      	orrs	r3, r2
 800caee:	3401      	adds	r4, #1
 800caf0:	9304      	str	r3, [sp, #16]
 800caf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf6:	4829      	ldr	r0, [pc, #164]	; (800cb9c <_vfiprintf_r+0x224>)
 800caf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cafc:	2206      	movs	r2, #6
 800cafe:	f7f3 fb6f 	bl	80001e0 <memchr>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d03f      	beq.n	800cb86 <_vfiprintf_r+0x20e>
 800cb06:	4b26      	ldr	r3, [pc, #152]	; (800cba0 <_vfiprintf_r+0x228>)
 800cb08:	bb1b      	cbnz	r3, 800cb52 <_vfiprintf_r+0x1da>
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	3307      	adds	r3, #7
 800cb0e:	f023 0307 	bic.w	r3, r3, #7
 800cb12:	3308      	adds	r3, #8
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb18:	443b      	add	r3, r7
 800cb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb1c:	e768      	b.n	800c9f0 <_vfiprintf_r+0x78>
 800cb1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb22:	460c      	mov	r4, r1
 800cb24:	2001      	movs	r0, #1
 800cb26:	e7a6      	b.n	800ca76 <_vfiprintf_r+0xfe>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	3401      	adds	r4, #1
 800cb2c:	9305      	str	r3, [sp, #20]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	f04f 0c0a 	mov.w	ip, #10
 800cb34:	4620      	mov	r0, r4
 800cb36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3a:	3a30      	subs	r2, #48	; 0x30
 800cb3c:	2a09      	cmp	r2, #9
 800cb3e:	d903      	bls.n	800cb48 <_vfiprintf_r+0x1d0>
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d0c6      	beq.n	800cad2 <_vfiprintf_r+0x15a>
 800cb44:	9105      	str	r1, [sp, #20]
 800cb46:	e7c4      	b.n	800cad2 <_vfiprintf_r+0x15a>
 800cb48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e7f0      	b.n	800cb34 <_vfiprintf_r+0x1bc>
 800cb52:	ab03      	add	r3, sp, #12
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	462a      	mov	r2, r5
 800cb58:	4b12      	ldr	r3, [pc, #72]	; (800cba4 <_vfiprintf_r+0x22c>)
 800cb5a:	a904      	add	r1, sp, #16
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7fb fdc5 	bl	80086ec <_printf_float>
 800cb62:	4607      	mov	r7, r0
 800cb64:	1c78      	adds	r0, r7, #1
 800cb66:	d1d6      	bne.n	800cb16 <_vfiprintf_r+0x19e>
 800cb68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb6a:	07d9      	lsls	r1, r3, #31
 800cb6c:	d405      	bmi.n	800cb7a <_vfiprintf_r+0x202>
 800cb6e:	89ab      	ldrh	r3, [r5, #12]
 800cb70:	059a      	lsls	r2, r3, #22
 800cb72:	d402      	bmi.n	800cb7a <_vfiprintf_r+0x202>
 800cb74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb76:	f7fc fdbd 	bl	80096f4 <__retarget_lock_release_recursive>
 800cb7a:	89ab      	ldrh	r3, [r5, #12]
 800cb7c:	065b      	lsls	r3, r3, #25
 800cb7e:	f53f af1d 	bmi.w	800c9bc <_vfiprintf_r+0x44>
 800cb82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb84:	e71c      	b.n	800c9c0 <_vfiprintf_r+0x48>
 800cb86:	ab03      	add	r3, sp, #12
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	462a      	mov	r2, r5
 800cb8c:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <_vfiprintf_r+0x22c>)
 800cb8e:	a904      	add	r1, sp, #16
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7fc f84f 	bl	8008c34 <_printf_i>
 800cb96:	e7e4      	b.n	800cb62 <_vfiprintf_r+0x1ea>
 800cb98:	0800d331 	.word	0x0800d331
 800cb9c:	0800d33b 	.word	0x0800d33b
 800cba0:	080086ed 	.word	0x080086ed
 800cba4:	0800c955 	.word	0x0800c955
 800cba8:	0800d337 	.word	0x0800d337

0800cbac <__swbuf_r>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	460e      	mov	r6, r1
 800cbb0:	4614      	mov	r4, r2
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	b118      	cbz	r0, 800cbbe <__swbuf_r+0x12>
 800cbb6:	6a03      	ldr	r3, [r0, #32]
 800cbb8:	b90b      	cbnz	r3, 800cbbe <__swbuf_r+0x12>
 800cbba:	f7fc fbf9 	bl	80093b0 <__sinit>
 800cbbe:	69a3      	ldr	r3, [r4, #24]
 800cbc0:	60a3      	str	r3, [r4, #8]
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	071a      	lsls	r2, r3, #28
 800cbc6:	d525      	bpl.n	800cc14 <__swbuf_r+0x68>
 800cbc8:	6923      	ldr	r3, [r4, #16]
 800cbca:	b31b      	cbz	r3, 800cc14 <__swbuf_r+0x68>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	6922      	ldr	r2, [r4, #16]
 800cbd0:	1a98      	subs	r0, r3, r2
 800cbd2:	6963      	ldr	r3, [r4, #20]
 800cbd4:	b2f6      	uxtb	r6, r6
 800cbd6:	4283      	cmp	r3, r0
 800cbd8:	4637      	mov	r7, r6
 800cbda:	dc04      	bgt.n	800cbe6 <__swbuf_r+0x3a>
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f7ff fa3a 	bl	800c058 <_fflush_r>
 800cbe4:	b9e0      	cbnz	r0, 800cc20 <__swbuf_r+0x74>
 800cbe6:	68a3      	ldr	r3, [r4, #8]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	60a3      	str	r3, [r4, #8]
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	6022      	str	r2, [r4, #0]
 800cbf2:	701e      	strb	r6, [r3, #0]
 800cbf4:	6962      	ldr	r2, [r4, #20]
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d004      	beq.n	800cc06 <__swbuf_r+0x5a>
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	07db      	lsls	r3, r3, #31
 800cc00:	d506      	bpl.n	800cc10 <__swbuf_r+0x64>
 800cc02:	2e0a      	cmp	r6, #10
 800cc04:	d104      	bne.n	800cc10 <__swbuf_r+0x64>
 800cc06:	4621      	mov	r1, r4
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f7ff fa25 	bl	800c058 <_fflush_r>
 800cc0e:	b938      	cbnz	r0, 800cc20 <__swbuf_r+0x74>
 800cc10:	4638      	mov	r0, r7
 800cc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f806 	bl	800cc28 <__swsetup_r>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d0d5      	beq.n	800cbcc <__swbuf_r+0x20>
 800cc20:	f04f 37ff 	mov.w	r7, #4294967295
 800cc24:	e7f4      	b.n	800cc10 <__swbuf_r+0x64>
	...

0800cc28 <__swsetup_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4b2a      	ldr	r3, [pc, #168]	; (800ccd4 <__swsetup_r+0xac>)
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	6818      	ldr	r0, [r3, #0]
 800cc30:	460c      	mov	r4, r1
 800cc32:	b118      	cbz	r0, 800cc3c <__swsetup_r+0x14>
 800cc34:	6a03      	ldr	r3, [r0, #32]
 800cc36:	b90b      	cbnz	r3, 800cc3c <__swsetup_r+0x14>
 800cc38:	f7fc fbba 	bl	80093b0 <__sinit>
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc42:	0718      	lsls	r0, r3, #28
 800cc44:	d422      	bmi.n	800cc8c <__swsetup_r+0x64>
 800cc46:	06d9      	lsls	r1, r3, #27
 800cc48:	d407      	bmi.n	800cc5a <__swsetup_r+0x32>
 800cc4a:	2309      	movs	r3, #9
 800cc4c:	602b      	str	r3, [r5, #0]
 800cc4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	e034      	b.n	800ccc4 <__swsetup_r+0x9c>
 800cc5a:	0758      	lsls	r0, r3, #29
 800cc5c:	d512      	bpl.n	800cc84 <__swsetup_r+0x5c>
 800cc5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc60:	b141      	cbz	r1, 800cc74 <__swsetup_r+0x4c>
 800cc62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc66:	4299      	cmp	r1, r3
 800cc68:	d002      	beq.n	800cc70 <__swsetup_r+0x48>
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f7fd fbd2 	bl	800a414 <_free_r>
 800cc70:	2300      	movs	r3, #0
 800cc72:	6363      	str	r3, [r4, #52]	; 0x34
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	6063      	str	r3, [r4, #4]
 800cc80:	6923      	ldr	r3, [r4, #16]
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	f043 0308 	orr.w	r3, r3, #8
 800cc8a:	81a3      	strh	r3, [r4, #12]
 800cc8c:	6923      	ldr	r3, [r4, #16]
 800cc8e:	b94b      	cbnz	r3, 800cca4 <__swsetup_r+0x7c>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc9a:	d003      	beq.n	800cca4 <__swsetup_r+0x7c>
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f000 f884 	bl	800cdac <__smakebuf_r>
 800cca4:	89a0      	ldrh	r0, [r4, #12]
 800cca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccaa:	f010 0301 	ands.w	r3, r0, #1
 800ccae:	d00a      	beq.n	800ccc6 <__swsetup_r+0x9e>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60a3      	str	r3, [r4, #8]
 800ccb4:	6963      	ldr	r3, [r4, #20]
 800ccb6:	425b      	negs	r3, r3
 800ccb8:	61a3      	str	r3, [r4, #24]
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	b943      	cbnz	r3, 800ccd0 <__swsetup_r+0xa8>
 800ccbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccc2:	d1c4      	bne.n	800cc4e <__swsetup_r+0x26>
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	0781      	lsls	r1, r0, #30
 800ccc8:	bf58      	it	pl
 800ccca:	6963      	ldrpl	r3, [r4, #20]
 800cccc:	60a3      	str	r3, [r4, #8]
 800ccce:	e7f4      	b.n	800ccba <__swsetup_r+0x92>
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	e7f7      	b.n	800ccc4 <__swsetup_r+0x9c>
 800ccd4:	20000070 	.word	0x20000070

0800ccd8 <_raise_r>:
 800ccd8:	291f      	cmp	r1, #31
 800ccda:	b538      	push	{r3, r4, r5, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	460d      	mov	r5, r1
 800cce0:	d904      	bls.n	800ccec <_raise_r+0x14>
 800cce2:	2316      	movs	r3, #22
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ccee:	b112      	cbz	r2, 800ccf6 <_raise_r+0x1e>
 800ccf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccf4:	b94b      	cbnz	r3, 800cd0a <_raise_r+0x32>
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f000 f830 	bl	800cd5c <_getpid_r>
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4601      	mov	r1, r0
 800cd00:	4620      	mov	r0, r4
 800cd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd06:	f000 b817 	b.w	800cd38 <_kill_r>
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d00a      	beq.n	800cd24 <_raise_r+0x4c>
 800cd0e:	1c59      	adds	r1, r3, #1
 800cd10:	d103      	bne.n	800cd1a <_raise_r+0x42>
 800cd12:	2316      	movs	r3, #22
 800cd14:	6003      	str	r3, [r0, #0]
 800cd16:	2001      	movs	r0, #1
 800cd18:	e7e7      	b.n	800ccea <_raise_r+0x12>
 800cd1a:	2400      	movs	r4, #0
 800cd1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd20:	4628      	mov	r0, r5
 800cd22:	4798      	blx	r3
 800cd24:	2000      	movs	r0, #0
 800cd26:	e7e0      	b.n	800ccea <_raise_r+0x12>

0800cd28 <raise>:
 800cd28:	4b02      	ldr	r3, [pc, #8]	; (800cd34 <raise+0xc>)
 800cd2a:	4601      	mov	r1, r0
 800cd2c:	6818      	ldr	r0, [r3, #0]
 800cd2e:	f7ff bfd3 	b.w	800ccd8 <_raise_r>
 800cd32:	bf00      	nop
 800cd34:	20000070 	.word	0x20000070

0800cd38 <_kill_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d07      	ldr	r5, [pc, #28]	; (800cd58 <_kill_r+0x20>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	4611      	mov	r1, r2
 800cd44:	602b      	str	r3, [r5, #0]
 800cd46:	f7f5 fa63 	bl	8002210 <_kill>
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	d102      	bne.n	800cd54 <_kill_r+0x1c>
 800cd4e:	682b      	ldr	r3, [r5, #0]
 800cd50:	b103      	cbz	r3, 800cd54 <_kill_r+0x1c>
 800cd52:	6023      	str	r3, [r4, #0]
 800cd54:	bd38      	pop	{r3, r4, r5, pc}
 800cd56:	bf00      	nop
 800cd58:	200016f4 	.word	0x200016f4

0800cd5c <_getpid_r>:
 800cd5c:	f7f5 ba50 	b.w	8002200 <_getpid>

0800cd60 <__swhatbuf_r>:
 800cd60:	b570      	push	{r4, r5, r6, lr}
 800cd62:	460c      	mov	r4, r1
 800cd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	b096      	sub	sp, #88	; 0x58
 800cd6c:	4615      	mov	r5, r2
 800cd6e:	461e      	mov	r6, r3
 800cd70:	da0d      	bge.n	800cd8e <__swhatbuf_r+0x2e>
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd78:	f04f 0100 	mov.w	r1, #0
 800cd7c:	bf0c      	ite	eq
 800cd7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd82:	2340      	movne	r3, #64	; 0x40
 800cd84:	2000      	movs	r0, #0
 800cd86:	6031      	str	r1, [r6, #0]
 800cd88:	602b      	str	r3, [r5, #0]
 800cd8a:	b016      	add	sp, #88	; 0x58
 800cd8c:	bd70      	pop	{r4, r5, r6, pc}
 800cd8e:	466a      	mov	r2, sp
 800cd90:	f000 f848 	bl	800ce24 <_fstat_r>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	dbec      	blt.n	800cd72 <__swhatbuf_r+0x12>
 800cd98:	9901      	ldr	r1, [sp, #4]
 800cd9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cd9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cda2:	4259      	negs	r1, r3
 800cda4:	4159      	adcs	r1, r3
 800cda6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdaa:	e7eb      	b.n	800cd84 <__swhatbuf_r+0x24>

0800cdac <__smakebuf_r>:
 800cdac:	898b      	ldrh	r3, [r1, #12]
 800cdae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdb0:	079d      	lsls	r5, r3, #30
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	d507      	bpl.n	800cdc8 <__smakebuf_r+0x1c>
 800cdb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	6123      	str	r3, [r4, #16]
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	6163      	str	r3, [r4, #20]
 800cdc4:	b002      	add	sp, #8
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	ab01      	add	r3, sp, #4
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f7ff ffc8 	bl	800cd60 <__swhatbuf_r>
 800cdd0:	9900      	ldr	r1, [sp, #0]
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7fd fb91 	bl	800a4fc <_malloc_r>
 800cdda:	b948      	cbnz	r0, 800cdf0 <__smakebuf_r+0x44>
 800cddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde0:	059a      	lsls	r2, r3, #22
 800cde2:	d4ef      	bmi.n	800cdc4 <__smakebuf_r+0x18>
 800cde4:	f023 0303 	bic.w	r3, r3, #3
 800cde8:	f043 0302 	orr.w	r3, r3, #2
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	e7e3      	b.n	800cdb8 <__smakebuf_r+0xc>
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	6020      	str	r0, [r4, #0]
 800cdf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf8:	81a3      	strh	r3, [r4, #12]
 800cdfa:	9b00      	ldr	r3, [sp, #0]
 800cdfc:	6163      	str	r3, [r4, #20]
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	6120      	str	r0, [r4, #16]
 800ce02:	b15b      	cbz	r3, 800ce1c <__smakebuf_r+0x70>
 800ce04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f000 f81d 	bl	800ce48 <_isatty_r>
 800ce0e:	b128      	cbz	r0, 800ce1c <__smakebuf_r+0x70>
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	f023 0303 	bic.w	r3, r3, #3
 800ce16:	f043 0301 	orr.w	r3, r3, #1
 800ce1a:	81a3      	strh	r3, [r4, #12]
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	431d      	orrs	r5, r3
 800ce20:	81a5      	strh	r5, [r4, #12]
 800ce22:	e7cf      	b.n	800cdc4 <__smakebuf_r+0x18>

0800ce24 <_fstat_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	4d07      	ldr	r5, [pc, #28]	; (800ce44 <_fstat_r+0x20>)
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	4611      	mov	r1, r2
 800ce30:	602b      	str	r3, [r5, #0]
 800ce32:	f7f5 fa4c 	bl	80022ce <_fstat>
 800ce36:	1c43      	adds	r3, r0, #1
 800ce38:	d102      	bne.n	800ce40 <_fstat_r+0x1c>
 800ce3a:	682b      	ldr	r3, [r5, #0]
 800ce3c:	b103      	cbz	r3, 800ce40 <_fstat_r+0x1c>
 800ce3e:	6023      	str	r3, [r4, #0]
 800ce40:	bd38      	pop	{r3, r4, r5, pc}
 800ce42:	bf00      	nop
 800ce44:	200016f4 	.word	0x200016f4

0800ce48 <_isatty_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d06      	ldr	r5, [pc, #24]	; (800ce64 <_isatty_r+0x1c>)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4604      	mov	r4, r0
 800ce50:	4608      	mov	r0, r1
 800ce52:	602b      	str	r3, [r5, #0]
 800ce54:	f7f5 fa4b 	bl	80022ee <_isatty>
 800ce58:	1c43      	adds	r3, r0, #1
 800ce5a:	d102      	bne.n	800ce62 <_isatty_r+0x1a>
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	b103      	cbz	r3, 800ce62 <_isatty_r+0x1a>
 800ce60:	6023      	str	r3, [r4, #0]
 800ce62:	bd38      	pop	{r3, r4, r5, pc}
 800ce64:	200016f4 	.word	0x200016f4

0800ce68 <_init>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr

0800ce74 <_fini>:
 800ce74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce76:	bf00      	nop
 800ce78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7a:	bc08      	pop	{r3}
 800ce7c:	469e      	mov	lr, r3
 800ce7e:	4770      	bx	lr
