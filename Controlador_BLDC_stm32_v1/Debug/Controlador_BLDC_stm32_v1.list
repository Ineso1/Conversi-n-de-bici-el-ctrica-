
Controlador_BLDC_stm32_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007148  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08007368  08007368  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007368  08007368  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000046c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000156eb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e1c  00000000  00000000  000357ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010e0  00000000  00000000  000385d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d1b  00000000  00000000  000396b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252d3  00000000  00000000  0003a3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017a33  00000000  00000000  0005f6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8677  00000000  00000000  000770d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004b5c  00000000  00000000  0014f750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001542ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072d0 	.word	0x080072d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080072d0 	.word	0x080072d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80002b2:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002b4:	4a2d      	ldr	r2, [pc, #180]	; (800036c <MX_ADC3_Init+0xdc>)
 80002b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002b8:	4b2b      	ldr	r3, [pc, #172]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80002be:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c4:	4b28      	ldr	r3, [pc, #160]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80002ca:	4b27      	ldr	r3, [pc, #156]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80002d0:	4b25      	ldr	r3, [pc, #148]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d8:	4b23      	ldr	r3, [pc, #140]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002de:	4b22      	ldr	r3, [pc, #136]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_ADC3_Init+0xd8>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_ADC3_Init+0xd8>)
 8000300:	2200      	movs	r2, #0
 8000302:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_ADC3_Init+0xd8>)
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800030a:	4817      	ldr	r0, [pc, #92]	; (8000368 <MX_ADC3_Init+0xd8>)
 800030c:	f001 fa50 	bl	80017b0 <HAL_ADC_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000316:	f000 fddd 	bl	8000ed4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800031e:	f107 031c 	add.w	r3, r7, #28
 8000322:	4619      	mov	r1, r3
 8000324:	4810      	ldr	r0, [pc, #64]	; (8000368 <MX_ADC3_Init+0xd8>)
 8000326:	f002 fa43 	bl	80027b0 <HAL_ADCEx_MultiModeConfigChannel>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000330:	f000 fdd0 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000334:	2301      	movs	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000338:	2301      	movs	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_ADC3_Init+0xd8>)
 8000352:	f001 ff43 	bl	80021dc <HAL_ADC_ConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800035c:	f000 fdba 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000078 	.word	0x20000078
 800036c:	50000400 	.word	0x50000400

08000370 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000376:	463b      	mov	r3, r7
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_ADC4_Init+0xb4>)
 8000388:	4a27      	ldr	r2, [pc, #156]	; (8000428 <MX_ADC4_Init+0xb8>)
 800038a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800038c:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_ADC4_Init+0xb4>)
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000392:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MX_ADC4_Init+0xb4>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <MX_ADC4_Init+0xb4>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80003de:	4811      	ldr	r0, [pc, #68]	; (8000424 <MX_ADC4_Init+0xb4>)
 80003e0:	f001 f9e6 	bl	80017b0 <HAL_ADC_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80003ea:	f000 fd73 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003ee:	2303      	movs	r3, #3
 80003f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000406:	463b      	mov	r3, r7
 8000408:	4619      	mov	r1, r3
 800040a:	4806      	ldr	r0, [pc, #24]	; (8000424 <MX_ADC4_Init+0xb4>)
 800040c:	f001 fee6 	bl	80021dc <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000416:	f000 fd5d 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000c8 	.word	0x200000c8
 8000428:	50000500 	.word	0x50000500

0800042c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08c      	sub	sp, #48	; 0x30
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 031c 	add.w	r3, r7, #28
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a3b      	ldr	r2, [pc, #236]	; (8000538 <HAL_ADC_MspInit+0x10c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d135      	bne.n	80004ba <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    HAL_RCC_ADC34_CLK_ENABLED++;
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <HAL_ADC_MspInit+0x110>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	4a39      	ldr	r2, [pc, #228]	; (800053c <HAL_ADC_MspInit+0x110>)
 8000456:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000458:	4b38      	ldr	r3, [pc, #224]	; (800053c <HAL_ADC_MspInit+0x110>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d10b      	bne.n	8000478 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000460:	4b37      	ldr	r3, [pc, #220]	; (8000540 <HAL_ADC_MspInit+0x114>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	4a36      	ldr	r2, [pc, #216]	; (8000540 <HAL_ADC_MspInit+0x114>)
 8000466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800046a:	6153      	str	r3, [r2, #20]
 800046c:	4b34      	ldr	r3, [pc, #208]	; (8000540 <HAL_ADC_MspInit+0x114>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000474:	61bb      	str	r3, [r7, #24]
 8000476:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b31      	ldr	r3, [pc, #196]	; (8000540 <HAL_ADC_MspInit+0x114>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a30      	ldr	r2, [pc, #192]	; (8000540 <HAL_ADC_MspInit+0x114>)
 800047e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <HAL_ADC_MspInit+0x114>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	697b      	ldr	r3, [r7, #20]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = Throttle_Pin;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000494:	2303      	movs	r3, #3
 8000496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Throttle_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	4619      	mov	r1, r3
 80004a2:	4828      	ldr	r0, [pc, #160]	; (8000544 <HAL_ADC_MspInit+0x118>)
 80004a4:	f002 fcea 	bl	8002e7c <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	202f      	movs	r0, #47	; 0x2f
 80004ae:	f002 fcae 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80004b2:	202f      	movs	r0, #47	; 0x2f
 80004b4:	f002 fcc7 	bl	8002e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80004b8:	e03a      	b.n	8000530 <HAL_ADC_MspInit+0x104>
  else if(adcHandle->Instance==ADC4)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a22      	ldr	r2, [pc, #136]	; (8000548 <HAL_ADC_MspInit+0x11c>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d135      	bne.n	8000530 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <HAL_ADC_MspInit+0x110>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3301      	adds	r3, #1
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <HAL_ADC_MspInit+0x110>)
 80004cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80004ce:	4b1b      	ldr	r3, [pc, #108]	; (800053c <HAL_ADC_MspInit+0x110>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d10b      	bne.n	80004ee <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <HAL_ADC_MspInit+0x114>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a19      	ldr	r2, [pc, #100]	; (8000540 <HAL_ADC_MspInit+0x114>)
 80004dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <HAL_ADC_MspInit+0x114>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_ADC_MspInit+0x114>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a13      	ldr	r2, [pc, #76]	; (8000540 <HAL_ADC_MspInit+0x114>)
 80004f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_ADC_MspInit+0x114>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_Pin|Voltage_Pin;
 8000506:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800050a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050c:	2303      	movs	r3, #3
 800050e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	4619      	mov	r1, r3
 800051a:	480a      	ldr	r0, [pc, #40]	; (8000544 <HAL_ADC_MspInit+0x118>)
 800051c:	f002 fcae 	bl	8002e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	203d      	movs	r0, #61	; 0x3d
 8000526:	f002 fc72 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800052a:	203d      	movs	r0, #61	; 0x3d
 800052c:	f002 fc8b 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 8000530:	bf00      	nop
 8000532:	3730      	adds	r7, #48	; 0x30
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	50000400 	.word	0x50000400
 800053c:	20000118 	.word	0x20000118
 8000540:	40021000 	.word	0x40021000
 8000544:	48000400 	.word	0x48000400
 8000548:	50000500 	.word	0x50000500

0800054c <init>:
#include "bldc_controller.h"
#include "usart.h"
#include <cstdio>  // Include this for snprintf
#include <cstring> // Include this for strlen

void init(struct Bldc* bldc){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    // Proportions
	bldc->CURRENT_SCALING = 3.3 / 0.001 / 20 / 4096 * 1000;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2228      	movs	r2, #40	; 0x28
 8000558:	665a      	str	r2, [r3, #100]	; 0x64
	bldc->VOLTAGE_SCALING = 3.3 / 4096 * (47 + 2.2) / 2.2 * 1000;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2212      	movs	r2, #18
 800055e:	669a      	str	r2, [r3, #104]	; 0x68

    // Parameter
	bldc->HALL_OVERSAMPLE = 8;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2208      	movs	r2, #8
 8000564:	66da      	str	r2, [r3, #108]	; 0x6c
	bldc->HALL_IDENTIFY_DUTY_CYCLE = 25;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2219      	movs	r2, #25
 800056a:	671a      	str	r2, [r3, #112]	; 0x70
	bldc->F_PWM = 16000;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000572:	675a      	str	r2, [r3, #116]	; 0x74
	bldc->DUTY_CYCLE_MAX = 4294967295;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	679a      	str	r2, [r3, #120]	; 0x78

    // Current cutoff
	bldc->FULL_SCALE_CURRENT_MA = 30000;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000582:	67da      	str	r2, [r3, #124]	; 0x7c

    // Throttle limits
	bldc->THROTTLE_LOW = 600;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f44f 7216 	mov.w	r2, #600	; 0x258
 800058a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	bldc->THROTTLE_HIGH = 2650;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f640 225a 	movw	r2, #2650	; 0xa5a
 8000594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    HAL_TIM_PWM_Start_IT(bldc->PWM_A, TIM_CHANNEL_1);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fb86 	bl	8004cb0 <HAL_TIM_PWM_Start_IT>

}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <setPins_Hall>:

// Function to set up the Hall sensor pins
void setPins_Hall(struct Bldc* bldc, GPIO_TypeDef* hall_a_port, uint16_t hall_a_pin, GPIO_TypeDef* hall_b_port, uint16_t hall_b_pin, GPIO_TypeDef* hall_c_port, uint16_t hall_c_pin) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4613      	mov	r3, r2
 80005ba:	80fb      	strh	r3, [r7, #6]
    bldc->HALL_A_Port = hall_a_port;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	601a      	str	r2, [r3, #0]
    bldc->HALL_A_PIN = hall_a_pin;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	88fa      	ldrh	r2, [r7, #6]
 80005c6:	819a      	strh	r2, [r3, #12]
    bldc->HALL_B_Port = hall_b_port;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	605a      	str	r2, [r3, #4]
    bldc->HALL_B_PIN = hall_b_pin;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	8b3a      	ldrh	r2, [r7, #24]
 80005d2:	81da      	strh	r2, [r3, #14]
    bldc->HALL_C_Port = hall_c_port;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	69fa      	ldr	r2, [r7, #28]
 80005d8:	609a      	str	r2, [r3, #8]
    bldc->HALL_C_PIN = hall_c_pin;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	8c3a      	ldrh	r2, [r7, #32]
 80005de:	821a      	strh	r2, [r3, #16]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <setPins_Predriver>:

// Function to set up the pre-driver pins
void setPins_Predriver(struct Bldc* bldc, GPIO_TypeDef* h_a_port, uint16_t h_a_pin, GPIO_TypeDef* h_b_port, uint16_t h_b_pin, GPIO_TypeDef* h_c_port, uint16_t h_c_pin, GPIO_TypeDef* l_a_port, uint16_t l_a_pin, GPIO_TypeDef* l_b_port, uint16_t l_b_pin, GPIO_TypeDef* l_c_port, uint16_t l_c_pin) {
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4613      	mov	r3, r2
 80005fa:	80fb      	strh	r3, [r7, #6]
    bldc->H_A_Port = h_a_port;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	621a      	str	r2, [r3, #32]
    bldc->H_A_PIN = h_a_pin;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	88fa      	ldrh	r2, [r7, #6]
 8000606:	871a      	strh	r2, [r3, #56]	; 0x38
    bldc->H_B_Port = h_b_port;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
    bldc->H_B_PIN = h_b_pin;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	8b3a      	ldrh	r2, [r7, #24]
 8000612:	875a      	strh	r2, [r3, #58]	; 0x3a
    bldc->H_C_Port = h_c_port;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	69fa      	ldr	r2, [r7, #28]
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
    bldc->H_C_PIN = h_c_pin;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	8c3a      	ldrh	r2, [r7, #32]
 800061e:	879a      	strh	r2, [r3, #60]	; 0x3c
    bldc->L_A_Port = l_a_port;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
    bldc->L_A_PIN = l_a_pin;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062a:	87da      	strh	r2, [r3, #62]	; 0x3e
    bldc->L_B_Port = l_b_port;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
    bldc->L_B_PIN = l_b_pin;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    bldc->L_C_Port = l_c_port;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
    bldc->L_C_PIN = l_c_pin;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000644:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <setTimers>:

// Function to set up PWM Timers
void setTimers(struct Bldc* bldc, TIM_HandleTypeDef* PWM_A, TIM_HandleTypeDef* PWM_B, TIM_HandleTypeDef* PWM_C) {
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	603b      	str	r3, [r7, #0]
    bldc->PWM_A = PWM_A;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	645a      	str	r2, [r3, #68]	; 0x44
    bldc->PWM_B = PWM_B;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	649a      	str	r2, [r3, #72]	; 0x48
    bldc->PWM_C = PWM_C;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <setThrottle>:

// Function to set up the throttle pin and ADC channel
void setThrottle(struct Bldc* bldc, GPIO_TypeDef* throttle_port, uint16_t throttle_pin, ADC_HandleTypeDef* throttle_adc) {
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4613      	mov	r3, r2
 800068e:	80fb      	strh	r3, [r7, #6]
    bldc->THROTTLE_Port = throttle_port;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	615a      	str	r2, [r3, #20]
    bldc->THROTTLE_PIN = throttle_pin;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	831a      	strh	r2, [r3, #24]
    bldc->THROTTLE_ADC = throttle_adc;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	61da      	str	r2, [r3, #28]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <setISense>:

// Function to set up the current sensor pin and ADC channel
void setISense(struct Bldc* bldc, GPIO_TypeDef* iSense_port, uint16_t iSense_pin, ADC_HandleTypeDef* iSense_adc) {
 80006ae:	b480      	push	{r7}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4613      	mov	r3, r2
 80006bc:	80fb      	strh	r3, [r7, #6]
    bldc->I_SENSE_Port = iSense_port;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	68ba      	ldr	r2, [r7, #8]
 80006c2:	651a      	str	r2, [r3, #80]	; 0x50
    bldc->I_SENSE_PIN = iSense_pin;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	88fa      	ldrh	r2, [r7, #6]
 80006c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    bldc->I_SENSE_ADC = iSense_adc;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <setVSense>:

// Function to set up the voltage sensor pin and ADC channel
void setVSense(struct Bldc* bldc, GPIO_TypeDef* vSense_port, uint16_t vSense_pin, ADC_HandleTypeDef* vSense_adc) {
 80006de:	b480      	push	{r7}
 80006e0:	b085      	sub	sp, #20
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4613      	mov	r3, r2
 80006ec:	80fb      	strh	r3, [r7, #6]
    bldc->V_SENSE_Port = vSense_port;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	655a      	str	r2, [r3, #84]	; 0x54
    bldc->V_SENSE_PIN = vSense_pin;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	88fa      	ldrh	r2, [r7, #6]
 80006f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    bldc->V_SENSE_ADC = vSense_adc;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	661a      	str	r2, [r3, #96]	; 0x60
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <get_halls>:

unsigned int get_halls(struct Bldc* bldc){
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	unsigned int hallCounts[] = {0, 0, 0};
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800071c:	2300      	movs	r3, #0
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
 8000720:	2300      	movs	r3, #0
 8000722:	647b      	str	r3, [r7, #68]	; 0x44

	// Read all the Hall pins repeatedly and tally the results
	for (unsigned int i = 0; i < bldc->HALL_OVERSAMPLE; i++) {
 8000724:	2300      	movs	r3, #0
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000728:	e029      	b.n	800077e <get_halls+0x6e>
		hallCounts[0] += HAL_GPIO_ReadPin(bldc->HALL_A_Port, bldc->HALL_A_PIN);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	899b      	ldrh	r3, [r3, #12]
 8000732:	4619      	mov	r1, r3
 8000734:	4610      	mov	r0, r2
 8000736:	f002 fd2b 	bl	8003190 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000740:	4413      	add	r3, r2
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
		hallCounts[1] += HAL_GPIO_ReadPin(bldc->HALL_B_Port, bldc->HALL_B_PIN);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	89db      	ldrh	r3, [r3, #14]
 800074c:	4619      	mov	r1, r3
 800074e:	4610      	mov	r0, r2
 8000750:	f002 fd1e 	bl	8003190 <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800075a:	4413      	add	r3, r2
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
		hallCounts[2] += HAL_GPIO_ReadPin(bldc->HALL_C_Port, bldc->HALL_C_PIN);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689a      	ldr	r2, [r3, #8]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	8a1b      	ldrh	r3, [r3, #16]
 8000766:	4619      	mov	r1, r3
 8000768:	4610      	mov	r0, r2
 800076a:	f002 fd11 	bl	8003190 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000774:	4413      	add	r3, r2
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
	for (unsigned int i = 0; i < bldc->HALL_OVERSAMPLE; i++) {
 8000778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800077a:	3301      	adds	r3, #1
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000784:	429a      	cmp	r2, r3
 8000786:	d3d0      	bcc.n	800072a <get_halls+0x1a>
	}

	unsigned int hall = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48

	// If votes >= threshold, set the corresponding bit to 1
	if (hallCounts[0] > bldc->HALL_OVERSAMPLE / 2)
 800078c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000792:	085b      	lsrs	r3, r3, #1
 8000794:	429a      	cmp	r2, r3
 8000796:	d903      	bls.n	80007a0 <get_halls+0x90>
		hall |= (1 << 0);
 8000798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (hallCounts[1] > bldc->HALL_OVERSAMPLE / 2)
 80007a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d903      	bls.n	80007b4 <get_halls+0xa4>
		hall |= (1 << 1);
 80007ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
	if (hallCounts[2] > bldc->HALL_OVERSAMPLE / 2)
 80007b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	429a      	cmp	r2, r3
 80007be:	d903      	bls.n	80007c8 <get_halls+0xb8>
		hall |= (1 << 2);
 80007c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48

	// Print the hall value
	char message[50];
	snprintf(message, sizeof(message), "Hall Value: %u\r\n", hall);
 80007c8:	f107 0008 	add.w	r0, r7, #8
 80007cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <get_halls+0xec>)
 80007d0:	2132      	movs	r1, #50	; 0x32
 80007d2:	f006 f8c5 	bl	8006960 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd00 	bl	80001e0 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f107 0108 	add.w	r1, r7, #8
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <get_halls+0xf0>)
 80007ee:	f005 fc43 	bl	8006078 <HAL_UART_Transmit>

	return hall;
 80007f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	080072e8 	.word	0x080072e8
 8000800:	200002f4 	.word	0x200002f4

08000804 <process_halls>:

void process_halls(struct Bldc* bldc){
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

	for (unsigned int i = 0; i < 6; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e03f      	b.n	8000892 <process_halls+0x8e>
	        uint8_t nextState = (i + 1) % 6;
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	1c59      	adds	r1, r3, #1
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <process_halls+0xa8>)
 8000818:	fba3 2301 	umull	r2, r3, r3, r1
 800081c:	089a      	lsrs	r2, r3, #2
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	1aca      	subs	r2, r1, r3
 8000828:	4613      	mov	r3, r2
 800082a:	73fb      	strb	r3, [r7, #15]

	        // Switch between states for a while
	        for (unsigned int j = 0; j < 200; j++) {
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	e016      	b.n	8000860 <process_halls+0x5c>
	            HAL_Delay(1);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 ff84 	bl	8001740 <HAL_Delay>
	            write_pd_table(bldc, i, bldc->HALL_IDENTIFY_DUTY_CYCLE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800083c:	461a      	mov	r2, r3
 800083e:	6979      	ldr	r1, [r7, #20]
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f866 	bl	8000912 <write_pd_table>
	            HAL_Delay(1);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 ff7a 	bl	8001740 <HAL_Delay>
	            write_pd_table(bldc, nextState, bldc->HALL_IDENTIFY_DUTY_CYCLE);
 800084c:	7bf9      	ldrb	r1, [r7, #15]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000852:	461a      	mov	r2, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f85c 	bl	8000912 <write_pd_table>
	        for (unsigned int j = 0; j < 200; j++) {
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	3301      	adds	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	2bc7      	cmp	r3, #199	; 0xc7
 8000864:	d9e5      	bls.n	8000832 <process_halls+0x2e>
	        }

	        bldc->hallToMotor[get_halls(bldc)] = (i + 2) % 6;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	1c9c      	adds	r4, r3, #2
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff50 	bl	8000710 <get_halls>
 8000870:	4601      	mov	r1, r0
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <process_halls+0xa8>)
 8000874:	fba3 2304 	umull	r2, r3, r3, r4
 8000878:	089a      	lsrs	r2, r3, #2
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	1ae2      	subs	r2, r4, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	312a      	adds	r1, #42	; 0x2a
 8000888:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for (unsigned int i = 0; i < 6; i++) {
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2b05      	cmp	r3, #5
 8000896:	d9bc      	bls.n	8000812 <process_halls+0xe>
	    }

		write_pd_table(bldc, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 f838 	bl	8000912 <write_pd_table>

}
 80008a2:	bf00      	nop
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	bf00      	nop
 80008ac:	aaaaaaab 	.word	0xaaaaaaab

080008b0 <writePhases>:

void writePhases(struct Bldc* bldc, uint16_t ah, uint16_t bh, uint16_t ch, uint16_t al, uint16_t bl, uint16_t cl){
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	4608      	mov	r0, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	4603      	mov	r3, r0
 80008c0:	817b      	strh	r3, [r7, #10]
 80008c2:	460b      	mov	r3, r1
 80008c4:	813b      	strh	r3, [r7, #8]
 80008c6:	4613      	mov	r3, r2
 80008c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(bldc->PWM_A, TIM_CHANNEL_1, ah);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	897a      	ldrh	r2, [r7, #10]
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(bldc->PWM_A, TIM_CHANNEL_2, al);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	8b3a      	ldrh	r2, [r7, #24]
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(bldc->PWM_B, TIM_CHANNEL_1, bh);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	893a      	ldrh	r2, [r7, #8]
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(bldc->PWM_B, TIM_CHANNEL_2, bl);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	8bba      	ldrh	r2, [r7, #28]
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(bldc->PWM_C, TIM_CHANNEL_1, ch);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	88fa      	ldrh	r2, [r7, #6]
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(bldc->PWM_C, TIM_CHANNEL_2, cl);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	8c3a      	ldrh	r2, [r7, #32]
 8000904:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <write_pd_table>:

void write_pd_table(struct Bldc* bldc, unsigned int motorState, unsigned int duty){
 8000912:	b580      	push	{r7, lr}
 8000914:	b08a      	sub	sp, #40	; 0x28
 8000916:	af04      	add	r7, sp, #16
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
	if (duty == 0 || duty > 255)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <write_pd_table+0x18>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d901      	bls.n	800092e <write_pd_table+0x1c>
	        motorState = 255;
 800092a:	23ff      	movs	r3, #255	; 0xff
 800092c:	60bb      	str	r3, [r7, #8]

	unsigned int complement = 255 - duty;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000934:	617b      	str	r3, [r7, #20]

	if (motorState == 0)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10e      	bne.n	800095a <write_pd_table+0x48>
		writePhases(bldc, 0, duty, 0, 255, complement, 0);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b29a      	uxth	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	b29b      	uxth	r3, r3
 8000944:	2100      	movs	r1, #0
 8000946:	9102      	str	r1, [sp, #8]
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2100      	movs	r1, #0
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f7ff ffac 	bl	80008b0 <writePhases>
		writePhases(bldc, duty, 0, 0, complement, 0, 255);
	else if (motorState == 5)
		writePhases(bldc, 0, duty, 0, 0, complement, 255);
	else
		writePhases(bldc, 0, 0, 0, 0, 0, 0);
}
 8000958:	e067      	b.n	8000a2a <write_pd_table+0x118>
	else if (motorState == 1)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d10f      	bne.n	8000980 <write_pd_table+0x6e>
		writePhases(bldc, 0, 0, duty, 255, 0, complement);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b29a      	uxth	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	b29b      	uxth	r3, r3
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	2300      	movs	r3, #0
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	4613      	mov	r3, r2
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff ff99 	bl	80008b0 <writePhases>
}
 800097e:	e054      	b.n	8000a2a <write_pd_table+0x118>
	else if (motorState == 2)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d10f      	bne.n	80009a6 <write_pd_table+0x94>
		writePhases(bldc, 0, 0, duty, 0, 255, complement);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	b29a      	uxth	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	b29b      	uxth	r3, r3
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	23ff      	movs	r3, #255	; 0xff
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	2300      	movs	r3, #0
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4613      	mov	r3, r2
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff86 	bl	80008b0 <writePhases>
}
 80009a4:	e041      	b.n	8000a2a <write_pd_table+0x118>
	else if (motorState == 3)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d10e      	bne.n	80009ca <write_pd_table+0xb8>
		writePhases(bldc, duty, 0, 0, complement, 255, 0);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b299      	uxth	r1, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	22ff      	movs	r2, #255	; 0xff
 80009ba:	9201      	str	r2, [sp, #4]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f7ff ff74 	bl	80008b0 <writePhases>
}
 80009c8:	e02f      	b.n	8000a2a <write_pd_table+0x118>
	else if (motorState == 4)
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d10e      	bne.n	80009ee <write_pd_table+0xdc>
		writePhases(bldc, duty, 0, 0, complement, 0, 255);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b299      	uxth	r1, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	22ff      	movs	r2, #255	; 0xff
 80009da:	9202      	str	r2, [sp, #8]
 80009dc:	2200      	movs	r2, #0
 80009de:	9201      	str	r2, [sp, #4]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2200      	movs	r2, #0
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f7ff ff62 	bl	80008b0 <writePhases>
}
 80009ec:	e01d      	b.n	8000a2a <write_pd_table+0x118>
	else if (motorState == 5)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d10e      	bne.n	8000a12 <write_pd_table+0x100>
		writePhases(bldc, 0, duty, 0, 0, complement, 255);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	21ff      	movs	r1, #255	; 0xff
 80009fe:	9102      	str	r1, [sp, #8]
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	2300      	movs	r3, #0
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff ff50 	bl	80008b0 <writePhases>
}
 8000a10:	e00b      	b.n	8000a2a <write_pd_table+0x118>
		writePhases(bldc, 0, 0, 0, 0, 0, 0);
 8000a12:	2300      	movs	r3, #0
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2300      	movs	r3, #0
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ff43 	bl	80008b0 <writePhases>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <read_throttle>:

void read_throttle(struct Bldc* bldc){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	unsigned int throttle_adc = HAL_ADC_GetValue(bldc->THROTTLE_ADC);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f8b0 	bl	8001ba4 <HAL_ADC_GetValue>
 8000a44:	60f8      	str	r0, [r7, #12]
	throttle_adc = (throttle_adc - bldc->THROTTLE_LOW) * 256;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	60fb      	str	r3, [r7, #12]
	throttle_adc = throttle_adc / (bldc->THROTTLE_HIGH - bldc->THROTTLE_LOW);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
	throttle_adc = 150;
 8000a6e:	2396      	movs	r3, #150	; 0x96
 8000a70:	60fb      	str	r3, [r7, #12]
	bldc->throttle_pwm = throttle_adc;
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	    if (throttle_adc > 255) // Bound the output between 0 and 255
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2bff      	cmp	r3, #255	; 0xff
 8000a7e:	d903      	bls.n	8000a88 <read_throttle+0x56>
	    	bldc->throttle_pwm = 255;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	    if (throttle_adc < 0)
	    	bldc->throttle_pwm = 0;
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <read_voltage>:

void read_voltage(struct Bldc* bldc){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	int voltage_adc = HAL_ADC_GetValue(bldc->V_SENSE_ADC);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f881 	bl	8001ba4 <HAL_ADC_GetValue>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	60fb      	str	r3, [r7, #12]
	bldc->voltage_mv = voltage_adc * bldc->CURRENT_SCALING;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	fb03 f202 	mul.w	r2, r3, r2
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	/*Scale and limits*/
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <read_current>:

void read_current(struct Bldc* bldc){
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	int current_adc = HAL_ADC_GetValue(bldc->I_SENSE_ADC);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f86a 	bl	8001ba4 <HAL_ADC_GetValue>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60fb      	str	r3, [r7, #12]
	bldc->current_ma = current_adc * bldc->VOLTAGE_SCALING;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	fb03 f202 	mul.w	r2, r3, r2
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	/*Scale and limits*/
	/*Function to protect over current*/
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <adc_irq>:
	__HAL_TIM_CLEAR_FLAG(bldc->PWM_A, TIM_FLAG_UPDATE);
	while (HAL_ADC_GetState(bldc->THROTTLE_ADC) != HAL_ADC_STATE_REG_EOC) {}
	while (HAL_ADC_GetState(bldc->I_SENSE_ADC) != HAL_ADC_STATE_REG_EOC) {}
}

void adc_irq(struct Bldc* bldc) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	read_throttle(bldc);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff9c 	bl	8000a32 <read_throttle>
	read_voltage(bldc);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffc8 	bl	8000a90 <read_voltage>
	read_current(bldc);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ffdc 	bl	8000abe <read_current>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <MX_CAN_Init+0x64>)
 8000b18:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_CAN_Init+0x60>)
 8000b5e:	f001 ff7f 	bl	8002a60 <HAL_CAN_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000b68:	f000 f9b4 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000011c 	.word	0x2000011c
 8000b74:	40006400 	.word	0x40006400

08000b78 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_CAN_MspInit+0x7c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d128      	bne.n	8000bec <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_CAN_MspInit+0x80>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_CAN_MspInit+0x80>)
 8000ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_CAN_MspInit+0x80>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_CAN_MspInit+0x80>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_CAN_MspInit+0x80>)
 8000bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_CAN_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_CAN_MspInit+0x84>)
 8000be8:	f002 f948 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40006400 	.word	0x40006400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400

08000c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a2b      	ldr	r2, [pc, #172]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a25      	ldr	r2, [pc, #148]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_GPIO_Init+0xe0>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2120      	movs	r1, #32
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f002 fa9f 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_GPIO_Init+0xe4>)
 8000c9a:	f002 f8ef 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f002 f8e0 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 8000cbc:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_GPIO_Init+0xe4>)
 8000cd2:	f002 f8d3 	bl	8002e7c <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000800 	.word	0x48000800

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fcc1 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f875 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f7ff ff83 	bl	8000c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cfa:	f000 fc1f 	bl	800153c <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8000cfe:	f7ff fac7 	bl	8000290 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d02:	f7ff fb35 	bl	8000370 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d06:	f000 f9b3 	bl	8001070 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d0a:	f000 fa33 	bl	8001174 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d0e:	f000 fab5 	bl	800127c <MX_TIM4_Init>
  MX_CAN_Init();
 8000d12:	f7ff fefd 	bl	8000b10 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  setPins_Hall(&bldc, HALL_A_GPIO_Port, HALL_A_Pin, HALL_B_GPIO_Port, HALL_B_Pin, HALL_C_GPIO_Port, HALL_C_Pin);
 8000d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <main+0xd8>)
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <main+0xd8>)
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	4925      	ldr	r1, [pc, #148]	; (8000dc0 <main+0xd8>)
 8000d2c:	4825      	ldr	r0, [pc, #148]	; (8000dc4 <main+0xdc>)
 8000d2e:	f7ff fc3d 	bl	80005ac <setPins_Hall>
  setPins_Predriver(&bldc, H_A_GPIO_Port, H_A_Pin, H_B_GPIO_Port, H_B_Pin, H_C_GPIO_Port, H_C_Pin, L_A_GPIO_Port, L_A_Pin, L_B_GPIO_Port, L_B_Pin, L_C_GPIO_Port, L_C_Pin);
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	9308      	str	r3, [sp, #32]
 8000d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d3c:	9307      	str	r3, [sp, #28]
 8000d3e:	2310      	movs	r3, #16
 8000d40:	9306      	str	r3, [sp, #24]
 8000d42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d46:	9305      	str	r3, [sp, #20]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	9304      	str	r3, [sp, #16]
 8000d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d50:	9303      	str	r3, [sp, #12]
 8000d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d66:	2201      	movs	r2, #1
 8000d68:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d6c:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <main+0xdc>)
 8000d6e:	f7ff fc3d 	bl	80005ec <setPins_Predriver>
  setTimers(&bldc, &htim2, &htim3, &htim4);
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <main+0xe0>)
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <main+0xe4>)
 8000d76:	4916      	ldr	r1, [pc, #88]	; (8000dd0 <main+0xe8>)
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <main+0xdc>)
 8000d7a:	f7ff fc6b 	bl	8000654 <setTimers>
  setThrottle(&bldc, Throttle_GPIO_Port, Throttle_Pin, &hadc3);
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <main+0xec>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	4915      	ldr	r1, [pc, #84]	; (8000dd8 <main+0xf0>)
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <main+0xdc>)
 8000d86:	f7ff fc7b 	bl	8000680 <setThrottle>
  setISense(&bldc, Current_GPIO_Port, Current_Pin, &hadc4);
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <main+0xf4>)
 8000d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d90:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <main+0xf0>)
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <main+0xdc>)
 8000d94:	f7ff fc8b 	bl	80006ae <setISense>
  setVSense(&bldc, Voltage_GPIO_Port, Voltage_Pin, &hadc4);
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <main+0xf4>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <main+0xf0>)
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <main+0xdc>)
 8000da2:	f7ff fc9c 	bl	80006de <setVSense>
  init(&bldc);
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <main+0xdc>)
 8000da8:	f7ff fbd0 	bl	800054c <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2120      	movs	r1, #32
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f002 fa04 	bl	80031c0 <HAL_GPIO_WritePin>
	  process_halls(&bldc);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <main+0xdc>)
 8000dba:	f7ff fd23 	bl	8000804 <process_halls>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000dbe:	e7f5      	b.n	8000dac <main+0xc4>
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	20000144 	.word	0x20000144
 8000dc8:	200002a8 	.word	0x200002a8
 8000dcc:	2000025c 	.word	0x2000025c
 8000dd0:	20000210 	.word	0x20000210
 8000dd4:	20000078 	.word	0x20000078
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	200000c8 	.word	0x200000c8

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0a6      	sub	sp, #152	; 0x98
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f005 fdea 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2258      	movs	r2, #88	; 0x58
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fddc 	bl	80069c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 f9d6 	bl	80031f0 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f843 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2302      	movs	r3, #2
 8000e54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fa14 	bl	8004298 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e76:	f000 f82d 	bl	8000ed4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <SystemClock_Config+0xcc>)
 8000e7c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fc36 	bl	8004704 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e9e:	f000 f819 	bl	8000ed4 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3798      	adds	r7, #152	; 0x98
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	00300102 	.word	0x00300102

08000eb0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    if (hadc == bldc.THROTTLE_ADC) {
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d102      	bne.n	8000ec8 <HAL_ADC_ConvCpltCallback+0x18>
        adc_irq(&bldc);
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000ec4:	f7ff fe12 	bl	8000aec <adc_irq>
    }
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000144 	.word	0x20000144

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6193      	str	r3, [r2, #24]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x44>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f16:	2007      	movs	r0, #7
 8000f18:	f001 ff6e 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 fbc4 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM2_IRQHandler+0x10>)
 8000f82:	f003 ffed 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000210 	.word	0x20000210

08000f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM3_IRQHandler+0x10>)
 8000f96:	f003 ffe3 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000025c 	.word	0x2000025c

08000fa4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM4_IRQHandler+0x10>)
 8000faa:	f003 ffd9 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200002a8 	.word	0x200002a8

08000fb8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <ADC3_IRQHandler+0x10>)
 8000fbe:	f000 fdff 	bl	8001bc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000078 	.word	0x20000078

08000fcc <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <ADC4_IRQHandler+0x10>)
 8000fd2:	f000 fdf5 	bl	8001bc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000c8 	.word	0x200000c8

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f005 fce2 	bl	80069d8 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20010000 	.word	0x20010000
 8001040:	00000400 	.word	0x00000400
 8001044:	2000020c 	.word	0x2000020c
 8001048:	200004c8 	.word	0x200004c8

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <MX_TIM2_Init+0x100>)
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MX_TIM2_Init+0x100>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <MX_TIM2_Init+0x100>)
 80010b2:	2220      	movs	r2, #32
 80010b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <MX_TIM2_Init+0x100>)
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <MX_TIM2_Init+0x100>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_TIM2_Init+0x100>)
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <MX_TIM2_Init+0x100>)
 80010ca:	f003 fd39 	bl	8004b40 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010d4:	f7ff fefe 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <MX_TIM2_Init+0x100>)
 80010e6:	f004 f96f 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010f0:	f7ff fef0 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f4:	481e      	ldr	r0, [pc, #120]	; (8001170 <MX_TIM2_Init+0x100>)
 80010f6:	f003 fd7a 	bl	8004bee <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001100:	f7ff fee8 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <MX_TIM2_Init+0x100>)
 8001114:	f004 feb8 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800111e:	f7ff fed9 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_TIM2_Init+0x100>)
 800113a:	f004 f831 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001144:	f7ff fec6 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001148:	2302      	movs	r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2204      	movs	r2, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <MX_TIM2_Init+0x100>)
 8001154:	f004 f824 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800115e:	f7ff feb9 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <MX_TIM2_Init+0x100>)
 8001164:	f000 f96a 	bl	800143c <HAL_TIM_MspPostInit>

}
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	; 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000210 	.word	0x20000210

08001174 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_TIM3_Init+0x100>)
 80011a8:	4a33      	ldr	r2, [pc, #204]	; (8001278 <MX_TIM3_Init+0x104>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <MX_TIM3_Init+0x100>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <MX_TIM3_Init+0x100>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80011b8:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <MX_TIM3_Init+0x100>)
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_TIM3_Init+0x100>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_TIM3_Init+0x100>)
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ca:	482a      	ldr	r0, [pc, #168]	; (8001274 <MX_TIM3_Init+0x100>)
 80011cc:	f003 fcb8 	bl	8004b40 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011d6:	f7ff fe7d 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_TIM3_Init+0x100>)
 80011e8:	f004 f8ee 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011f2:	f7ff fe6f 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f6:	481f      	ldr	r0, [pc, #124]	; (8001274 <MX_TIM3_Init+0x100>)
 80011f8:	f003 fcf9 	bl	8004bee <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001202:	f7ff fe67 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4817      	ldr	r0, [pc, #92]	; (8001274 <MX_TIM3_Init+0x100>)
 8001216:	f004 fe37 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001220:	f7ff fe58 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_TIM3_Init+0x100>)
 800123c:	f003 ffb0 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001246:	f7ff fe45 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	2204      	movs	r2, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_TIM3_Init+0x100>)
 8001256:	f003 ffa3 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001260:	f7ff fe38 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <MX_TIM3_Init+0x100>)
 8001266:	f000 f8e9 	bl	800143c <HAL_TIM_MspPostInit>

}
 800126a:	bf00      	nop
 800126c:	3738      	adds	r7, #56	; 0x38
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000025c 	.word	0x2000025c
 8001278:	40000400 	.word	0x40000400

0800127c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ae:	4b33      	ldr	r3, [pc, #204]	; (800137c <MX_TIM4_Init+0x100>)
 80012b0:	4a33      	ldr	r2, [pc, #204]	; (8001380 <MX_TIM4_Init+0x104>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <MX_TIM4_Init+0x100>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <MX_TIM4_Init+0x100>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80012c0:	4b2e      	ldr	r3, [pc, #184]	; (800137c <MX_TIM4_Init+0x100>)
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <MX_TIM4_Init+0x100>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <MX_TIM4_Init+0x100>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012d2:	482a      	ldr	r0, [pc, #168]	; (800137c <MX_TIM4_Init+0x100>)
 80012d4:	f003 fc34 	bl	8004b40 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80012de:	f7ff fdf9 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4823      	ldr	r0, [pc, #140]	; (800137c <MX_TIM4_Init+0x100>)
 80012f0:	f004 f86a 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80012fa:	f7ff fdeb 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012fe:	481f      	ldr	r0, [pc, #124]	; (800137c <MX_TIM4_Init+0x100>)
 8001300:	f003 fc75 	bl	8004bee <HAL_TIM_PWM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800130a:	f7ff fde3 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <MX_TIM4_Init+0x100>)
 800131e:	f004 fdb3 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001328:	f7ff fdd4 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132c:	2360      	movs	r3, #96	; 0x60
 800132e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_TIM4_Init+0x100>)
 8001344:	f003 ff2c 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800134e:	f7ff fdc1 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	2204      	movs	r2, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <MX_TIM4_Init+0x100>)
 800135e:	f003 ff1f 	bl	80051a0 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001368:	f7ff fdb4 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <MX_TIM4_Init+0x100>)
 800136e:	f000 f865 	bl	800143c <HAL_TIM_MspPostInit>

}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200002a8 	.word	0x200002a8
 8001380:	40000800 	.word	0x40000800

08001384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001394:	d114      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a25      	ldr	r2, [pc, #148]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f001 fd2b 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f001 fd44 	bl	8002e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013be:	e032      	b.n	8001426 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_TIM_Base_MspInit+0xb0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d114      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201d      	movs	r0, #29
 80013e8:	f001 fd11 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ec:	201d      	movs	r0, #29
 80013ee:	f001 fd2a 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 80013f2:	e018      	b.n	8001426 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_TIM_Base_MspInit+0xb4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d113      	bne.n	8001426 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_TIM_Base_MspInit+0xac>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201e      	movs	r0, #30
 800141c:	f001 fcf7 	bl	8002e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001420:	201e      	movs	r0, #30
 8001422:	f001 fd10 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40000400 	.word	0x40000400
 8001438:	40000800 	.word	0x40000800

0800143c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d11d      	bne.n	800149a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a33      	ldr	r2, [pc, #204]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	6153      	str	r3, [r2, #20]
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H_A_Pin|L_A_Pin;
 8001476:	2303      	movs	r3, #3
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f001 fcf2 	bl	8002e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001498:	e045      	b.n	8001526 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM3)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_TIM_MspPostInit+0xf8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d11d      	bne.n	80014e0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 80014aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ae:	6153      	str	r3, [r2, #20]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_B_Pin|H_B_Pin;
 80014bc:	2350      	movs	r3, #80	; 0x50
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014cc:	2302      	movs	r3, #2
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f001 fccf 	bl	8002e7c <HAL_GPIO_Init>
}
 80014de:	e022      	b.n	8001526 <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM4)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <HAL_TIM_MspPostInit+0xfc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d11d      	bne.n	8001526 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6153      	str	r3, [r2, #20]
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_TIM_MspPostInit+0xf4>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = H_C_Pin|L_C_Pin;
 8001502:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001514:	230a      	movs	r3, #10
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f001 fcab 	bl	8002e7c <HAL_GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40000400 	.word	0x40000400
 8001538:	40000800 	.word	0x40000800

0800153c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <MX_USART2_UART_Init+0x5c>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001548:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800154c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART2_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART2_UART_Init+0x58>)
 8001580:	f004 fd2c 	bl	8005fdc <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800158a:	f7ff fca3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002f4 	.word	0x200002f4
 8001598:	40004400 	.word	0x40004400

0800159c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_UART_MspInit+0x7c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d128      	bne.n	8001610 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_UART_MspInit+0x80>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <HAL_UART_MspInit+0x80>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_UART_MspInit+0x80>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0x80>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_UART_MspInit+0x80>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_UART_MspInit+0x80>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fe:	2307      	movs	r3, #7
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f001 fc36 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40004400 	.word	0x40004400
 800161c:	40021000 	.word	0x40021000

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff fd12 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	; (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	; (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f005 f9c9 	bl	80069e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fb49 	bl	8000ce8 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001664:	08007370 	.word	0x08007370
  ldr r2, =_sbss
 8001668:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800166c:	200004c8 	.word	0x200004c8

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x28>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f001 fbb7 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fc26 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000

080016a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fbcf 	bl	8002e62 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f001 fb97 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	2000037c 	.word	0x2000037c

08001728 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;  
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000037c 	.word	0x2000037c

08001740 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09a      	sub	sp, #104	; 0x68
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e1e3      	b.n	8001b98 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d176      	bne.n	80018d0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d152      	bne.n	8001890 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7fe fe11 	bl	800042c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d13b      	bne.n	8001890 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f001 f8bb 	bl	8002994 <ADC_Disable>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d12f      	bne.n	8001890 <HAL_ADC_Init+0xe0>
 8001830:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001834:	2b00      	cmp	r3, #0
 8001836:	d12b      	bne.n	8001890 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001840:	f023 0302 	bic.w	r3, r3, #2
 8001844:	f043 0202 	orr.w	r2, r3, #2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800185a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800186a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800186c:	4b92      	ldr	r3, [pc, #584]	; (8001ab8 <HAL_ADC_Init+0x308>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a92      	ldr	r2, [pc, #584]	; (8001abc <HAL_ADC_Init+0x30c>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9a      	lsrs	r2, r3, #18
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001882:	e002      	b.n	800188a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f9      	bne.n	8001884 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018ac:	d110      	bne.n	80018d0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f023 0312 	bic.w	r3, r3, #18
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 8150 	bne.w	8001b7e <HAL_ADC_Init+0x3ce>
 80018de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 814b 	bne.w	8001b7e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8143 	bne.w	8001b7e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001900:	f043 0202 	orr.w	r2, r3, #2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001910:	d004      	beq.n	800191c <HAL_ADC_Init+0x16c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_ADC_Init+0x310>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_ADC_Init+0x170>
 800191c:	4b69      	ldr	r3, [pc, #420]	; (8001ac4 <HAL_ADC_Init+0x314>)
 800191e:	e000      	b.n	8001922 <HAL_ADC_Init+0x172>
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_ADC_Init+0x318>)
 8001922:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192c:	d102      	bne.n	8001934 <HAL_ADC_Init+0x184>
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_ADC_Init+0x310>)
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e01a      	b.n	800196a <HAL_ADC_Init+0x1ba>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a61      	ldr	r2, [pc, #388]	; (8001ac0 <HAL_ADC_Init+0x310>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d103      	bne.n	8001946 <HAL_ADC_Init+0x196>
 800193e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e011      	b.n	800196a <HAL_ADC_Init+0x1ba>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a60      	ldr	r2, [pc, #384]	; (8001acc <HAL_ADC_Init+0x31c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d102      	bne.n	8001956 <HAL_ADC_Init+0x1a6>
 8001950:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_ADC_Init+0x320>)
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e009      	b.n	800196a <HAL_ADC_Init+0x1ba>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <HAL_ADC_Init+0x320>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d102      	bne.n	8001966 <HAL_ADC_Init+0x1b6>
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_ADC_Init+0x31c>)
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e001      	b.n	800196a <HAL_ADC_Init+0x1ba>
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d108      	bne.n	800198a <HAL_ADC_Init+0x1da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x1da>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_ADC_Init+0x1dc>
 800198a:	2300      	movs	r3, #0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d11c      	bne.n	80019ca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001990:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_ADC_Init+0x202>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x202>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_ADC_Init+0x204>
 80019b2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d108      	bne.n	80019ca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e5b      	ldrb	r3, [r3, #25]
 80019ce:	035b      	lsls	r3, r3, #13
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019d4:	2a01      	cmp	r2, #1
 80019d6:	d002      	beq.n	80019de <HAL_ADC_Init+0x22e>
 80019d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019dc:	e000      	b.n	80019e0 <HAL_ADC_Init+0x230>
 80019de:	2200      	movs	r2, #0
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f0:	4313      	orrs	r3, r2
 80019f2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d11b      	bne.n	8001a36 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e5b      	ldrb	r3, [r3, #25]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	045a      	lsls	r2, r3, #17
 8001a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a10:	4313      	orrs	r3, r2
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	663b      	str	r3, [r7, #96]	; 0x60
 8001a18:	e00d      	b.n	8001a36 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a22:	f043 0220 	orr.w	r2, r3, #32
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d054      	beq.n	8001ae8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_ADC_Init+0x31c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d004      	beq.n	8001a52 <HAL_ADC_Init+0x2a2>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <HAL_ADC_Init+0x320>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d140      	bne.n	8001ad4 <HAL_ADC_Init+0x324>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001a5a:	d02a      	beq.n	8001ab2 <HAL_ADC_Init+0x302>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a64:	d022      	beq.n	8001aac <HAL_ADC_Init+0x2fc>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001a6e:	d01a      	beq.n	8001aa6 <HAL_ADC_Init+0x2f6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001a78:	d012      	beq.n	8001aa0 <HAL_ADC_Init+0x2f0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001a82:	d00a      	beq.n	8001a9a <HAL_ADC_Init+0x2ea>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001a8c:	d002      	beq.n	8001a94 <HAL_ADC_Init+0x2e4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	e023      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001a94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a98:	e020      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001a9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a9e:	e01d      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001aa0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001aa4:	e01a      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aaa:	e017      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001aac:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ab0:	e014      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001ab2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ab6:	e011      	b.n	8001adc <HAL_ADC_Init+0x32c>
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	50000100 	.word	0x50000100
 8001ac4:	50000300 	.word	0x50000300
 8001ac8:	50000700 	.word	0x50000700
 8001acc:	50000400 	.word	0x50000400
 8001ad0:	50000500 	.word	0x50000500
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d114      	bne.n	8001b20 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b04:	f023 0302 	bic.w	r3, r3, #2
 8001b08:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e1b      	ldrb	r3, [r3, #24]
 8001b0e:	039a      	lsls	r2, r3, #14
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_ADC_Init+0x3f0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b30:	430b      	orrs	r3, r1
 8001b32:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10c      	bne.n	8001b56 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f023 010f 	bic.w	r1, r3, #15
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	1e5a      	subs	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
 8001b54:	e007      	b.n	8001b66 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 020f 	bic.w	r2, r2, #15
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f023 0303 	bic.w	r3, r3, #3
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7c:	e00a      	b.n	8001b94 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f023 0312 	bic.w	r3, r3, #18
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3768      	adds	r7, #104	; 0x68
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	fff0c007 	.word	0xfff0c007

08001ba4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x38>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80bc 	beq.w	8001d7c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80b6 	beq.w	8001d7c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x7c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_IRQHandler+0x8a>
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <HAL_ADC_IRQHandler+0x2bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d03e      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001c48:	e005      	b.n	8001c56 <HAL_ADC_IRQHandler+0x96>
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <HAL_ADC_IRQHandler+0x2c0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d037      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5e:	d004      	beq.n	8001c6a <HAL_ADC_IRQHandler+0xaa>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a84      	ldr	r2, [pc, #528]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_IRQHandler+0xb8>
 8001c6a:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <HAL_ADC_IRQHandler+0x2bc>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d027      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001c76:	e005      	b.n	8001c84 <HAL_ADC_IRQHandler+0xc4>
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_ADC_IRQHandler+0x2c0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d020      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8c:	d004      	beq.n	8001c98 <HAL_ADC_IRQHandler+0xd8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a79      	ldr	r2, [pc, #484]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0xe6>
 8001c98:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_ADC_IRQHandler+0x2bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d010      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001ca4:	e005      	b.n	8001cb2 <HAL_ADC_IRQHandler+0xf2>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_ADC_IRQHandler+0x2c0>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	d009      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cba:	d004      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x106>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a70      	ldr	r2, [pc, #448]	; (8001e84 <HAL_ADC_IRQHandler+0x2c4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d104      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	e00f      	b.n	8001cf0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x124>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a66      	ldr	r2, [pc, #408]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d102      	bne.n	8001cea <HAL_ADC_IRQHandler+0x12a>
 8001ce4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce8:	e000      	b.n	8001cec <HAL_ADC_IRQHandler+0x12c>
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_ADC_IRQHandler+0x2c4>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d137      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d132      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02d      	beq.n	8001d6e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11a      	bne.n	8001d56 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 020c 	bic.w	r2, r2, #12
 8001d2e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d112      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
 8001d54:	e00b      	b.n	8001d6e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff f89e 	bl	8000eb0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	220c      	movs	r2, #12
 8001d7a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x1d0>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8138 	beq.w	800200c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8132 	beq.w	800200c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dbc:	d004      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x208>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d106      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x216>
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_ADC_IRQHandler+0x2bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d03e      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001dd4:	e005      	b.n	8001de2 <HAL_ADC_IRQHandler+0x222>
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_ADC_IRQHandler+0x2c0>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d037      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dea:	d004      	beq.n	8001df6 <HAL_ADC_IRQHandler+0x236>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d106      	bne.n	8001e04 <HAL_ADC_IRQHandler+0x244>
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_ADC_IRQHandler+0x2bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d027      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001e02:	e005      	b.n	8001e10 <HAL_ADC_IRQHandler+0x250>
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_ADC_IRQHandler+0x2c0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d020      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e18:	d004      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x264>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d106      	bne.n	8001e32 <HAL_ADC_IRQHandler+0x272>
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_ADC_IRQHandler+0x2bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d010      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001e30:	e005      	b.n	8001e3e <HAL_ADC_IRQHandler+0x27e>
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_ADC_IRQHandler+0x2c0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d009      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x292>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_ADC_IRQHandler+0x2c4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d104      	bne.n	8001e5c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e018      	b.n	8001e8e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e64:	d004      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x2b0>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_ADC_IRQHandler+0x2b8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x2c8>
 8001e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e74:	e009      	b.n	8001e8a <HAL_ADC_IRQHandler+0x2ca>
 8001e76:	bf00      	nop
 8001e78:	50000100 	.word	0x50000100
 8001e7c:	50000300 	.word	0x50000300
 8001e80:	50000700 	.word	0x50000700
 8001e84:	50000400 	.word	0x50000400
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <HAL_ADC_IRQHandler+0x514>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 80b0 	bne.w	8001ffe <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80a3 	bne.w	8001ffe <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 809d 	bne.w	8001ffe <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8097 	beq.w	8001ffe <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x324>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	; (80020d8 <HAL_ADC_IRQHandler+0x518>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d106      	bne.n	8001ef2 <HAL_ADC_IRQHandler+0x332>
 8001ee4:	4b7d      	ldr	r3, [pc, #500]	; (80020dc <HAL_ADC_IRQHandler+0x51c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d03e      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001ef0:	e005      	b.n	8001efe <HAL_ADC_IRQHandler+0x33e>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_ADC_IRQHandler+0x520>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d037      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f06:	d004      	beq.n	8001f12 <HAL_ADC_IRQHandler+0x352>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <HAL_ADC_IRQHandler+0x518>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d106      	bne.n	8001f20 <HAL_ADC_IRQHandler+0x360>
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_ADC_IRQHandler+0x51c>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d027      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001f1e:	e005      	b.n	8001f2c <HAL_ADC_IRQHandler+0x36c>
 8001f20:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_ADC_IRQHandler+0x520>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d020      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_IRQHandler+0x380>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a67      	ldr	r2, [pc, #412]	; (80020d8 <HAL_ADC_IRQHandler+0x518>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x38e>
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_ADC_IRQHandler+0x51c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2b07      	cmp	r3, #7
 8001f4a:	d010      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001f4c:	e005      	b.n	8001f5a <HAL_ADC_IRQHandler+0x39a>
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_ADC_IRQHandler+0x520>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b07      	cmp	r3, #7
 8001f58:	d009      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f62:	d004      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x3ae>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_ADC_IRQHandler+0x514>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d104      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e00f      	b.n	8001f98 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_IRQHandler+0x3cc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a54      	ldr	r2, [pc, #336]	; (80020d8 <HAL_ADC_IRQHandler+0x518>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d102      	bne.n	8001f92 <HAL_ADC_IRQHandler+0x3d2>
 8001f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_IRQHandler+0x3d4>
 8001f92:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_ADC_IRQHandler+0x514>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d12d      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11a      	bne.n	8001fe6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fbe:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d112      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe4:	e00b      	b.n	8001ffe <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8c4 	bl	800218c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2260      	movs	r2, #96	; 0x60
 800200a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d011      	beq.n	800203a <HAL_ADC_IRQHandler+0x47a>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00c      	beq.n	800203a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fbab 	bl	8001788 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d012      	beq.n	800206a <HAL_ADC_IRQHandler+0x4aa>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8aa 	bl	80021b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002068:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <HAL_ADC_IRQHandler+0x4da>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f89c 	bl	80021c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002098:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d04f      	beq.n	8002144 <HAL_ADC_IRQHandler+0x584>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04a      	beq.n	8002144 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e02d      	b.n	8002118 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c4:	d004      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x510>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <HAL_ADC_IRQHandler+0x518>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d109      	bne.n	80020e4 <HAL_ADC_IRQHandler+0x524>
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_ADC_IRQHandler+0x51c>)
 80020d2:	e008      	b.n	80020e6 <HAL_ADC_IRQHandler+0x526>
 80020d4:	50000400 	.word	0x50000400
 80020d8:	50000100 	.word	0x50000100
 80020dc:	50000300 	.word	0x50000300
 80020e0:	50000700 	.word	0x50000700
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_ADC_IRQHandler+0x5c8>)
 80020e6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002102:	2301      	movs	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e007      	b.n	8002118 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002114:	2301      	movs	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10e      	bne.n	800213c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f043 0202 	orr.w	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fb30 	bl	800179c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d018      	beq.n	8002180 <HAL_ADC_IRQHandler+0x5c0>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f043 0208 	orr.w	r2, r3, #8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f810 	bl	80021a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	50000700 	.word	0x50000700

0800218c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b09b      	sub	sp, #108	; 0x6c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x22>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e2c8      	b.n	8002790 <HAL_ADC_ConfigChannel+0x5b4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 82ac 	bne.w	800276e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d81c      	bhi.n	8002258 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	461a      	mov	r2, r3
 8002232:	231f      	movs	r3, #31
 8002234:	4093      	lsls	r3, r2
 8002236:	43db      	mvns	r3, r3
 8002238:	4019      	ands	r1, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
 8002256:	e063      	b.n	8002320 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d81e      	bhi.n	800229e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	3b1e      	subs	r3, #30
 8002274:	221f      	movs	r2, #31
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	4019      	ands	r1, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	3b1e      	subs	r3, #30
 8002290:	fa00 f203 	lsl.w	r2, r0, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	; 0x34
 800229c:	e040      	b.n	8002320 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b0e      	cmp	r3, #14
 80022a4:	d81e      	bhi.n	80022e4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	3b3c      	subs	r3, #60	; 0x3c
 80022ba:	221f      	movs	r2, #31
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4019      	ands	r1, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	3b3c      	subs	r3, #60	; 0x3c
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
 80022e2:	e01d      	b.n	8002320 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	3b5a      	subs	r3, #90	; 0x5a
 80022f8:	221f      	movs	r2, #31
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	4019      	ands	r1, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	3b5a      	subs	r3, #90	; 0x5a
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80e5 	bne.w	80024fa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b09      	cmp	r3, #9
 8002336:	d91c      	bls.n	8002372 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6999      	ldr	r1, [r3, #24]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	3b1e      	subs	r3, #30
 800234a:	2207      	movs	r2, #7
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	4019      	ands	r1, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6898      	ldr	r0, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	3b1e      	subs	r3, #30
 8002364:	fa00 f203 	lsl.w	r2, r0, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	e019      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6959      	ldr	r1, [r3, #20]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	4019      	ands	r1, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6898      	ldr	r0, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	fa00 f203 	lsl.w	r2, r0, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d84f      	bhi.n	8002468 <HAL_ADC_ConfigChannel+0x28c>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <HAL_ADC_ConfigChannel+0x1f4>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	08002403 	.word	0x08002403
 80023d8:	08002425 	.word	0x08002425
 80023dc:	08002447 	.word	0x08002447
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e6:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_ADC_ConfigChannel+0x470>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	0691      	lsls	r1, r2, #26
 80023f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023f2:	430a      	orrs	r2, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023fe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002400:	e07b      	b.n	80024fa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002408:	4b90      	ldr	r3, [pc, #576]	; (800264c <HAL_ADC_ConfigChannel+0x470>)
 800240a:	4013      	ands	r3, r2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	0691      	lsls	r1, r2, #26
 8002412:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002414:	430a      	orrs	r2, r1
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002420:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002422:	e06a      	b.n	80024fa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_ADC_ConfigChannel+0x470>)
 800242c:	4013      	ands	r3, r2
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	0691      	lsls	r1, r2, #26
 8002434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002436:	430a      	orrs	r2, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002442:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002444:	e059      	b.n	80024fa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800244c:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_ADC_ConfigChannel+0x470>)
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	0691      	lsls	r1, r2, #26
 8002456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002458:	430a      	orrs	r2, r1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002464:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002466:	e048      	b.n	80024fa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	069b      	lsls	r3, r3, #26
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800248a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	069b      	lsls	r3, r3, #26
 800249c:	429a      	cmp	r2, r3
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ae:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	069b      	lsls	r3, r3, #26
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d107      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024d2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	069b      	lsls	r3, r3, #26
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d107      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80024f8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_ADC_ConfigChannel+0x33e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x33e>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_ADC_ConfigChannel+0x340>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 8131 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d00f      	beq.n	800254a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002548:	e049      	b.n	80025de <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d91c      	bls.n	80025a6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	3b1b      	subs	r3, #27
 800257e:	2207      	movs	r2, #7
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	4019      	ands	r1, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6898      	ldr	r0, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	3b1b      	subs	r3, #27
 8002598:	fa00 f203 	lsl.w	r2, r0, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
 80025a4:	e01b      	b.n	80025de <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6959      	ldr	r1, [r3, #20]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	2207      	movs	r2, #7
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	4019      	ands	r1, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6898      	ldr	r0, [r3, #8]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e6:	d004      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x416>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_ADC_ConfigChannel+0x474>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x41a>
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_ADC_ConfigChannel+0x478>)
 80025f4:	e000      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x41c>
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_ADC_ConfigChannel+0x47c>)
 80025f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d105      	bne.n	800260e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800260a:	2b00      	cmp	r3, #0
 800260c:	d015      	beq.n	800263a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002612:	2b11      	cmp	r3, #17
 8002614:	d105      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002626:	2b12      	cmp	r3, #18
 8002628:	f040 80ac 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800262c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 80a5 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002642:	d10b      	bne.n	800265c <HAL_ADC_ConfigChannel+0x480>
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_ADC_ConfigChannel+0x474>)
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e023      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4b6>
 800264a:	bf00      	nop
 800264c:	83fff000 	.word	0x83fff000
 8002650:	50000100 	.word	0x50000100
 8002654:	50000300 	.word	0x50000300
 8002658:	50000700 	.word	0x50000700
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_ADC_ConfigChannel+0x5c0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d103      	bne.n	800266e <HAL_ADC_ConfigChannel+0x492>
 8002666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e011      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4b6>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d102      	bne.n	800267e <HAL_ADC_ConfigChannel+0x4a2>
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_ADC_ConfigChannel+0x5c8>)
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e009      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4b6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d102      	bne.n	800268e <HAL_ADC_ConfigChannel+0x4b2>
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <HAL_ADC_ConfigChannel+0x5c4>)
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e001      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4b6>
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x4d6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x4d6>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x4d8>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d150      	bne.n	800275a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_ADC_ConfigChannel+0x4fe>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x4fe>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_ADC_ConfigChannel+0x500>
 80026da:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d13c      	bne.n	800275a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d11d      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x548>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f0:	d118      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <HAL_ADC_ConfigChannel+0x5d0>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	0c9a      	lsrs	r2, r3, #18
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002714:	e002      	b.n	800271c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3b01      	subs	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002722:	e02e      	b.n	8002782 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b11      	cmp	r3, #17
 800272a:	d10b      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x568>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002734:	d106      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800273e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002740:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002742:	e01e      	b.n	8002782 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b12      	cmp	r3, #18
 800274a:	d11a      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800274c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002758:	e013      	b.n	8002782 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0220 	orr.w	r2, r3, #32
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800276c:	e00a      	b.n	8002784 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002780:	e000      	b.n	8002784 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002782:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800278c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002790:	4618      	mov	r0, r3
 8002792:	376c      	adds	r7, #108	; 0x6c
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	50000100 	.word	0x50000100
 80027a0:	50000400 	.word	0x50000400
 80027a4:	50000500 	.word	0x50000500
 80027a8:	20000000 	.word	0x20000000
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b099      	sub	sp, #100	; 0x64
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c8:	d102      	bne.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	e01a      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6a      	ldr	r2, [pc, #424]	; (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d103      	bne.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80027da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	e011      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a67      	ldr	r2, [pc, #412]	; (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d102      	bne.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027ec:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	e009      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a64      	ldr	r2, [pc, #400]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d102      	bne.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027fc:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	e001      	b.n	8002806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b0      	b.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800281a:	2302      	movs	r3, #2
 800281c:	e0a9      	b.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 808d 	bne.w	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8086 	bne.w	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284c:	d004      	beq.n	8002858 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800285a:	e000      	b.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800285c:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800285e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d040      	beq.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800287a:	035b      	lsls	r3, r3, #13
 800287c:	430b      	orrs	r3, r1
 800287e:	431a      	orrs	r2, r3
 8002880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002882:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d15c      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80028c6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d14b      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028d4:	f023 030f 	bic.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	6811      	ldr	r1, [r2, #0]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028e8:	e03c      	b.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d123      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002938:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d112      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800293e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002946:	f023 030f 	bic.w	r3, r3, #15
 800294a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800294c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800294e:	e009      	b.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002962:	e000      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002964:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800296e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002972:	4618      	mov	r0, r3
 8002974:	3764      	adds	r7, #100	; 0x64
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	50000100 	.word	0x50000100
 8002984:	50000400 	.word	0x50000400
 8002988:	50000500 	.word	0x50000500
 800298c:	50000300 	.word	0x50000300
 8002990:	50000700 	.word	0x50000700

08002994 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <ADC_Disable+0x2c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <ADC_Disable+0x2c>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <ADC_Disable+0x2e>
 80029c0:	2300      	movs	r3, #0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d047      	beq.n	8002a56 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030d 	and.w	r3, r3, #13
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10f      	bne.n	80029f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0202 	orr.w	r2, r2, #2
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2203      	movs	r2, #3
 80029ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fe9c 	bl	8001728 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029f2:	e029      	b.n	8002a48 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f043 0210 	orr.w	r2, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e023      	b.n	8002a58 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a10:	f7fe fe8a 	bl	8001728 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d914      	bls.n	8002a48 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10d      	bne.n	8002a48 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0210 	orr.w	r2, r3, #16
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e007      	b.n	8002a58 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d0dc      	beq.n	8002a10 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0ed      	b.n	8002c4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe f87a 	bl	8000b78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a94:	f7fe fe48 	bl	8001728 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a9a:	e012      	b.n	8002ac2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a9c:	f7fe fe44 	bl	8001728 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b0a      	cmp	r3, #10
 8002aa8:	d90b      	bls.n	8002ac2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0c5      	b.n	8002c4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0e5      	beq.n	8002a9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0202 	bic.w	r2, r2, #2
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae0:	f7fe fe22 	bl	8001728 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ae6:	e012      	b.n	8002b0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae8:	f7fe fe1e 	bl	8001728 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b0a      	cmp	r3, #10
 8002af4:	d90b      	bls.n	8002b0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2205      	movs	r2, #5
 8002b06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e09f      	b.n	8002c4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e5      	bne.n	8002ae8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7e1b      	ldrb	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e007      	b.n	8002b46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7e5b      	ldrb	r3, [r3, #25]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e9b      	ldrb	r3, [r3, #26]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d108      	bne.n	8002b8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e007      	b.n	8002b9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0220 	bic.w	r2, r2, #32
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7edb      	ldrb	r3, [r3, #27]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d108      	bne.n	8002bb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0210 	bic.w	r2, r2, #16
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e007      	b.n	8002bc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0210 	orr.w	r2, r2, #16
 8002bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7f1b      	ldrb	r3, [r3, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d108      	bne.n	8002bde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e007      	b.n	8002bee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7f5b      	ldrb	r3, [r3, #29]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d108      	bne.n	8002c08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0204 	orr.w	r2, r2, #4
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e007      	b.n	8002c18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0204 	bic.w	r2, r2, #4
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	ea42 0103 	orr.w	r1, r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8a:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60d3      	str	r3, [r2, #12]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	; (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	; (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff29 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff3e 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff31 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8a:	e160      	b.n	800314e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8152 	beq.w	8003148 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d005      	beq.n	8002ebc <HAL_GPIO_Init+0x40>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d130      	bne.n	8002f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 0201 	and.w	r2, r3, #1
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d017      	beq.n	8002f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d123      	bne.n	8002fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	6939      	ldr	r1, [r7, #16]
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80ac 	beq.w	8003148 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	; (800316c <HAL_GPIO_Init+0x2f0>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a5d      	ldr	r2, [pc, #372]	; (800316c <HAL_GPIO_Init+0x2f0>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b5b      	ldr	r3, [pc, #364]	; (800316c <HAL_GPIO_Init+0x2f0>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003008:	4a59      	ldr	r2, [pc, #356]	; (8003170 <HAL_GPIO_Init+0x2f4>)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003032:	d025      	beq.n	8003080 <HAL_GPIO_Init+0x204>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4f      	ldr	r2, [pc, #316]	; (8003174 <HAL_GPIO_Init+0x2f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d01f      	beq.n	800307c <HAL_GPIO_Init+0x200>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4e      	ldr	r2, [pc, #312]	; (8003178 <HAL_GPIO_Init+0x2fc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d019      	beq.n	8003078 <HAL_GPIO_Init+0x1fc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a4d      	ldr	r2, [pc, #308]	; (800317c <HAL_GPIO_Init+0x300>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <HAL_GPIO_Init+0x1f8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a4c      	ldr	r2, [pc, #304]	; (8003180 <HAL_GPIO_Init+0x304>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00d      	beq.n	8003070 <HAL_GPIO_Init+0x1f4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4b      	ldr	r2, [pc, #300]	; (8003184 <HAL_GPIO_Init+0x308>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <HAL_GPIO_Init+0x1f0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4a      	ldr	r2, [pc, #296]	; (8003188 <HAL_GPIO_Init+0x30c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_GPIO_Init+0x1ec>
 8003064:	2306      	movs	r3, #6
 8003066:	e00c      	b.n	8003082 <HAL_GPIO_Init+0x206>
 8003068:	2307      	movs	r3, #7
 800306a:	e00a      	b.n	8003082 <HAL_GPIO_Init+0x206>
 800306c:	2305      	movs	r3, #5
 800306e:	e008      	b.n	8003082 <HAL_GPIO_Init+0x206>
 8003070:	2304      	movs	r3, #4
 8003072:	e006      	b.n	8003082 <HAL_GPIO_Init+0x206>
 8003074:	2303      	movs	r3, #3
 8003076:	e004      	b.n	8003082 <HAL_GPIO_Init+0x206>
 8003078:	2302      	movs	r3, #2
 800307a:	e002      	b.n	8003082 <HAL_GPIO_Init+0x206>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_GPIO_Init+0x206>
 8003080:	2300      	movs	r3, #0
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	f002 0203 	and.w	r2, r2, #3
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	4093      	lsls	r3, r2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003092:	4937      	ldr	r1, [pc, #220]	; (8003170 <HAL_GPIO_Init+0x2f4>)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_GPIO_Init+0x310>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <HAL_GPIO_Init+0x310>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ca:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_GPIO_Init+0x310>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <HAL_GPIO_Init+0x310>)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_GPIO_Init+0x310>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_GPIO_Init+0x310>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_GPIO_Init+0x310>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <HAL_GPIO_Init+0x310>)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f ae97 	bne.w	8002e8c <HAL_GPIO_Init+0x10>
  }
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40021000 	.word	0x40021000
 8003170:	40010000 	.word	0x40010000
 8003174:	48000400 	.word	0x48000400
 8003178:	48000800 	.word	0x48000800
 800317c:	48000c00 	.word	0x48000c00
 8003180:	48001000 	.word	0x48001000
 8003184:	48001400 	.word	0x48001400
 8003188:	48001800 	.word	0x48001800
 800318c:	40010400 	.word	0x40010400

08003190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e001      	b.n	80031b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
 80031cc:	4613      	mov	r3, r2
 80031ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003200:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f001 b83a 	b.w	800428a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 816f 	beq.w	800350a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800322c:	4bb5      	ldr	r3, [pc, #724]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b04      	cmp	r3, #4
 8003236:	d00c      	beq.n	8003252 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003238:	4bb2      	ldr	r3, [pc, #712]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d15c      	bne.n	80032fe <HAL_RCC_OscConfig+0x10e>
 8003244:	4baf      	ldr	r3, [pc, #700]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d155      	bne.n	80032fe <HAL_RCC_OscConfig+0x10e>
 8003252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003256:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003266:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d102      	bne.n	8003284 <HAL_RCC_OscConfig+0x94>
 800327e:	4ba1      	ldr	r3, [pc, #644]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e015      	b.n	80032b0 <HAL_RCC_OscConfig+0xc0>
 8003284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003288:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032ac:	4b95      	ldr	r3, [pc, #596]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032b4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80032b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80032bc:	fa92 f2a2 	rbit	r2, r2
 80032c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80032c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8111 	beq.w	8003508 <HAL_RCC_OscConfig+0x318>
 80032e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 8108 	bne.w	8003508 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f000 bfc6 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003302:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x12e>
 8003310:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a7b      	ldr	r2, [pc, #492]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e036      	b.n	800338c <HAL_RCC_OscConfig+0x19c>
 800331e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003322:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x158>
 800332e:	4b75      	ldr	r3, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a74      	ldr	r2, [pc, #464]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b72      	ldr	r3, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a71      	ldr	r2, [pc, #452]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e021      	b.n	800338c <HAL_RCC_OscConfig+0x19c>
 8003348:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x184>
 800335a:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a69      	ldr	r2, [pc, #420]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a66      	ldr	r2, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0x19c>
 8003374:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a62      	ldr	r2, [pc, #392]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b60      	ldr	r3, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5f      	ldr	r2, [pc, #380]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800338c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d059      	beq.n	8003450 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe f9c4 	bl	8001728 <HAL_GetTick>
 80033a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a6:	f7fe f9bf 	bl	8001728 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d902      	bls.n	80033bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f000 bf67 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
 80033bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80033d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_RCC_OscConfig+0x1fe>
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e015      	b.n	800341a <HAL_RCC_OscConfig+0x22a>
 80033ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003406:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800340a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800341e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003422:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800342e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003432:	fab2 f282 	clz	r2, r2
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	f002 021f 	and.w	r2, r2, #31
 8003442:	2101      	movs	r1, #1
 8003444:	fa01 f202 	lsl.w	r2, r1, r2
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0ab      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1b6>
 800344e:	e05c      	b.n	800350a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe f96a 	bl	8001728 <HAL_GetTick>
 8003454:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345a:	f7fe f965 	bl	8001728 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d902      	bls.n	8003470 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	f000 bf0d 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
 8003470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003474:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003484:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2b2>
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x2de>
 80034a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80034b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_RCC_OscConfig+0x314>)
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034d2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80034d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80034da:	fa92 f2a2 	rbit	r2, r2
 80034de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80034e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034e6:	fab2 f282 	clz	r2, r2
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	f042 0220 	orr.w	r2, r2, #32
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f002 021f 	and.w	r2, r2, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f202 	lsl.w	r2, r1, r2
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ab      	bne.n	800345a <HAL_RCC_OscConfig+0x26a>
 8003502:	e002      	b.n	800350a <HAL_RCC_OscConfig+0x31a>
 8003504:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 817f 	beq.w	800381e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003520:	4ba7      	ldr	r3, [pc, #668]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800352c:	4ba4      	ldr	r3, [pc, #656]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d173      	bne.n	8003620 <HAL_RCC_OscConfig+0x430>
 8003538:	4ba1      	ldr	r3, [pc, #644]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d16c      	bne.n	8003620 <HAL_RCC_OscConfig+0x430>
 8003546:	2302      	movs	r3, #2
 8003548:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003558:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d102      	bne.n	8003576 <HAL_RCC_OscConfig+0x386>
 8003570:	4b93      	ldr	r3, [pc, #588]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e013      	b.n	800359e <HAL_RCC_OscConfig+0x3ae>
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003588:	2302      	movs	r3, #2
 800358a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800358e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2202      	movs	r2, #2
 80035a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80035a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80035a8:	fa92 f2a2 	rbit	r2, r2
 80035ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80035b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035b4:	fab2 f282 	clz	r2, r2
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f042 0220 	orr.w	r2, r2, #32
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f002 021f 	and.w	r2, r2, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3f6>
 80035d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d002      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f000 be52 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	21f8      	movs	r1, #248	; 0xf8
 80035fc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003604:	fa91 f1a1 	rbit	r1, r1
 8003608:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800360c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003610:	fab1 f181 	clz	r1, r1
 8003614:	b2c9      	uxtb	r1, r1
 8003616:	408b      	lsls	r3, r1
 8003618:	4969      	ldr	r1, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	e0fe      	b.n	800381e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8088 	beq.w	8003742 <HAL_RCC_OscConfig+0x552>
 8003632:	2301      	movs	r3, #1
 8003634:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003644:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003652:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	461a      	mov	r2, r3
 800365a:	2301      	movs	r3, #1
 800365c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe f863 	bl	8001728 <HAL_GetTick>
 8003662:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003668:	f7fe f85e 	bl	8001728 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d902      	bls.n	800367e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	f000 be06 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
 800367e:	2302      	movs	r3, #2
 8003680:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003690:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_OscConfig+0x4be>
 80036a8:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	e013      	b.n	80036d6 <HAL_RCC_OscConfig+0x4e6>
 80036ae:	2302      	movs	r3, #2
 80036b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036c0:	2302      	movs	r3, #2
 80036c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2202      	movs	r2, #2
 80036d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80036e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036ec:	fab2 f282 	clz	r2, r2
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	f042 0220 	orr.w	r2, r2, #32
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f002 021f 	and.w	r2, r2, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0af      	beq.n	8003668 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003714:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	21f8      	movs	r1, #248	; 0xf8
 800371e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003726:	fa91 f1a1 	rbit	r1, r1
 800372a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800372e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003732:	fab1 f181 	clz	r1, r1
 8003736:	b2c9      	uxtb	r1, r1
 8003738:	408b      	lsls	r3, r1
 800373a:	4921      	ldr	r1, [pc, #132]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
 8003740:	e06d      	b.n	800381e <HAL_RCC_OscConfig+0x62e>
 8003742:	2301      	movs	r3, #1
 8003744:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003754:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003762:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	461a      	mov	r2, r3
 800376a:	2300      	movs	r3, #0
 800376c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd ffdb 	bl	8001728 <HAL_GetTick>
 8003772:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7fd ffd6 	bl	8001728 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d902      	bls.n	800378e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	f000 bd7e 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
 800378e:	2302      	movs	r3, #2
 8003790:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80037a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5d4>
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <HAL_RCC_OscConfig+0x5d0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e016      	b.n	80037ec <HAL_RCC_OscConfig+0x5fc>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80037d6:	2302      	movs	r3, #2
 80037d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037e8:	4bbf      	ldr	r3, [pc, #764]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2202      	movs	r2, #2
 80037ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80037fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ac      	bne.n	8003778 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8113 	beq.w	8003a5a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d07c      	beq.n	800393e <HAL_RCC_OscConfig+0x74e>
 8003844:	2301      	movs	r3, #1
 8003846:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003856:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	4ba2      	ldr	r3, [pc, #648]	; (8003aec <HAL_RCC_OscConfig+0x8fc>)
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	461a      	mov	r2, r3
 800386a:	2301      	movs	r3, #1
 800386c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7fd ff5b 	bl	8001728 <HAL_GetTick>
 8003872:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003878:	f7fd ff56 	bl	8001728 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d902      	bls.n	800388e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	f000 bcfe 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
 800388e:	2302      	movs	r3, #2
 8003890:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003898:	fa93 f2a3 	rbit	r2, r3
 800389c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038ae:	2202      	movs	r2, #2
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038d2:	2202      	movs	r2, #2
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b7e      	ldr	r3, [pc, #504]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 80038f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038fa:	2102      	movs	r1, #2
 80038fc:	6019      	str	r1, [r3, #0]
 80038fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003902:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f1a3 	rbit	r1, r3
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003914:	6019      	str	r1, [r3, #0]
  return result;
 8003916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d09d      	beq.n	8003878 <HAL_RCC_OscConfig+0x688>
 800393c:	e08d      	b.n	8003a5a <HAL_RCC_OscConfig+0x86a>
 800393e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003942:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003960:	601a      	str	r2, [r3, #0]
  return result;
 8003962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003966:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800396a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCC_OscConfig+0x8fc>)
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003980:	f7fd fed2 	bl	8001728 <HAL_GetTick>
 8003984:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398a:	f7fd fecd 	bl	8001728 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d902      	bls.n	80039a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	f000 bc75 	b.w	800428a <HAL_RCC_OscConfig+0x109a>
 80039a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039a8:	2202      	movs	r2, #2
 80039aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	fa93 f2a3 	rbit	r2, r3
 80039ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039cc:	2202      	movs	r2, #2
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	fa93 f2a3 	rbit	r2, r3
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a18:	2102      	movs	r1, #2
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f1a3 	rbit	r1, r3
 8003a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a32:	6019      	str	r1, [r3, #0]
  return result;
 8003a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d197      	bne.n	800398a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 81a5 	beq.w	8003dba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	61d3      	str	r3, [r2, #28]
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCC_OscConfig+0x8f8>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCC_OscConfig+0x900>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d121      	bne.n	8003b00 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RCC_OscConfig+0x900>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <HAL_RCC_OscConfig+0x900>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fe2e 	bl	8001728 <HAL_GetTick>
 8003acc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	e010      	b.n	8003af4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fd fe29 	bl	8001728 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d908      	bls.n	8003af4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e3d1      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	10908120 	.word	0x10908120
 8003af0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	4b8d      	ldr	r3, [pc, #564]	; (8003d2c <HAL_RCC_OscConfig+0xb3c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0e8      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x92e>
 8003b10:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a86      	ldr	r2, [pc, #536]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6213      	str	r3, [r2, #32]
 8003b1c:	e035      	b.n	8003b8a <HAL_RCC_OscConfig+0x99a>
 8003b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x958>
 8003b2e:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a7f      	ldr	r2, [pc, #508]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	4b7d      	ldr	r3, [pc, #500]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a7c      	ldr	r2, [pc, #496]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	e020      	b.n	8003b8a <HAL_RCC_OscConfig+0x99a>
 8003b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_OscConfig+0x982>
 8003b58:	4b75      	ldr	r3, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a74      	ldr	r2, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	4b72      	ldr	r3, [pc, #456]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a71      	ldr	r2, [pc, #452]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	e00b      	b.n	8003b8a <HAL_RCC_OscConfig+0x99a>
 8003b72:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a6e      	ldr	r2, [pc, #440]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4a6b      	ldr	r2, [pc, #428]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8081 	beq.w	8003c9e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fd fdc4 	bl	8001728 <HAL_GetTick>
 8003ba0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e00b      	b.n	8003bbe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd fdbf 	bl	8001728 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e365      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
 8003bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fa93 f2a3 	rbit	r2, r3
 8003bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bdc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bea:	2202      	movs	r2, #2
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fa93 f2a3 	rbit	r2, r3
 8003bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c04:	601a      	str	r2, [r3, #0]
  return result;
 8003c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d102      	bne.n	8003c2a <HAL_RCC_OscConfig+0xa3a>
 8003c24:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	e013      	b.n	8003c52 <HAL_RCC_OscConfig+0xa62>
 8003c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c32:	2202      	movs	r2, #2
 8003c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fa93 f2a3 	rbit	r2, r3
 8003c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c48:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c62:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	fa92 f1a2 	rbit	r1, r2
 8003c6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c70:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c74:	6011      	str	r1, [r2, #0]
  return result;
 8003c76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c7a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	fab2 f282 	clz	r2, r2
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f002 021f 	and.w	r2, r2, #31
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d084      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x9b6>
 8003c9c:	e083      	b.n	8003da6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd fd43 	bl	8001728 <HAL_GetTick>
 8003ca2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fd3e 	bl	8001728 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e2e4      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
 8003cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cc8:	2202      	movs	r2, #2
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cde:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cec:	2202      	movs	r2, #2
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d06:	601a      	str	r2, [r3, #0]
  return result;
 8003d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0xb44>
 8003d26:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <HAL_RCC_OscConfig+0xb40>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	e017      	b.n	8003d5c <HAL_RCC_OscConfig+0xb6c>
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	40021000 	.word	0x40021000
 8003d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	fa93 f2a3 	rbit	r2, r3
 8003d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d52:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	4bb3      	ldr	r3, [pc, #716]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d64:	2102      	movs	r1, #2
 8003d66:	6011      	str	r1, [r2, #0]
 8003d68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	fa92 f1a2 	rbit	r1, r2
 8003d76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d7a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d7e:	6011      	str	r1, [r2, #0]
  return result;
 8003d80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d84:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	fab2 f282 	clz	r2, r2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	f002 021f 	and.w	r2, r2, #31
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d180      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003da6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b9e      	ldr	r3, [pc, #632]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a9d      	ldr	r2, [pc, #628]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 825e 	beq.w	8004288 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dcc:	4b96      	ldr	r3, [pc, #600]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	f000 821f 	beq.w	8004218 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	f040 8170 	bne.w	80040cc <HAL_RCC_OscConfig+0xedc>
 8003dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	fa93 f2a3 	rbit	r2, r3
 8003e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e10:	601a      	str	r2, [r3, #0]
  return result;
 8003e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e1a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fd fc79 	bl	8001728 <HAL_GetTick>
 8003e36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e3a:	e009      	b.n	8003e50 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fc74 	bl	8001728 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e21c      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
 8003e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	fa93 f2a3 	rbit	r2, r3
 8003e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e74:	601a      	str	r2, [r3, #0]
  return result;
 8003e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d102      	bne.n	8003e9a <HAL_RCC_OscConfig+0xcaa>
 8003e94:	4b64      	ldr	r3, [pc, #400]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	e027      	b.n	8003eea <HAL_RCC_OscConfig+0xcfa>
 8003e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	fa93 f2a3 	rbit	r2, r3
 8003eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	fa93 f2a3 	rbit	r2, r3
 8003edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	4b50      	ldr	r3, [pc, #320]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ef2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ef6:	6011      	str	r1, [r2, #0]
 8003ef8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003efc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	fa92 f1a2 	rbit	r1, r2
 8003f06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f0a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003f0e:	6011      	str	r1, [r2, #0]
  return result;
 8003f10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f14:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d182      	bne.n	8003e3c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f023 020f 	bic.w	r2, r3, #15
 8003f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	4937      	ldr	r1, [pc, #220]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003f50:	4b35      	ldr	r3, [pc, #212]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a19      	ldr	r1, [r3, #32]
 8003f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	492d      	ldr	r1, [pc, #180]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
 8003f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f9c:	601a      	str	r2, [r3, #0]
  return result;
 8003f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fa6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2301      	movs	r3, #1
 8003fbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fbb3 	bl	8001728 <HAL_GetTick>
 8003fc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc6:	e009      	b.n	8003fdc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd fbae 	bl	8001728 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e156      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
 8003fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004000:	601a      	str	r2, [r3, #0]
  return result;
 8004002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004006:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800400a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <HAL_RCC_OscConfig+0xe3c>
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <HAL_RCC_OscConfig+0xe38>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	e02a      	b.n	800407c <HAL_RCC_OscConfig+0xe8c>
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004030:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fa93 f2a3 	rbit	r2, r3
 8004048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004056:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800405a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004064:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	fa93 f2a3 	rbit	r2, r3
 800406e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004072:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	4b86      	ldr	r3, [pc, #536]	; (8004294 <HAL_RCC_OscConfig+0x10a4>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004080:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004088:	6011      	str	r1, [r2, #0]
 800408a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800408e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	fa92 f1a2 	rbit	r1, r2
 8004098:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800409c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040a0:	6011      	str	r1, [r2, #0]
  return result;
 80040a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040a6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	fab2 f282 	clz	r2, r2
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	f042 0220 	orr.w	r2, r2, #32
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	f002 021f 	and.w	r2, r2, #31
 80040bc:	2101      	movs	r1, #1
 80040be:	fa01 f202 	lsl.w	r2, r1, r2
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f43f af7f 	beq.w	8003fc8 <HAL_RCC_OscConfig+0xdd8>
 80040ca:	e0dd      	b.n	8004288 <HAL_RCC_OscConfig+0x1098>
 80040cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040f0:	601a      	str	r2, [r3, #0]
  return result;
 80040f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040fa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004106:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fd fb09 	bl	8001728 <HAL_GetTick>
 8004116:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411a:	e009      	b.n	8004130 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411c:	f7fd fb04 	bl	8001728 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0ac      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
 8004130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004134:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800413c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004142:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fa93 f2a3 	rbit	r2, r3
 800414c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004150:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004154:	601a      	str	r2, [r3, #0]
  return result;
 8004156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800415e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	fab3 f383 	clz	r3, r3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d102      	bne.n	800417a <HAL_RCC_OscConfig+0xf8a>
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_OscConfig+0x10a4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	e027      	b.n	80041ca <HAL_RCC_OscConfig+0xfda>
 800417a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fa93 f2a3 	rbit	r2, r3
 8004196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	fa93 f2a3 	rbit	r2, r3
 80041bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	4b33      	ldr	r3, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x10a4>)
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041d6:	6011      	str	r1, [r2, #0]
 80041d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	fa92 f1a2 	rbit	r1, r2
 80041e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041ea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80041ee:	6011      	str	r1, [r2, #0]
  return result;
 80041f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041f4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	fab2 f282 	clz	r2, r2
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	f042 0220 	orr.w	r2, r2, #32
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f002 021f 	and.w	r2, r2, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f202 	lsl.w	r2, r1, r2
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d182      	bne.n	800411c <HAL_RCC_OscConfig+0xf2c>
 8004216:	e037      	b.n	8004288 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e02e      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_OscConfig+0x10a4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004234:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_RCC_OscConfig+0x10a4>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800423c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004240:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004248:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	d117      	bne.n	8004284 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004254:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004258:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800425c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004260:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004268:	429a      	cmp	r2, r3
 800426a:	d10b      	bne.n	8004284 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800426c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004270:	f003 020f 	and.w	r2, r3, #15
 8004274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004278:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b09e      	sub	sp, #120	; 0x78
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e162      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b0:	4b90      	ldr	r3, [pc, #576]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d910      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b8d      	ldr	r3, [pc, #564]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	498b      	ldr	r1, [pc, #556]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e14a      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b82      	ldr	r3, [pc, #520]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	497f      	ldr	r1, [pc, #508]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80dc 	beq.w	80044c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d13c      	bne.n	800438e <HAL_RCC_ClockConfig+0xf6>
 8004314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004318:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d102      	bne.n	800433e <HAL_RCC_ClockConfig+0xa6>
 8004338:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	e00f      	b.n	800435e <HAL_RCC_ClockConfig+0xc6>
 800433e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004342:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	667b      	str	r3, [r7, #100]	; 0x64
 800434c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004350:	663b      	str	r3, [r7, #96]	; 0x60
 8004352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800435a:	4b67      	ldr	r3, [pc, #412]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004362:	65ba      	str	r2, [r7, #88]	; 0x58
 8004364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800436c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f042 0220 	orr.w	r2, r2, #32
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	f002 021f 	and.w	r2, r2, #31
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d17b      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0f3      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d13c      	bne.n	8004410 <HAL_RCC_ClockConfig+0x178>
 8004396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d102      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x128>
 80043ba:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	e00f      	b.n	80043e0 <HAL_RCC_ClockConfig+0x148>
 80043c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
 80043ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d2:	643b      	str	r3, [r7, #64]	; 0x40
 80043d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043dc:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80043e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f002 021f 	and.w	r2, r2, #31
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f202 	lsl.w	r2, r1, r2
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d13a      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0b2      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
 8004410:	2302      	movs	r3, #2
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1a0>
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	e00d      	b.n	8004454 <HAL_RCC_ClockConfig+0x1bc>
 8004438:	2302      	movs	r3, #2
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	2302      	movs	r3, #2
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2202      	movs	r2, #2
 8004456:	61ba      	str	r2, [r7, #24]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	fa92 f2a2 	rbit	r2, r2
 800445e:	617a      	str	r2, [r7, #20]
  return result;
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	fab2 f282 	clz	r2, r2
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	f042 0220 	orr.w	r2, r2, #32
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	f002 021f 	and.w	r2, r2, #31
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f202 	lsl.w	r2, r1, r2
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e079      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	491a      	ldr	r1, [pc, #104]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004494:	f7fd f948 	bl	8001728 <HAL_GetTick>
 8004498:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449c:	f7fd f944 	bl	8001728 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e061      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_RCC_ClockConfig+0x260>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 020c 	and.w	r2, r3, #12
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d1eb      	bne.n	800449c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d214      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0207 	bic.w	r2, r3, #7
 80044da:	4906      	ldr	r1, [pc, #24]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e040      	b.n	8004576 <HAL_RCC_ClockConfig+0x2de>
 80044f4:	40022000 	.word	0x40022000
 80044f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_RCC_ClockConfig+0x2e8>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	491a      	ldr	r1, [pc, #104]	; (8004580 <HAL_RCC_ClockConfig+0x2e8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_RCC_ClockConfig+0x2e8>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4912      	ldr	r1, [pc, #72]	; (8004580 <HAL_RCC_ClockConfig+0x2e8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800453a:	f000 f829 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800453e:	4601      	mov	r1, r0
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_RCC_ClockConfig+0x2e8>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004548:	22f0      	movs	r2, #240	; 0xf0
 800454a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	fa92 f2a2 	rbit	r2, r2
 8004552:	60fa      	str	r2, [r7, #12]
  return result;
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	fab2 f282 	clz	r2, r2
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	40d3      	lsrs	r3, r2
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <HAL_RCC_ClockConfig+0x2ec>)
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	fa21 f303 	lsr.w	r3, r1, r3
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <HAL_RCC_ClockConfig+0x2f0>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <HAL_RCC_ClockConfig+0x2f4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd f896 	bl	80016a0 <HAL_InitTick>
  
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3778      	adds	r7, #120	; 0x78
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	080072fc 	.word	0x080072fc
 8004588:	20000000 	.word	0x20000000
 800458c:	20000004 	.word	0x20000004

08004590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b08b      	sub	sp, #44	; 0x2c
 8004594:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x30>
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x36>
 80045be:	e03f      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045c2:	623b      	str	r3, [r7, #32]
      break;
 80045c4:	e03f      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	fa92 f2a2 	rbit	r2, r2
 80045d8:	607a      	str	r2, [r7, #4]
  return result;
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	fab2 f282 	clz	r2, r2
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	40d3      	lsrs	r3, r2
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_RCC_GetSysClockFreq+0xcc>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	220f      	movs	r2, #15
 80045f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	fa92 f2a2 	rbit	r2, r2
 80045fc:	60fa      	str	r2, [r7, #12]
  return result;
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	fab2 f282 	clz	r2, r2
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	40d3      	lsrs	r3, r2
 8004608:	4a15      	ldr	r2, [pc, #84]	; (8004660 <HAL_RCC_GetSysClockFreq+0xd0>)
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004618:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc8>)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	e007      	b.n	800463a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800462a:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc8>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	623b      	str	r3, [r7, #32]
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004642:	623b      	str	r3, [r7, #32]
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	6a3b      	ldr	r3, [r7, #32]
}
 8004648:	4618      	mov	r0, r3
 800464a:	372c      	adds	r7, #44	; 0x2c
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40021000 	.word	0x40021000
 8004658:	007a1200 	.word	0x007a1200
 800465c:	08007314 	.word	0x08007314
 8004660:	08007324 	.word	0x08007324

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_RCC_GetHCLKFreq+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000000 	.word	0x20000000

0800467c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004682:	f7ff ffef 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8004686:	4601      	mov	r1, r0
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004690:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004694:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	fa92 f2a2 	rbit	r2, r2
 800469c:	603a      	str	r2, [r7, #0]
  return result;
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	fab2 f282 	clz	r2, r2
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	40d3      	lsrs	r3, r2
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	0800730c 	.word	0x0800730c

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046c6:	f7ff ffcd 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 80046ca:	4601      	mov	r1, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046d4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	fa92 f2a2 	rbit	r2, r2
 80046e0:	603a      	str	r2, [r7, #0]
  return result;
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	fab2 f282 	clz	r2, r2
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	40d3      	lsrs	r3, r2
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021000 	.word	0x40021000
 8004700:	0800730c 	.word	0x0800730c

08004704 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b092      	sub	sp, #72	; 0x48
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80d4 	beq.w	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004728:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10e      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004734:	4b4b      	ldr	r3, [pc, #300]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	61d3      	str	r3, [r2, #28]
 8004740:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	4b45      	ldr	r3, [pc, #276]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d118      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475e:	4b42      	ldr	r3, [pc, #264]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a41      	ldr	r2, [pc, #260]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476a:	f7fc ffdd 	bl	8001728 <HAL_GetTick>
 800476e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	e008      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004772:	f7fc ffd9 	bl	8001728 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b64      	cmp	r3, #100	; 0x64
 800477e:	d901      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1d6      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004790:	4b34      	ldr	r3, [pc, #208]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8084 	beq.w	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d07c      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b0:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	461a      	mov	r2, r3
 80047da:	2301      	movs	r3, #1
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	461a      	mov	r2, r3
 80047fe:	2300      	movs	r3, #0
 8004800:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004802:	4a18      	ldr	r2, [pc, #96]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d04b      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fc ff89 	bl	8001728 <HAL_GetTick>
 8004816:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fc ff85 	bl	8001728 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e180      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004830:	2302      	movs	r3, #2
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	2302      	movs	r3, #2
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	61fb      	str	r3, [r7, #28]
  return result;
 8004848:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d108      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800485e:	4b01      	ldr	r3, [pc, #4]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	e00d      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
 800486c:	10908100 	.word	0x10908100
 8004870:	2302      	movs	r3, #2
 8004872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	4b9a      	ldr	r3, [pc, #616]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2202      	movs	r2, #2
 8004882:	613a      	str	r2, [r7, #16]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	fa92 f2a2 	rbit	r2, r2
 800488a:	60fa      	str	r2, [r7, #12]
  return result;
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0b7      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048aa:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	498c      	ldr	r1, [pc, #560]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c4:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4a87      	ldr	r2, [pc, #540]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048dc:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	f023 0203 	bic.w	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	497f      	ldr	r1, [pc, #508]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048fa:	4b7b      	ldr	r3, [pc, #492]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4978      	ldr	r1, [pc, #480]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004918:	4b73      	ldr	r3, [pc, #460]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	4970      	ldr	r1, [pc, #448]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004936:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	f023 0210 	bic.w	r2, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4969      	ldr	r1, [pc, #420]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004954:	4b64      	ldr	r3, [pc, #400]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	4961      	ldr	r1, [pc, #388]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	f023 0220 	bic.w	r2, r3, #32
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	495a      	ldr	r1, [pc, #360]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004990:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	4952      	ldr	r1, [pc, #328]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ae:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	494b      	ldr	r1, [pc, #300]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049cc:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	4943      	ldr	r1, [pc, #268]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049ea:	4b3f      	ldr	r3, [pc, #252]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	493c      	ldr	r1, [pc, #240]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a08:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	4934      	ldr	r1, [pc, #208]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	492d      	ldr	r1, [pc, #180]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	4925      	ldr	r1, [pc, #148]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	491e      	ldr	r1, [pc, #120]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	4907      	ldr	r1, [pc, #28]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004ada:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aee:	4913      	ldr	r1, [pc, #76]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0c:	490b      	ldr	r1, [pc, #44]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	4904      	ldr	r1, [pc, #16]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3748      	adds	r7, #72	; 0x48
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e049      	b.n	8004be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc fc0c 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 fd1e 	bl	80055c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e049      	b.n	8004c94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f841 	bl	8004c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f000 fcc7 	bl	80055c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_TIM_PWM_Start_IT+0x28>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e03c      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0xa2>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d109      	bne.n	8004cf2 <HAL_TIM_PWM_Start_IT+0x42>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e02f      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0xa2>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_PWM_Start_IT+0x5c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e022      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0xa2>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d109      	bne.n	8004d26 <HAL_TIM_PWM_Start_IT+0x76>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e015      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0xa2>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d109      	bne.n	8004d40 <HAL_TIM_PWM_Start_IT+0x90>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e008      	b.n	8004d52 <HAL_TIM_PWM_Start_IT+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0ec      	b.n	8004f34 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start_IT+0xba>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	e023      	b.n	8004db2 <HAL_TIM_PWM_Start_IT+0x102>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start_IT+0xca>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	e01b      	b.n	8004db2 <HAL_TIM_PWM_Start_IT+0x102>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start_IT+0xda>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	e013      	b.n	8004db2 <HAL_TIM_PWM_Start_IT+0x102>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start_IT+0xea>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d98:	e00b      	b.n	8004db2 <HAL_TIM_PWM_Start_IT+0x102>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start_IT+0xfa>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	e003      	b.n	8004db2 <HAL_TIM_PWM_Start_IT+0x102>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d841      	bhi.n	8004e3c <HAL_TIM_PWM_Start_IT+0x18c>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <HAL_TIM_PWM_Start_IT+0x110>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004e3d 	.word	0x08004e3d
 8004dc8:	08004e3d 	.word	0x08004e3d
 8004dcc:	08004e3d 	.word	0x08004e3d
 8004dd0:	08004e07 	.word	0x08004e07
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004e3d 	.word	0x08004e3d
 8004ddc:	08004e3d 	.word	0x08004e3d
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	08004e2b 	.word	0x08004e2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0202 	orr.w	r2, r2, #2
 8004e02:	60da      	str	r2, [r3, #12]
      break;
 8004e04:	e01d      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0204 	orr.w	r2, r2, #4
 8004e14:	60da      	str	r2, [r3, #12]
      break;
 8004e16:	e014      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0208 	orr.w	r2, r2, #8
 8004e26:	60da      	str	r2, [r3, #12]
      break;
 8004e28:	e00b      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0210 	orr.w	r2, r2, #16
 8004e38:	60da      	str	r2, [r3, #12]
      break;
 8004e3a:	e002      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d174      	bne.n	8004f32 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fff3 	bl	8005e3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a38      	ldr	r2, [pc, #224]	; (8004f3c <HAL_TIM_PWM_Start_IT+0x28c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d018      	beq.n	8004e92 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a36      	ldr	r2, [pc, #216]	; (8004f40 <HAL_TIM_PWM_Start_IT+0x290>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <HAL_TIM_PWM_Start_IT+0x294>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00e      	beq.n	8004e92 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a33      	ldr	r2, [pc, #204]	; (8004f48 <HAL_TIM_PWM_Start_IT+0x298>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <HAL_TIM_PWM_Start_IT+0x29c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_TIM_PWM_Start_IT+0x1e2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	; (8004f50 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_Start_IT+0x1e6>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_TIM_PWM_Start_IT+0x1e8>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <HAL_TIM_PWM_Start_IT+0x28c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_TIM_PWM_Start_IT+0x242>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d018      	beq.n	8004ef2 <HAL_TIM_PWM_Start_IT+0x242>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_TIM_PWM_Start_IT+0x242>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_TIM_PWM_Start_IT+0x242>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_PWM_Start_IT+0x290>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_TIM_PWM_Start_IT+0x242>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <HAL_TIM_PWM_Start_IT+0x294>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIM_PWM_Start_IT+0x242>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d115      	bne.n	8004f1e <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_TIM_PWM_Start_IT+0x2ac>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	d015      	beq.n	8004f30 <HAL_TIM_PWM_Start_IT+0x280>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0a:	d011      	beq.n	8004f30 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	e008      	b.n	8004f30 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e000      	b.n	8004f32 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40013400 	.word	0x40013400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800
 8004f50:	40015000 	.word	0x40015000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	00010007 	.word	0x00010007

08004f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0202 	mvn.w	r2, #2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 faed 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fadf 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 faf0 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0204 	mvn.w	r2, #4
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fac3 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fab5 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fac6 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d122      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d11b      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0208 	mvn.w	r2, #8
 8005034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa99 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa8b 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fa9c 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b10      	cmp	r3, #16
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa6f 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa61 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa72 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10e      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0201 	mvn.w	r2, #1
 80050dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa3b 	bl	800555a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d10e      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d107      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 ff52 	bl	8005fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511e:	d10e      	bne.n	800513e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d107      	bne.n	800513e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 ff45 	bl	8005fc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d10e      	bne.n	800516a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d107      	bne.n	800516a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fa20 	bl	80055aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b20      	cmp	r3, #32
 8005176:	d10e      	bne.n	8005196 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b20      	cmp	r3, #32
 8005184:	d107      	bne.n	8005196 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0220 	mvn.w	r2, #32
 800518e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 ff05 	bl	8005fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e0ff      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b14      	cmp	r3, #20
 80051ca:	f200 80f0 	bhi.w	80053ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	08005229 	.word	0x08005229
 80051d8:	080053af 	.word	0x080053af
 80051dc:	080053af 	.word	0x080053af
 80051e0:	080053af 	.word	0x080053af
 80051e4:	08005269 	.word	0x08005269
 80051e8:	080053af 	.word	0x080053af
 80051ec:	080053af 	.word	0x080053af
 80051f0:	080053af 	.word	0x080053af
 80051f4:	080052ab 	.word	0x080052ab
 80051f8:	080053af 	.word	0x080053af
 80051fc:	080053af 	.word	0x080053af
 8005200:	080053af 	.word	0x080053af
 8005204:	080052eb 	.word	0x080052eb
 8005208:	080053af 	.word	0x080053af
 800520c:	080053af 	.word	0x080053af
 8005210:	080053af 	.word	0x080053af
 8005214:	0800532d 	.word	0x0800532d
 8005218:	080053af 	.word	0x080053af
 800521c:	080053af 	.word	0x080053af
 8005220:	080053af 	.word	0x080053af
 8005224:	0800536d 	.word	0x0800536d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fa64 	bl	80056fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0208 	orr.w	r2, r2, #8
 8005242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0204 	bic.w	r2, r2, #4
 8005252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6999      	ldr	r1, [r3, #24]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]
      break;
 8005266:	e0a5      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fade 	bl	8005830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6999      	ldr	r1, [r3, #24]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	021a      	lsls	r2, r3, #8
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	619a      	str	r2, [r3, #24]
      break;
 80052a8:	e084      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fb51 	bl	8005958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0208 	orr.w	r2, r2, #8
 80052c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0204 	bic.w	r2, r2, #4
 80052d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69d9      	ldr	r1, [r3, #28]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	61da      	str	r2, [r3, #28]
      break;
 80052e8:	e064      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fbc3 	bl	8005a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69d9      	ldr	r1, [r3, #28]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	021a      	lsls	r2, r3, #8
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	61da      	str	r2, [r3, #28]
      break;
 800532a:	e043      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fc12 	bl	8005b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0208 	orr.w	r2, r2, #8
 8005346:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0204 	bic.w	r2, r2, #4
 8005356:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800536a:	e023      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fc5c 	bl	8005c30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005386:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005396:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	021a      	lsls	r2, r3, #8
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053ac:	e002      	b.n	80053b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
      break;
 80053b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop

080053c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_ConfigClockSource+0x1c>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0b6      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x18a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005420:	d03e      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0xd8>
 8005422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005426:	f200 8087 	bhi.w	8005538 <HAL_TIM_ConfigClockSource+0x170>
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	f000 8086 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x176>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d87f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005438:	2b70      	cmp	r3, #112	; 0x70
 800543a:	d01a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0xaa>
 800543c:	2b70      	cmp	r3, #112	; 0x70
 800543e:	d87b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005440:	2b60      	cmp	r3, #96	; 0x60
 8005442:	d050      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x11e>
 8005444:	2b60      	cmp	r3, #96	; 0x60
 8005446:	d877      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005448:	2b50      	cmp	r3, #80	; 0x50
 800544a:	d03c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0xfe>
 800544c:	2b50      	cmp	r3, #80	; 0x50
 800544e:	d873      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d058      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x13e>
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d86f      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d064      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 800545c:	2b30      	cmp	r3, #48	; 0x30
 800545e:	d86b      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d060      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d867      	bhi.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d05a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x15e>
 8005470:	e062      	b.n	8005538 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005482:	f000 fcbb 	bl	8005dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	609a      	str	r2, [r3, #8]
      break;
 800549e:	e04f      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054b0:	f000 fca4 	bl	8005dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c2:	609a      	str	r2, [r3, #8]
      break;
 80054c4:	e03c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 fc18 	bl	8005d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2150      	movs	r1, #80	; 0x50
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fc71 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 80054e4:	e02c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 fc37 	bl	8005d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2160      	movs	r1, #96	; 0x60
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fc61 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005504:	e01c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	461a      	mov	r2, r3
 8005514:	f000 fbf8 	bl	8005d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2140      	movs	r1, #64	; 0x40
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fc51 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005524:	e00c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 fc48 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005536:	e003      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e000      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800553e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005550:	7bfb      	ldrb	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a42      	ldr	r2, [pc, #264]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d00f      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3f      	ldr	r2, [pc, #252]	; (80056e0 <TIM_Base_SetConfig+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3e      	ldr	r2, [pc, #248]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3d      	ldr	r2, [pc, #244]	; (80056e8 <TIM_Base_SetConfig+0x128>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <TIM_Base_SetConfig+0x12c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d108      	bne.n	8005612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a31      	ldr	r2, [pc, #196]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01f      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d01b      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2e      	ldr	r2, [pc, #184]	; (80056e0 <TIM_Base_SetConfig+0x120>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d017      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <TIM_Base_SetConfig+0x128>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <TIM_Base_SetConfig+0x130>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2b      	ldr	r2, [pc, #172]	; (80056f4 <TIM_Base_SetConfig+0x134>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <TIM_Base_SetConfig+0x138>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a25      	ldr	r2, [pc, #148]	; (80056ec <TIM_Base_SetConfig+0x12c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d108      	bne.n	800566c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a12      	ldr	r2, [pc, #72]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x100>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <TIM_Base_SetConfig+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x100>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <TIM_Base_SetConfig+0x130>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x100>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <TIM_Base_SetConfig+0x134>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x100>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <TIM_Base_SetConfig+0x138>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x100>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <TIM_Base_SetConfig+0x12c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	615a      	str	r2, [r3, #20]
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40013400 	.word	0x40013400
 80056ec:	40015000 	.word	0x40015000
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400
 80056f8:	40014800 	.word	0x40014800

080056fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f023 0201 	bic.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0302 	bic.w	r3, r3, #2
 8005748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a30      	ldr	r2, [pc, #192]	; (8005818 <TIM_OC1_SetConfig+0x11c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d013      	beq.n	8005784 <TIM_OC1_SetConfig+0x88>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2f      	ldr	r2, [pc, #188]	; (800581c <TIM_OC1_SetConfig+0x120>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00f      	beq.n	8005784 <TIM_OC1_SetConfig+0x88>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2e      	ldr	r2, [pc, #184]	; (8005820 <TIM_OC1_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00b      	beq.n	8005784 <TIM_OC1_SetConfig+0x88>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <TIM_OC1_SetConfig+0x128>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d007      	beq.n	8005784 <TIM_OC1_SetConfig+0x88>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <TIM_OC1_SetConfig+0x12c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_OC1_SetConfig+0x88>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a2b      	ldr	r2, [pc, #172]	; (800582c <TIM_OC1_SetConfig+0x130>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10c      	bne.n	800579e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0308 	bic.w	r3, r3, #8
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <TIM_OC1_SetConfig+0x11c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <TIM_OC1_SetConfig+0xd2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <TIM_OC1_SetConfig+0x120>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_OC1_SetConfig+0xd2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1b      	ldr	r2, [pc, #108]	; (8005820 <TIM_OC1_SetConfig+0x124>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_OC1_SetConfig+0xd2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <TIM_OC1_SetConfig+0x128>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_OC1_SetConfig+0xd2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <TIM_OC1_SetConfig+0x12c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_OC1_SetConfig+0xd2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <TIM_OC1_SetConfig+0x130>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40013400 	.word	0x40013400
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800
 800582c:	40015000 	.word	0x40015000

08005830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0210 	bic.w	r2, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <TIM_OC2_SetConfig+0x110>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d007      	beq.n	80058a4 <TIM_OC2_SetConfig+0x74>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_OC2_SetConfig+0x114>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_OC2_SetConfig+0x74>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_OC2_SetConfig+0x118>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d10d      	bne.n	80058c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <TIM_OC2_SetConfig+0x110>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <TIM_OC2_SetConfig+0xc0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <TIM_OC2_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00f      	beq.n	80058f0 <TIM_OC2_SetConfig+0xc0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <TIM_OC2_SetConfig+0x11c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_OC2_SetConfig+0xc0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <TIM_OC2_SetConfig+0x120>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_OC2_SetConfig+0xc0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <TIM_OC2_SetConfig+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC2_SetConfig+0xc0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <TIM_OC2_SetConfig+0x118>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d113      	bne.n	8005918 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058fe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40013400 	.word	0x40013400
 8005948:	40015000 	.word	0x40015000
 800594c:	40014000 	.word	0x40014000
 8005950:	40014400 	.word	0x40014400
 8005954:	40014800 	.word	0x40014800

08005958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2b      	ldr	r2, [pc, #172]	; (8005a64 <TIM_OC3_SetConfig+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_OC3_SetConfig+0x72>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2a      	ldr	r2, [pc, #168]	; (8005a68 <TIM_OC3_SetConfig+0x110>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_OC3_SetConfig+0x72>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <TIM_OC3_SetConfig+0x114>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d10d      	bne.n	80059e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <TIM_OC3_SetConfig+0x10c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <TIM_OC3_SetConfig+0xbe>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <TIM_OC3_SetConfig+0x110>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00f      	beq.n	8005a16 <TIM_OC3_SetConfig+0xbe>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <TIM_OC3_SetConfig+0x118>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_OC3_SetConfig+0xbe>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1c      	ldr	r2, [pc, #112]	; (8005a74 <TIM_OC3_SetConfig+0x11c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <TIM_OC3_SetConfig+0xbe>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	; (8005a78 <TIM_OC3_SetConfig+0x120>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_OC3_SetConfig+0xbe>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <TIM_OC3_SetConfig+0x114>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d113      	bne.n	8005a3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	621a      	str	r2, [r3, #32]
}
 8005a58:	bf00      	nop
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40013400 	.word	0x40013400
 8005a6c:	40015000 	.word	0x40015000
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40014400 	.word	0x40014400
 8005a78:	40014800 	.word	0x40014800

08005a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <TIM_OC4_SetConfig+0xc8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <TIM_OC4_SetConfig+0x8c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a19      	ldr	r2, [pc, #100]	; (8005b48 <TIM_OC4_SetConfig+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00f      	beq.n	8005b08 <TIM_OC4_SetConfig+0x8c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <TIM_OC4_SetConfig+0xd0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00b      	beq.n	8005b08 <TIM_OC4_SetConfig+0x8c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <TIM_OC4_SetConfig+0xd4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_OC4_SetConfig+0x8c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <TIM_OC4_SetConfig+0xd8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC4_SetConfig+0x8c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <TIM_OC4_SetConfig+0xdc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d109      	bne.n	8005b1c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	40015000 	.word	0x40015000

08005b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <TIM_OC5_SetConfig+0xbc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <TIM_OC5_SetConfig+0xc0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <TIM_OC5_SetConfig+0xc4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <TIM_OC5_SetConfig+0xc8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <TIM_OC5_SetConfig+0xcc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC5_SetConfig+0x82>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <TIM_OC5_SetConfig+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d109      	bne.n	8005bf2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800
 8005c2c:	40015000 	.word	0x40015000

08005c30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	051b      	lsls	r3, r3, #20
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1a      	ldr	r2, [pc, #104]	; (8005cf0 <TIM_OC6_SetConfig+0xc0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <TIM_OC6_SetConfig+0xc4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00f      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <TIM_OC6_SetConfig+0xc8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <TIM_OC6_SetConfig+0xcc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <TIM_OC6_SetConfig+0xd0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x84>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <TIM_OC6_SetConfig+0xd4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d109      	bne.n	8005cc8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	029b      	lsls	r3, r3, #10
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800
 8005d04:	40015000 	.word	0x40015000

08005d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 030a 	bic.w	r3, r3, #10
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b087      	sub	sp, #28
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0210 	bic.w	r2, r3, #16
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f043 0307 	orr.w	r3, r3, #7
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2201      	movs	r2, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	401a      	ands	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e06d      	b.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a30      	ldr	r2, [pc, #192]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2d      	ldr	r2, [pc, #180]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ee4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d01d      	beq.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1c:	d018      	beq.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10c      	bne.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40012c00 	.word	0x40012c00
 8005f8c:	40013400 	.word	0x40013400
 8005f90:	40015000 	.word	0x40015000
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40014000 	.word	0x40014000

08005fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e040      	b.n	8006070 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb facc 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2224      	movs	r2, #36	; 0x24
 8006008:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8b6 	bl	800618c <UART_SetConfig>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e022      	b.n	8006070 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa7e 	bl	8006534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb05 	bl	8006678 <UART_CheckIdleState>
 800606e:	4603      	mov	r3, r0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608c:	2b20      	cmp	r3, #32
 800608e:	d178      	bne.n	8006182 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_UART_Transmit+0x24>
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e071      	b.n	8006184 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2221      	movs	r2, #33	; 0x21
 80060ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ae:	f7fb fb3b 	bl	8001728 <HAL_GetTick>
 80060b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060cc:	d108      	bne.n	80060e0 <HAL_UART_Transmit+0x68>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e003      	b.n	80060e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060e8:	e030      	b.n	800614c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fb67 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e03c      	b.n	8006184 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	881a      	ldrh	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800611c:	b292      	uxth	r2, r2
 800611e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	3302      	adds	r3, #2
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	e008      	b.n	800613a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	781a      	ldrb	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	b292      	uxth	r2, r2
 8006132:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	3301      	adds	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1c8      	bne.n	80060ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2200      	movs	r2, #0
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fb30 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e005      	b.n	8006184 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	e000      	b.n	8006184 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b92      	ldr	r3, [pc, #584]	; (8006400 <UART_SetConfig+0x274>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	6979      	ldr	r1, [r7, #20]
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a80      	ldr	r2, [pc, #512]	; (8006404 <UART_SetConfig+0x278>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d120      	bne.n	800624a <UART_SetConfig+0xbe>
 8006208:	4b7f      	ldr	r3, [pc, #508]	; (8006408 <UART_SetConfig+0x27c>)
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b03      	cmp	r3, #3
 8006212:	d817      	bhi.n	8006244 <UART_SetConfig+0xb8>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <UART_SetConfig+0x90>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	0800622d 	.word	0x0800622d
 8006220:	08006239 	.word	0x08006239
 8006224:	0800623f 	.word	0x0800623f
 8006228:	08006233 	.word	0x08006233
 800622c:	2301      	movs	r3, #1
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e0b5      	b.n	800639e <UART_SetConfig+0x212>
 8006232:	2302      	movs	r3, #2
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e0b2      	b.n	800639e <UART_SetConfig+0x212>
 8006238:	2304      	movs	r3, #4
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e0af      	b.n	800639e <UART_SetConfig+0x212>
 800623e:	2308      	movs	r3, #8
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e0ac      	b.n	800639e <UART_SetConfig+0x212>
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e0a9      	b.n	800639e <UART_SetConfig+0x212>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a6f      	ldr	r2, [pc, #444]	; (800640c <UART_SetConfig+0x280>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d124      	bne.n	800629e <UART_SetConfig+0x112>
 8006254:	4b6c      	ldr	r3, [pc, #432]	; (8006408 <UART_SetConfig+0x27c>)
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800625c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006260:	d011      	beq.n	8006286 <UART_SetConfig+0xfa>
 8006262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006266:	d817      	bhi.n	8006298 <UART_SetConfig+0x10c>
 8006268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626c:	d011      	beq.n	8006292 <UART_SetConfig+0x106>
 800626e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006272:	d811      	bhi.n	8006298 <UART_SetConfig+0x10c>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <UART_SetConfig+0xf4>
 8006278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627c:	d006      	beq.n	800628c <UART_SetConfig+0x100>
 800627e:	e00b      	b.n	8006298 <UART_SetConfig+0x10c>
 8006280:	2300      	movs	r3, #0
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e08b      	b.n	800639e <UART_SetConfig+0x212>
 8006286:	2302      	movs	r3, #2
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e088      	b.n	800639e <UART_SetConfig+0x212>
 800628c:	2304      	movs	r3, #4
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e085      	b.n	800639e <UART_SetConfig+0x212>
 8006292:	2308      	movs	r3, #8
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e082      	b.n	800639e <UART_SetConfig+0x212>
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e07f      	b.n	800639e <UART_SetConfig+0x212>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a5b      	ldr	r2, [pc, #364]	; (8006410 <UART_SetConfig+0x284>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d124      	bne.n	80062f2 <UART_SetConfig+0x166>
 80062a8:	4b57      	ldr	r3, [pc, #348]	; (8006408 <UART_SetConfig+0x27c>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80062b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80062b4:	d011      	beq.n	80062da <UART_SetConfig+0x14e>
 80062b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80062ba:	d817      	bhi.n	80062ec <UART_SetConfig+0x160>
 80062bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062c0:	d011      	beq.n	80062e6 <UART_SetConfig+0x15a>
 80062c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062c6:	d811      	bhi.n	80062ec <UART_SetConfig+0x160>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <UART_SetConfig+0x148>
 80062cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062d0:	d006      	beq.n	80062e0 <UART_SetConfig+0x154>
 80062d2:	e00b      	b.n	80062ec <UART_SetConfig+0x160>
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e061      	b.n	800639e <UART_SetConfig+0x212>
 80062da:	2302      	movs	r3, #2
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e05e      	b.n	800639e <UART_SetConfig+0x212>
 80062e0:	2304      	movs	r3, #4
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e05b      	b.n	800639e <UART_SetConfig+0x212>
 80062e6:	2308      	movs	r3, #8
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e058      	b.n	800639e <UART_SetConfig+0x212>
 80062ec:	2310      	movs	r3, #16
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e055      	b.n	800639e <UART_SetConfig+0x212>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a47      	ldr	r2, [pc, #284]	; (8006414 <UART_SetConfig+0x288>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d124      	bne.n	8006346 <UART_SetConfig+0x1ba>
 80062fc:	4b42      	ldr	r3, [pc, #264]	; (8006408 <UART_SetConfig+0x27c>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006308:	d011      	beq.n	800632e <UART_SetConfig+0x1a2>
 800630a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800630e:	d817      	bhi.n	8006340 <UART_SetConfig+0x1b4>
 8006310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006314:	d011      	beq.n	800633a <UART_SetConfig+0x1ae>
 8006316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800631a:	d811      	bhi.n	8006340 <UART_SetConfig+0x1b4>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0x19c>
 8006320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x1a8>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x1b4>
 8006328:	2300      	movs	r3, #0
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e037      	b.n	800639e <UART_SetConfig+0x212>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e034      	b.n	800639e <UART_SetConfig+0x212>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e031      	b.n	800639e <UART_SetConfig+0x212>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e02e      	b.n	800639e <UART_SetConfig+0x212>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e02b      	b.n	800639e <UART_SetConfig+0x212>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a33      	ldr	r2, [pc, #204]	; (8006418 <UART_SetConfig+0x28c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d124      	bne.n	800639a <UART_SetConfig+0x20e>
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <UART_SetConfig+0x27c>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800635c:	d011      	beq.n	8006382 <UART_SetConfig+0x1f6>
 800635e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006362:	d817      	bhi.n	8006394 <UART_SetConfig+0x208>
 8006364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006368:	d011      	beq.n	800638e <UART_SetConfig+0x202>
 800636a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800636e:	d811      	bhi.n	8006394 <UART_SetConfig+0x208>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <UART_SetConfig+0x1f0>
 8006374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006378:	d006      	beq.n	8006388 <UART_SetConfig+0x1fc>
 800637a:	e00b      	b.n	8006394 <UART_SetConfig+0x208>
 800637c:	2300      	movs	r3, #0
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e00d      	b.n	800639e <UART_SetConfig+0x212>
 8006382:	2302      	movs	r3, #2
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e00a      	b.n	800639e <UART_SetConfig+0x212>
 8006388:	2304      	movs	r3, #4
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e007      	b.n	800639e <UART_SetConfig+0x212>
 800638e:	2308      	movs	r3, #8
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e004      	b.n	800639e <UART_SetConfig+0x212>
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e001      	b.n	800639e <UART_SetConfig+0x212>
 800639a:	2310      	movs	r3, #16
 800639c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d16b      	bne.n	8006480 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d838      	bhi.n	8006420 <UART_SetConfig+0x294>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0x228>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	08006421 	.word	0x08006421
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006421 	.word	0x08006421
 80063d0:	08006421 	.word	0x08006421
 80063d4:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7fe f950 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 80063dc:	61b8      	str	r0, [r7, #24]
        break;
 80063de:	e024      	b.n	800642a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fe f96e 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 80063e4:	61b8      	str	r0, [r7, #24]
        break;
 80063e6:	e020      	b.n	800642a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <UART_SetConfig+0x290>)
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e01d      	b.n	800642a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fe f8cf 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 80063f2:	61b8      	str	r0, [r7, #24]
        break;
 80063f4:	e019      	b.n	800642a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e015      	b.n	800642a <UART_SetConfig+0x29e>
 80063fe:	bf00      	nop
 8006400:	efff69f3 	.word	0xefff69f3
 8006404:	40013800 	.word	0x40013800
 8006408:	40021000 	.word	0x40021000
 800640c:	40004400 	.word	0x40004400
 8006410:	40004800 	.word	0x40004800
 8006414:	40004c00 	.word	0x40004c00
 8006418:	40005000 	.word	0x40005000
 800641c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	77bb      	strb	r3, [r7, #30]
        break;
 8006428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d073      	beq.n	8006518 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	005a      	lsls	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d916      	bls.n	800647a <UART_SetConfig+0x2ee>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006452:	d212      	bcs.n	800647a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f023 030f 	bic.w	r3, r3, #15
 800645c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	b29b      	uxth	r3, r3
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	b29a      	uxth	r2, r3
 800646a:	89fb      	ldrh	r3, [r7, #14]
 800646c:	4313      	orrs	r3, r2
 800646e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	89fa      	ldrh	r2, [r7, #14]
 8006476:	60da      	str	r2, [r3, #12]
 8006478:	e04e      	b.n	8006518 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	77bb      	strb	r3, [r7, #30]
 800647e:	e04b      	b.n	8006518 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006480:	7ffb      	ldrb	r3, [r7, #31]
 8006482:	2b08      	cmp	r3, #8
 8006484:	d827      	bhi.n	80064d6 <UART_SetConfig+0x34a>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x300>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064c1 	.word	0x080064c1
 8006498:	080064d7 	.word	0x080064d7
 800649c:	080064c7 	.word	0x080064c7
 80064a0:	080064d7 	.word	0x080064d7
 80064a4:	080064d7 	.word	0x080064d7
 80064a8:	080064d7 	.word	0x080064d7
 80064ac:	080064cf 	.word	0x080064cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fe f8e4 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e013      	b.n	80064e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b8:	f7fe f902 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 80064bc:	61b8      	str	r0, [r7, #24]
        break;
 80064be:	e00f      	b.n	80064e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <UART_SetConfig+0x3a4>)
 80064c2:	61bb      	str	r3, [r7, #24]
        break;
 80064c4:	e00c      	b.n	80064e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fe f863 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 80064ca:	61b8      	str	r0, [r7, #24]
        break;
 80064cc:	e008      	b.n	80064e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d2:	61bb      	str	r3, [r7, #24]
        break;
 80064d4:	e004      	b.n	80064e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	77bb      	strb	r3, [r7, #30]
        break;
 80064de:	bf00      	nop
    }

    if (pclk != 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d018      	beq.n	8006518 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	085a      	lsrs	r2, r3, #1
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	441a      	add	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b0f      	cmp	r3, #15
 80064fe:	d909      	bls.n	8006514 <UART_SetConfig+0x388>
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006506:	d205      	bcs.n	8006514 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	e001      	b.n	8006518 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006524:	7fbb      	ldrb	r3, [r7, #30]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	007a1200 	.word	0x007a1200

08006534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01a      	beq.n	800664a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006632:	d10a      	bne.n	800664a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b098      	sub	sp, #96	; 0x60
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006688:	f7fb f84e 	bl	8001728 <HAL_GetTick>
 800668c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d12e      	bne.n	80066fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f88c 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d021      	beq.n	80066fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ca:	653b      	str	r3, [r7, #80]	; 0x50
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
 80066d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e6      	bne.n	80066b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e062      	b.n	80067c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d149      	bne.n	800679c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f856 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d03c      	beq.n	800679c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	623b      	str	r3, [r7, #32]
   return(result);
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
 8006742:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e6      	bne.n	8006722 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3308      	adds	r3, #8
 800675a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	60fb      	str	r3, [r7, #12]
   return(result);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	64bb      	str	r3, [r7, #72]	; 0x48
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006774:	61fa      	str	r2, [r7, #28]
 8006776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	69b9      	ldr	r1, [r7, #24]
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	617b      	str	r3, [r7, #20]
   return(result);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e5      	bne.n	8006754 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e011      	b.n	80067c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3758      	adds	r7, #88	; 0x58
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d8:	e049      	b.n	800686e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d045      	beq.n	800686e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fa ffa1 	bl	8001728 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e048      	b.n	800688e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d031      	beq.n	800686e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d110      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2208      	movs	r2, #8
 800681e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f838 	bl	8006896 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2208      	movs	r2, #8
 800682a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e029      	b.n	800688e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006848:	d111      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f81e 	bl	8006896 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e00f      	b.n	800688e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4013      	ands	r3, r2
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	bf0c      	ite	eq
 800687e:	2301      	moveq	r3, #1
 8006880:	2300      	movne	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	429a      	cmp	r2, r3
 800688a:	d0a6      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006896:	b480      	push	{r7}
 8006898:	b095      	sub	sp, #84	; 0x54
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	643b      	str	r3, [r7, #64]	; 0x40
 80068be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e6      	bne.n	800689e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3308      	adds	r3, #8
 80068d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e5      	bne.n	80068d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006908:	2b01      	cmp	r3, #1
 800690a:	d118      	bne.n	800693e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60bb      	str	r3, [r7, #8]
   return(result);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f023 0310 	bic.w	r3, r3, #16
 8006920:	647b      	str	r3, [r7, #68]	; 0x44
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e6      	bne.n	800690c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006952:	bf00      	nop
 8006954:	3754      	adds	r7, #84	; 0x54
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <sniprintf>:
 8006960:	b40c      	push	{r2, r3}
 8006962:	b530      	push	{r4, r5, lr}
 8006964:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <sniprintf+0x64>)
 8006966:	1e0c      	subs	r4, r1, #0
 8006968:	681d      	ldr	r5, [r3, #0]
 800696a:	b09d      	sub	sp, #116	; 0x74
 800696c:	da08      	bge.n	8006980 <sniprintf+0x20>
 800696e:	238b      	movs	r3, #139	; 0x8b
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	f04f 30ff 	mov.w	r0, #4294967295
 8006976:	b01d      	add	sp, #116	; 0x74
 8006978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800697c:	b002      	add	sp, #8
 800697e:	4770      	bx	lr
 8006980:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006984:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006988:	bf14      	ite	ne
 800698a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800698e:	4623      	moveq	r3, r4
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9307      	str	r3, [sp, #28]
 8006994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006998:	9002      	str	r0, [sp, #8]
 800699a:	9006      	str	r0, [sp, #24]
 800699c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069a2:	ab21      	add	r3, sp, #132	; 0x84
 80069a4:	a902      	add	r1, sp, #8
 80069a6:	4628      	mov	r0, r5
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	f000 f993 	bl	8006cd4 <_svfiprintf_r>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	bfbc      	itt	lt
 80069b2:	238b      	movlt	r3, #139	; 0x8b
 80069b4:	602b      	strlt	r3, [r5, #0]
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	d0dd      	beq.n	8006976 <sniprintf+0x16>
 80069ba:	9b02      	ldr	r3, [sp, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e7d9      	b.n	8006976 <sniprintf+0x16>
 80069c2:	bf00      	nop
 80069c4:	20000058 	.word	0x20000058

080069c8 <memset>:
 80069c8:	4402      	add	r2, r0
 80069ca:	4603      	mov	r3, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <__errno>:
 80069d8:	4b01      	ldr	r3, [pc, #4]	; (80069e0 <__errno+0x8>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000058 	.word	0x20000058

080069e4 <__libc_init_array>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4d0d      	ldr	r5, [pc, #52]	; (8006a1c <__libc_init_array+0x38>)
 80069e8:	4c0d      	ldr	r4, [pc, #52]	; (8006a20 <__libc_init_array+0x3c>)
 80069ea:	1b64      	subs	r4, r4, r5
 80069ec:	10a4      	asrs	r4, r4, #2
 80069ee:	2600      	movs	r6, #0
 80069f0:	42a6      	cmp	r6, r4
 80069f2:	d109      	bne.n	8006a08 <__libc_init_array+0x24>
 80069f4:	4d0b      	ldr	r5, [pc, #44]	; (8006a24 <__libc_init_array+0x40>)
 80069f6:	4c0c      	ldr	r4, [pc, #48]	; (8006a28 <__libc_init_array+0x44>)
 80069f8:	f000 fc6a 	bl	80072d0 <_init>
 80069fc:	1b64      	subs	r4, r4, r5
 80069fe:	10a4      	asrs	r4, r4, #2
 8006a00:	2600      	movs	r6, #0
 8006a02:	42a6      	cmp	r6, r4
 8006a04:	d105      	bne.n	8006a12 <__libc_init_array+0x2e>
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a0c:	4798      	blx	r3
 8006a0e:	3601      	adds	r6, #1
 8006a10:	e7ee      	b.n	80069f0 <__libc_init_array+0xc>
 8006a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a16:	4798      	blx	r3
 8006a18:	3601      	adds	r6, #1
 8006a1a:	e7f2      	b.n	8006a02 <__libc_init_array+0x1e>
 8006a1c:	08007368 	.word	0x08007368
 8006a20:	08007368 	.word	0x08007368
 8006a24:	08007368 	.word	0x08007368
 8006a28:	0800736c 	.word	0x0800736c

08006a2c <__retarget_lock_acquire_recursive>:
 8006a2c:	4770      	bx	lr

08006a2e <__retarget_lock_release_recursive>:
 8006a2e:	4770      	bx	lr

08006a30 <_free_r>:
 8006a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d044      	beq.n	8006ac0 <_free_r+0x90>
 8006a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a3a:	9001      	str	r0, [sp, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a42:	bfb8      	it	lt
 8006a44:	18e4      	addlt	r4, r4, r3
 8006a46:	f000 f8df 	bl	8006c08 <__malloc_lock>
 8006a4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ac4 <_free_r+0x94>)
 8006a4c:	9801      	ldr	r0, [sp, #4]
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	b933      	cbnz	r3, 8006a60 <_free_r+0x30>
 8006a52:	6063      	str	r3, [r4, #4]
 8006a54:	6014      	str	r4, [r2, #0]
 8006a56:	b003      	add	sp, #12
 8006a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a5c:	f000 b8da 	b.w	8006c14 <__malloc_unlock>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d908      	bls.n	8006a76 <_free_r+0x46>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf01      	itttt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	1949      	addeq	r1, r1, r5
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	e7ed      	b.n	8006a52 <_free_r+0x22>
 8006a76:	461a      	mov	r2, r3
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	b10b      	cbz	r3, 8006a80 <_free_r+0x50>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d9fa      	bls.n	8006a76 <_free_r+0x46>
 8006a80:	6811      	ldr	r1, [r2, #0]
 8006a82:	1855      	adds	r5, r2, r1
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d10b      	bne.n	8006aa0 <_free_r+0x70>
 8006a88:	6824      	ldr	r4, [r4, #0]
 8006a8a:	4421      	add	r1, r4
 8006a8c:	1854      	adds	r4, r2, r1
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	d1e0      	bne.n	8006a56 <_free_r+0x26>
 8006a94:	681c      	ldr	r4, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	6053      	str	r3, [r2, #4]
 8006a9a:	440c      	add	r4, r1
 8006a9c:	6014      	str	r4, [r2, #0]
 8006a9e:	e7da      	b.n	8006a56 <_free_r+0x26>
 8006aa0:	d902      	bls.n	8006aa8 <_free_r+0x78>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	6003      	str	r3, [r0, #0]
 8006aa6:	e7d6      	b.n	8006a56 <_free_r+0x26>
 8006aa8:	6825      	ldr	r5, [r4, #0]
 8006aaa:	1961      	adds	r1, r4, r5
 8006aac:	428b      	cmp	r3, r1
 8006aae:	bf04      	itt	eq
 8006ab0:	6819      	ldreq	r1, [r3, #0]
 8006ab2:	685b      	ldreq	r3, [r3, #4]
 8006ab4:	6063      	str	r3, [r4, #4]
 8006ab6:	bf04      	itt	eq
 8006ab8:	1949      	addeq	r1, r1, r5
 8006aba:	6021      	streq	r1, [r4, #0]
 8006abc:	6054      	str	r4, [r2, #4]
 8006abe:	e7ca      	b.n	8006a56 <_free_r+0x26>
 8006ac0:	b003      	add	sp, #12
 8006ac2:	bd30      	pop	{r4, r5, pc}
 8006ac4:	200004c0 	.word	0x200004c0

08006ac8 <sbrk_aligned>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4e0e      	ldr	r6, [pc, #56]	; (8006b04 <sbrk_aligned+0x3c>)
 8006acc:	460c      	mov	r4, r1
 8006ace:	6831      	ldr	r1, [r6, #0]
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	b911      	cbnz	r1, 8006ada <sbrk_aligned+0x12>
 8006ad4:	f000 fba6 	bl	8007224 <_sbrk_r>
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	4621      	mov	r1, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 fba1 	bl	8007224 <_sbrk_r>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	d00a      	beq.n	8006afc <sbrk_aligned+0x34>
 8006ae6:	1cc4      	adds	r4, r0, #3
 8006ae8:	f024 0403 	bic.w	r4, r4, #3
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d007      	beq.n	8006b00 <sbrk_aligned+0x38>
 8006af0:	1a21      	subs	r1, r4, r0
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 fb96 	bl	8007224 <_sbrk_r>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d101      	bne.n	8006b00 <sbrk_aligned+0x38>
 8006afc:	f04f 34ff 	mov.w	r4, #4294967295
 8006b00:	4620      	mov	r0, r4
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	200004c4 	.word	0x200004c4

08006b08 <_malloc_r>:
 8006b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b0c:	1ccd      	adds	r5, r1, #3
 8006b0e:	f025 0503 	bic.w	r5, r5, #3
 8006b12:	3508      	adds	r5, #8
 8006b14:	2d0c      	cmp	r5, #12
 8006b16:	bf38      	it	cc
 8006b18:	250c      	movcc	r5, #12
 8006b1a:	2d00      	cmp	r5, #0
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	db01      	blt.n	8006b24 <_malloc_r+0x1c>
 8006b20:	42a9      	cmp	r1, r5
 8006b22:	d905      	bls.n	8006b30 <_malloc_r+0x28>
 8006b24:	230c      	movs	r3, #12
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	2600      	movs	r6, #0
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c04 <_malloc_r+0xfc>
 8006b34:	f000 f868 	bl	8006c08 <__malloc_lock>
 8006b38:	f8d8 3000 	ldr.w	r3, [r8]
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	bb5c      	cbnz	r4, 8006b98 <_malloc_r+0x90>
 8006b40:	4629      	mov	r1, r5
 8006b42:	4638      	mov	r0, r7
 8006b44:	f7ff ffc0 	bl	8006ac8 <sbrk_aligned>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	d155      	bne.n	8006bfa <_malloc_r+0xf2>
 8006b4e:	f8d8 4000 	ldr.w	r4, [r8]
 8006b52:	4626      	mov	r6, r4
 8006b54:	2e00      	cmp	r6, #0
 8006b56:	d145      	bne.n	8006be4 <_malloc_r+0xdc>
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	d048      	beq.n	8006bee <_malloc_r+0xe6>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4638      	mov	r0, r7
 8006b62:	eb04 0903 	add.w	r9, r4, r3
 8006b66:	f000 fb5d 	bl	8007224 <_sbrk_r>
 8006b6a:	4581      	cmp	r9, r0
 8006b6c:	d13f      	bne.n	8006bee <_malloc_r+0xe6>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	1a6d      	subs	r5, r5, r1
 8006b72:	4629      	mov	r1, r5
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ffa7 	bl	8006ac8 <sbrk_aligned>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d037      	beq.n	8006bee <_malloc_r+0xe6>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	442b      	add	r3, r5
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	f8d8 3000 	ldr.w	r3, [r8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d038      	beq.n	8006bfe <_malloc_r+0xf6>
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	42a2      	cmp	r2, r4
 8006b90:	d12b      	bne.n	8006bea <_malloc_r+0xe2>
 8006b92:	2200      	movs	r2, #0
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	e00f      	b.n	8006bb8 <_malloc_r+0xb0>
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	1b52      	subs	r2, r2, r5
 8006b9c:	d41f      	bmi.n	8006bde <_malloc_r+0xd6>
 8006b9e:	2a0b      	cmp	r2, #11
 8006ba0:	d917      	bls.n	8006bd2 <_malloc_r+0xca>
 8006ba2:	1961      	adds	r1, r4, r5
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	6025      	str	r5, [r4, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	6059      	strne	r1, [r3, #4]
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	bf08      	it	eq
 8006bb0:	f8c8 1000 	streq.w	r1, [r8]
 8006bb4:	5162      	str	r2, [r4, r5]
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f104 060b 	add.w	r6, r4, #11
 8006bbe:	f000 f829 	bl	8006c14 <__malloc_unlock>
 8006bc2:	f026 0607 	bic.w	r6, r6, #7
 8006bc6:	1d23      	adds	r3, r4, #4
 8006bc8:	1af2      	subs	r2, r6, r3
 8006bca:	d0ae      	beq.n	8006b2a <_malloc_r+0x22>
 8006bcc:	1b9b      	subs	r3, r3, r6
 8006bce:	50a3      	str	r3, [r4, r2]
 8006bd0:	e7ab      	b.n	8006b2a <_malloc_r+0x22>
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	6862      	ldr	r2, [r4, #4]
 8006bd6:	d1dd      	bne.n	8006b94 <_malloc_r+0x8c>
 8006bd8:	f8c8 2000 	str.w	r2, [r8]
 8006bdc:	e7ec      	b.n	8006bb8 <_malloc_r+0xb0>
 8006bde:	4623      	mov	r3, r4
 8006be0:	6864      	ldr	r4, [r4, #4]
 8006be2:	e7ac      	b.n	8006b3e <_malloc_r+0x36>
 8006be4:	4634      	mov	r4, r6
 8006be6:	6876      	ldr	r6, [r6, #4]
 8006be8:	e7b4      	b.n	8006b54 <_malloc_r+0x4c>
 8006bea:	4613      	mov	r3, r2
 8006bec:	e7cc      	b.n	8006b88 <_malloc_r+0x80>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f000 f80e 	bl	8006c14 <__malloc_unlock>
 8006bf8:	e797      	b.n	8006b2a <_malloc_r+0x22>
 8006bfa:	6025      	str	r5, [r4, #0]
 8006bfc:	e7dc      	b.n	8006bb8 <_malloc_r+0xb0>
 8006bfe:	605b      	str	r3, [r3, #4]
 8006c00:	deff      	udf	#255	; 0xff
 8006c02:	bf00      	nop
 8006c04:	200004c0 	.word	0x200004c0

08006c08 <__malloc_lock>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__malloc_lock+0x8>)
 8006c0a:	f7ff bf0f 	b.w	8006a2c <__retarget_lock_acquire_recursive>
 8006c0e:	bf00      	nop
 8006c10:	200004bc 	.word	0x200004bc

08006c14 <__malloc_unlock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__malloc_unlock+0x8>)
 8006c16:	f7ff bf0a 	b.w	8006a2e <__retarget_lock_release_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	200004bc 	.word	0x200004bc

08006c20 <__ssputs_r>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	688e      	ldr	r6, [r1, #8]
 8006c26:	461f      	mov	r7, r3
 8006c28:	42be      	cmp	r6, r7
 8006c2a:	680b      	ldr	r3, [r1, #0]
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4690      	mov	r8, r2
 8006c32:	d82c      	bhi.n	8006c8e <__ssputs_r+0x6e>
 8006c34:	898a      	ldrh	r2, [r1, #12]
 8006c36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c3a:	d026      	beq.n	8006c8a <__ssputs_r+0x6a>
 8006c3c:	6965      	ldr	r5, [r4, #20]
 8006c3e:	6909      	ldr	r1, [r1, #16]
 8006c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c44:	eba3 0901 	sub.w	r9, r3, r1
 8006c48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c4c:	1c7b      	adds	r3, r7, #1
 8006c4e:	444b      	add	r3, r9
 8006c50:	106d      	asrs	r5, r5, #1
 8006c52:	429d      	cmp	r5, r3
 8006c54:	bf38      	it	cc
 8006c56:	461d      	movcc	r5, r3
 8006c58:	0553      	lsls	r3, r2, #21
 8006c5a:	d527      	bpl.n	8006cac <__ssputs_r+0x8c>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7ff ff53 	bl	8006b08 <_malloc_r>
 8006c62:	4606      	mov	r6, r0
 8006c64:	b360      	cbz	r0, 8006cc0 <__ssputs_r+0xa0>
 8006c66:	6921      	ldr	r1, [r4, #16]
 8006c68:	464a      	mov	r2, r9
 8006c6a:	f000 faeb 	bl	8007244 <memcpy>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	6126      	str	r6, [r4, #16]
 8006c7c:	6165      	str	r5, [r4, #20]
 8006c7e:	444e      	add	r6, r9
 8006c80:	eba5 0509 	sub.w	r5, r5, r9
 8006c84:	6026      	str	r6, [r4, #0]
 8006c86:	60a5      	str	r5, [r4, #8]
 8006c88:	463e      	mov	r6, r7
 8006c8a:	42be      	cmp	r6, r7
 8006c8c:	d900      	bls.n	8006c90 <__ssputs_r+0x70>
 8006c8e:	463e      	mov	r6, r7
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	4632      	mov	r2, r6
 8006c94:	4641      	mov	r1, r8
 8006c96:	f000 faab 	bl	80071f0 <memmove>
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	1b9b      	subs	r3, r3, r6
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	4433      	add	r3, r6
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	462a      	mov	r2, r5
 8006cae:	f000 fad7 	bl	8007260 <_realloc_r>
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d1e0      	bne.n	8006c7a <__ssputs_r+0x5a>
 8006cb8:	6921      	ldr	r1, [r4, #16]
 8006cba:	4650      	mov	r0, sl
 8006cbc:	f7ff feb8 	bl	8006a30 <_free_r>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	f8ca 3000 	str.w	r3, [sl]
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd2:	e7e9      	b.n	8006ca8 <__ssputs_r+0x88>

08006cd4 <_svfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	4698      	mov	r8, r3
 8006cda:	898b      	ldrh	r3, [r1, #12]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	b09d      	sub	sp, #116	; 0x74
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	d50e      	bpl.n	8006d06 <_svfiprintf_r+0x32>
 8006ce8:	690b      	ldr	r3, [r1, #16]
 8006cea:	b963      	cbnz	r3, 8006d06 <_svfiprintf_r+0x32>
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	f7ff ff0b 	bl	8006b08 <_malloc_r>
 8006cf2:	6028      	str	r0, [r5, #0]
 8006cf4:	6128      	str	r0, [r5, #16]
 8006cf6:	b920      	cbnz	r0, 8006d02 <_svfiprintf_r+0x2e>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	e0d0      	b.n	8006ea4 <_svfiprintf_r+0x1d0>
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	616b      	str	r3, [r5, #20]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ebc <_svfiprintf_r+0x1e8>
 8006d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d1e:	f04f 0901 	mov.w	r9, #1
 8006d22:	4623      	mov	r3, r4
 8006d24:	469a      	mov	sl, r3
 8006d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2a:	b10a      	cbz	r2, 8006d30 <_svfiprintf_r+0x5c>
 8006d2c:	2a25      	cmp	r2, #37	; 0x25
 8006d2e:	d1f9      	bne.n	8006d24 <_svfiprintf_r+0x50>
 8006d30:	ebba 0b04 	subs.w	fp, sl, r4
 8006d34:	d00b      	beq.n	8006d4e <_svfiprintf_r+0x7a>
 8006d36:	465b      	mov	r3, fp
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff ff6f 	bl	8006c20 <__ssputs_r>
 8006d42:	3001      	adds	r0, #1
 8006d44:	f000 80a9 	beq.w	8006e9a <_svfiprintf_r+0x1c6>
 8006d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4a:	445a      	add	r2, fp
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a1 	beq.w	8006e9a <_svfiprintf_r+0x1c6>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d62:	f10a 0a01 	add.w	sl, sl, #1
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d70:	4654      	mov	r4, sl
 8006d72:	2205      	movs	r2, #5
 8006d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d78:	4850      	ldr	r0, [pc, #320]	; (8006ebc <_svfiprintf_r+0x1e8>)
 8006d7a:	f7f9 fa39 	bl	80001f0 <memchr>
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	b9d8      	cbnz	r0, 8006dba <_svfiprintf_r+0xe6>
 8006d82:	06d0      	lsls	r0, r2, #27
 8006d84:	bf44      	itt	mi
 8006d86:	2320      	movmi	r3, #32
 8006d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8c:	0711      	lsls	r1, r2, #28
 8006d8e:	bf44      	itt	mi
 8006d90:	232b      	movmi	r3, #43	; 0x2b
 8006d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9c:	d015      	beq.n	8006dca <_svfiprintf_r+0xf6>
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	4654      	mov	r4, sl
 8006da2:	2000      	movs	r0, #0
 8006da4:	f04f 0c0a 	mov.w	ip, #10
 8006da8:	4621      	mov	r1, r4
 8006daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dae:	3b30      	subs	r3, #48	; 0x30
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d94d      	bls.n	8006e50 <_svfiprintf_r+0x17c>
 8006db4:	b1b0      	cbz	r0, 8006de4 <_svfiprintf_r+0x110>
 8006db6:	9207      	str	r2, [sp, #28]
 8006db8:	e014      	b.n	8006de4 <_svfiprintf_r+0x110>
 8006dba:	eba0 0308 	sub.w	r3, r0, r8
 8006dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	46a2      	mov	sl, r4
 8006dc8:	e7d2      	b.n	8006d70 <_svfiprintf_r+0x9c>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d19      	adds	r1, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9103      	str	r1, [sp, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbb      	ittet	lt
 8006dd6:	425b      	neglt	r3, r3
 8006dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ddc:	9307      	strge	r3, [sp, #28]
 8006dde:	9307      	strlt	r3, [sp, #28]
 8006de0:	bfb8      	it	lt
 8006de2:	9204      	strlt	r2, [sp, #16]
 8006de4:	7823      	ldrb	r3, [r4, #0]
 8006de6:	2b2e      	cmp	r3, #46	; 0x2e
 8006de8:	d10c      	bne.n	8006e04 <_svfiprintf_r+0x130>
 8006dea:	7863      	ldrb	r3, [r4, #1]
 8006dec:	2b2a      	cmp	r3, #42	; 0x2a
 8006dee:	d134      	bne.n	8006e5a <_svfiprintf_r+0x186>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	1d1a      	adds	r2, r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	9203      	str	r2, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e00:	3402      	adds	r4, #2
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ecc <_svfiprintf_r+0x1f8>
 8006e08:	7821      	ldrb	r1, [r4, #0]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	f7f9 f9ef 	bl	80001f0 <memchr>
 8006e12:	b138      	cbz	r0, 8006e24 <_svfiprintf_r+0x150>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	eba0 000a 	sub.w	r0, r0, sl
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	4082      	lsls	r2, r0
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	3401      	adds	r4, #1
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e28:	4825      	ldr	r0, [pc, #148]	; (8006ec0 <_svfiprintf_r+0x1ec>)
 8006e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e2e:	2206      	movs	r2, #6
 8006e30:	f7f9 f9de 	bl	80001f0 <memchr>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d038      	beq.n	8006eaa <_svfiprintf_r+0x1d6>
 8006e38:	4b22      	ldr	r3, [pc, #136]	; (8006ec4 <_svfiprintf_r+0x1f0>)
 8006e3a:	bb1b      	cbnz	r3, 8006e84 <_svfiprintf_r+0x1b0>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	3307      	adds	r3, #7
 8006e40:	f023 0307 	bic.w	r3, r3, #7
 8006e44:	3308      	adds	r3, #8
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	4433      	add	r3, r6
 8006e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4e:	e768      	b.n	8006d22 <_svfiprintf_r+0x4e>
 8006e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e54:	460c      	mov	r4, r1
 8006e56:	2001      	movs	r0, #1
 8006e58:	e7a6      	b.n	8006da8 <_svfiprintf_r+0xd4>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	3401      	adds	r4, #1
 8006e5e:	9305      	str	r3, [sp, #20]
 8006e60:	4619      	mov	r1, r3
 8006e62:	f04f 0c0a 	mov.w	ip, #10
 8006e66:	4620      	mov	r0, r4
 8006e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6c:	3a30      	subs	r2, #48	; 0x30
 8006e6e:	2a09      	cmp	r2, #9
 8006e70:	d903      	bls.n	8006e7a <_svfiprintf_r+0x1a6>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0c6      	beq.n	8006e04 <_svfiprintf_r+0x130>
 8006e76:	9105      	str	r1, [sp, #20]
 8006e78:	e7c4      	b.n	8006e04 <_svfiprintf_r+0x130>
 8006e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e7e:	4604      	mov	r4, r0
 8006e80:	2301      	movs	r3, #1
 8006e82:	e7f0      	b.n	8006e66 <_svfiprintf_r+0x192>
 8006e84:	ab03      	add	r3, sp, #12
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	462a      	mov	r2, r5
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <_svfiprintf_r+0x1f4>)
 8006e8c:	a904      	add	r1, sp, #16
 8006e8e:	4638      	mov	r0, r7
 8006e90:	f3af 8000 	nop.w
 8006e94:	1c42      	adds	r2, r0, #1
 8006e96:	4606      	mov	r6, r0
 8006e98:	d1d6      	bne.n	8006e48 <_svfiprintf_r+0x174>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	065b      	lsls	r3, r3, #25
 8006e9e:	f53f af2d 	bmi.w	8006cfc <_svfiprintf_r+0x28>
 8006ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea4:	b01d      	add	sp, #116	; 0x74
 8006ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eaa:	ab03      	add	r3, sp, #12
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <_svfiprintf_r+0x1f4>)
 8006eb2:	a904      	add	r1, sp, #16
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f000 f879 	bl	8006fac <_printf_i>
 8006eba:	e7eb      	b.n	8006e94 <_svfiprintf_r+0x1c0>
 8006ebc:	08007334 	.word	0x08007334
 8006ec0:	0800733e 	.word	0x0800733e
 8006ec4:	00000000 	.word	0x00000000
 8006ec8:	08006c21 	.word	0x08006c21
 8006ecc:	0800733a 	.word	0x0800733a

08006ed0 <_printf_common>:
 8006ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	4699      	mov	r9, r3
 8006ed8:	688a      	ldr	r2, [r1, #8]
 8006eda:	690b      	ldr	r3, [r1, #16]
 8006edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	bfb8      	it	lt
 8006ee4:	4613      	movlt	r3, r2
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eec:	4607      	mov	r7, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	b10a      	cbz	r2, 8006ef6 <_printf_common+0x26>
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	6033      	str	r3, [r6, #0]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	0699      	lsls	r1, r3, #26
 8006efa:	bf42      	ittt	mi
 8006efc:	6833      	ldrmi	r3, [r6, #0]
 8006efe:	3302      	addmi	r3, #2
 8006f00:	6033      	strmi	r3, [r6, #0]
 8006f02:	6825      	ldr	r5, [r4, #0]
 8006f04:	f015 0506 	ands.w	r5, r5, #6
 8006f08:	d106      	bne.n	8006f18 <_printf_common+0x48>
 8006f0a:	f104 0a19 	add.w	sl, r4, #25
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	6832      	ldr	r2, [r6, #0]
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	dc26      	bgt.n	8006f66 <_printf_common+0x96>
 8006f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f1c:	1e13      	subs	r3, r2, #0
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	bf18      	it	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	0692      	lsls	r2, r2, #26
 8006f26:	d42b      	bmi.n	8006f80 <_printf_common+0xb0>
 8006f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	4638      	mov	r0, r7
 8006f30:	47c0      	blx	r8
 8006f32:	3001      	adds	r0, #1
 8006f34:	d01e      	beq.n	8006f74 <_printf_common+0xa4>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	6922      	ldr	r2, [r4, #16]
 8006f3a:	f003 0306 	and.w	r3, r3, #6
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	bf02      	ittt	eq
 8006f42:	68e5      	ldreq	r5, [r4, #12]
 8006f44:	6833      	ldreq	r3, [r6, #0]
 8006f46:	1aed      	subeq	r5, r5, r3
 8006f48:	68a3      	ldr	r3, [r4, #8]
 8006f4a:	bf0c      	ite	eq
 8006f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f50:	2500      	movne	r5, #0
 8006f52:	4293      	cmp	r3, r2
 8006f54:	bfc4      	itt	gt
 8006f56:	1a9b      	subgt	r3, r3, r2
 8006f58:	18ed      	addgt	r5, r5, r3
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	341a      	adds	r4, #26
 8006f5e:	42b5      	cmp	r5, r6
 8006f60:	d11a      	bne.n	8006f98 <_printf_common+0xc8>
 8006f62:	2000      	movs	r0, #0
 8006f64:	e008      	b.n	8006f78 <_printf_common+0xa8>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4652      	mov	r2, sl
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	47c0      	blx	r8
 8006f70:	3001      	adds	r0, #1
 8006f72:	d103      	bne.n	8006f7c <_printf_common+0xac>
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295
 8006f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7c:	3501      	adds	r5, #1
 8006f7e:	e7c6      	b.n	8006f0e <_printf_common+0x3e>
 8006f80:	18e1      	adds	r1, r4, r3
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	2030      	movs	r0, #48	; 0x30
 8006f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f8a:	4422      	add	r2, r4
 8006f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f94:	3302      	adds	r3, #2
 8006f96:	e7c7      	b.n	8006f28 <_printf_common+0x58>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	47c0      	blx	r8
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d0e6      	beq.n	8006f74 <_printf_common+0xa4>
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7d9      	b.n	8006f5e <_printf_common+0x8e>
	...

08006fac <_printf_i>:
 8006fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	7e0f      	ldrb	r7, [r1, #24]
 8006fb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fb4:	2f78      	cmp	r7, #120	; 0x78
 8006fb6:	4691      	mov	r9, r2
 8006fb8:	4680      	mov	r8, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	469a      	mov	sl, r3
 8006fbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fc2:	d807      	bhi.n	8006fd4 <_printf_i+0x28>
 8006fc4:	2f62      	cmp	r7, #98	; 0x62
 8006fc6:	d80a      	bhi.n	8006fde <_printf_i+0x32>
 8006fc8:	2f00      	cmp	r7, #0
 8006fca:	f000 80d4 	beq.w	8007176 <_printf_i+0x1ca>
 8006fce:	2f58      	cmp	r7, #88	; 0x58
 8006fd0:	f000 80c0 	beq.w	8007154 <_printf_i+0x1a8>
 8006fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fdc:	e03a      	b.n	8007054 <_printf_i+0xa8>
 8006fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fe2:	2b15      	cmp	r3, #21
 8006fe4:	d8f6      	bhi.n	8006fd4 <_printf_i+0x28>
 8006fe6:	a101      	add	r1, pc, #4	; (adr r1, 8006fec <_printf_i+0x40>)
 8006fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fec:	08007045 	.word	0x08007045
 8006ff0:	08007059 	.word	0x08007059
 8006ff4:	08006fd5 	.word	0x08006fd5
 8006ff8:	08006fd5 	.word	0x08006fd5
 8006ffc:	08006fd5 	.word	0x08006fd5
 8007000:	08006fd5 	.word	0x08006fd5
 8007004:	08007059 	.word	0x08007059
 8007008:	08006fd5 	.word	0x08006fd5
 800700c:	08006fd5 	.word	0x08006fd5
 8007010:	08006fd5 	.word	0x08006fd5
 8007014:	08006fd5 	.word	0x08006fd5
 8007018:	0800715d 	.word	0x0800715d
 800701c:	08007085 	.word	0x08007085
 8007020:	08007117 	.word	0x08007117
 8007024:	08006fd5 	.word	0x08006fd5
 8007028:	08006fd5 	.word	0x08006fd5
 800702c:	0800717f 	.word	0x0800717f
 8007030:	08006fd5 	.word	0x08006fd5
 8007034:	08007085 	.word	0x08007085
 8007038:	08006fd5 	.word	0x08006fd5
 800703c:	08006fd5 	.word	0x08006fd5
 8007040:	0800711f 	.word	0x0800711f
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	1d1a      	adds	r2, r3, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	602a      	str	r2, [r5, #0]
 800704c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007054:	2301      	movs	r3, #1
 8007056:	e09f      	b.n	8007198 <_printf_i+0x1ec>
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	0607      	lsls	r7, r0, #24
 800705e:	f103 0104 	add.w	r1, r3, #4
 8007062:	6029      	str	r1, [r5, #0]
 8007064:	d501      	bpl.n	800706a <_printf_i+0xbe>
 8007066:	681e      	ldr	r6, [r3, #0]
 8007068:	e003      	b.n	8007072 <_printf_i+0xc6>
 800706a:	0646      	lsls	r6, r0, #25
 800706c:	d5fb      	bpl.n	8007066 <_printf_i+0xba>
 800706e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007072:	2e00      	cmp	r6, #0
 8007074:	da03      	bge.n	800707e <_printf_i+0xd2>
 8007076:	232d      	movs	r3, #45	; 0x2d
 8007078:	4276      	negs	r6, r6
 800707a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707e:	485a      	ldr	r0, [pc, #360]	; (80071e8 <_printf_i+0x23c>)
 8007080:	230a      	movs	r3, #10
 8007082:	e012      	b.n	80070aa <_printf_i+0xfe>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	6820      	ldr	r0, [r4, #0]
 8007088:	1d19      	adds	r1, r3, #4
 800708a:	6029      	str	r1, [r5, #0]
 800708c:	0605      	lsls	r5, r0, #24
 800708e:	d501      	bpl.n	8007094 <_printf_i+0xe8>
 8007090:	681e      	ldr	r6, [r3, #0]
 8007092:	e002      	b.n	800709a <_printf_i+0xee>
 8007094:	0641      	lsls	r1, r0, #25
 8007096:	d5fb      	bpl.n	8007090 <_printf_i+0xe4>
 8007098:	881e      	ldrh	r6, [r3, #0]
 800709a:	4853      	ldr	r0, [pc, #332]	; (80071e8 <_printf_i+0x23c>)
 800709c:	2f6f      	cmp	r7, #111	; 0x6f
 800709e:	bf0c      	ite	eq
 80070a0:	2308      	moveq	r3, #8
 80070a2:	230a      	movne	r3, #10
 80070a4:	2100      	movs	r1, #0
 80070a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070aa:	6865      	ldr	r5, [r4, #4]
 80070ac:	60a5      	str	r5, [r4, #8]
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	bfa2      	ittt	ge
 80070b2:	6821      	ldrge	r1, [r4, #0]
 80070b4:	f021 0104 	bicge.w	r1, r1, #4
 80070b8:	6021      	strge	r1, [r4, #0]
 80070ba:	b90e      	cbnz	r6, 80070c0 <_printf_i+0x114>
 80070bc:	2d00      	cmp	r5, #0
 80070be:	d04b      	beq.n	8007158 <_printf_i+0x1ac>
 80070c0:	4615      	mov	r5, r2
 80070c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80070c6:	fb03 6711 	mls	r7, r3, r1, r6
 80070ca:	5dc7      	ldrb	r7, [r0, r7]
 80070cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d0:	4637      	mov	r7, r6
 80070d2:	42bb      	cmp	r3, r7
 80070d4:	460e      	mov	r6, r1
 80070d6:	d9f4      	bls.n	80070c2 <_printf_i+0x116>
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d10b      	bne.n	80070f4 <_printf_i+0x148>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	07de      	lsls	r6, r3, #31
 80070e0:	d508      	bpl.n	80070f4 <_printf_i+0x148>
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	6861      	ldr	r1, [r4, #4]
 80070e6:	4299      	cmp	r1, r3
 80070e8:	bfde      	ittt	le
 80070ea:	2330      	movle	r3, #48	; 0x30
 80070ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070f4:	1b52      	subs	r2, r2, r5
 80070f6:	6122      	str	r2, [r4, #16]
 80070f8:	f8cd a000 	str.w	sl, [sp]
 80070fc:	464b      	mov	r3, r9
 80070fe:	aa03      	add	r2, sp, #12
 8007100:	4621      	mov	r1, r4
 8007102:	4640      	mov	r0, r8
 8007104:	f7ff fee4 	bl	8006ed0 <_printf_common>
 8007108:	3001      	adds	r0, #1
 800710a:	d14a      	bne.n	80071a2 <_printf_i+0x1f6>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	b004      	add	sp, #16
 8007112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f043 0320 	orr.w	r3, r3, #32
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	4833      	ldr	r0, [pc, #204]	; (80071ec <_printf_i+0x240>)
 8007120:	2778      	movs	r7, #120	; 0x78
 8007122:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	6829      	ldr	r1, [r5, #0]
 800712a:	061f      	lsls	r7, r3, #24
 800712c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007130:	d402      	bmi.n	8007138 <_printf_i+0x18c>
 8007132:	065f      	lsls	r7, r3, #25
 8007134:	bf48      	it	mi
 8007136:	b2b6      	uxthmi	r6, r6
 8007138:	07df      	lsls	r7, r3, #31
 800713a:	bf48      	it	mi
 800713c:	f043 0320 	orrmi.w	r3, r3, #32
 8007140:	6029      	str	r1, [r5, #0]
 8007142:	bf48      	it	mi
 8007144:	6023      	strmi	r3, [r4, #0]
 8007146:	b91e      	cbnz	r6, 8007150 <_printf_i+0x1a4>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	f023 0320 	bic.w	r3, r3, #32
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	2310      	movs	r3, #16
 8007152:	e7a7      	b.n	80070a4 <_printf_i+0xf8>
 8007154:	4824      	ldr	r0, [pc, #144]	; (80071e8 <_printf_i+0x23c>)
 8007156:	e7e4      	b.n	8007122 <_printf_i+0x176>
 8007158:	4615      	mov	r5, r2
 800715a:	e7bd      	b.n	80070d8 <_printf_i+0x12c>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	6826      	ldr	r6, [r4, #0]
 8007160:	6961      	ldr	r1, [r4, #20]
 8007162:	1d18      	adds	r0, r3, #4
 8007164:	6028      	str	r0, [r5, #0]
 8007166:	0635      	lsls	r5, r6, #24
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	d501      	bpl.n	8007170 <_printf_i+0x1c4>
 800716c:	6019      	str	r1, [r3, #0]
 800716e:	e002      	b.n	8007176 <_printf_i+0x1ca>
 8007170:	0670      	lsls	r0, r6, #25
 8007172:	d5fb      	bpl.n	800716c <_printf_i+0x1c0>
 8007174:	8019      	strh	r1, [r3, #0]
 8007176:	2300      	movs	r3, #0
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	4615      	mov	r5, r2
 800717c:	e7bc      	b.n	80070f8 <_printf_i+0x14c>
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	1d1a      	adds	r2, r3, #4
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	681d      	ldr	r5, [r3, #0]
 8007186:	6862      	ldr	r2, [r4, #4]
 8007188:	2100      	movs	r1, #0
 800718a:	4628      	mov	r0, r5
 800718c:	f7f9 f830 	bl	80001f0 <memchr>
 8007190:	b108      	cbz	r0, 8007196 <_printf_i+0x1ea>
 8007192:	1b40      	subs	r0, r0, r5
 8007194:	6060      	str	r0, [r4, #4]
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	2300      	movs	r3, #0
 800719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a0:	e7aa      	b.n	80070f8 <_printf_i+0x14c>
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4649      	mov	r1, r9
 80071a8:	4640      	mov	r0, r8
 80071aa:	47d0      	blx	sl
 80071ac:	3001      	adds	r0, #1
 80071ae:	d0ad      	beq.n	800710c <_printf_i+0x160>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	079b      	lsls	r3, r3, #30
 80071b4:	d413      	bmi.n	80071de <_printf_i+0x232>
 80071b6:	68e0      	ldr	r0, [r4, #12]
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	4298      	cmp	r0, r3
 80071bc:	bfb8      	it	lt
 80071be:	4618      	movlt	r0, r3
 80071c0:	e7a6      	b.n	8007110 <_printf_i+0x164>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4632      	mov	r2, r6
 80071c6:	4649      	mov	r1, r9
 80071c8:	4640      	mov	r0, r8
 80071ca:	47d0      	blx	sl
 80071cc:	3001      	adds	r0, #1
 80071ce:	d09d      	beq.n	800710c <_printf_i+0x160>
 80071d0:	3501      	adds	r5, #1
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	9903      	ldr	r1, [sp, #12]
 80071d6:	1a5b      	subs	r3, r3, r1
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dcf2      	bgt.n	80071c2 <_printf_i+0x216>
 80071dc:	e7eb      	b.n	80071b6 <_printf_i+0x20a>
 80071de:	2500      	movs	r5, #0
 80071e0:	f104 0619 	add.w	r6, r4, #25
 80071e4:	e7f5      	b.n	80071d2 <_printf_i+0x226>
 80071e6:	bf00      	nop
 80071e8:	08007345 	.word	0x08007345
 80071ec:	08007356 	.word	0x08007356

080071f0 <memmove>:
 80071f0:	4288      	cmp	r0, r1
 80071f2:	b510      	push	{r4, lr}
 80071f4:	eb01 0402 	add.w	r4, r1, r2
 80071f8:	d902      	bls.n	8007200 <memmove+0x10>
 80071fa:	4284      	cmp	r4, r0
 80071fc:	4623      	mov	r3, r4
 80071fe:	d807      	bhi.n	8007210 <memmove+0x20>
 8007200:	1e43      	subs	r3, r0, #1
 8007202:	42a1      	cmp	r1, r4
 8007204:	d008      	beq.n	8007218 <memmove+0x28>
 8007206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800720e:	e7f8      	b.n	8007202 <memmove+0x12>
 8007210:	4402      	add	r2, r0
 8007212:	4601      	mov	r1, r0
 8007214:	428a      	cmp	r2, r1
 8007216:	d100      	bne.n	800721a <memmove+0x2a>
 8007218:	bd10      	pop	{r4, pc}
 800721a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800721e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007222:	e7f7      	b.n	8007214 <memmove+0x24>

08007224 <_sbrk_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d06      	ldr	r5, [pc, #24]	; (8007240 <_sbrk_r+0x1c>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	f7f9 fed6 	bl	8000fe0 <_sbrk>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_sbrk_r+0x1a>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_sbrk_r+0x1a>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	200004b8 	.word	0x200004b8

08007244 <memcpy>:
 8007244:	440a      	add	r2, r1
 8007246:	4291      	cmp	r1, r2
 8007248:	f100 33ff 	add.w	r3, r0, #4294967295
 800724c:	d100      	bne.n	8007250 <memcpy+0xc>
 800724e:	4770      	bx	lr
 8007250:	b510      	push	{r4, lr}
 8007252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800725a:	4291      	cmp	r1, r2
 800725c:	d1f9      	bne.n	8007252 <memcpy+0xe>
 800725e:	bd10      	pop	{r4, pc}

08007260 <_realloc_r>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	4680      	mov	r8, r0
 8007266:	4614      	mov	r4, r2
 8007268:	460e      	mov	r6, r1
 800726a:	b921      	cbnz	r1, 8007276 <_realloc_r+0x16>
 800726c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	4611      	mov	r1, r2
 8007272:	f7ff bc49 	b.w	8006b08 <_malloc_r>
 8007276:	b92a      	cbnz	r2, 8007284 <_realloc_r+0x24>
 8007278:	f7ff fbda 	bl	8006a30 <_free_r>
 800727c:	4625      	mov	r5, r4
 800727e:	4628      	mov	r0, r5
 8007280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007284:	f000 f81b 	bl	80072be <_malloc_usable_size_r>
 8007288:	4284      	cmp	r4, r0
 800728a:	4607      	mov	r7, r0
 800728c:	d802      	bhi.n	8007294 <_realloc_r+0x34>
 800728e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007292:	d812      	bhi.n	80072ba <_realloc_r+0x5a>
 8007294:	4621      	mov	r1, r4
 8007296:	4640      	mov	r0, r8
 8007298:	f7ff fc36 	bl	8006b08 <_malloc_r>
 800729c:	4605      	mov	r5, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0ed      	beq.n	800727e <_realloc_r+0x1e>
 80072a2:	42bc      	cmp	r4, r7
 80072a4:	4622      	mov	r2, r4
 80072a6:	4631      	mov	r1, r6
 80072a8:	bf28      	it	cs
 80072aa:	463a      	movcs	r2, r7
 80072ac:	f7ff ffca 	bl	8007244 <memcpy>
 80072b0:	4631      	mov	r1, r6
 80072b2:	4640      	mov	r0, r8
 80072b4:	f7ff fbbc 	bl	8006a30 <_free_r>
 80072b8:	e7e1      	b.n	800727e <_realloc_r+0x1e>
 80072ba:	4635      	mov	r5, r6
 80072bc:	e7df      	b.n	800727e <_realloc_r+0x1e>

080072be <_malloc_usable_size_r>:
 80072be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c2:	1f18      	subs	r0, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfbc      	itt	lt
 80072c8:	580b      	ldrlt	r3, [r1, r0]
 80072ca:	18c0      	addlt	r0, r0, r3
 80072cc:	4770      	bx	lr
	...

080072d0 <_init>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	bf00      	nop
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr

080072dc <_fini>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr
