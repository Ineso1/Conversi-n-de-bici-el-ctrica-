
ECU_M1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800dd48  0800dd48  0001dd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3b0  0800e3b0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3b0  0800e3b0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3b0  0800e3b0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3b0  0800e3b0  0001e3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3b4  0800e3b4  0001e3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e3b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000016e8  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200018d8  200018d8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f524  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c45  00000000  00000000  0003f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001978  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001384  00000000  00000000  00045dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026c5d  00000000  00000000  00047144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023d41  00000000  00000000  0006dda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dac8a  00000000  00000000  00091ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007f64  00000000  00000000  0016c76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001746d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000d0a  00000000  00000000  00174747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  00175451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd30 	.word	0x0800dd30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800dd30 	.word	0x0800dd30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000d2e:	2300      	movs	r3, #0
 8000d30:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000d3e:	2308      	movs	r3, #8
 8000d40:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000d52:	2300      	movs	r3, #0
 8000d54:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000d8a:	f000 fa0f 	bl	80011ac <MCP2515_Initialize>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <CANSPI_Initialize+0x9a>
  {
    return false;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e05e      	b.n	8000e5c <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000d9e:	f000 fa27 	bl	80011f0 <MCP2515_SetConfigMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f083 0301 	eor.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <CANSPI_Initialize+0xae>
  {
    return false;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e054      	b.n	8000e5c <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	461a      	mov	r2, r3
 8000db6:	2123      	movs	r1, #35	; 0x23
 8000db8:	2020      	movs	r0, #32
 8000dba:	f000 fac3 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2127      	movs	r1, #39	; 0x27
 8000dc4:	2024      	movs	r0, #36	; 0x24
 8000dc6:	f000 fabd 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	461a      	mov	r2, r3
 8000dd0:	2103      	movs	r1, #3
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 fab6 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2107      	movs	r1, #7
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 faaf 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	461a      	mov	r2, r3
 8000dec:	210b      	movs	r1, #11
 8000dee:	2008      	movs	r0, #8
 8000df0:	f000 faa8 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2113      	movs	r1, #19
 8000dfc:	2010      	movs	r0, #16
 8000dfe:	f000 faa1 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	461a      	mov	r2, r3
 8000e08:	2117      	movs	r1, #23
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f000 fa9a 	bl	8001344 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	461a      	mov	r2, r3
 8000e16:	211b      	movs	r1, #27
 8000e18:	2018      	movs	r0, #24
 8000e1a:	f000 fa93 	bl	8001344 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	2060      	movs	r0, #96	; 0x60
 8000e22:	f000 fa69 	bl	80012f8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000e26:	2101      	movs	r1, #1
 8000e28:	2070      	movs	r0, #112	; 0x70
 8000e2a:	f000 fa65 	bl	80012f8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	202a      	movs	r0, #42	; 0x2a
 8000e32:	f000 fa61 	bl	80012f8 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000e36:	21e5      	movs	r1, #229	; 0xe5
 8000e38:	2029      	movs	r0, #41	; 0x29
 8000e3a:	f000 fa5d 	bl	80012f8 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000e3e:	2183      	movs	r1, #131	; 0x83
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f000 fa59 	bl	80012f8 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000e46:	f000 f9f1 	bl	800122c <MCP2515_SetNormalMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f083 0301 	eor.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <CANSPI_Initialize+0x156>
    return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <CANSPI_Initialize+0x158>
  
  return true;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000e88:	f000 fad0 	bl	800142c <MCP2515_ReadStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000e92:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000e94:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d115      	bne.n	8000ece <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6858      	ldr	r0, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000eac:	4619      	mov	r1, r3
 8000eae:	f000 f928 	bl	8001102 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a1a      	ldrb	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3309      	adds	r3, #9
 8000eba:	4924      	ldr	r1, [pc, #144]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000ebc:	2040      	movs	r0, #64	; 0x40
 8000ebe:	f000 fa6d 	bl	800139c <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000ec2:	2081      	movs	r0, #129	; 0x81
 8000ec4:	f000 fa96 	bl	80013f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e038      	b.n	8000f40 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d115      	bne.n	8000f08 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6858      	ldr	r0, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f000 f90b 	bl	8001102 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7a1a      	ldrb	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3309      	adds	r3, #9
 8000ef4:	4915      	ldr	r1, [pc, #84]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000ef6:	2042      	movs	r0, #66	; 0x42
 8000ef8:	f000 fa50 	bl	800139c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000efc:	2082      	movs	r0, #130	; 0x82
 8000efe:	f000 fa79 	bl	80013f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e01b      	b.n	8000f40 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <CANSPI_Transmit+0xec>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6858      	ldr	r0, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000f20:	4619      	mov	r1, r3
 8000f22:	f000 f8ee 	bl	8001102 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a1a      	ldrb	r2, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3309      	adds	r3, #9
 8000f2e:	4907      	ldr	r1, [pc, #28]	; (8000f4c <CANSPI_Transmit+0xe8>)
 8000f30:	2044      	movs	r0, #68	; 0x44
 8000f32:	f000 fa33 	bl	800139c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000f36:	2084      	movs	r0, #132	; 0x84
 8000f38:	f000 fa5c 	bl	80013f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000210 	.word	0x20000210
 8000f50:	2000020c 	.word	0x2000020c

08000f54 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000f60:	f000 fa82 	bl	8001468 <MCP2515_GetRxStatus>
 8000f64:	4603      	mov	r3, r0
 8000f66:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000f68:	7b3b      	ldrb	r3, [r7, #12]
 8000f6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d066      	beq.n	8001042 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000f74:	7b3b      	ldrb	r3, [r7, #12]
 8000f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b40      	cmp	r3, #64	; 0x40
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7b3b      	ldrb	r3, [r7, #12]
 8000f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	220d      	movs	r2, #13
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2090      	movs	r0, #144	; 0x90
 8000faa:	f000 f981 	bl	80012b0 <MCP2515_ReadRxSequence>
 8000fae:	e00c      	b.n	8000fca <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b80      	cmp	r3, #128	; 0x80
 8000fba:	d106      	bne.n	8000fca <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	220d      	movs	r2, #13
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2094      	movs	r0, #148	; 0x94
 8000fc6:	f000 f973 	bl	80012b0 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000fca:	7b3b      	ldrb	r3, [r7, #12]
 8000fcc:	f003 0318 	and.w	r3, r3, #24
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d10c      	bne.n	8000ff0 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000fdc:	7cb8      	ldrb	r0, [r7, #18]
 8000fde:	7cf9      	ldrb	r1, [r7, #19]
 8000fe0:	7c3a      	ldrb	r2, [r7, #16]
 8000fe2:	7c7b      	ldrb	r3, [r7, #17]
 8000fe4:	f000 f832 	bl	800104c <convertReg2ExtendedCANid>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	e00b      	b.n	8001008 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000ff6:	7c3b      	ldrb	r3, [r7, #16]
 8000ff8:	7c7a      	ldrb	r2, [r7, #17]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f863 	bl	80010c8 <convertReg2StandardCANid>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8001008:	7d3a      	ldrb	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800100e:	7d7a      	ldrb	r2, [r7, #21]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001014:	7dba      	ldrb	r2, [r7, #22]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800101a:	7dfa      	ldrb	r2, [r7, #23]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001020:	7e3a      	ldrb	r2, [r7, #24]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8001026:	7e7a      	ldrb	r2, [r7, #25]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800102c:	7eba      	ldrb	r2, [r7, #26]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001032:	7efa      	ldrb	r2, [r7, #27]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8001038:	7f3a      	ldrb	r2, [r7, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8001042:	7ffb      	ldrb	r3, [r7, #31]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800104c:	b490      	push	{r4, r7}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	4603      	mov	r3, r0
 8001060:	71bb      	strb	r3, [r7, #6]
 8001062:	460b      	mov	r3, r1
 8001064:	717b      	strb	r3, [r7, #5]
 8001066:	4613      	mov	r3, r2
 8001068:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8001072:	793b      	ldrb	r3, [r7, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4413      	add	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4413      	add	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4413      	add	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80010bc:	697b      	ldr	r3, [r7, #20]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc90      	pop	{r4, r7}
 80010c6:	4770      	bx	lr

080010c8 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	460b      	mov	r3, r1
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d12e      	bne.n	8001178 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f023 031f 	bic.w	r3, r3, #31
 800114e:	b2da      	uxtb	r2, r3
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	4413      	add	r3, r2
 8001154:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	3308      	adds	r3, #8
 800115a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	f023 0314 	bic.w	r3, r3, #20
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8001176:	e013      	b.n	80011a0 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	701a      	strb	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MCP2515_Initialize+0x3c>)
 80011ba:	f001 ff89 	bl	80030d0 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80011be:	230a      	movs	r3, #10
 80011c0:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <MCP2515_Initialize+0x40>)
 80011c4:	f004 ff89 	bl	80060da <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <MCP2515_Initialize+0x26>
      return true;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e006      	b.n	80011e0 <MCP2515_Initialize+0x34>
    
    loop--;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f1      	bne.n	80011c2 <MCP2515_Initialize+0x16>
      
  return false;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	48000400 	.word	0x48000400
 80011ec:	2000082c 	.word	0x2000082c

080011f0 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	200f      	movs	r0, #15
 80011fa:	f000 f87d 	bl	80012f8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80011fe:	230a      	movs	r3, #10
 8001200:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001202:	200e      	movs	r0, #14
 8001204:	f000 f830 	bl	8001268 <MCP2515_ReadByte>
 8001208:	4603      	mov	r3, r0
 800120a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800120e:	2b80      	cmp	r3, #128	; 0x80
 8001210:	d101      	bne.n	8001216 <MCP2515_SetConfigMode+0x26>
      return true;
 8001212:	2301      	movs	r3, #1
 8001214:	e006      	b.n	8001224 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	3b01      	subs	r3, #1
 800121a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1ef      	bne.n	8001202 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001232:	2100      	movs	r1, #0
 8001234:	200f      	movs	r0, #15
 8001236:	f000 f85f 	bl	80012f8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800123a:	230a      	movs	r3, #10
 800123c:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800123e:	200e      	movs	r0, #14
 8001240:	f000 f812 	bl	8001268 <MCP2515_ReadByte>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <MCP2515_SetNormalMode+0x26>
      return true;
 800124e:	2301      	movs	r3, #1
 8001250:	e006      	b.n	8001260 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3b01      	subs	r3, #1
 8001256:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ef      	bne.n	800123e <MCP2515_SetNormalMode+0x12>
  
  return false;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <MCP2515_ReadByte+0x44>)
 800127a:	f001 ff29 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 800127e:	2003      	movs	r0, #3
 8001280:	f000 f910 	bl	80014a4 <SPI_Tx>
  SPI_Tx(address);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f90c 	bl	80014a4 <SPI_Tx>
  retVal = SPI_Rx();
 800128c:	f000 f930 	bl	80014f0 <SPI_Rx>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MCP2515_ReadByte+0x44>)
 800129c:	f001 ff18 	bl	80030d0 <HAL_GPIO_WritePin>
  
  return retVal;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	48000400 	.word	0x48000400

080012b0 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MCP2515_ReadRxSequence+0x44>)
 80012c8:	f001 ff02 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f8e8 	bl	80014a4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	4619      	mov	r1, r3
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f000 f919 	bl	8001510 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MCP2515_ReadRxSequence+0x44>)
 80012e6:	f001 fef3 	bl	80030d0 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	48000400 	.word	0x48000400

080012f8 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <MCP2515_WriteByte+0x48>)
 8001310:	f001 fede 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001314:	2002      	movs	r0, #2
 8001316:	f000 f8c5 	bl	80014a4 <SPI_Tx>
  SPI_Tx(address);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f8c1 	bl	80014a4 <SPI_Tx>
  SPI_Tx(data);  
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8bd 	bl	80014a4 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <MCP2515_WriteByte+0x48>)
 8001332:	f001 fecd 	bl	80030d0 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	48000400 	.word	0x48000400

08001344 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	603a      	str	r2, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	460b      	mov	r3, r1
 8001352:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <MCP2515_WriteByteSequence+0x54>)
 800135c:	f001 feb8 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001360:	2002      	movs	r0, #2
 8001362:	f000 f89f 	bl	80014a4 <SPI_Tx>
  SPI_Tx(startAddress);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f89b 	bl	80014a4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f000 f8a3 	bl	80014c8 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <MCP2515_WriteByteSequence+0x54>)
 800138a:	f001 fea1 	bl	80030d0 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	48000400 	.word	0x48000400

0800139c <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	4613      	mov	r3, r2
 80013ac:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MCP2515_LoadTxSequence+0x54>)
 80013b6:	f001 fe8b 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f871 	bl	80014a4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80013c2:	2104      	movs	r1, #4
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f000 f87f 	bl	80014c8 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f869 	bl	80014a4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f876 	bl	80014c8 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MCP2515_LoadTxSequence+0x54>)
 80013e4:	f001 fe74 	bl	80030d0 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	48000400 	.word	0x48000400

080013f4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MCP2515_RequestToSend+0x34>)
 8001406:	f001 fe63 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f849 	bl	80014a4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <MCP2515_RequestToSend+0x34>)
 800141a:	f001 fe59 	bl	80030d0 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	48000400 	.word	0x48000400

0800142c <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <MCP2515_ReadStatus+0x38>)
 800143a:	f001 fe49 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 800143e:	20a0      	movs	r0, #160	; 0xa0
 8001440:	f000 f830 	bl	80014a4 <SPI_Tx>
  retVal = SPI_Rx();
 8001444:	f000 f854 	bl	80014f0 <SPI_Rx>
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <MCP2515_ReadStatus+0x38>)
 8001454:	f001 fe3c 	bl	80030d0 <HAL_GPIO_WritePin>
  
  return retVal;
 8001458:	79fb      	ldrb	r3, [r7, #7]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	48000400 	.word	0x48000400

08001468 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <MCP2515_GetRxStatus+0x38>)
 8001476:	f001 fe2b 	bl	80030d0 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 800147a:	20b0      	movs	r0, #176	; 0xb0
 800147c:	f000 f812 	bl	80014a4 <SPI_Tx>
  retVal = SPI_Rx();
 8001480:	f000 f836 	bl	80014f0 <SPI_Rx>
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MCP2515_GetRxStatus+0x38>)
 8001490:	f001 fe1e 	bl	80030d0 <HAL_GPIO_WritePin>
  
  return retVal;
 8001494:	79fb      	ldrb	r3, [r7, #7]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	48000400 	.word	0x48000400

080014a4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80014ae:	1df9      	adds	r1, r7, #7
 80014b0:	230a      	movs	r3, #10
 80014b2:	2201      	movs	r2, #1
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <SPI_Tx+0x20>)
 80014b6:	f004 f942 	bl	800573e <HAL_SPI_Transmit>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000082c 	.word	0x2000082c

080014c8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	230a      	movs	r3, #10
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <SPI_TxBuffer+0x24>)
 80014de:	f004 f92e 	bl	800573e <HAL_SPI_Transmit>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000082c 	.word	0x2000082c

080014f0 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80014f6:	1df9      	adds	r1, r7, #7
 80014f8:	230a      	movs	r3, #10
 80014fa:	2201      	movs	r2, #1
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <SPI_Rx+0x1c>)
 80014fe:	f004 fa93 	bl	8005a28 <HAL_SPI_Receive>
  return retVal;
 8001502:	79fb      	ldrb	r3, [r7, #7]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000082c 	.word	0x2000082c

08001510 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	b29a      	uxth	r2, r3
 8001520:	230a      	movs	r3, #10
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <SPI_RxBuffer+0x24>)
 8001526:	f004 fa7f 	bl	8005a28 <HAL_SPI_Receive>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000082c 	.word	0x2000082c

08001538 <BNO055_Init_I2C>:
const char reset_sensor[3]	= {REG_WRITE, BNO055_SYS_TRIGGER, 0x01 << 5};
uint8_t get_readings[1] 	= {BNO055_ACC_DATA_X_LSB};


// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8001540:	233d      	movs	r3, #61	; 0x3d
 8001542:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8001544:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001548:	230a      	movs	r3, #10
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2302      	movs	r3, #2
 800154e:	2150      	movs	r1, #80	; 0x50
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f001 fe65 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001556:	200a      	movs	r0, #10
 8001558:	f001 fa04 	bl	8002964 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 800155c:	f240 1307 	movw	r3, #263	; 0x107
 8001560:	853b      	strh	r3, [r7, #40]	; 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 8001562:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001566:	230a      	movs	r3, #10
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2302      	movs	r3, #2
 800156c:	2150      	movs	r1, #80	; 0x50
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 fe56 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f001 f9f5 	bl	8002964 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 800157a:	2308      	movs	r3, #8
 800157c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <BNO055_Init_I2C+0x18c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	b25a      	sxtb	r2, r3
 8001588:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <BNO055_Init_I2C+0x190>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b25a      	sxtb	r2, r3
 8001594:	4b4d      	ldr	r3, [pc, #308]	; (80016cc <BNO055_Init_I2C+0x194>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80015a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015a8:	230a      	movs	r3, #10
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2150      	movs	r1, #80	; 0x50
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 fe35 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f001 f9d4 	bl	8002964 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80015bc:	230a      	movs	r3, #10
 80015be:	f887 3020 	strb.w	r3, [r7, #32]
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <BNO055_Init_I2C+0x198>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	b25a      	sxtb	r2, r3
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <BNO055_Init_I2C+0x19c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 80015da:	f107 0220 	add.w	r2, r7, #32
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2302      	movs	r3, #2
 80015e4:	2150      	movs	r1, #80	; 0x50
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f001 fe1a 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 f9b9 	bl	8002964 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 80015f2:	230b      	movs	r3, #11
 80015f4:	773b      	strb	r3, [r7, #28]
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <BNO055_Init_I2C+0x1a0>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 80015fc:	f107 021c 	add.w	r2, r7, #28
 8001600:	230a      	movs	r3, #10
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2302      	movs	r3, #2
 8001606:	2150      	movs	r1, #80	; 0x50
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f001 fe09 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f001 f9a8 	bl	8002964 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8001614:	2300      	movs	r3, #0
 8001616:	763b      	strb	r3, [r7, #24]
 8001618:	2309      	movs	r3, #9
 800161a:	767b      	strb	r3, [r7, #25]
 800161c:	2301      	movs	r3, #1
 800161e:	76bb      	strb	r3, [r7, #26]
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <BNO055_Init_I2C+0x1a4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	015b      	lsls	r3, r3, #5
 8001626:	b25a      	sxtb	r2, r3
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <BNO055_Init_I2C+0x1a8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b25a      	sxtb	r2, r3
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <BNO055_Init_I2C+0x1ac>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b25b      	sxtb	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8001642:	f107 0218 	add.w	r2, r7, #24
 8001646:	230a      	movs	r3, #10
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2304      	movs	r3, #4
 800164c:	2150      	movs	r1, #80	; 0x50
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f001 fde6 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f001 f985 	bl	8002964 <HAL_Delay>

	// Select BNO055 gyro temperature source 
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );
	
	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 800165a:	2307      	movs	r3, #7
 800165c:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 800165e:	f107 0214 	add.w	r2, r7, #20
 8001662:	230a      	movs	r3, #10
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2302      	movs	r3, #2
 8001668:	2150      	movs	r1, #80	; 0x50
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f001 fdd8 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001670:	200a      	movs	r0, #10
 8001672:	f001 f977 	bl	8002964 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 8001676:	233e      	movs	r3, #62	; 0x3e
 8001678:	743b      	strb	r3, [r7, #16]
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <BNO055_Init_I2C+0x1b0>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 8001680:	f107 0210 	add.w	r2, r7, #16
 8001684:	230a      	movs	r3, #10
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2302      	movs	r3, #2
 800168a:	2150      	movs	r1, #80	; 0x50
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 fdc7 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001692:	200a      	movs	r0, #10
 8001694:	f001 f966 	bl	8002964 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 8001698:	233d      	movs	r3, #61	; 0x3d
 800169a:	733b      	strb	r3, [r7, #12]
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <BNO055_Init_I2C+0x1b4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80016a2:	f107 020c 	add.w	r2, r7, #12
 80016a6:	230a      	movs	r3, #10
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2302      	movs	r3, #2
 80016ac:	2150      	movs	r1, #80	; 0x50
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f001 fdb6 	bl	8003220 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80016b4:	2032      	movs	r0, #50	; 0x32
 80016b6:	f001 f955 	bl	8002964 <HAL_Delay>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000216 	.word	0x20000216
 80016c8:	20000002 	.word	0x20000002
 80016cc:	20000001 	.word	0x20000001
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000215 	.word	0x20000215
 80016d8:	20000214 	.word	0x20000214
 80016dc:	20000217 	.word	0x20000217
 80016e0:	20000003 	.word	0x20000003
 80016e4:	20000004 	.word	0x20000004
 80016e8:	20000218 	.word	0x20000218
 80016ec:	20000005 	.word	0x20000005

080016f0 <GetAccelData>:



// Send data to BNO055 over I2C
uint8_t GetAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2312      	movs	r3, #18
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	2208      	movs	r2, #8
 800170a:	2150      	movs	r1, #80	; 0x50
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 fe7b 	bl	8003408 <HAL_I2C_Mem_Read>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {} 
	return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_DMA_Init+0x48>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <MX_DMA_Init+0x48>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_DMA_Init+0x48>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	2010      	movs	r0, #16
 8001744:	f001 f9ea 	bl	8002b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001748:	2010      	movs	r0, #16
 800174a:	f001 fa03 	bl	8002b54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2011      	movs	r0, #17
 8001754:	f001 f9e2 	bl	8002b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001758:	2011      	movs	r0, #17
 800175a:	f001 f9fb 	bl	8002b54 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <vApplicationGetIdleTaskMemory+0x2c>)
 800177c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <vApplicationGetIdleTaskMemory+0x30>)
 8001782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200004a0 	.word	0x200004a0
 800179c:	20000540 	.word	0x20000540

080017a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b09e      	sub	sp, #120	; 0x78
 80017a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	// Initialize FIR filter
	arm_fir_init_f32(&FIR_Filter, NUM_TAPS, (float32_t*)firCoeffs, firState, BLOCK_SIZE);
 80017a6:	2320      	movs	r3, #32
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <MX_FREERTOS_Init+0xb4>)
 80017ac:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <MX_FREERTOS_Init+0xb8>)
 80017ae:	2115      	movs	r1, #21
 80017b0:	482a      	ldr	r0, [pc, #168]	; (800185c <MX_FREERTOS_Init+0xbc>)
 80017b2:	f007 f853 	bl	800885c <arm_fir_init_f32>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <MX_FREERTOS_Init+0xc0>)
 80017b8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80017bc:	461d      	mov	r5, r3
 80017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 fdf9 	bl	80073c8 <osThreadCreate>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a22      	ldr	r2, [pc, #136]	; (8001864 <MX_FREERTOS_Init+0xc4>)
 80017da:	6013      	str	r3, [r2, #0]

  /* definition and creation of RecepcionCAN */
  osThreadDef(RecepcionCAN, StartRecepcionCAN, osPriorityAboveNormal, 0, 128);
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <MX_FREERTOS_Init+0xc8>)
 80017de:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80017e2:	461d      	mov	r5, r3
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecepcionCANHandle = osThreadCreate(osThread(RecepcionCAN), NULL);
 80017f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fde6 	bl	80073c8 <osThreadCreate>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <MX_FREERTOS_Init+0xcc>)
 8001800:	6013      	str	r3, [r2, #0]

  /* definition and creation of IMUprocess */
  osThreadDef(IMUprocess, StartIMUprocess, osPriorityNormal, 0, 128);
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <MX_FREERTOS_Init+0xd0>)
 8001804:	f107 041c 	add.w	r4, r7, #28
 8001808:	461d      	mov	r5, r3
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMUprocessHandle = osThreadCreate(osThread(IMUprocess), NULL);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fdd3 	bl	80073c8 <osThreadCreate>
 8001822:	4603      	mov	r3, r0
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <MX_FREERTOS_Init+0xd4>)
 8001826:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTcom */
  osThreadDef(UARTcom, StartUARTcom, osPriorityBelowNormal, 0, 128);
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_FREERTOS_Init+0xd8>)
 800182a:	463c      	mov	r4, r7
 800182c:	461d      	mov	r5, r3
 800182e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTcomHandle = osThreadCreate(osThread(UARTcom), NULL);
 800183a:	463b      	mov	r3, r7
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fdc2 	bl	80073c8 <osThreadCreate>
 8001844:	4603      	mov	r3, r0
 8001846:	4a0d      	ldr	r2, [pc, #52]	; (800187c <MX_FREERTOS_Init+0xdc>)
 8001848:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800184a:	bf00      	nop
 800184c:	3770      	adds	r7, #112	; 0x70
 800184e:	46bd      	mov	sp, r7
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
 8001852:	bf00      	nop
 8001854:	200002b4 	.word	0x200002b4
 8001858:	0800de88 	.word	0x0800de88
 800185c:	20000384 	.word	0x20000384
 8001860:	0800dd54 	.word	0x0800dd54
 8001864:	20000490 	.word	0x20000490
 8001868:	0800dd80 	.word	0x0800dd80
 800186c:	20000494 	.word	0x20000494
 8001870:	0800dda8 	.word	0x0800dda8
 8001874:	20000498 	.word	0x20000498
 8001878:	0800ddcc 	.word	0x0800ddcc
 800187c:	2000049c 	.word	0x2000049c

08001880 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  {
	/*int v = 0;
	char message[50];
	snprintf(message, sizeof(message), "Default: %u\r\n", v);
	//HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);*/
    osDelay(1);
 8001888:	2001      	movs	r0, #1
 800188a:	f005 fde9 	bl	8007460 <osDelay>
 800188e:	e7fb      	b.n	8001888 <StartDefaultTask+0x8>

08001890 <StartRecepcionCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecepcionCAN */
void StartRecepcionCAN(void const * argument)
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b09f      	sub	sp, #124	; 0x7c
 8001894:	af0a      	add	r7, sp, #40	; 0x28
 8001896:	6178      	str	r0, [r7, #20]
  {
	//int v = 1;
	char message[50];
	//snprintf(message, sizeof(message), "CAN: %u\r\n", v);
	//HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
	strcpy(message, "Enviado\n");
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4a3d      	ldr	r2, [pc, #244]	; (8001994 <StartRecepcionCAN+0x104>)
 800189e:	ca07      	ldmia	r2, {r0, r1, r2}
 80018a0:	c303      	stmia	r3!, {r0, r1}
 80018a2:	701a      	strb	r2, [r3, #0]

	if(CANSPI_Receive(&rxMessage))
 80018a4:	483c      	ldr	r0, [pc, #240]	; (8001998 <StartRecepcionCAN+0x108>)
 80018a6:	f7ff fb55 	bl	8000f54 <CANSPI_Receive>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d06d      	beq.n	800198c <StartRecepcionCAN+0xfc>
	 {
		txMessage.frame.idType = rxMessage.frame.idType;
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <StartRecepcionCAN+0x108>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <StartRecepcionCAN+0x10c>)
 80018b6:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = rxMessage.frame.id;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <StartRecepcionCAN+0x108>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a37      	ldr	r2, [pc, #220]	; (800199c <StartRecepcionCAN+0x10c>)
 80018be:	6053      	str	r3, [r2, #4]
		txMessage.frame.dlc = rxMessage.frame.dlc;
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <StartRecepcionCAN+0x108>)
 80018c2:	7a1a      	ldrb	r2, [r3, #8]
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <StartRecepcionCAN+0x10c>)
 80018c6:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0++;
 80018c8:	4b34      	ldr	r3, [pc, #208]	; (800199c <StartRecepcionCAN+0x10c>)
 80018ca:	7a5b      	ldrb	r3, [r3, #9]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <StartRecepcionCAN+0x10c>)
 80018d2:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = rxMessage.frame.data1;
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <StartRecepcionCAN+0x108>)
 80018d6:	7a9a      	ldrb	r2, [r3, #10]
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <StartRecepcionCAN+0x10c>)
 80018da:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = rxMessage.frame.data2;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <StartRecepcionCAN+0x108>)
 80018de:	7ada      	ldrb	r2, [r3, #11]
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <StartRecepcionCAN+0x10c>)
 80018e2:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = rxMessage.frame.data3;
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <StartRecepcionCAN+0x108>)
 80018e6:	7b1a      	ldrb	r2, [r3, #12]
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <StartRecepcionCAN+0x10c>)
 80018ea:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = rxMessage.frame.data4;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <StartRecepcionCAN+0x108>)
 80018ee:	7b5a      	ldrb	r2, [r3, #13]
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <StartRecepcionCAN+0x10c>)
 80018f2:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = rxMessage.frame.data5;
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <StartRecepcionCAN+0x108>)
 80018f6:	7b9a      	ldrb	r2, [r3, #14]
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <StartRecepcionCAN+0x10c>)
 80018fa:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = rxMessage.frame.data6;
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <StartRecepcionCAN+0x108>)
 80018fe:	7bda      	ldrb	r2, [r3, #15]
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <StartRecepcionCAN+0x10c>)
 8001902:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = rxMessage.frame.data7;
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <StartRecepcionCAN+0x108>)
 8001906:	7c1a      	ldrb	r2, [r3, #16]
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <StartRecepcionCAN+0x10c>)
 800190a:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 800190c:	4823      	ldr	r0, [pc, #140]	; (800199c <StartRecepcionCAN+0x10c>)
 800190e:	f7ff faa9 	bl	8000e64 <CANSPI_Transmit>

		snprintf(message, sizeof(message),
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <StartRecepcionCAN+0x108>)
 8001914:	685b      	ldr	r3, [r3, #4]
			 "CAN ID: %lu, DLC: %u, Data: %u %u %u %u %u %u %u %u\r\n",
			 rxMessage.frame.id, rxMessage.frame.dlc,
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <StartRecepcionCAN+0x108>)
 8001918:	7a12      	ldrb	r2, [r2, #8]
		snprintf(message, sizeof(message),
 800191a:	4611      	mov	r1, r2
			 rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <StartRecepcionCAN+0x108>)
 800191e:	7a52      	ldrb	r2, [r2, #9]
		snprintf(message, sizeof(message),
 8001920:	4614      	mov	r4, r2
			 rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <StartRecepcionCAN+0x108>)
 8001924:	7a92      	ldrb	r2, [r2, #10]
		snprintf(message, sizeof(message),
 8001926:	4615      	mov	r5, r2
			 rxMessage.frame.data0, rxMessage.frame.data1, rxMessage.frame.data2,
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <StartRecepcionCAN+0x108>)
 800192a:	7ad2      	ldrb	r2, [r2, #11]
		snprintf(message, sizeof(message),
 800192c:	4616      	mov	r6, r2
			 rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 800192e:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <StartRecepcionCAN+0x108>)
 8001930:	7b12      	ldrb	r2, [r2, #12]
		snprintf(message, sizeof(message),
 8001932:	613a      	str	r2, [r7, #16]
			 rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <StartRecepcionCAN+0x108>)
 8001936:	7b52      	ldrb	r2, [r2, #13]
		snprintf(message, sizeof(message),
 8001938:	60fa      	str	r2, [r7, #12]
			 rxMessage.frame.data3, rxMessage.frame.data4, rxMessage.frame.data5,
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <StartRecepcionCAN+0x108>)
 800193c:	7b92      	ldrb	r2, [r2, #14]
		snprintf(message, sizeof(message),
 800193e:	60ba      	str	r2, [r7, #8]
			 rxMessage.frame.data6, rxMessage.frame.data7);
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <StartRecepcionCAN+0x108>)
 8001942:	7bd2      	ldrb	r2, [r2, #15]
		snprintf(message, sizeof(message),
 8001944:	607a      	str	r2, [r7, #4]
			 rxMessage.frame.data6, rxMessage.frame.data7);
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <StartRecepcionCAN+0x108>)
 8001948:	7c12      	ldrb	r2, [r2, #16]
		snprintf(message, sizeof(message),
 800194a:	f107 001c 	add.w	r0, r7, #28
 800194e:	9208      	str	r2, [sp, #32]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	9207      	str	r2, [sp, #28]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	9206      	str	r2, [sp, #24]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	9205      	str	r2, [sp, #20]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	9204      	str	r2, [sp, #16]
 8001960:	9603      	str	r6, [sp, #12]
 8001962:	9502      	str	r5, [sp, #8]
 8001964:	9401      	str	r4, [sp, #4]
 8001966:	9100      	str	r1, [sp, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <StartRecepcionCAN+0x110>)
 800196a:	2132      	movs	r1, #50	; 0x32
 800196c:	f008 fcba 	bl	800a2e4 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fc83 	bl	8000280 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 011c 	add.w	r1, r7, #28
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <StartRecepcionCAN+0x114>)
 8001988:	f005 f88c 	bl	8006aa4 <HAL_UART_Transmit>

	 }
	osDelay(100);
 800198c:	2064      	movs	r0, #100	; 0x64
 800198e:	f005 fd67 	bl	8007460 <osDelay>
  {
 8001992:	e781      	b.n	8001898 <StartRecepcionCAN+0x8>
 8001994:	0800dde8 	.word	0x0800dde8
 8001998:	20000230 	.word	0x20000230
 800199c:	2000021c 	.word	0x2000021c
 80019a0:	0800ddf4 	.word	0x0800ddf4
 80019a4:	2000092c 	.word	0x2000092c

080019a8 <StartIMUprocess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMUprocess */
void StartIMUprocess(void const * argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	static size_t bufferIndex = 0; // Keeps track of the current position in the buffer
  /* Infinite loop */
  for(;;)
  {

	 IMU_acceleration();
 80019b0:	f000 f85e 	bl	8001a70 <IMU_acceleration>
	 inputBuffer[bufferIndex] = acc_z; // Store the current sample in the buffer
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <StartIMUprocess+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <StartIMUprocess+0x68>)
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	4915      	ldr	r1, [pc, #84]	; (8001a14 <StartIMUprocess+0x6c>)
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	601a      	str	r2, [r3, #0]
	 bufferIndex++; // Move to the next position in the buffer
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <StartIMUprocess+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <StartIMUprocess+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

	 if (bufferIndex >= BLOCK_SIZE) {
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <StartIMUprocess+0x64>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b1f      	cmp	r3, #31
 80019d4:	d916      	bls.n	8001a04 <StartIMUprocess+0x5c>
		 bufferIndex = 0; // Reset buffer index
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <StartIMUprocess+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
		 IMU_dsp();
 80019dc:	f000 f89e 	bl	8001b1c <IMU_dsp>
		 acceleration_data_conversion(acc_x, acc_y, outputBuffer[BLOCK_SIZE], message); //Sends the data
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <StartIMUprocess+0x70>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <StartIMUprocess+0x74>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <StartIMUprocess+0x78>)
 80019ee:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <StartIMUprocess+0x7c>)
 80019f4:	eeb0 1a66 	vmov.f32	s2, s13
 80019f8:	eef0 0a47 	vmov.f32	s1, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f000 f89e 	bl	8001b40 <acceleration_data_conversion>
	 }

	 osDelay(2);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f005 fd2b 	bl	8007460 <osDelay>
	 IMU_acceleration();
 8001a0a:	e7d1      	b.n	80019b0 <StartIMUprocess+0x8>
 8001a0c:	20000740 	.word	0x20000740
 8001a10:	200002b0 	.word	0x200002b0
 8001a14:	20000390 	.word	0x20000390
 8001a18:	200002a8 	.word	0x200002a8
 8001a1c:	200002ac 	.word	0x200002ac
 8001a20:	20000410 	.word	0x20000410
 8001a24:	20000244 	.word	0x20000244

08001a28 <StartUARTcom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTcom */
void StartUARTcom(void const * argument)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b090      	sub	sp, #64	; 0x40
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTcom */
  /* Infinite loop */
  for(;;)
  {
	  char message[50];
	  int val = 50;
 8001a30:	2332      	movs	r3, #50	; 0x32
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
	  //snprintf(message, sizeof(message), "%u", rxMessage.frame.data0);
	  snprintf(message, sizeof(message), "%u", val);
 8001a34:	f107 0008 	add.w	r0, r7, #8
 8001a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <StartUARTcom+0x40>)
 8001a3c:	2132      	movs	r1, #50	; 0x32
 8001a3e:	f008 fc51 	bl	800a2e4 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fc1a 	bl	8000280 <strlen>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	f107 0108 	add.w	r1, r7, #8
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <StartUARTcom+0x44>)
 8001a5a:	f005 f823 	bl	8006aa4 <HAL_UART_Transmit>
	  osDelay(200);
 8001a5e:	20c8      	movs	r0, #200	; 0xc8
 8001a60:	f005 fcfe 	bl	8007460 <osDelay>
  {
 8001a64:	e7e4      	b.n	8001a30 <StartUARTcom+0x8>
 8001a66:	bf00      	nop
 8001a68:	0800de2c 	.word	0x0800de2c
 8001a6c:	200009b4 	.word	0x200009b4

08001a70 <IMU_acceleration>:
  /* USER CODE END StartUARTcom */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void IMU_acceleration() {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
    uint8_t imu_readings[IMU_NUMBER_OF_BYTES];
    GetAccelData(&hi2c1, imu_readings);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4822      	ldr	r0, [pc, #136]	; (8001b08 <IMU_acceleration+0x98>)
 8001a7e:	f7ff fe37 	bl	80016f0 <GetAccelData>

    int16_t accel_data[3];
    accel_data[0] = ((int16_t)(imu_readings[1] << 8) | imu_readings[0]);
 8001a82:	7b7b      	ldrb	r3, [r7, #13]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	7b3b      	ldrb	r3, [r7, #12]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	80bb      	strh	r3, [r7, #4]
    accel_data[1] = ((int16_t)(imu_readings[3] << 8) | imu_readings[2]);
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	80fb      	strh	r3, [r7, #6]
    accel_data[2] = ((int16_t)(imu_readings[5] << 8) | imu_readings[4]);
 8001aa2:	7c7b      	ldrb	r3, [r7, #17]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b21a      	sxth	r2, r3
 8001aa8:	7c3b      	ldrb	r3, [r7, #16]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	813b      	strh	r3, [r7, #8]

    acc_x = ((float)accel_data[0]) / 100.0f;
 8001ab2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abe:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001b0c <IMU_acceleration+0x9c>
 8001ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <IMU_acceleration+0xa0>)
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
    acc_y = ((float)accel_data[1]) / 100.0f;
 8001acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001b0c <IMU_acceleration+0x9c>
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <IMU_acceleration+0xa4>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
    acc_z = ((float)accel_data[2]) / 100.0f;
 8001ae6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001b0c <IMU_acceleration+0x9c>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <IMU_acceleration+0xa8>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000750 	.word	0x20000750
 8001b0c:	42c80000 	.word	0x42c80000
 8001b10:	200002a8 	.word	0x200002a8
 8001b14:	200002ac 	.word	0x200002ac
 8001b18:	200002b0 	.word	0x200002b0

08001b1c <IMU_dsp>:

void IMU_dsp(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	arm_fir_f32(&FIR_Filter, inputBuffer, outputBuffer, BLOCK_SIZE);
 8001b20:	2320      	movs	r3, #32
 8001b22:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <IMU_dsp+0x14>)
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <IMU_dsp+0x18>)
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <IMU_dsp+0x1c>)
 8001b28:	f006 fea8 	bl	800887c <arm_fir_f32>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000410 	.word	0x20000410
 8001b34:	20000390 	.word	0x20000390
 8001b38:	20000384 	.word	0x20000384
 8001b3c:	00000000 	.word	0x00000000

08001b40 <acceleration_data_conversion>:

void acceleration_data_conversion(float acc_x, float acc_y, float acc_z, char *message) {
 8001b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b44:	b0a0      	sub	sp, #128	; 0x80
 8001b46:	af0e      	add	r7, sp, #56	; 0x38
 8001b48:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001b4c:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 8001b50:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 8001b54:	6238      	str	r0, [r7, #32]
    // Calculate G-forces, roll, pitch, and velocity
    float g_force_x = acc_x / 9.81f;
 8001b56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b5a:	eddf 6a99 	vldr	s13, [pc, #612]	; 8001dc0 <acceleration_data_conversion+0x280>
 8001b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b62:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float g_force_y = acc_y / 9.81f;
 8001b66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001b6a:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001dc0 <acceleration_data_conversion+0x280>
 8001b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float g_force_z = acc_z / 9.81f;
 8001b76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b7a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001dc0 <acceleration_data_conversion+0x280>
 8001b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b82:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    float roll = atan2(acc_y, acc_z) * 180.0f / PI;
 8001b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b88:	f7fe fce6 	bl	8000558 <__aeabi_f2d>
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	460d      	mov	r5, r1
 8001b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b92:	f7fe fce1 	bl	8000558 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	ec43 2b11 	vmov	d1, r2, r3
 8001b9e:	ec45 4b10 	vmov	d0, r4, r5
 8001ba2:	f007 f8eb 	bl	8008d7c <atan2>
 8001ba6:	ec51 0b10 	vmov	r0, r1, d0
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <acceleration_data_conversion+0x284>)
 8001bb0:	f7fe fd2a 	bl	8000608 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	a37c      	add	r3, pc, #496	; (adr r3, 8001db0 <acceleration_data_conversion+0x270>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fe4b 	bl	800085c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff f813 	bl	8000bf8 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    float pitch = atan2(-acc_x, sqrt(acc_y * acc_y + acc_z * acc_z)) * 180.0f / PI;
 8001bd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bda:	eef1 7a67 	vneg.f32	s15, s15
 8001bde:	ee17 3a90 	vmov	r3, s15
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcb8 	bl	8000558 <__aeabi_f2d>
 8001be8:	4604      	mov	r4, r0
 8001bea:	460d      	mov	r5, r1
 8001bec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bf0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	ee17 0a90 	vmov	r0, s15
 8001c04:	f7fe fca8 	bl	8000558 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	ec43 2b10 	vmov	d0, r2, r3
 8001c10:	f007 f8b6 	bl	8008d80 <sqrt>
 8001c14:	eeb0 7a40 	vmov.f32	s14, s0
 8001c18:	eef0 7a60 	vmov.f32	s15, s1
 8001c1c:	eeb0 1a47 	vmov.f32	s2, s14
 8001c20:	eef0 1a67 	vmov.f32	s3, s15
 8001c24:	ec45 4b10 	vmov	d0, r4, r5
 8001c28:	f007 f8a8 	bl	8008d7c <atan2>
 8001c2c:	ec51 0b10 	vmov	r0, r1, d0
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <acceleration_data_conversion+0x284>)
 8001c36:	f7fe fce7 	bl	8000608 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	a35b      	add	r3, pc, #364	; (adr r3, 8001db0 <acceleration_data_conversion+0x270>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fe08 	bl	800085c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffd0 	bl	8000bf8 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34

    static float velocity_x = 0.0f, velocity_y = 0.0f, velocity_z = 0.0f;
    velocity_x += acc_x * SAMPLE_TIME;
 8001c5c:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <acceleration_data_conversion+0x288>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc79 	bl	8000558 <__aeabi_f2d>
 8001c66:	4604      	mov	r4, r0
 8001c68:	460d      	mov	r5, r1
 8001c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c6c:	f7fe fc74 	bl	8000558 <__aeabi_f2d>
 8001c70:	a351      	add	r3, pc, #324	; (adr r3, 8001db8 <acceleration_data_conversion+0x278>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fcc7 	bl	8000608 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fb0b 	bl	800029c <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffb3 	bl	8000bf8 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <acceleration_data_conversion+0x288>)
 8001c96:	6013      	str	r3, [r2, #0]
    velocity_y += acc_y * SAMPLE_TIME;
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <acceleration_data_conversion+0x28c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc5b 	bl	8000558 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ca8:	f7fe fc56 	bl	8000558 <__aeabi_f2d>
 8001cac:	a342      	add	r3, pc, #264	; (adr r3, 8001db8 <acceleration_data_conversion+0x278>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fca9 	bl	8000608 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f7fe faed 	bl	800029c <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ff95 	bl	8000bf8 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <acceleration_data_conversion+0x28c>)
 8001cd2:	6013      	str	r3, [r2, #0]
    velocity_z += acc_z * SAMPLE_TIME;
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <acceleration_data_conversion+0x290>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc3d 	bl	8000558 <__aeabi_f2d>
 8001cde:	4604      	mov	r4, r0
 8001ce0:	460d      	mov	r5, r1
 8001ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ce4:	f7fe fc38 	bl	8000558 <__aeabi_f2d>
 8001ce8:	a333      	add	r3, pc, #204	; (adr r3, 8001db8 <acceleration_data_conversion+0x278>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fc8b 	bl	8000608 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f7fe facf 	bl	800029c <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff77 	bl	8000bf8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <acceleration_data_conversion+0x290>)
 8001d0e:	6013      	str	r3, [r2, #0]

    sprintf(message, "GX: %.2f GY: %.2f GZ: %.2f Roll: %.2f Pitch: %.2f VX: %.2f VY: %.2f VZ: %.2f\r\n",
 8001d10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d12:	f7fe fc21 	bl	8000558 <__aeabi_f2d>
 8001d16:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001d1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d1c:	f7fe fc1c 	bl	8000558 <__aeabi_f2d>
 8001d20:	4682      	mov	sl, r0
 8001d22:	468b      	mov	fp, r1
 8001d24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d26:	f7fe fc17 	bl	8000558 <__aeabi_f2d>
 8001d2a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d30:	f7fe fc12 	bl	8000558 <__aeabi_f2d>
 8001d34:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d3a:	f7fe fc0d 	bl	8000558 <__aeabi_f2d>
 8001d3e:	e9c7 0100 	strd	r0, r1, [r7]
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <acceleration_data_conversion+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc06 	bl	8000558 <__aeabi_f2d>
 8001d4c:	4680      	mov	r8, r0
 8001d4e:	4689      	mov	r9, r1
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <acceleration_data_conversion+0x28c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbff 	bl	8000558 <__aeabi_f2d>
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	460d      	mov	r5, r1
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <acceleration_data_conversion+0x290>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbf8 	bl	8000558 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001d70:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001d74:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001d78:	ed97 7b00 	vldr	d7, [r7]
 8001d7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d80:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001d88:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d90:	e9cd ab00 	strd	sl, fp, [sp]
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <acceleration_data_conversion+0x294>)
 8001d9a:	6a38      	ldr	r0, [r7, #32]
 8001d9c:	f008 fad6 	bl	800a34c <siprintf>
            g_force_x, g_force_y, g_force_z,
            roll, pitch,
            velocity_x, velocity_y, velocity_z);
}
 8001da0:	bf00      	nop
 8001da2:	3748      	adds	r7, #72	; 0x48
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001daa:	bf00      	nop
 8001dac:	f3af 8000 	nop.w
 8001db0:	60000000 	.word	0x60000000
 8001db4:	400921fb 	.word	0x400921fb
 8001db8:	47ae147b 	.word	0x47ae147b
 8001dbc:	3f847ae1 	.word	0x3f847ae1
 8001dc0:	411cf5c3 	.word	0x411cf5c3
 8001dc4:	40668000 	.word	0x40668000
 8001dc8:	20000744 	.word	0x20000744
 8001dcc:	20000748 	.word	0x20000748
 8001dd0:	2000074c 	.word	0x2000074c
 8001dd4:	0800de30 	.word	0x0800de30

08001dd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4a35      	ldr	r2, [pc, #212]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001df8:	6153      	str	r3, [r2, #20]
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e10:	6153      	str	r3, [r2, #20]
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6153      	str	r3, [r2, #20]
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MX_GPIO_Init+0xf0>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2120      	movs	r1, #32
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f001 f93b 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e60:	481a      	ldr	r0, [pc, #104]	; (8001ecc <MX_GPIO_Init+0xf4>)
 8001e62:	f001 f935 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <MX_GPIO_Init+0xf8>)
 8001e7e:	f000 ff9d 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e82:	2320      	movs	r3, #32
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f000 ff8e 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <MX_GPIO_Init+0xf4>)
 8001eba:	f000 ff7f 	bl	8002dbc <HAL_GPIO_Init>

}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800

08001ed4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <MX_I2C1_Init+0x78>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <MX_I2C1_Init+0x7c>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001f10:	f001 f8f6 	bl	8003100 <HAL_I2C_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f1a:	f000 f969 	bl	80021f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001f22:	f001 fdef 	bl	8003b04 <HAL_I2CEx_ConfigAnalogFilter>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f2c:	f000 f960 	bl	80021f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_I2C1_Init+0x74>)
 8001f34:	f001 fe31 	bl	8003b9a <HAL_I2CEx_ConfigDigitalFilter>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f3e:	f000 f957 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000750 	.word	0x20000750
 8001f4c:	40005400 	.word	0x40005400
 8001f50:	2000090e 	.word	0x2000090e

08001f54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_I2C_MspInit+0x150>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f040 8092 	bne.w	800209c <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	4a4a      	ldr	r2, [pc, #296]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f82:	6153      	str	r3, [r2, #20]
 8001f84:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4a44      	ldr	r2, [pc, #272]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9a:	6153      	str	r3, [r2, #20]
 8001f9c:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fae:	2312      	movs	r3, #18
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f000 fef8 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4831      	ldr	r0, [pc, #196]	; (80020ac <HAL_I2C_MspInit+0x158>)
 8001fe8:	f000 fee8 	bl	8002dbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ff6:	61d3      	str	r3, [r2, #28]
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_I2C_MspInit+0x154>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002006:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <HAL_I2C_MspInit+0x160>)
 8002008:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002034:	481e      	ldr	r0, [pc, #120]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002036:	f000 fd9b 	bl	8002b70 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8002040:	f000 f8d6 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_I2C_MspInit+0x15c>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_I2C_MspInit+0x168>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002058:	2210      	movs	r2, #16
 800205a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002082:	f000 fd75 	bl	8002b70 <HAL_DMA_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 800208c:	f000 f8b0 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_I2C_MspInit+0x164>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800209c:	bf00      	nop
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40005400 	.word	0x40005400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400
 80020b0:	200007a4 	.word	0x200007a4
 80020b4:	40020080 	.word	0x40020080
 80020b8:	200007e8 	.word	0x200007e8
 80020bc:	4002006c 	.word	0x4002006c

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c4:	f000 fc18 	bl	80028f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c8:	f000 f81a 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020cc:	f7ff fe84 	bl	8001dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80020d0:	f7ff fb26 	bl	8001720 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020d4:	f000 fb10 	bl	80026f8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80020d8:	f000 f890 	bl	80021fc <MX_SPI2_Init>
  MX_I2C1_Init();
 80020dc:	f7ff fefa 	bl	8001ed4 <MX_I2C1_Init>
  MX_TIM17_Init();
 80020e0:	f000 fac4 	bl	800266c <MX_TIM17_Init>
  MX_USART3_UART_Init();
 80020e4:	f000 fb38 	bl	8002758 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 80020e8:	f7fe fe0c 	bl	8000d04 <CANSPI_Initialize>
  BNO055_Init_I2C(&hi2c1);
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <main+0x3c>)
 80020ee:	f7ff fa23 	bl	8001538 <BNO055_Init_I2C>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80020f2:	f7ff fb55 	bl	80017a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020f6:	f005 f960 	bl	80073ba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <main+0x3a>
 80020fc:	20000750 	.word	0x20000750

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0a6      	sub	sp, #152	; 0x98
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800210a:	2228      	movs	r2, #40	; 0x28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f008 f97f 	bl	800a412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2258      	movs	r2, #88	; 0x58
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f008 f971 	bl	800a412 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002130:	2302      	movs	r3, #2
 8002132:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002138:	2310      	movs	r3, #16
 800213a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800214c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800215e:	4618      	mov	r0, r3
 8002160:	f001 fd68 	bl	8003c34 <HAL_RCC_OscConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800216a:	f000 f841 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216e:	230f      	movs	r3, #15
 8002170:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002172:	2302      	movs	r3, #2
 8002174:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002184:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f002 fda6 	bl	8004cdc <HAL_RCC_ClockConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002196:	f000 f82b 	bl	80021f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <SystemClock_Config+0xc8>)
 800219c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fffb 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80021bc:	f000 f818 	bl	80021f0 <Error_Handler>
  }
}
 80021c0:	bf00      	nop
 80021c2:	3798      	adds	r7, #152	; 0x98
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	01000026 	.word	0x01000026

080021cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021de:	f000 fba1 	bl	8002924 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40012c00 	.word	0x40012c00

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>
	...

080021fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <MX_SPI2_Init+0x74>)
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <MX_SPI2_Init+0x78>)
 8002204:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_SPI2_Init+0x74>)
 8002208:	f44f 7282 	mov.w	r2, #260	; 0x104
 800220c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <MX_SPI2_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <MX_SPI2_Init+0x74>)
 8002216:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800221a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <MX_SPI2_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <MX_SPI2_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_SPI2_Init+0x74>)
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <MX_SPI2_Init+0x74>)
 8002232:	2208      	movs	r2, #8
 8002234:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_SPI2_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_SPI2_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_SPI2_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_SPI2_Init+0x74>)
 800224a:	2207      	movs	r2, #7
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_SPI2_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_SPI2_Init+0x74>)
 8002256:	2208      	movs	r2, #8
 8002258:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_SPI2_Init+0x74>)
 800225c:	f003 f9c4 	bl	80055e8 <HAL_SPI_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002266:	f7ff ffc3 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000082c 	.word	0x2000082c
 8002274:	40003800 	.word	0x40003800

08002278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_SPI_MspInit+0xa0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d139      	bne.n	800230e <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_SPI_MspInit+0xa4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_SPI_MspInit+0xa4>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	61d3      	str	r3, [r2, #28]
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_SPI_MspInit+0xa4>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_SPI_MspInit+0xa4>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_SPI_MspInit+0xa4>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6153      	str	r3, [r2, #20]
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_SPI_MspInit+0xa4>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022ca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022dc:	2305      	movs	r3, #5
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <HAL_SPI_MspInit+0xa8>)
 80022e8:	f000 fd68 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fe:	2305      	movs	r3, #5
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <HAL_SPI_MspInit+0xa8>)
 800230a:	f000 fd57 	bl	8002dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40003800 	.word	0x40003800
 800231c:	40021000 	.word	0x40021000
 8002320:	48000400 	.word	0x48000400

08002324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_MspInit+0x4c>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_MspInit+0x4c>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6193      	str	r3, [r2, #24]
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_MspInit+0x4c>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_MspInit+0x4c>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_MspInit+0x4c>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_MspInit+0x4c>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	210f      	movs	r1, #15
 800235e:	f06f 0001 	mvn.w	r0, #1
 8002362:	f000 fbdb 	bl	8002b1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_InitTick+0xcc>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <HAL_InitTick+0xcc>)
 800238a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_InitTick+0xcc>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fece 	bl	8005148 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023ac:	f002 feaa 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 80023b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_InitTick+0xd0>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9b      	lsrs	r3, r3, #18
 80023bc:	3b01      	subs	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_InitTick+0xd4>)
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_InitTick+0xd8>)
 80023c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_InitTick+0xd4>)
 80023c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_InitTick+0xd4>)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_InitTick+0xd4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_InitTick+0xd4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_InitTick+0xd4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80023e6:	4818      	ldr	r0, [pc, #96]	; (8002448 <HAL_InitTick+0xd4>)
 80023e8:	f004 f842 	bl	8006470 <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d11b      	bne.n	8002432 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023fa:	4813      	ldr	r0, [pc, #76]	; (8002448 <HAL_InitTick+0xd4>)
 80023fc:	f004 f890 	bl	8006520 <HAL_TIM_Base_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240a:	2b00      	cmp	r3, #0
 800240c:	d111      	bne.n	8002432 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800240e:	2019      	movs	r0, #25
 8002410:	f000 fba0 	bl	8002b54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d808      	bhi.n	800242c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800241a:	2200      	movs	r2, #0
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	2019      	movs	r0, #25
 8002420:	f000 fb7c 	bl	8002b1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_InitTick+0xdc>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e002      	b.n	8002432 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002436:	4618      	mov	r0, r3
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	431bde83 	.word	0x431bde83
 8002448:	20000890 	.word	0x20000890
 800244c:	40012c00 	.word	0x40012c00
 8002450:	2000000c 	.word	0x2000000c

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <NMI_Handler+0x4>

0800245a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <HardFault_Handler+0x4>

08002460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <MemManage_Handler+0x4>

08002466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <UsageFault_Handler+0x4>

08002472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <DMA1_Channel6_IRQHandler+0x10>)
 8002486:	f000 fbba 	bl	8002bfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200007e8 	.word	0x200007e8

08002494 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA1_Channel7_IRQHandler+0x10>)
 800249a:	f000 fbb0 	bl	8002bfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200007a4 	.word	0x200007a4

080024a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024ae:	f004 f8a7 	bl	8006600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000890 	.word	0x20000890

080024bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return 1;
 80024c0:	2301      	movs	r3, #1
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_kill>:

int _kill(int pid, int sig)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024d6:	f008 f845 	bl	800a564 <__errno>
 80024da:	4603      	mov	r3, r0
 80024dc:	2216      	movs	r2, #22
 80024de:	601a      	str	r2, [r3, #0]
  return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_exit>:

void _exit (int status)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ffe7 	bl	80024cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80024fe:	e7fe      	b.n	80024fe <_exit+0x12>

08002500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e00a      	b.n	8002528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002512:	f3af 8000 	nop.w
 8002516:	4601      	mov	r1, r0
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60ba      	str	r2, [r7, #8]
 800251e:	b2ca      	uxtb	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	dbf0      	blt.n	8002512 <_read+0x12>
  }

  return len;
 8002530:	687b      	ldr	r3, [r7, #4]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e009      	b.n	8002560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf1      	blt.n	800254c <_write+0x12>
  }
  return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_close>:

int _close(int file)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800259a:	605a      	str	r2, [r3, #4]
  return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_isatty>:

int _isatty(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <_sbrk+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <_sbrk+0x60>)
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x64>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <_sbrk+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800260c:	f007 ffaa 	bl	800a564 <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e009      	b.n	8002630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <_sbrk+0x64>)
 800262c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20010000 	.word	0x20010000
 800263c:	00000400 	.word	0x00000400
 8002640:	200008dc 	.word	0x200008dc
 8002644:	200018d8 	.word	0x200018d8

08002648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <SystemInit+0x20>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <SystemInit+0x20>)
 8002654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <MX_TIM17_Init+0x44>)
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <MX_TIM17_Init+0x48>)
 8002674:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <MX_TIM17_Init+0x44>)
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <MX_TIM17_Init+0x44>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <MX_TIM17_Init+0x44>)
 8002684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002688:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <MX_TIM17_Init+0x44>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <MX_TIM17_Init+0x44>)
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <MX_TIM17_Init+0x44>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <MX_TIM17_Init+0x44>)
 800269e:	f003 fee7 	bl	8006470 <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80026a8:	f7ff fda2 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200008e0 	.word	0x200008e0
 80026b4:	40014800 	.word	0x40014800

080026b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_TIM_Base_MspInit+0x38>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10b      	bne.n	80026e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_TIM_Base_MspInit+0x3c>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_TIM_Base_MspInit+0x3c>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6193      	str	r3, [r2, #24]
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_TIM_Base_MspInit+0x3c>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40014800 	.word	0x40014800
 80026f4:	40021000 	.word	0x40021000

080026f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MX_USART2_UART_Init+0x58>)
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <MX_USART2_UART_Init+0x5c>)
 8002700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <MX_USART2_UART_Init+0x58>)
 8002704:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_USART2_UART_Init+0x58>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <MX_USART2_UART_Init+0x58>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_USART2_UART_Init+0x58>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_USART2_UART_Init+0x58>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_USART2_UART_Init+0x58>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_USART2_UART_Init+0x58>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_USART2_UART_Init+0x58>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_USART2_UART_Init+0x58>)
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_USART2_UART_Init+0x58>)
 800273c:	f004 f964 	bl	8006a08 <HAL_UART_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002746:	f7ff fd53 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000092c 	.word	0x2000092c
 8002754:	40004400 	.word	0x40004400

08002758 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <MX_USART3_UART_Init+0x5c>)
 8002760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002764:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART3_UART_Init+0x58>)
 800279c:	f004 f934 	bl	8006a08 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027a6:	f7ff fd23 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200009b4 	.word	0x200009b4
 80027b4:	40004800 	.word	0x40004800

080027b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <HAL_UART_MspInit+0xdc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d129      	bne.n	800282e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <HAL_UART_MspInit+0xe0>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <HAL_UART_MspInit+0xe0>)
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_UART_MspInit+0xe0>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_UART_MspInit+0xe0>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_UART_MspInit+0xe0>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	6153      	str	r3, [r2, #20]
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_UART_MspInit+0xe0>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800280a:	230c      	movs	r3, #12
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281a:	2307      	movs	r3, #7
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f000 fac8 	bl	8002dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800282c:	e02d      	b.n	800288a <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_UART_MspInit+0xe4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d128      	bne.n	800288a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_UART_MspInit+0xe0>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_UART_MspInit+0xe0>)
 800283e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002842:	61d3      	str	r3, [r2, #28]
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_UART_MspInit+0xe0>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_UART_MspInit+0xe0>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_UART_MspInit+0xe0>)
 8002856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285a:	6153      	str	r3, [r2, #20]
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_UART_MspInit+0xe0>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800287a:	2307      	movs	r3, #7
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	4806      	ldr	r0, [pc, #24]	; (80028a0 <HAL_UART_MspInit+0xe8>)
 8002886:	f000 fa99 	bl	8002dbc <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3730      	adds	r7, #48	; 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40004400 	.word	0x40004400
 8002898:	40021000 	.word	0x40021000
 800289c:	40004800 	.word	0x40004800
 80028a0:	48000400 	.word	0x48000400

080028a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a8:	f7ff fece 	bl	8002648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80028ae:	490d      	ldr	r1, [pc, #52]	; (80028e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <LoopForever+0xe>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c4:	4c0a      	ldr	r4, [pc, #40]	; (80028f0 <LoopForever+0x16>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d2:	f007 fe4d 	bl	800a570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028d6:	f7ff fbf3 	bl	80020c0 <main>

080028da <LoopForever>:

LoopForever:
    b LoopForever
 80028da:	e7fe      	b.n	80028da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80028e8:	0800e3b8 	.word	0x0800e3b8
  ldr r2, =_sbss
 80028ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80028f0:	200018d8 	.word	0x200018d8

080028f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC1_2_IRQHandler>
	...

080028f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_Init+0x28>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_Init+0x28>)
 8002902:	f043 0310 	orr.w	r3, r3, #16
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 f8fc 	bl	8002b06 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	200f      	movs	r0, #15
 8002910:	f7ff fd30 	bl	8002374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fd06 	bl	8002324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_IncTick+0x20>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_IncTick+0x24>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_IncTick+0x24>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000010 	.word	0x20000010
 8002948:	20000a3c 	.word	0x20000a3c

0800294c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_GetTick+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000a3c 	.word	0x20000a3c

08002964 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff ffee 	bl	800294c <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d005      	beq.n	800298a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_Delay+0x44>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800298a:	bf00      	nop
 800298c:	f7ff ffde 	bl	800294c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8f7      	bhi.n	800298c <HAL_Delay+0x28>
  {
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000010 	.word	0x20000010

080029ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <__NVIC_GetPriorityGrouping+0x18>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 0307 	and.w	r3, r3, #7
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	db0b      	blt.n	8002a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <__NVIC_EnableIRQ+0x38>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2001      	movs	r0, #1
 8002a32:	fa00 f202 	lsl.w	r2, r0, r2
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff4c 	bl	80029ac <__NVIC_SetPriorityGrouping>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2e:	f7ff ff61 	bl	80029f4 <__NVIC_GetPriorityGrouping>
 8002b32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f7ff ffb1 	bl	8002aa0 <NVIC_EncodePriority>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff80 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff54 	bl	8002a10 <__NVIC_EnableIRQ>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e037      	b.n	8002bf6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ba0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f8b3 	bl	8002d44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}  
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d024      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x72>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01f      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0204 	bic.w	r2, r2, #4
 8002c4c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	2104      	movs	r1, #4
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d06a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002c6e:	e065      	b.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2202      	movs	r2, #2
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02c      	beq.n	8002cda <HAL_DMA_IRQHandler+0xdc>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 020a 	bic.w	r2, r2, #10
 8002ca6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	2102      	movs	r1, #2
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d035      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002cd8:	e030      	b.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2208      	movs	r2, #8
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d028      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d023      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 020e 	bic.w	r2, r2, #14
 8002d02:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
    }
  }
}  
 8002d3a:	e7ff      	b.n	8002d3c <HAL_DMA_IRQHandler+0x13e>
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <DMA_CalcBaseAndBitshift+0x60>)
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d80f      	bhi.n	8002d78 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d60:	4413      	add	r3, r2
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <DMA_CalcBaseAndBitshift+0x68>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	009a      	lsls	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002d74:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002d76:	e00e      	b.n	8002d96 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <DMA_CalcBaseAndBitshift+0x70>)
 8002d80:	4413      	add	r3, r2
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <DMA_CalcBaseAndBitshift+0x68>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	009a      	lsls	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <DMA_CalcBaseAndBitshift+0x74>)
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40020407 	.word	0x40020407
 8002da8:	bffdfff8 	.word	0xbffdfff8
 8002dac:	cccccccd 	.word	0xcccccccd
 8002db0:	40020000 	.word	0x40020000
 8002db4:	bffdfbf8 	.word	0xbffdfbf8
 8002db8:	40020400 	.word	0x40020400

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dca:	e160      	b.n	800308e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8152 	beq.w	8003088 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d005      	beq.n	8002dfc <HAL_GPIO_Init+0x40>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d130      	bne.n	8002e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e32:	2201      	movs	r2, #1
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0201 	and.w	r2, r3, #1
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d017      	beq.n	8002e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d123      	bne.n	8002eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	08da      	lsrs	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3208      	adds	r2, #8
 8002ee8:	6939      	ldr	r1, [r7, #16]
 8002eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80ac 	beq.w	8003088 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f30:	4b5e      	ldr	r3, [pc, #376]	; (80030ac <HAL_GPIO_Init+0x2f0>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	4a5d      	ldr	r2, [pc, #372]	; (80030ac <HAL_GPIO_Init+0x2f0>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6193      	str	r3, [r2, #24]
 8002f3c:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <HAL_GPIO_Init+0x2f0>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f48:	4a59      	ldr	r2, [pc, #356]	; (80030b0 <HAL_GPIO_Init+0x2f4>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f72:	d025      	beq.n	8002fc0 <HAL_GPIO_Init+0x204>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x2f8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01f      	beq.n	8002fbc <HAL_GPIO_Init+0x200>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_GPIO_Init+0x2fc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d019      	beq.n	8002fb8 <HAL_GPIO_Init+0x1fc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_GPIO_Init+0x300>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_GPIO_Init+0x1f8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_GPIO_Init+0x304>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00d      	beq.n	8002fb0 <HAL_GPIO_Init+0x1f4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x308>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <HAL_GPIO_Init+0x1f0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_GPIO_Init+0x30c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_GPIO_Init+0x1ec>
 8002fa4:	2306      	movs	r3, #6
 8002fa6:	e00c      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fa8:	2307      	movs	r3, #7
 8002faa:	e00a      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fac:	2305      	movs	r3, #5
 8002fae:	e008      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e006      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e004      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e002      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_GPIO_Init+0x206>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fd2:	4937      	ldr	r1, [pc, #220]	; (80030b0 <HAL_GPIO_Init+0x2f4>)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_GPIO_Init+0x310>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003004:	4a31      	ldr	r2, [pc, #196]	; (80030cc <HAL_GPIO_Init+0x310>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_GPIO_Init+0x310>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800302e:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_GPIO_Init+0x310>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_GPIO_Init+0x310>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003058:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <HAL_GPIO_Init+0x310>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_GPIO_Init+0x310>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_GPIO_Init+0x310>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f ae97 	bne.w	8002dcc <HAL_GPIO_Init+0x10>
  }
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010000 	.word	0x40010000
 80030b4:	48000400 	.word	0x48000400
 80030b8:	48000800 	.word	0x48000800
 80030bc:	48000c00 	.word	0x48000c00
 80030c0:	48001000 	.word	0x48001000
 80030c4:	48001400 	.word	0x48001400
 80030c8:	48001800 	.word	0x48001800
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e081      	b.n	8003216 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe ff14 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	e006      	b.n	8003188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d104      	bne.n	800319a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80da 	bne.w	80033f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x30>
 800324c:	2302      	movs	r3, #2
 800324e:	e0d3      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003258:	f7ff fb78 	bl	800294c <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2319      	movs	r3, #25
 8003264:	2201      	movs	r2, #1
 8003266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fa5e 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0be      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2210      	movs	r2, #16
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2bff      	cmp	r3, #255	; 0xff
 80032aa:	d90e      	bls.n	80032ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	4b51      	ldr	r3, [pc, #324]	; (8003400 <HAL_I2C_Master_Transmit+0x1e0>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fbec 	bl	8003aa0 <I2C_TransferConfig>
 80032c8:	e06c      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_I2C_Master_Transmit+0x1e0>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fbdb 	bl	8003aa0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032ea:	e05b      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	6a39      	ldr	r1, [r7, #32]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fa6a 	bl	80037ca <I2C_WaitOnTXISFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e07b      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d034      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x184>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d130      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f9ed 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e04d      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d90e      	bls.n	8003384 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	2300      	movs	r3, #0
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fb8f 	bl	8003aa0 <I2C_TransferConfig>
 8003382:	e00f      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	b2da      	uxtb	r2, r3
 8003394:	8979      	ldrh	r1, [r7, #10]
 8003396:	2300      	movs	r3, #0
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fb7e 	bl	8003aa0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d19e      	bne.n	80032ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa50 	bl	8003858 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e01a      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2220      	movs	r2, #32
 80033c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_I2C_Master_Transmit+0x1e4>)
 80033d6:	400b      	ands	r3, r1
 80033d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
  }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	80002000 	.word	0x80002000
 8003404:	fe00e800 	.word	0xfe00e800

08003408 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	f040 80fd 	bne.w	800362a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_I2C_Mem_Read+0x34>
 8003436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0f1      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Mem_Read+0x4e>
 8003452:	2302      	movs	r3, #2
 8003454:	e0ea      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800345e:	f7ff fa75 	bl	800294c <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f95b 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d5      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2222      	movs	r2, #34	; 0x22
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a8:	88f8      	ldrh	r0, [r7, #6]
 80034aa:	893a      	ldrh	r2, [r7, #8]
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4603      	mov	r3, r0
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f8bf 	bl	800363c <I2C_RequestMemoryRead>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0ad      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2bff      	cmp	r3, #255	; 0xff
 80034d8:	d90e      	bls.n	80034f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	22ff      	movs	r2, #255	; 0xff
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <HAL_I2C_Mem_Read+0x22c>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fad5 	bl	8003aa0 <I2C_TransferConfig>
 80034f6:	e00f      	b.n	8003518 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	b2da      	uxtb	r2, r3
 8003508:	8979      	ldrh	r1, [r7, #10]
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_I2C_Mem_Read+0x22c>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fac4 	bl	8003aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2200      	movs	r2, #0
 8003520:	2104      	movs	r1, #4
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f902 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07c      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d034      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d130      	bne.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f8d3 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04d      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2bff      	cmp	r3, #255	; 0xff
 8003598:	d90e      	bls.n	80035b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	; 0xff
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	8979      	ldrh	r1, [r7, #10]
 80035a8:	2300      	movs	r3, #0
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fa75 	bl	8003aa0 <I2C_TransferConfig>
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fa64 	bl	8003aa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d19a      	bne.n	8003518 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f936 	bl	8003858 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01a      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2220      	movs	r2, #32
 80035fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_I2C_Mem_Read+0x230>)
 800360a:	400b      	ands	r3, r1
 800360c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	80002400 	.word	0x80002400
 8003638:	fe00e800 	.word	0xfe00e800

0800363c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <I2C_RequestMemoryRead+0xa4>)
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa1c 	bl	8003aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f8ac 	bl	80037ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e02c      	b.n	80036d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003682:	893b      	ldrh	r3, [r7, #8]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	e015      	b.n	80036ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800368e:	893b      	ldrh	r3, [r7, #8]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	b29b      	uxth	r3, r3
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f892 	bl	80037ca <I2C_WaitOnTXISFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e012      	b.n	80036d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f831 	bl	800372c <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	80002000 	.word	0x80002000

080036e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d103      	bne.n	8003702 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d007      	beq.n	8003720 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	619a      	str	r2, [r3, #24]
  }
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	e031      	b.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d02d      	beq.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7ff f901 	bl	800294c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d122      	bne.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d113      	bne.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4013      	ands	r3, r2
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d0be      	beq.n	800373e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d6:	e033      	b.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f87f 	bl	80038e0 <I2C_IsErrorOccurred>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e031      	b.n	8003850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d025      	beq.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7ff f8aa 	bl	800294c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11a      	bne.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d013      	beq.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e007      	b.n	8003850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d1c4      	bne.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003864:	e02f      	b.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f838 	bl	80038e0 <I2C_IsErrorOccurred>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02d      	b.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7ff f867 	bl	800294c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d11a      	bne.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d013      	beq.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d1c8      	bne.n	8003866 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d068      	beq.n	80039de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2210      	movs	r2, #16
 8003912:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003914:	e049      	b.n	80039aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d045      	beq.n	80039aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7ff f815 	bl	800294c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_IsErrorOccurred+0x54>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13a      	bne.n	80039aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003946:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003956:	d121      	bne.n	800399c <I2C_IsErrorOccurred+0xbc>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800395e:	d01d      	beq.n	800399c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	2b20      	cmp	r3, #32
 8003964:	d01a      	beq.n	800399c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003974:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003976:	f7fe ffe9 	bl	800294c <HAL_GetTick>
 800397a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800397c:	e00e      	b.n	800399c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800397e:	f7fe ffe5 	bl	800294c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b19      	cmp	r3, #25
 800398a:	d907      	bls.n	800399c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f043 0320 	orr.w	r3, r3, #32
 8003992:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800399a:	e006      	b.n	80039aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d1e9      	bne.n	800397e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d003      	beq.n	80039c0 <I2C_IsErrorOccurred+0xe0>
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0aa      	beq.n	8003916 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2220      	movs	r2, #32
 80039ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01c      	beq.n	8003a8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff fe45 	bl	80036e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <I2C_IsErrorOccurred+0x1bc>)
 8003a66:	400b      	ands	r3, r1
 8003a68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	fe00e800 	.word	0xfe00e800

08003aa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab2:	897b      	ldrh	r3, [r7, #10]
 8003ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab8:	7a7b      	ldrb	r3, [r7, #9]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ace:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	0d5b      	lsrs	r3, r3, #21
 8003ada:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <I2C_TransferConfig+0x60>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	ea02 0103 	and.w	r1, r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	03ff63ff 	.word	0x03ff63ff

08003b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d138      	bne.n	8003b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e032      	b.n	8003b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d139      	bne.n	8003c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e033      	b.n	8003c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2224      	movs	r2, #36	; 0x24
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f001 b83a 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 816f 	beq.w	8003f4e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c70:	4bb5      	ldr	r3, [pc, #724]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d00c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c7c:	4bb2      	ldr	r3, [pc, #712]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d15c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x10e>
 8003c88:	4baf      	ldr	r3, [pc, #700]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d155      	bne.n	8003d42 <HAL_RCC_OscConfig+0x10e>
 8003c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003caa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x94>
 8003cc2:	4ba1      	ldr	r3, [pc, #644]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	e015      	b.n	8003cf4 <HAL_RCC_OscConfig+0xc0>
 8003cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ccc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ce4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003cf0:	4b95      	ldr	r3, [pc, #596]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cf8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003cfc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003d00:	fa92 f2a2 	rbit	r2, r2
 8003d04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003d08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8111 	beq.w	8003f4c <HAL_RCC_OscConfig+0x318>
 8003d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 8108 	bne.w	8003f4c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f000 bfc6 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12e>
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a7b      	ldr	r2, [pc, #492]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e036      	b.n	8003dd0 <HAL_RCC_OscConfig+0x19c>
 8003d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x158>
 8003d72:	4b75      	ldr	r3, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a74      	ldr	r2, [pc, #464]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a71      	ldr	r2, [pc, #452]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e021      	b.n	8003dd0 <HAL_RCC_OscConfig+0x19c>
 8003d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x184>
 8003d9e:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a69      	ldr	r2, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b67      	ldr	r3, [pc, #412]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a66      	ldr	r2, [pc, #408]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x19c>
 8003db8:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a62      	ldr	r2, [pc, #392]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b60      	ldr	r3, [pc, #384]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5f      	ldr	r2, [pc, #380]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d059      	beq.n	8003e94 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fe fdb4 	bl	800294c <HAL_GetTick>
 8003de4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dea:	f7fe fdaf 	bl	800294c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d902      	bls.n	8003e00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	f000 bf67 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
 8003e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003e14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_OscConfig+0x1fe>
 8003e2c:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	e015      	b.n	8003e5e <HAL_RCC_OscConfig+0x22a>
 8003e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003e66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003e6a:	fa92 f2a2 	rbit	r2, r2
 8003e6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003e72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e76:	fab2 f282 	clz	r2, r2
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f002 021f 	and.w	r2, r2, #31
 8003e86:	2101      	movs	r1, #1
 8003e88:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ab      	beq.n	8003dea <HAL_RCC_OscConfig+0x1b6>
 8003e92:	e05c      	b.n	8003f4e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe fd5a 	bl	800294c <HAL_GetTick>
 8003e98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9e:	f7fe fd55 	bl	800294c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d902      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	f000 bf0d 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
 8003eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eb8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003ec8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d102      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x2b2>
 8003ee0:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	e015      	b.n	8003f12 <HAL_RCC_OscConfig+0x2de>
 8003ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003efe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <HAL_RCC_OscConfig+0x314>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003f1a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003f26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f2a:	fab2 f282 	clz	r2, r2
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f042 0220 	orr.w	r2, r2, #32
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	f002 021f 	and.w	r2, r2, #31
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ab      	bne.n	8003e9e <HAL_RCC_OscConfig+0x26a>
 8003f46:	e002      	b.n	8003f4e <HAL_RCC_OscConfig+0x31a>
 8003f48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 817f 	beq.w	8004262 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f64:	4ba7      	ldr	r3, [pc, #668]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f70:	4ba4      	ldr	r3, [pc, #656]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d173      	bne.n	8004064 <HAL_RCC_OscConfig+0x430>
 8003f7c:	4ba1      	ldr	r3, [pc, #644]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f88:	d16c      	bne.n	8004064 <HAL_RCC_OscConfig+0x430>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003f9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_RCC_OscConfig+0x386>
 8003fb4:	4b93      	ldr	r3, [pc, #588]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	e013      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3ae>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003fd2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003fe8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003fec:	fa92 f2a2 	rbit	r2, r2
 8003ff0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003ff4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ff8:	fab2 f282 	clz	r2, r2
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	f042 0220 	orr.w	r2, r2, #32
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	f002 021f 	and.w	r2, r2, #31
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f202 	lsl.w	r2, r1, r2
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCC_OscConfig+0x3f6>
 8004014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d002      	beq.n	800402a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f000 be52 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b76      	ldr	r3, [pc, #472]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	21f8      	movs	r1, #248	; 0xf8
 8004040:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004048:	fa91 f1a1 	rbit	r1, r1
 800404c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004050:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004054:	fab1 f181 	clz	r1, r1
 8004058:	b2c9      	uxtb	r1, r1
 800405a:	408b      	lsls	r3, r1
 800405c:	4969      	ldr	r1, [pc, #420]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e0fe      	b.n	8004262 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004068:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8088 	beq.w	8004186 <HAL_RCC_OscConfig+0x552>
 8004076:	2301      	movs	r3, #1
 8004078:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004088:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004096:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	461a      	mov	r2, r3
 800409e:	2301      	movs	r3, #1
 80040a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe fc53 	bl	800294c <HAL_GetTick>
 80040a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ac:	f7fe fc4e 	bl	800294c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d902      	bls.n	80040c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	f000 be06 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80040d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4be>
 80040ec:	4b45      	ldr	r3, [pc, #276]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	e013      	b.n	800411a <HAL_RCC_OscConfig+0x4e6>
 80040f2:	2302      	movs	r3, #2
 80040f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004104:	2302      	movs	r3, #2
 8004106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800410a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	2202      	movs	r2, #2
 800411c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004120:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004124:	fa92 f2a2 	rbit	r2, r2
 8004128:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800412c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004130:	fab2 f282 	clz	r2, r2
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	f042 0220 	orr.w	r2, r2, #32
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	f002 021f 	and.w	r2, r2, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f202 	lsl.w	r2, r1, r2
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0af      	beq.n	80040ac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	21f8      	movs	r1, #248	; 0xf8
 8004162:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800416a:	fa91 f1a1 	rbit	r1, r1
 800416e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004172:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004176:	fab1 f181 	clz	r1, r1
 800417a:	b2c9      	uxtb	r1, r1
 800417c:	408b      	lsls	r3, r1
 800417e:	4921      	ldr	r1, [pc, #132]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e06d      	b.n	8004262 <HAL_RCC_OscConfig+0x62e>
 8004186:	2301      	movs	r3, #1
 8004188:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004198:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	461a      	mov	r2, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fbcb 	bl	800294c <HAL_GetTick>
 80041b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041bc:	f7fe fbc6 	bl	800294c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d902      	bls.n	80041d2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	f000 bd7e 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80041e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0x5d4>
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <HAL_RCC_OscConfig+0x5d0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	e016      	b.n	8004230 <HAL_RCC_OscConfig+0x5fc>
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	2302      	movs	r3, #2
 800420a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800421a:	2302      	movs	r3, #2
 800421c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004220:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800422c:	4bbf      	ldr	r3, [pc, #764]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2202      	movs	r2, #2
 8004232:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004236:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800423a:	fa92 f2a2 	rbit	r2, r2
 800423e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004242:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ac      	bne.n	80041bc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004266:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8113 	beq.w	800449e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800427c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d07c      	beq.n	8004382 <HAL_RCC_OscConfig+0x74e>
 8004288:	2301      	movs	r3, #1
 800428a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800429a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	4ba2      	ldr	r3, [pc, #648]	; (8004530 <HAL_RCC_OscConfig+0x8fc>)
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	461a      	mov	r2, r3
 80042ae:	2301      	movs	r3, #1
 80042b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fb4b 	bl	800294c <HAL_GetTick>
 80042b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fe fb46 	bl	800294c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	f000 bcfe 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042dc:	fa93 f2a3 	rbit	r2, r3
 80042e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042f2:	2202      	movs	r2, #2
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fa93 f2a3 	rbit	r2, r3
 8004304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004312:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004316:	2202      	movs	r2, #2
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	fa93 f2a3 	rbit	r2, r3
 8004328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004330:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004332:	4b7e      	ldr	r3, [pc, #504]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 8004334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800433e:	2102      	movs	r1, #2
 8004340:	6019      	str	r1, [r3, #0]
 8004342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004346:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	fa93 f1a3 	rbit	r1, r3
 8004350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004354:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004358:	6019      	str	r1, [r3, #0]
  return result;
 800435a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d09d      	beq.n	80042bc <HAL_RCC_OscConfig+0x688>
 8004380:	e08d      	b.n	800449e <HAL_RCC_OscConfig+0x86a>
 8004382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004386:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004392:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043a4:	601a      	str	r2, [r3, #0]
  return result;
 80043a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b0:	fab3 f383 	clz	r3, r3
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <HAL_RCC_OscConfig+0x8fc>)
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fe fac2 	bl	800294c <HAL_GetTick>
 80043c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fe fabd 	bl	800294c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	f000 bc75 	b.w	8004cce <HAL_RCC_OscConfig+0x109a>
 80043e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043ec:	2202      	movs	r2, #2
 80043ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	fa93 f2a3 	rbit	r2, r3
 80043fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004402:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800440c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004410:	2202      	movs	r2, #2
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	fa93 f2a3 	rbit	r2, r3
 8004422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004430:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004434:	2202      	movs	r2, #2
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800443c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	fa93 f2a3 	rbit	r2, r3
 8004446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800444e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 8004452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004458:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800445c:	2102      	movs	r1, #2
 800445e:	6019      	str	r1, [r3, #0]
 8004460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004464:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	fa93 f1a3 	rbit	r1, r3
 800446e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004472:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004476:	6019      	str	r1, [r3, #0]
  return result;
 8004478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800447c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d197      	bne.n	80043ce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81a5 	beq.w	80047fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d116      	bne.n	80044f4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	4a18      	ldr	r2, [pc, #96]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	61d3      	str	r3, [r2, #28]
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <HAL_RCC_OscConfig+0x8f8>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80044da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x900>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d121      	bne.n	8004544 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_OscConfig+0x900>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <HAL_RCC_OscConfig+0x900>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450c:	f7fe fa1e 	bl	800294c <HAL_GetTick>
 8004510:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	e010      	b.n	8004538 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004516:	f7fe fa19 	bl	800294c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d908      	bls.n	8004538 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e3d1      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	10908120 	.word	0x10908120
 8004534:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <HAL_RCC_OscConfig+0xb3c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0e8      	beq.n	8004516 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004548:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d106      	bne.n	8004562 <HAL_RCC_OscConfig+0x92e>
 8004554:	4b87      	ldr	r3, [pc, #540]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a86      	ldr	r2, [pc, #536]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6213      	str	r3, [r2, #32]
 8004560:	e035      	b.n	80045ce <HAL_RCC_OscConfig+0x99a>
 8004562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004566:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0x958>
 8004572:	4b80      	ldr	r3, [pc, #512]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a7f      	ldr	r2, [pc, #508]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	4b7d      	ldr	r3, [pc, #500]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a7c      	ldr	r2, [pc, #496]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	6213      	str	r3, [r2, #32]
 800458a:	e020      	b.n	80045ce <HAL_RCC_OscConfig+0x99a>
 800458c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b05      	cmp	r3, #5
 800459a:	d10c      	bne.n	80045b6 <HAL_RCC_OscConfig+0x982>
 800459c:	4b75      	ldr	r3, [pc, #468]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4a74      	ldr	r2, [pc, #464]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	6213      	str	r3, [r2, #32]
 80045a8:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a71      	ldr	r2, [pc, #452]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	e00b      	b.n	80045ce <HAL_RCC_OscConfig+0x99a>
 80045b6:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4a6e      	ldr	r2, [pc, #440]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	6213      	str	r3, [r2, #32]
 80045c2:	4b6c      	ldr	r3, [pc, #432]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4a6b      	ldr	r2, [pc, #428]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 80045c8:	f023 0304 	bic.w	r3, r3, #4
 80045cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8081 	beq.w	80046e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fe f9b4 	bl	800294c <HAL_GetTick>
 80045e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fe f9af 	bl	800294c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e365      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
 8004602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004606:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800460a:	2202      	movs	r2, #2
 800460c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004612:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004620:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800462e:	2202      	movs	r2, #2
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004636:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	fa93 f2a3 	rbit	r2, r3
 8004640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004644:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004648:	601a      	str	r2, [r3, #0]
  return result;
 800464a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800464e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f043 0302 	orr.w	r3, r3, #2
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d102      	bne.n	800466e <HAL_RCC_OscConfig+0xa3a>
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	e013      	b.n	8004696 <HAL_RCC_OscConfig+0xa62>
 800466e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004672:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004676:	2202      	movs	r2, #2
 8004678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800467e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800469a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800469e:	2102      	movs	r1, #2
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	fa92 f1a2 	rbit	r1, r2
 80046b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046b4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80046b8:	6011      	str	r1, [r2, #0]
  return result;
 80046ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046be:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	fab2 f282 	clz	r2, r2
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	f002 021f 	and.w	r2, r2, #31
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f202 	lsl.w	r2, r1, r2
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d084      	beq.n	80045ea <HAL_RCC_OscConfig+0x9b6>
 80046e0:	e083      	b.n	80047ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e2:	f7fe f933 	bl	800294c <HAL_GetTick>
 80046e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fe f92e 	bl	800294c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e2e4      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
 8004704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004708:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800470c:	2202      	movs	r2, #2
 800470e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004714:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	fa93 f2a3 	rbit	r2, r3
 800471e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004722:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004730:	2202      	movs	r2, #2
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004738:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	fa93 f2a3 	rbit	r2, r3
 8004742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004746:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800474a:	601a      	str	r2, [r3, #0]
  return result;
 800474c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004750:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004754:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0xb44>
 800476a:	4b02      	ldr	r3, [pc, #8]	; (8004774 <HAL_RCC_OscConfig+0xb40>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	e017      	b.n	80047a0 <HAL_RCC_OscConfig+0xb6c>
 8004770:	40007000 	.word	0x40007000
 8004774:	40021000 	.word	0x40021000
 8004778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004780:	2202      	movs	r2, #2
 8004782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004788:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	fa93 f2a3 	rbit	r2, r3
 8004792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004796:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	4bb3      	ldr	r3, [pc, #716]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80047a8:	2102      	movs	r1, #2
 80047aa:	6011      	str	r1, [r2, #0]
 80047ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	fa92 f1a2 	rbit	r1, r2
 80047ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047be:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80047c2:	6011      	str	r1, [r2, #0]
  return result;
 80047c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047c8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	fab2 f282 	clz	r2, r2
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f002 021f 	and.w	r2, r2, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f202 	lsl.w	r2, r1, r2
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d180      	bne.n	80046ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d105      	bne.n	80047fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f2:	4b9e      	ldr	r3, [pc, #632]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4a9d      	ldr	r2, [pc, #628]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 80047f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004802:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 825e 	beq.w	8004ccc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004810:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	f000 821f 	beq.w	8004c5c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004822:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b02      	cmp	r3, #2
 800482c:	f040 8170 	bne.w	8004b10 <HAL_RCC_OscConfig+0xedc>
 8004830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004834:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800483c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004842:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	fa93 f2a3 	rbit	r2, r3
 800484c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004850:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004854:	601a      	str	r2, [r3, #0]
  return result;
 8004856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800485e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800486a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fe f869 	bl	800294c <HAL_GetTick>
 800487a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800487e:	e009      	b.n	8004894 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004880:	f7fe f864 	bl	800294c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e21c      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
 8004894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004898:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800489c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	fa93 f2a3 	rbit	r2, r3
 80048b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048b8:	601a      	str	r2, [r3, #0]
  return result;
 80048ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d102      	bne.n	80048de <HAL_RCC_OscConfig+0xcaa>
 80048d8:	4b64      	ldr	r3, [pc, #400]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	e027      	b.n	800492e <HAL_RCC_OscConfig+0xcfa>
 80048de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004908:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800490c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004916:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	fa93 f2a3 	rbit	r2, r3
 8004920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004924:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004932:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004936:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800493a:	6011      	str	r1, [r2, #0]
 800493c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004940:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	fa92 f1a2 	rbit	r1, r2
 800494a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800494e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004952:	6011      	str	r1, [r2, #0]
  return result;
 8004954:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004958:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	fab2 f282 	clz	r2, r2
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	f042 0220 	orr.w	r2, r2, #32
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f002 021f 	and.w	r2, r2, #31
 800496e:	2101      	movs	r1, #1
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d182      	bne.n	8004880 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497a:	4b3c      	ldr	r3, [pc, #240]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f023 020f 	bic.w	r2, r3, #15
 8004982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004986:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4937      	ldr	r1, [pc, #220]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 8004990:	4313      	orrs	r3, r2
 8004992:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800499c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a19      	ldr	r1, [r3, #32]
 80049a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	430b      	orrs	r3, r1
 80049b6:	492d      	ldr	r1, [pc, #180]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
 80049bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80049c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	fa93 f2a3 	rbit	r2, r3
 80049d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049e0:	601a      	str	r2, [r3, #0]
  return result;
 80049e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049ea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	461a      	mov	r2, r3
 80049fe:	2301      	movs	r3, #1
 8004a00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fd ffa3 	bl	800294c <HAL_GetTick>
 8004a06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0a:	e009      	b.n	8004a20 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fd ff9e 	bl	800294c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e156      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
 8004a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	fa93 f2a3 	rbit	r2, r3
 8004a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a40:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a44:	601a      	str	r2, [r3, #0]
  return result;
 8004a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <HAL_RCC_OscConfig+0xe3c>
 8004a64:	4b01      	ldr	r3, [pc, #4]	; (8004a6c <HAL_RCC_OscConfig+0xe38>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	e02a      	b.n	8004ac0 <HAL_RCC_OscConfig+0xe8c>
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	fa93 f2a3 	rbit	r2, r3
 8004a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	fa93 f2a3 	rbit	r2, r3
 8004ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	4b86      	ldr	r3, [pc, #536]	; (8004cd8 <HAL_RCC_OscConfig+0x10a4>)
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ac4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ac8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004acc:	6011      	str	r1, [r2, #0]
 8004ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ad2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	fa92 f1a2 	rbit	r1, r2
 8004adc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ae0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004ae4:	6011      	str	r1, [r2, #0]
  return result;
 8004ae6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aea:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	fab2 f282 	clz	r2, r2
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	f042 0220 	orr.w	r2, r2, #32
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	f002 021f 	and.w	r2, r2, #31
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f202 	lsl.w	r2, r1, r2
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f43f af7f 	beq.w	8004a0c <HAL_RCC_OscConfig+0xdd8>
 8004b0e:	e0dd      	b.n	8004ccc <HAL_RCC_OscConfig+0x1098>
 8004b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	fa93 f2a3 	rbit	r2, r3
 8004b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b34:	601a      	str	r2, [r3, #0]
  return result;
 8004b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b3a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fd fef9 	bl	800294c <HAL_GetTick>
 8004b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5e:	e009      	b.n	8004b74 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fd fef4 	bl	800294c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0ac      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
 8004b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b98:	601a      	str	r2, [r3, #0]
  return result;
 8004b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004ba2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba4:	fab3 f383 	clz	r3, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d102      	bne.n	8004bbe <HAL_RCC_OscConfig+0xf8a>
 8004bb8:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCC_OscConfig+0x10a4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	e027      	b.n	8004c0e <HAL_RCC_OscConfig+0xfda>
 8004bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	fa93 f2a3 	rbit	r2, r3
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c04:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <HAL_RCC_OscConfig+0x10a4>)
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c1a:	6011      	str	r1, [r2, #0]
 8004c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	fa92 f1a2 	rbit	r1, r2
 8004c2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c2e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004c32:	6011      	str	r1, [r2, #0]
  return result;
 8004c34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c38:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	fab2 f282 	clz	r2, r2
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	f042 0220 	orr.w	r2, r2, #32
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	f002 021f 	and.w	r2, r2, #31
 8004c4e:	2101      	movs	r1, #1
 8004c50:	fa01 f202 	lsl.w	r2, r1, r2
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d182      	bne.n	8004b60 <HAL_RCC_OscConfig+0xf2c>
 8004c5a:	e037      	b.n	8004ccc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e02e      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <HAL_RCC_OscConfig+0x10a4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <HAL_RCC_OscConfig+0x10a4>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d117      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004c98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d10b      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cb4:	f003 020f 	and.w	r2, r3, #15
 8004cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000

08004cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b09e      	sub	sp, #120	; 0x78
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e162      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b90      	ldr	r3, [pc, #576]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d910      	bls.n	8004d24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b8d      	ldr	r3, [pc, #564]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	498b      	ldr	r1, [pc, #556]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b89      	ldr	r3, [pc, #548]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e14a      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b82      	ldr	r3, [pc, #520]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	497f      	ldr	r1, [pc, #508]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80dc 	beq.w	8004f08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d13c      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xf6>
 8004d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d68:	fab3 f383 	clz	r3, r3
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xa6>
 8004d7c:	4b6f      	ldr	r3, [pc, #444]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	e00f      	b.n	8004da2 <HAL_RCC_ClockConfig+0xc6>
 8004d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
 8004d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9e:	4b67      	ldr	r3, [pc, #412]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004daa:	fa92 f2a2 	rbit	r2, r2
 8004dae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004db2:	fab2 f282 	clz	r2, r2
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	f042 0220 	orr.w	r2, r2, #32
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	f002 021f 	and.w	r2, r2, #31
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d17b      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0f3      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d13c      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x178>
 8004dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d102      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x128>
 8004dfe:	4b4f      	ldr	r3, [pc, #316]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	e00f      	b.n	8004e24 <HAL_RCC_ClockConfig+0x148>
 8004e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
 8004e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
 8004e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e20:	4b46      	ldr	r3, [pc, #280]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e28:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e2c:	fa92 f2a2 	rbit	r2, r2
 8004e30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e34:	fab2 f282 	clz	r2, r2
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	f042 0220 	orr.w	r2, r2, #32
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	f002 021f 	and.w	r2, r2, #31
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d13a      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0b2      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
 8004e54:	2302      	movs	r3, #2
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d102      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x1a0>
 8004e76:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	e00d      	b.n	8004e98 <HAL_RCC_ClockConfig+0x1bc>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
 8004e88:	2302      	movs	r3, #2
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	fa93 f3a3 	rbit	r3, r3
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2202      	movs	r2, #2
 8004e9a:	61ba      	str	r2, [r7, #24]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	fa92 f2a2 	rbit	r2, r2
 8004ea2:	617a      	str	r2, [r7, #20]
  return result;
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	fab2 f282 	clz	r2, r2
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	f042 0220 	orr.w	r2, r2, #32
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	f002 021f 	and.w	r2, r2, #31
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e079      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f023 0203 	bic.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	491a      	ldr	r1, [pc, #104]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ed8:	f7fd fd38 	bl	800294c <HAL_GetTick>
 8004edc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee0:	f7fd fd34 	bl	800294c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e061      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_RCC_ClockConfig+0x260>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 020c 	and.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1eb      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d214      	bcs.n	8004f40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4906      	ldr	r1, [pc, #24]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <HAL_RCC_ClockConfig+0x25c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e040      	b.n	8004fba <HAL_RCC_ClockConfig+0x2de>
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	491a      	ldr	r1, [pc, #104]	; (8004fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6a:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4912      	ldr	r1, [pc, #72]	; (8004fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f7e:	f000 f829 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8004f82:	4601      	mov	r1, r0
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f8c:	22f0      	movs	r2, #240	; 0xf0
 8004f8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	fa92 f2a2 	rbit	r2, r2
 8004f96:	60fa      	str	r2, [r7, #12]
  return result;
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	fab2 f282 	clz	r2, r2
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	40d3      	lsrs	r3, r2
 8004fa2:	4a09      	ldr	r2, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x2ec>)
 8004fa4:	5cd3      	ldrb	r3, [r2, r3]
 8004fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8004faa:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <HAL_RCC_ClockConfig+0x2f0>)
 8004fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_RCC_ClockConfig+0x2f4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd f9de 	bl	8002374 <HAL_InitTick>
  
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3778      	adds	r7, #120	; 0x78
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	0800dedc 	.word	0x0800dedc
 8004fcc:	20000008 	.word	0x20000008
 8004fd0:	2000000c 	.word	0x2000000c

08004fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b08b      	sub	sp, #44	; 0x2c
 8004fd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004fee:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d002      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x30>
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d003      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x36>
 8005002:	e03f      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005006:	623b      	str	r3, [r7, #32]
      break;
 8005008:	e03f      	b.n	800508a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005010:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005014:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	fa92 f2a2 	rbit	r2, r2
 800501c:	607a      	str	r2, [r7, #4]
  return result;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	fab2 f282 	clz	r2, r2
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	40d3      	lsrs	r3, r2
 8005028:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800502a:	5cd3      	ldrb	r3, [r2, r3]
 800502c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800502e:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	220f      	movs	r2, #15
 8005038:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	fa92 f2a2 	rbit	r2, r2
 8005040:	60fa      	str	r2, [r7, #12]
  return result;
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	fab2 f282 	clz	r2, r2
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	40d3      	lsrs	r3, r2
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800504e:	5cd3      	ldrb	r3, [r2, r3]
 8005050:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800505c:	4a0f      	ldr	r2, [pc, #60]	; (800509c <HAL_RCC_GetSysClockFreq+0xc8>)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	fbb2 f2f3 	udiv	r2, r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
 800506c:	e007      	b.n	800507e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800506e:	4a0b      	ldr	r2, [pc, #44]	; (800509c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	fbb2 f2f3 	udiv	r2, r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	623b      	str	r3, [r7, #32]
      break;
 8005082:	e002      	b.n	800508a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005086:	623b      	str	r3, [r7, #32]
      break;
 8005088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800508a:	6a3b      	ldr	r3, [r7, #32]
}
 800508c:	4618      	mov	r0, r3
 800508e:	372c      	adds	r7, #44	; 0x2c
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40021000 	.word	0x40021000
 800509c:	007a1200 	.word	0x007a1200
 80050a0:	0800def4 	.word	0x0800def4
 80050a4:	0800df04 	.word	0x0800df04

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ae:	681b      	ldr	r3, [r3, #0]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000008 	.word	0x20000008

080050c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050c6:	f7ff ffef 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050ca:	4601      	mov	r1, r0
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80050d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	fa92 f2a2 	rbit	r2, r2
 80050e0:	603a      	str	r2, [r7, #0]
  return result;
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	fab2 f282 	clz	r2, r2
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	40d3      	lsrs	r3, r2
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x40>)
 80050ee:	5cd3      	ldrb	r3, [r2, r3]
 80050f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40021000 	.word	0x40021000
 8005100:	0800deec 	.word	0x0800deec

08005104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800510a:	f7ff ffcd 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800510e:	4601      	mov	r1, r0
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005118:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800511c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	fa92 f2a2 	rbit	r2, r2
 8005124:	603a      	str	r2, [r7, #0]
  return result;
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	fab2 f282 	clz	r2, r2
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	40d3      	lsrs	r3, r2
 8005130:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000
 8005144:	0800deec 	.word	0x0800deec

08005148 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	220f      	movs	r2, #15
 8005156:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0203 	and.w	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCC_GetClockConfig+0x5c>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	08db      	lsrs	r3, r3, #3
 8005182:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <HAL_RCC_GetClockConfig+0x60>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0207 	and.w	r2, r3, #7
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40022000 	.word	0x40022000

080051ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b092      	sub	sp, #72	; 0x48
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80d4 	beq.w	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d0:	4b4e      	ldr	r3, [pc, #312]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10e      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051dc:	4b4b      	ldr	r3, [pc, #300]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4a4a      	ldr	r2, [pc, #296]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e6:	61d3      	str	r3, [r2, #28]
 80051e8:	4b48      	ldr	r3, [pc, #288]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005206:	4b42      	ldr	r3, [pc, #264]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a41      	ldr	r2, [pc, #260]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005212:	f7fd fb9b 	bl	800294c <HAL_GetTick>
 8005216:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	e008      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521a:	f7fd fb97 	bl	800294c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b64      	cmp	r3, #100	; 0x64
 8005226:	d901      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e1d6      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	4b38      	ldr	r3, [pc, #224]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8084 	beq.w	8005352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005254:	429a      	cmp	r2, r3
 8005256:	d07c      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005258:	4b2c      	ldr	r3, [pc, #176]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005266:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	fab3 f383 	clz	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	4b26      	ldr	r3, [pc, #152]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	461a      	mov	r2, r3
 8005282:	2301      	movs	r3, #1
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800528a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	fa93 f3a3 	rbit	r3, r3
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	461a      	mov	r2, r3
 80052a6:	2300      	movs	r3, #0
 80052a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d04b      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fd fb47 	bl	800294c <HAL_GetTick>
 80052be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c0:	e00a      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c2:	f7fd fb43 	bl	800294c <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e180      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80052d8:	2302      	movs	r3, #2
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
 80052e4:	2302      	movs	r3, #2
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	61fb      	str	r3, [r7, #28]
  return result;
 80052f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f2:	fab3 f383 	clz	r3, r3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d108      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005306:	4b01      	ldr	r3, [pc, #4]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	e00d      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800530c:	40021000 	.word	0x40021000
 8005310:	40007000 	.word	0x40007000
 8005314:	10908100 	.word	0x10908100
 8005318:	2302      	movs	r3, #2
 800531a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	4b9a      	ldr	r3, [pc, #616]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2202      	movs	r2, #2
 800532a:	613a      	str	r2, [r7, #16]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	fa92 f2a2 	rbit	r2, r2
 8005332:	60fa      	str	r2, [r7, #12]
  return result;
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	fab2 f282 	clz	r2, r2
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f002 021f 	and.w	r2, r2, #31
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f202 	lsl.w	r2, r1, r2
 800534c:	4013      	ands	r3, r2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0b7      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005352:	4b8f      	ldr	r3, [pc, #572]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	498c      	ldr	r1, [pc, #560]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005360:	4313      	orrs	r3, r2
 8005362:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005364:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536c:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4a87      	ldr	r2, [pc, #540]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005384:	4b82      	ldr	r3, [pc, #520]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f023 0203 	bic.w	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	497f      	ldr	r1, [pc, #508]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a2:	4b7b      	ldr	r3, [pc, #492]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4978      	ldr	r1, [pc, #480]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053c0:	4b73      	ldr	r3, [pc, #460]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4970      	ldr	r1, [pc, #448]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053de:	4b6c      	ldr	r3, [pc, #432]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f023 0210 	bic.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4969      	ldr	r1, [pc, #420]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053fc:	4b64      	ldr	r3, [pc, #400]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005408:	4961      	ldr	r1, [pc, #388]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800541a:	4b5d      	ldr	r3, [pc, #372]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	f023 0220 	bic.w	r2, r3, #32
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	495a      	ldr	r1, [pc, #360]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005438:	4b55      	ldr	r3, [pc, #340]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	4952      	ldr	r1, [pc, #328]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005456:	4b4e      	ldr	r3, [pc, #312]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	494b      	ldr	r1, [pc, #300]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005464:	4313      	orrs	r3, r2
 8005466:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005474:	4b46      	ldr	r3, [pc, #280]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	4943      	ldr	r1, [pc, #268]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005492:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	493c      	ldr	r1, [pc, #240]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054b0:	4b37      	ldr	r3, [pc, #220]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	4934      	ldr	r1, [pc, #208]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80054ce:	4b30      	ldr	r3, [pc, #192]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	492d      	ldr	r1, [pc, #180]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054ec:	4b28      	ldr	r3, [pc, #160]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	4925      	ldr	r1, [pc, #148]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800550a:	4b21      	ldr	r3, [pc, #132]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	491e      	ldr	r1, [pc, #120]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005518:	4313      	orrs	r3, r2
 800551a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	4916      	ldr	r1, [pc, #88]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	490f      	ldr	r1, [pc, #60]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005554:	4313      	orrs	r3, r2
 8005556:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005582:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005596:	4913      	ldr	r1, [pc, #76]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005598:	4313      	orrs	r3, r2
 800559a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b4:	490b      	ldr	r1, [pc, #44]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d2:	4904      	ldr	r1, [pc, #16]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3748      	adds	r7, #72	; 0x48
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000

080055e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e09d      	b.n	8005736 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d108      	bne.n	8005614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560a:	d009      	beq.n	8005620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	61da      	str	r2, [r3, #28]
 8005612:	e005      	b.n	8005620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fc fe1c 	bl	8002278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005656:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005660:	d902      	bls.n	8005668 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e002      	b.n	800566e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800566c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005676:	d007      	beq.n	8005688 <HAL_SPI_Init+0xa0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	ea42 0103 	orr.w	r1, r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	0c1b      	lsrs	r3, r3, #16
 80056e4:	f003 0204 	and.w	r2, r3, #4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005704:	ea42 0103 	orr.w	r1, r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b088      	sub	sp, #32
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_SPI_Transmit+0x22>
 800575c:	2302      	movs	r3, #2
 800575e:	e15f      	b.n	8005a20 <HAL_SPI_Transmit+0x2e2>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005768:	f7fd f8f0 	bl	800294c <HAL_GetTick>
 800576c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d002      	beq.n	8005784 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800577e:	2302      	movs	r3, #2
 8005780:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005782:	e148      	b.n	8005a16 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_SPI_Transmit+0x52>
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005794:	e13f      	b.n	8005a16 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2203      	movs	r2, #3
 800579a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e0:	d10f      	bne.n	8005802 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005800:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d007      	beq.n	8005820 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005828:	d94f      	bls.n	80058ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_SPI_Transmit+0xfa>
 8005832:	8afb      	ldrh	r3, [r7, #22]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d142      	bne.n	80058be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800585c:	e02f      	b.n	80058be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d112      	bne.n	8005892 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005890:	e015      	b.n	80058be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005892:	f7fd f85b 	bl	800294c <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d803      	bhi.n	80058aa <HAL_SPI_Transmit+0x16c>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d102      	bne.n	80058b0 <HAL_SPI_Transmit+0x172>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80058bc:	e0ab      	b.n	8005a16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ca      	bne.n	800585e <HAL_SPI_Transmit+0x120>
 80058c8:	e080      	b.n	80059cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_Transmit+0x19a>
 80058d2:	8afb      	ldrh	r3, [r7, #22]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d174      	bne.n	80059c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d912      	bls.n	8005908 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	881a      	ldrh	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	1c9a      	adds	r2, r3, #2
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b02      	subs	r3, #2
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005906:	e05c      	b.n	80059c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	7812      	ldrb	r2, [r2, #0]
 8005914:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800592e:	e048      	b.n	80059c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b02      	cmp	r3, #2
 800593c:	d12b      	bne.n	8005996 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d912      	bls.n	800596e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	1c9a      	adds	r2, r3, #2
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b02      	subs	r3, #2
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800596c:	e029      	b.n	80059c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005994:	e015      	b.n	80059c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005996:	f7fc ffd9 	bl	800294c <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d803      	bhi.n	80059ae <HAL_SPI_Transmit+0x270>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_Transmit+0x276>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80059c0:	e029      	b.n	8005a16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1b1      	bne.n	8005930 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fd07 	bl	80063e4 <SPI_EndRxTxTransaction>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e003      	b.n	8005a16 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a4c:	e11a      	b.n	8005c84 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a56:	d112      	bne.n	8005a7e <HAL_SPI_Receive+0x56>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10e      	bne.n	8005a7e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2204      	movs	r2, #4
 8005a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a68:	88fa      	ldrh	r2, [r7, #6]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f90e 	bl	8005c96 <HAL_SPI_TransmitReceive>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	e107      	b.n	8005c8e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_SPI_Receive+0x64>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e100      	b.n	8005c8e <HAL_SPI_Receive+0x266>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a94:	f7fc ff5a 	bl	800294c <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_Receive+0x7e>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aaa:	e0eb      	b.n	8005c84 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af6:	d908      	bls.n	8005b0a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	e007      	b.n	8005b1a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d10f      	bne.n	8005b44 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d007      	beq.n	8005b62 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b6a:	d86f      	bhi.n	8005c4c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b6c:	e034      	b.n	8005bd8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d117      	bne.n	8005bac <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f103 020c 	add.w	r2, r3, #12
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005baa:	e015      	b.n	8005bd8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bac:	f7fc fece 	bl	800294c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d803      	bhi.n	8005bc4 <HAL_SPI_Receive+0x19c>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d102      	bne.n	8005bca <HAL_SPI_Receive+0x1a2>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005bd6:	e055      	b.n	8005c84 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1c4      	bne.n	8005b6e <HAL_SPI_Receive+0x146>
 8005be4:	e038      	b.n	8005c58 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d115      	bne.n	8005c20 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c1e:	e015      	b.n	8005c4c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c20:	f7fc fe94 	bl	800294c <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d803      	bhi.n	8005c38 <HAL_SPI_Receive+0x210>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d102      	bne.n	8005c3e <HAL_SPI_Receive+0x216>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005c4a:	e01b      	b.n	8005c84 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1c6      	bne.n	8005be6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fb69 	bl	8006334 <SPI_EndRxTransaction>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
 8005c7a:	e003      	b.n	8005c84 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b08a      	sub	sp, #40	; 0x28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x26>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e20a      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x43c>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cc4:	f7fc fe42 	bl	800294c <HAL_GetTick>
 8005cc8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cd0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cd8:	887b      	ldrh	r3, [r7, #2]
 8005cda:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005cdc:	887b      	ldrh	r3, [r7, #2]
 8005cde:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ce0:	7efb      	ldrb	r3, [r7, #27]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d00e      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x6e>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cec:	d106      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x66>
 8005cf6:	7efb      	ldrb	r3, [r7, #27]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d003      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d02:	e1e0      	b.n	80060c6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x80>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x80>
 8005d10:	887b      	ldrh	r3, [r7, #2]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d1c:	e1d3      	b.n	80060c6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d003      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	887a      	ldrh	r2, [r7, #2]
 8005d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	887a      	ldrh	r2, [r7, #2]
 8005d58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	887a      	ldrh	r2, [r7, #2]
 8005d5e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d74:	d802      	bhi.n	8005d7c <HAL_SPI_TransmitReceive+0xe6>
 8005d76:	8a3b      	ldrh	r3, [r7, #16]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d908      	bls.n	8005d8e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e007      	b.n	8005d9e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d007      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dc4:	f240 8081 	bls.w	8005eca <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x140>
 8005dd0:	8a7b      	ldrh	r3, [r7, #18]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d16d      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfa:	e05a      	b.n	8005eb2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d11b      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x1ac>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d016      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x1ac>
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d113      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	881a      	ldrh	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	1c9a      	adds	r2, r3, #2
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d11c      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x1f4>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	b292      	uxth	r2, r2
 8005e68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	1c9a      	adds	r2, r3, #2
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e86:	2301      	movs	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e8a:	f7fc fd5f 	bl	800294c <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d80b      	bhi.n	8005eb2 <HAL_SPI_TransmitReceive+0x21c>
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d007      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005eb0:	e109      	b.n	80060c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d19f      	bne.n	8005dfc <HAL_SPI_TransmitReceive+0x166>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d199      	bne.n	8005dfc <HAL_SPI_TransmitReceive+0x166>
 8005ec8:	e0e3      	b.n	8006092 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_SPI_TransmitReceive+0x244>
 8005ed2:	8a7b      	ldrh	r3, [r7, #18]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	f040 80cf 	bne.w	8006078 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d912      	bls.n	8005f0a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	1c9a      	adds	r2, r3, #2
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b02      	subs	r3, #2
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f08:	e0b6      	b.n	8006078 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f30:	e0a2      	b.n	8006078 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d134      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x314>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d02f      	beq.n	8005faa <HAL_SPI_TransmitReceive+0x314>
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d12c      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d912      	bls.n	8005f80 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	881a      	ldrh	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b02      	subs	r3, #2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f7e:	e012      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d148      	bne.n	800604a <HAL_SPI_TransmitReceive+0x3b4>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d042      	beq.n	800604a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d923      	bls.n	8006018 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b02      	subs	r3, #2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d81f      	bhi.n	8006046 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	e016      	b.n	8006046 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f103 020c 	add.w	r2, r3, #12
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006046:	2301      	movs	r3, #1
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800604a:	f7fc fc7f 	bl	800294c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006056:	429a      	cmp	r2, r3
 8006058:	d803      	bhi.n	8006062 <HAL_SPI_TransmitReceive+0x3cc>
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d102      	bne.n	8006068 <HAL_SPI_TransmitReceive+0x3d2>
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d107      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006076:	e026      	b.n	80060c6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	f47f af57 	bne.w	8005f32 <HAL_SPI_TransmitReceive+0x29c>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	f47f af50 	bne.w	8005f32 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f9a4 	bl	80063e4 <SPI_EndRxTxTransaction>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060bc:	e003      	b.n	80060c6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060e8:	b2db      	uxtb	r3, r3
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006108:	f7fc fc20 	bl	800294c <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	4413      	add	r3, r2
 8006116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006118:	f7fc fc18 	bl	800294c <HAL_GetTick>
 800611c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800611e:	4b39      	ldr	r3, [pc, #228]	; (8006204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	015b      	lsls	r3, r3, #5
 8006124:	0d1b      	lsrs	r3, r3, #20
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612e:	e054      	b.n	80061da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d050      	beq.n	80061da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006138:	f7fc fc08 	bl	800294c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	429a      	cmp	r2, r3
 8006146:	d902      	bls.n	800614e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d13d      	bne.n	80061ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800615c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006166:	d111      	bne.n	800618c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006170:	d004      	beq.n	800617c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617a:	d107      	bne.n	800618c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006194:	d10f      	bne.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e017      	b.n	80061fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4013      	ands	r3, r2
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	bf0c      	ite	eq
 80061ea:	2301      	moveq	r3, #1
 80061ec:	2300      	movne	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d19b      	bne.n	8006130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000008 	.word	0x20000008

08006208 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	; 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800621a:	f7fc fb97 	bl	800294c <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	4413      	add	r3, r2
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800622a:	f7fc fb8f 	bl	800294c <HAL_GetTick>
 800622e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006238:	4b3d      	ldr	r3, [pc, #244]	; (8006330 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	00da      	lsls	r2, r3, #3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	0d1b      	lsrs	r3, r3, #20
 8006248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006250:	e060      	b.n	8006314 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006258:	d107      	bne.n	800626a <SPI_WaitFifoStateUntilTimeout+0x62>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006268:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d050      	beq.n	8006314 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006272:	f7fc fb6b 	bl	800294c <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627e:	429a      	cmp	r2, r3
 8006280:	d902      	bls.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d13d      	bne.n	8006304 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006296:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a0:	d111      	bne.n	80062c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062aa:	d004      	beq.n	80062b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b4:	d107      	bne.n	80062c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ce:	d10f      	bne.n	80062f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e010      	b.n	8006326 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	3b01      	subs	r3, #1
 8006312:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4013      	ands	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d196      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3728      	adds	r7, #40	; 0x28
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000008 	.word	0x20000008

08006334 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006348:	d111      	bne.n	800636e <SPI_EndRxTransaction+0x3a>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006352:	d004      	beq.n	800635e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635c:	d107      	bne.n	800636e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff febd 	bl	80060f8 <SPI_WaitFlagStateUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006388:	f043 0220 	orr.w	r2, r3, #32
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e023      	b.n	80063dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800639c:	d11d      	bne.n	80063da <SPI_EndRxTransaction+0xa6>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d004      	beq.n	80063b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b0:	d113      	bne.n	80063da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff ff22 	bl	8006208 <SPI_WaitFifoStateUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e000      	b.n	80063dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f7ff ff03 	bl	8006208 <SPI_WaitFifoStateUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	f043 0220 	orr.w	r2, r3, #32
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e027      	b.n	8006468 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2200      	movs	r2, #0
 8006420:	2180      	movs	r1, #128	; 0x80
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7ff fe68 	bl	80060f8 <SPI_WaitFlagStateUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006432:	f043 0220 	orr.w	r2, r3, #32
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e014      	b.n	8006468 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff fedc 	bl	8006208 <SPI_WaitFifoStateUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645a:	f043 0220 	orr.w	r2, r3, #32
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e000      	b.n	8006468 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e049      	b.n	8006516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fc f90e 	bl	80026b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f000 f9ee 	bl	8006890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b01      	cmp	r3, #1
 8006532:	d001      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e04f      	b.n	80065d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a23      	ldr	r2, [pc, #140]	; (80065e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01d      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0x76>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006562:	d018      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0x76>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0x76>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0x76>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1c      	ldr	r2, [pc, #112]	; (80065f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0x76>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1b      	ldr	r2, [pc, #108]	; (80065f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIM_Base_Start_IT+0x76>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a19      	ldr	r2, [pc, #100]	; (80065f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d115      	bne.n	80065c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	4b17      	ldr	r3, [pc, #92]	; (80065fc <HAL_TIM_Base_Start_IT+0xdc>)
 800659e:	4013      	ands	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b06      	cmp	r3, #6
 80065a6:	d015      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0xb4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ae:	d011      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	e008      	b.n	80065d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e000      	b.n	80065d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40015000 	.word	0x40015000
 80065fc:	00010007 	.word	0x00010007

08006600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d122      	bne.n	800665c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b02      	cmp	r3, #2
 8006622:	d11b      	bne.n	800665c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0202 	mvn.w	r2, #2
 800662c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f905 	bl	8006852 <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f8f7 	bl	800683e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f908 	bl	8006866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b04      	cmp	r3, #4
 8006668:	d122      	bne.n	80066b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b04      	cmp	r3, #4
 8006676:	d11b      	bne.n	80066b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0204 	mvn.w	r2, #4
 8006680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8db 	bl	8006852 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8cd 	bl	800683e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8de 	bl	8006866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d122      	bne.n	8006704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d11b      	bne.n	8006704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0208 	mvn.w	r2, #8
 80066d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2204      	movs	r2, #4
 80066da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f8b1 	bl	8006852 <HAL_TIM_IC_CaptureCallback>
 80066f0:	e005      	b.n	80066fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8a3 	bl	800683e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f8b4 	bl	8006866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b10      	cmp	r3, #16
 8006710:	d122      	bne.n	8006758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b10      	cmp	r3, #16
 800671e:	d11b      	bne.n	8006758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0210 	mvn.w	r2, #16
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2208      	movs	r2, #8
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f887 	bl	8006852 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f879 	bl	800683e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f88a 	bl	8006866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10e      	bne.n	8006784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d107      	bne.n	8006784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0201 	mvn.w	r2, #1
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fb fd24 	bl	80021cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d10e      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d107      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f918 	bl	80069e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	d10e      	bne.n	80067de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f90b 	bl	80069f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d10e      	bne.n	800680a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d107      	bne.n	800680a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f838 	bl	800687a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b20      	cmp	r3, #32
 8006816:	d10e      	bne.n	8006836 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d107      	bne.n	8006836 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f06f 0220 	mvn.w	r2, #32
 800682e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f8cb 	bl	80069cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a42      	ldr	r2, [pc, #264]	; (80069ac <TIM_Base_SetConfig+0x11c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ae:	d00f      	beq.n	80068d0 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a3f      	ldr	r2, [pc, #252]	; (80069b0 <TIM_Base_SetConfig+0x120>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a3e      	ldr	r2, [pc, #248]	; (80069b4 <TIM_Base_SetConfig+0x124>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <TIM_Base_SetConfig+0x128>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a3c      	ldr	r2, [pc, #240]	; (80069bc <TIM_Base_SetConfig+0x12c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d108      	bne.n	80068e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a31      	ldr	r2, [pc, #196]	; (80069ac <TIM_Base_SetConfig+0x11c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01f      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f0:	d01b      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2e      	ldr	r2, [pc, #184]	; (80069b0 <TIM_Base_SetConfig+0x120>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d017      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <TIM_Base_SetConfig+0x124>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2c      	ldr	r2, [pc, #176]	; (80069b8 <TIM_Base_SetConfig+0x128>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2c      	ldr	r2, [pc, #176]	; (80069c0 <TIM_Base_SetConfig+0x130>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2b      	ldr	r2, [pc, #172]	; (80069c4 <TIM_Base_SetConfig+0x134>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <TIM_Base_SetConfig+0x138>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_Base_SetConfig+0x9a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a25      	ldr	r2, [pc, #148]	; (80069bc <TIM_Base_SetConfig+0x12c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d108      	bne.n	800693c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a12      	ldr	r2, [pc, #72]	; (80069ac <TIM_Base_SetConfig+0x11c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <TIM_Base_SetConfig+0x100>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <TIM_Base_SetConfig+0x128>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00f      	beq.n	8006990 <TIM_Base_SetConfig+0x100>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a13      	ldr	r2, [pc, #76]	; (80069c0 <TIM_Base_SetConfig+0x130>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <TIM_Base_SetConfig+0x100>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <TIM_Base_SetConfig+0x134>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <TIM_Base_SetConfig+0x100>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a11      	ldr	r2, [pc, #68]	; (80069c8 <TIM_Base_SetConfig+0x138>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0x100>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <TIM_Base_SetConfig+0x12c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d103      	bne.n	8006998 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	615a      	str	r2, [r3, #20]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40015000 	.word	0x40015000
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800

080069cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e040      	b.n	8006a9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fb fec4 	bl	80027b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2224      	movs	r2, #36	; 0x24
 8006a34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f8b6 	bl	8006bb8 <UART_SetConfig>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e022      	b.n	8006a9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa7e 	bl	8006f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fb05 	bl	80070a4 <UART_CheckIdleState>
 8006a9a:	4603      	mov	r3, r0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08a      	sub	sp, #40	; 0x28
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d178      	bne.n	8006bae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_UART_Transmit+0x24>
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e071      	b.n	8006bb0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2221      	movs	r2, #33	; 0x21
 8006ad8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ada:	f7fb ff37 	bl	800294c <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af8:	d108      	bne.n	8006b0c <HAL_UART_Transmit+0x68>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	e003      	b.n	8006b14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b14:	e030      	b.n	8006b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fb67 	bl	80071f4 <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e03c      	b.n	8006bb0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	881a      	ldrh	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3302      	adds	r3, #2
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e008      	b.n	8006b66 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3301      	adds	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1c8      	bne.n	8006b16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fb30 	bl	80071f4 <UART_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e005      	b.n	8006bb0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b92      	ldr	r3, [pc, #584]	; (8006e2c <UART_SetConfig+0x274>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a80      	ldr	r2, [pc, #512]	; (8006e30 <UART_SetConfig+0x278>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d120      	bne.n	8006c76 <UART_SetConfig+0xbe>
 8006c34:	4b7f      	ldr	r3, [pc, #508]	; (8006e34 <UART_SetConfig+0x27c>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d817      	bhi.n	8006c70 <UART_SetConfig+0xb8>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x90>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c65 	.word	0x08006c65
 8006c50:	08006c6b 	.word	0x08006c6b
 8006c54:	08006c5f 	.word	0x08006c5f
 8006c58:	2301      	movs	r3, #1
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e0b5      	b.n	8006dca <UART_SetConfig+0x212>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e0b2      	b.n	8006dca <UART_SetConfig+0x212>
 8006c64:	2304      	movs	r3, #4
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e0af      	b.n	8006dca <UART_SetConfig+0x212>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e0ac      	b.n	8006dca <UART_SetConfig+0x212>
 8006c70:	2310      	movs	r3, #16
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e0a9      	b.n	8006dca <UART_SetConfig+0x212>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a6f      	ldr	r2, [pc, #444]	; (8006e38 <UART_SetConfig+0x280>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d124      	bne.n	8006cca <UART_SetConfig+0x112>
 8006c80:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <UART_SetConfig+0x27c>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c8c:	d011      	beq.n	8006cb2 <UART_SetConfig+0xfa>
 8006c8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c92:	d817      	bhi.n	8006cc4 <UART_SetConfig+0x10c>
 8006c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c98:	d011      	beq.n	8006cbe <UART_SetConfig+0x106>
 8006c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c9e:	d811      	bhi.n	8006cc4 <UART_SetConfig+0x10c>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <UART_SetConfig+0xf4>
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d006      	beq.n	8006cb8 <UART_SetConfig+0x100>
 8006caa:	e00b      	b.n	8006cc4 <UART_SetConfig+0x10c>
 8006cac:	2300      	movs	r3, #0
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e08b      	b.n	8006dca <UART_SetConfig+0x212>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e088      	b.n	8006dca <UART_SetConfig+0x212>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e085      	b.n	8006dca <UART_SetConfig+0x212>
 8006cbe:	2308      	movs	r3, #8
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e082      	b.n	8006dca <UART_SetConfig+0x212>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e07f      	b.n	8006dca <UART_SetConfig+0x212>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a5b      	ldr	r2, [pc, #364]	; (8006e3c <UART_SetConfig+0x284>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d124      	bne.n	8006d1e <UART_SetConfig+0x166>
 8006cd4:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <UART_SetConfig+0x27c>)
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006cdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce0:	d011      	beq.n	8006d06 <UART_SetConfig+0x14e>
 8006ce2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce6:	d817      	bhi.n	8006d18 <UART_SetConfig+0x160>
 8006ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cec:	d011      	beq.n	8006d12 <UART_SetConfig+0x15a>
 8006cee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf2:	d811      	bhi.n	8006d18 <UART_SetConfig+0x160>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <UART_SetConfig+0x148>
 8006cf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cfc:	d006      	beq.n	8006d0c <UART_SetConfig+0x154>
 8006cfe:	e00b      	b.n	8006d18 <UART_SetConfig+0x160>
 8006d00:	2300      	movs	r3, #0
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e061      	b.n	8006dca <UART_SetConfig+0x212>
 8006d06:	2302      	movs	r3, #2
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e05e      	b.n	8006dca <UART_SetConfig+0x212>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e05b      	b.n	8006dca <UART_SetConfig+0x212>
 8006d12:	2308      	movs	r3, #8
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e058      	b.n	8006dca <UART_SetConfig+0x212>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e055      	b.n	8006dca <UART_SetConfig+0x212>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a47      	ldr	r2, [pc, #284]	; (8006e40 <UART_SetConfig+0x288>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d124      	bne.n	8006d72 <UART_SetConfig+0x1ba>
 8006d28:	4b42      	ldr	r3, [pc, #264]	; (8006e34 <UART_SetConfig+0x27c>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d34:	d011      	beq.n	8006d5a <UART_SetConfig+0x1a2>
 8006d36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d3a:	d817      	bhi.n	8006d6c <UART_SetConfig+0x1b4>
 8006d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d40:	d011      	beq.n	8006d66 <UART_SetConfig+0x1ae>
 8006d42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d46:	d811      	bhi.n	8006d6c <UART_SetConfig+0x1b4>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <UART_SetConfig+0x19c>
 8006d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d50:	d006      	beq.n	8006d60 <UART_SetConfig+0x1a8>
 8006d52:	e00b      	b.n	8006d6c <UART_SetConfig+0x1b4>
 8006d54:	2300      	movs	r3, #0
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e037      	b.n	8006dca <UART_SetConfig+0x212>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e034      	b.n	8006dca <UART_SetConfig+0x212>
 8006d60:	2304      	movs	r3, #4
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e031      	b.n	8006dca <UART_SetConfig+0x212>
 8006d66:	2308      	movs	r3, #8
 8006d68:	77fb      	strb	r3, [r7, #31]
 8006d6a:	e02e      	b.n	8006dca <UART_SetConfig+0x212>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e02b      	b.n	8006dca <UART_SetConfig+0x212>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a33      	ldr	r2, [pc, #204]	; (8006e44 <UART_SetConfig+0x28c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d124      	bne.n	8006dc6 <UART_SetConfig+0x20e>
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <UART_SetConfig+0x27c>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d88:	d011      	beq.n	8006dae <UART_SetConfig+0x1f6>
 8006d8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d8e:	d817      	bhi.n	8006dc0 <UART_SetConfig+0x208>
 8006d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d94:	d011      	beq.n	8006dba <UART_SetConfig+0x202>
 8006d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d9a:	d811      	bhi.n	8006dc0 <UART_SetConfig+0x208>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <UART_SetConfig+0x1f0>
 8006da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da4:	d006      	beq.n	8006db4 <UART_SetConfig+0x1fc>
 8006da6:	e00b      	b.n	8006dc0 <UART_SetConfig+0x208>
 8006da8:	2300      	movs	r3, #0
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e00d      	b.n	8006dca <UART_SetConfig+0x212>
 8006dae:	2302      	movs	r3, #2
 8006db0:	77fb      	strb	r3, [r7, #31]
 8006db2:	e00a      	b.n	8006dca <UART_SetConfig+0x212>
 8006db4:	2304      	movs	r3, #4
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e007      	b.n	8006dca <UART_SetConfig+0x212>
 8006dba:	2308      	movs	r3, #8
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e004      	b.n	8006dca <UART_SetConfig+0x212>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e001      	b.n	8006dca <UART_SetConfig+0x212>
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd2:	d16b      	bne.n	8006eac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006dd4:	7ffb      	ldrb	r3, [r7, #31]
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d838      	bhi.n	8006e4c <UART_SetConfig+0x294>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0x228>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e15 	.word	0x08006e15
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	08006e1b 	.word	0x08006e1b
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	08006e23 	.word	0x08006e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e04:	f7fe f95c 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8006e08:	61b8      	str	r0, [r7, #24]
        break;
 8006e0a:	e024      	b.n	8006e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0c:	f7fe f97a 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 8006e10:	61b8      	str	r0, [r7, #24]
        break;
 8006e12:	e020      	b.n	8006e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <UART_SetConfig+0x290>)
 8006e16:	61bb      	str	r3, [r7, #24]
        break;
 8006e18:	e01d      	b.n	8006e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e1a:	f7fe f8db 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8006e1e:	61b8      	str	r0, [r7, #24]
        break;
 8006e20:	e019      	b.n	8006e56 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e26:	61bb      	str	r3, [r7, #24]
        break;
 8006e28:	e015      	b.n	8006e56 <UART_SetConfig+0x29e>
 8006e2a:	bf00      	nop
 8006e2c:	efff69f3 	.word	0xefff69f3
 8006e30:	40013800 	.word	0x40013800
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40004400 	.word	0x40004400
 8006e3c:	40004800 	.word	0x40004800
 8006e40:	40004c00 	.word	0x40004c00
 8006e44:	40005000 	.word	0x40005000
 8006e48:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	77bb      	strb	r3, [r7, #30]
        break;
 8006e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d073      	beq.n	8006f44 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	005a      	lsls	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	441a      	add	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b0f      	cmp	r3, #15
 8006e76:	d916      	bls.n	8006ea6 <UART_SetConfig+0x2ee>
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d212      	bcs.n	8006ea6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f023 030f 	bic.w	r3, r3, #15
 8006e88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	89fa      	ldrh	r2, [r7, #14]
 8006ea2:	60da      	str	r2, [r3, #12]
 8006ea4:	e04e      	b.n	8006f44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	77bb      	strb	r3, [r7, #30]
 8006eaa:	e04b      	b.n	8006f44 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eac:	7ffb      	ldrb	r3, [r7, #31]
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d827      	bhi.n	8006f02 <UART_SetConfig+0x34a>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x300>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	08006f03 	.word	0x08006f03
 8006ec8:	08006ef3 	.word	0x08006ef3
 8006ecc:	08006f03 	.word	0x08006f03
 8006ed0:	08006f03 	.word	0x08006f03
 8006ed4:	08006f03 	.word	0x08006f03
 8006ed8:	08006efb 	.word	0x08006efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006edc:	f7fe f8f0 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 8006ee0:	61b8      	str	r0, [r7, #24]
        break;
 8006ee2:	e013      	b.n	8006f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee4:	f7fe f90e 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 8006ee8:	61b8      	str	r0, [r7, #24]
        break;
 8006eea:	e00f      	b.n	8006f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <UART_SetConfig+0x3a4>)
 8006eee:	61bb      	str	r3, [r7, #24]
        break;
 8006ef0:	e00c      	b.n	8006f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fe f86f 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8006ef6:	61b8      	str	r0, [r7, #24]
        break;
 8006ef8:	e008      	b.n	8006f0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	61bb      	str	r3, [r7, #24]
        break;
 8006f00:	e004      	b.n	8006f0c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	77bb      	strb	r3, [r7, #30]
        break;
 8006f0a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d018      	beq.n	8006f44 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	085a      	lsrs	r2, r3, #1
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	441a      	add	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b0f      	cmp	r3, #15
 8006f2a:	d909      	bls.n	8006f40 <UART_SetConfig+0x388>
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f32:	d205      	bcs.n	8006f40 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60da      	str	r2, [r3, #12]
 8006f3e:	e001      	b.n	8006f44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f50:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3720      	adds	r7, #32
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	007a1200 	.word	0x007a1200

08006f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01a      	beq.n	8007076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705e:	d10a      	bne.n	8007076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b098      	sub	sp, #96	; 0x60
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b4:	f7fb fc4a 	bl	800294c <HAL_GetTick>
 80070b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d12e      	bne.n	8007126 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d0:	2200      	movs	r2, #0
 80070d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f88c 	bl	80071f4 <UART_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d021      	beq.n	8007126 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f6:	653b      	str	r3, [r7, #80]	; 0x50
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007100:	647b      	str	r3, [r7, #68]	; 0x44
 8007102:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e062      	b.n	80071ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b04      	cmp	r3, #4
 8007132:	d149      	bne.n	80071c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f856 	bl	80071f4 <UART_WaitOnFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d03c      	beq.n	80071c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	623b      	str	r3, [r7, #32]
   return(result);
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716c:	633b      	str	r3, [r7, #48]	; 0x30
 800716e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e6      	bne.n	800714e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	64bb      	str	r3, [r7, #72]	; 0x48
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a0:	61fa      	str	r2, [r7, #28]
 80071a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	69b9      	ldr	r1, [r7, #24]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	617b      	str	r3, [r7, #20]
   return(result);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e5      	bne.n	8007180 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e011      	b.n	80071ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3758      	adds	r7, #88	; 0x58
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007204:	e049      	b.n	800729a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d045      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800720e:	f7fb fb9d 	bl	800294c <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <UART_WaitOnFlagUntilTimeout+0x30>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e048      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d031      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b08      	cmp	r3, #8
 8007242:	d110      	bne.n	8007266 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2208      	movs	r2, #8
 800724a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f838 	bl	80072c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2208      	movs	r2, #8
 8007256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e029      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007274:	d111      	bne.n	800729a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800727e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f81e 	bl	80072c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e00f      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4013      	ands	r3, r2
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	bf0c      	ite	eq
 80072aa:	2301      	moveq	r3, #1
 80072ac:	2300      	movne	r3, #0
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d0a6      	beq.n	8007206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b095      	sub	sp, #84	; 0x54
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	61fb      	str	r3, [r7, #28]
   return(result);
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	64bb      	str	r3, [r7, #72]	; 0x48
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007334:	2b01      	cmp	r3, #1
 8007336:	d118      	bne.n	800736a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	60bb      	str	r3, [r7, #8]
   return(result);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007356:	61bb      	str	r3, [r7, #24]
 8007358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6979      	ldr	r1, [r7, #20]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	613b      	str	r3, [r7, #16]
   return(result);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800737e:	bf00      	nop
 8007380:	3754      	adds	r7, #84	; 0x54
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	4603      	mov	r3, r0
 8007392:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800739c:	2b84      	cmp	r3, #132	; 0x84
 800739e:	d005      	beq.n	80073ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80073a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	3303      	adds	r3, #3
 80073aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80073be:	f000 faed 	bl	800799c <vTaskStartScheduler>
  
  return osOK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	b089      	sub	sp, #36	; 0x24
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <osThreadCreate+0x54>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01c      	beq.n	800741c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685c      	ldr	r4, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691e      	ldr	r6, [r3, #16]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ffc8 	bl	800738a <makeFreeRtosPriority>
 80073fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007404:	9202      	str	r2, [sp, #8]
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	9100      	str	r1, [sp, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	4632      	mov	r2, r6
 800740e:	4629      	mov	r1, r5
 8007410:	4620      	mov	r0, r4
 8007412:	f000 f8ed 	bl	80075f0 <xTaskCreateStatic>
 8007416:	4603      	mov	r3, r0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e01c      	b.n	8007456 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685c      	ldr	r4, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007428:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff ffaa 	bl	800738a <makeFreeRtosPriority>
 8007436:	4602      	mov	r2, r0
 8007438:	f107 030c 	add.w	r3, r7, #12
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	9200      	str	r2, [sp, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	4632      	mov	r2, r6
 8007444:	4629      	mov	r1, r5
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f92e 	bl	80076a8 <xTaskCreate>
 800744c:	4603      	mov	r3, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	d001      	beq.n	8007456 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007460 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <osDelay+0x16>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	e000      	b.n	8007478 <osDelay+0x18>
 8007476:	2301      	movs	r3, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fa5b 	bl	8007934 <vTaskDelay>
  
  return osOK;
 800747e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f103 0208 	add.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f04f 32ff 	mov.w	r2, #4294967295
 80074a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 0208 	add.w	r2, r3, #8
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0208 	add.w	r2, r3, #8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d103      	bne.n	800754a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e00c      	b.n	8007564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3308      	adds	r3, #8
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e002      	b.n	8007558 <vListInsert+0x2e>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	429a      	cmp	r2, r3
 8007562:	d2f6      	bcs.n	8007552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6892      	ldr	r2, [r2, #8]
 80075b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6852      	ldr	r2, [r2, #4]
 80075bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d103      	bne.n	80075d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	1e5a      	subs	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08e      	sub	sp, #56	; 0x38
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xTaskCreateStatic+0x46>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	61fb      	str	r3, [r7, #28]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007636:	23a0      	movs	r3, #160	; 0xa0
 8007638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2ba0      	cmp	r3, #160	; 0xa0
 800763e:	d00a      	beq.n	8007656 <xTaskCreateStatic+0x66>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	61bb      	str	r3, [r7, #24]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01e      	beq.n	800769a <xTaskCreateStatic+0xaa>
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01b      	beq.n	800769a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800766a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	2202      	movs	r2, #2
 8007670:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007674:	2300      	movs	r3, #0
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	9302      	str	r3, [sp, #8]
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f851 	bl	8007734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007694:	f000 f8e4 	bl	8007860 <prvAddNewTaskToReadyList>
 8007698:	e001      	b.n	800769e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800769e:	697b      	ldr	r3, [r7, #20]
	}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3728      	adds	r7, #40	; 0x28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	; 0x30
 80076ac:	af04      	add	r7, sp, #16
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fef3 	bl	80084a8 <pvPortMalloc>
 80076c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80076ca:	20a0      	movs	r0, #160	; 0xa0
 80076cc:	f000 feec 	bl	80084a8 <pvPortMalloc>
 80076d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30
 80076de:	e005      	b.n	80076ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076e0:	6978      	ldr	r0, [r7, #20]
 80076e2:	f000 ffa5 	bl	8008630 <vPortFree>
 80076e6:	e001      	b.n	80076ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d017      	beq.n	8007722 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	2300      	movs	r3, #0
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	9302      	str	r3, [sp, #8]
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f80f 	bl	8007734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007716:	69f8      	ldr	r0, [r7, #28]
 8007718:	f000 f8a2 	bl	8007860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800771c:	2301      	movs	r3, #1
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	e002      	b.n	8007728 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007728:	69bb      	ldr	r3, [r7, #24]
	}
 800772a:	4618      	mov	r0, r3
 800772c:	3720      	adds	r7, #32
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800774c:	3b01      	subs	r3, #1
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	617b      	str	r3, [r7, #20]
}
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	e012      	b.n	80077a8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	4413      	add	r3, r2
 8007788:	7819      	ldrb	r1, [r3, #0]
 800778a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	3334      	adds	r3, #52	; 0x34
 8007792:	460a      	mov	r2, r1
 8007794:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	4413      	add	r3, r2
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d006      	beq.n	80077b0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3301      	adds	r3, #1
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d9e9      	bls.n	8007782 <prvInitialiseNewTask+0x4e>
 80077ae:	e000      	b.n	80077b2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80077b0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	2b06      	cmp	r3, #6
 80077be:	d901      	bls.n	80077c4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077c0:	2306      	movs	r3, #6
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	2200      	movs	r2, #0
 80077d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	3304      	adds	r3, #4
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fe74 	bl	80074c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	3318      	adds	r3, #24
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff fe6f 	bl	80074c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	f1c3 0207 	rsb	r2, r3, #7
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	2200      	movs	r2, #0
 800780c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	334c      	adds	r3, #76	; 0x4c
 8007814:	224c      	movs	r2, #76	; 0x4c
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f002 fdfa 	bl	800a412 <memset>
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <prvInitialiseNewTask+0x120>)
 8007822:	651a      	str	r2, [r3, #80]	; 0x50
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	4a0c      	ldr	r2, [pc, #48]	; (8007858 <prvInitialiseNewTask+0x124>)
 8007828:	655a      	str	r2, [r3, #84]	; 0x54
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	4a0b      	ldr	r2, [pc, #44]	; (800785c <prvInitialiseNewTask+0x128>)
 800782e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	69b8      	ldr	r0, [r7, #24]
 8007836:	f000 fc2b 	bl	8008090 <pxPortInitialiseStack>
 800783a:	4602      	mov	r2, r0
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800784c:	bf00      	nop
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	2000178c 	.word	0x2000178c
 8007858:	200017f4 	.word	0x200017f4
 800785c:	2000185c 	.word	0x2000185c

08007860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007868:	f000 fd3c 	bl	80082e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800786c:	4b2a      	ldr	r3, [pc, #168]	; (8007918 <prvAddNewTaskToReadyList+0xb8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	4a29      	ldr	r2, [pc, #164]	; (8007918 <prvAddNewTaskToReadyList+0xb8>)
 8007874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007876:	4b29      	ldr	r3, [pc, #164]	; (800791c <prvAddNewTaskToReadyList+0xbc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800787e:	4a27      	ldr	r2, [pc, #156]	; (800791c <prvAddNewTaskToReadyList+0xbc>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007884:	4b24      	ldr	r3, [pc, #144]	; (8007918 <prvAddNewTaskToReadyList+0xb8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d110      	bne.n	80078ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800788c:	f000 fad2 	bl	8007e34 <prvInitialiseTaskLists>
 8007890:	e00d      	b.n	80078ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007892:	4b23      	ldr	r3, [pc, #140]	; (8007920 <prvAddNewTaskToReadyList+0xc0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800789a:	4b20      	ldr	r3, [pc, #128]	; (800791c <prvAddNewTaskToReadyList+0xbc>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d802      	bhi.n	80078ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078a8:	4a1c      	ldr	r2, [pc, #112]	; (800791c <prvAddNewTaskToReadyList+0xbc>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ae:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <prvAddNewTaskToReadyList+0xc4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	4a1b      	ldr	r2, [pc, #108]	; (8007924 <prvAddNewTaskToReadyList+0xc4>)
 80078b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	2201      	movs	r2, #1
 80078be:	409a      	lsls	r2, r3
 80078c0:	4b19      	ldr	r3, [pc, #100]	; (8007928 <prvAddNewTaskToReadyList+0xc8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	4a18      	ldr	r2, [pc, #96]	; (8007928 <prvAddNewTaskToReadyList+0xc8>)
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4a15      	ldr	r2, [pc, #84]	; (800792c <prvAddNewTaskToReadyList+0xcc>)
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7ff fdfe 	bl	80074e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078e6:	f000 fd2d 	bl	8008344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078ea:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <prvAddNewTaskToReadyList+0xc0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <prvAddNewTaskToReadyList+0xbc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d207      	bcs.n	8007910 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <prvAddNewTaskToReadyList+0xd0>)
 8007902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000b40 	.word	0x20000b40
 800791c:	20000a40 	.word	0x20000a40
 8007920:	20000b4c 	.word	0x20000b4c
 8007924:	20000b5c 	.word	0x20000b5c
 8007928:	20000b48 	.word	0x20000b48
 800792c:	20000a44 	.word	0x20000a44
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d017      	beq.n	8007976 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <vTaskDelay+0x60>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <vTaskDelay+0x30>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60bb      	str	r3, [r7, #8]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007964:	f000 f884 	bl	8007a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007968:	2100      	movs	r1, #0
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fb2a 	bl	8007fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007970:	f000 f88c 	bl	8007a8c <xTaskResumeAll>
 8007974:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d107      	bne.n	800798c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <vTaskDelay+0x64>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000b68 	.word	0x20000b68
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079aa:	463a      	mov	r2, r7
 80079ac:	1d39      	adds	r1, r7, #4
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f9 feda 	bl	800176c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	9202      	str	r2, [sp, #8]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	460a      	mov	r2, r1
 80079ca:	4921      	ldr	r1, [pc, #132]	; (8007a50 <vTaskStartScheduler+0xb4>)
 80079cc:	4821      	ldr	r0, [pc, #132]	; (8007a54 <vTaskStartScheduler+0xb8>)
 80079ce:	f7ff fe0f 	bl	80075f0 <xTaskCreateStatic>
 80079d2:	4603      	mov	r3, r0
 80079d4:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <vTaskStartScheduler+0xbc>)
 80079d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079d8:	4b1f      	ldr	r3, [pc, #124]	; (8007a58 <vTaskStartScheduler+0xbc>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079e0:	2301      	movs	r3, #1
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	e001      	b.n	80079ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d11b      	bne.n	8007a28 <vTaskStartScheduler+0x8c>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	613b      	str	r3, [r7, #16]
}
 8007a02:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a04:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <vTaskStartScheduler+0xc0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	334c      	adds	r3, #76	; 0x4c
 8007a0a:	4a15      	ldr	r2, [pc, #84]	; (8007a60 <vTaskStartScheduler+0xc4>)
 8007a0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a0e:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <vTaskStartScheduler+0xc8>)
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <vTaskStartScheduler+0xcc>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007a1c:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <vTaskStartScheduler+0xd0>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a22:	f000 fbbd 	bl	80081a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a26:	e00e      	b.n	8007a46 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d10a      	bne.n	8007a46 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	60fb      	str	r3, [r7, #12]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <vTaskStartScheduler+0xa8>
}
 8007a46:	bf00      	nop
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	0800de80 	.word	0x0800de80
 8007a54:	08007e05 	.word	0x08007e05
 8007a58:	20000b64 	.word	0x20000b64
 8007a5c:	20000a40 	.word	0x20000a40
 8007a60:	20000080 	.word	0x20000080
 8007a64:	20000b60 	.word	0x20000b60
 8007a68:	20000b4c 	.word	0x20000b4c
 8007a6c:	20000b44 	.word	0x20000b44

08007a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <vTaskSuspendAll+0x18>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	4a03      	ldr	r2, [pc, #12]	; (8007a88 <vTaskSuspendAll+0x18>)
 8007a7c:	6013      	str	r3, [r2, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	20000b68 	.word	0x20000b68

08007a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a9a:	4b41      	ldr	r3, [pc, #260]	; (8007ba0 <xTaskResumeAll+0x114>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	603b      	str	r3, [r7, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ab8:	f000 fc14 	bl	80082e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007abc:	4b38      	ldr	r3, [pc, #224]	; (8007ba0 <xTaskResumeAll+0x114>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	4a37      	ldr	r2, [pc, #220]	; (8007ba0 <xTaskResumeAll+0x114>)
 8007ac4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac6:	4b36      	ldr	r3, [pc, #216]	; (8007ba0 <xTaskResumeAll+0x114>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d161      	bne.n	8007b92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ace:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <xTaskResumeAll+0x118>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d05d      	beq.n	8007b92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ad6:	e02e      	b.n	8007b36 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007ad8:	4b33      	ldr	r3, [pc, #204]	; (8007ba8 <xTaskResumeAll+0x11c>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3318      	adds	r3, #24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fd59 	bl	800759c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fd54 	bl	800759c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	2201      	movs	r2, #1
 8007afa:	409a      	lsls	r2, r3
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <xTaskResumeAll+0x120>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	4a2a      	ldr	r2, [pc, #168]	; (8007bac <xTaskResumeAll+0x120>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4a27      	ldr	r2, [pc, #156]	; (8007bb0 <xTaskResumeAll+0x124>)
 8007b14:	441a      	add	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7ff fce0 	bl	80074e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <xTaskResumeAll+0x128>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d302      	bcc.n	8007b36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b30:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <xTaskResumeAll+0x12c>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b36:	4b1c      	ldr	r3, [pc, #112]	; (8007ba8 <xTaskResumeAll+0x11c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1cc      	bne.n	8007ad8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b44:	f000 fa18 	bl	8007f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b48:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <xTaskResumeAll+0x130>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d010      	beq.n	8007b76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b54:	f000 f836 	bl	8007bc4 <xTaskIncrementTick>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b5e:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <xTaskResumeAll+0x12c>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f1      	bne.n	8007b54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007b70:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <xTaskResumeAll+0x130>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <xTaskResumeAll+0x12c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <xTaskResumeAll+0x134>)
 8007b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b92:	f000 fbd7 	bl	8008344 <vPortExitCritical>

	return xAlreadyYielded;
 8007b96:	68bb      	ldr	r3, [r7, #8]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000b68 	.word	0x20000b68
 8007ba4:	20000b40 	.word	0x20000b40
 8007ba8:	20000b00 	.word	0x20000b00
 8007bac:	20000b48 	.word	0x20000b48
 8007bb0:	20000a44 	.word	0x20000a44
 8007bb4:	20000a40 	.word	0x20000a40
 8007bb8:	20000b54 	.word	0x20000b54
 8007bbc:	20000b50 	.word	0x20000b50
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bce:	4b51      	ldr	r3, [pc, #324]	; (8007d14 <xTaskIncrementTick+0x150>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f040 808d 	bne.w	8007cf2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bd8:	4b4f      	ldr	r3, [pc, #316]	; (8007d18 <xTaskIncrementTick+0x154>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007be0:	4a4d      	ldr	r2, [pc, #308]	; (8007d18 <xTaskIncrementTick+0x154>)
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d120      	bne.n	8007c2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bec:	4b4b      	ldr	r3, [pc, #300]	; (8007d1c <xTaskIncrementTick+0x158>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <xTaskIncrementTick+0x48>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	603b      	str	r3, [r7, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <xTaskIncrementTick+0x46>
 8007c0c:	4b43      	ldr	r3, [pc, #268]	; (8007d1c <xTaskIncrementTick+0x158>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	4b43      	ldr	r3, [pc, #268]	; (8007d20 <xTaskIncrementTick+0x15c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a41      	ldr	r2, [pc, #260]	; (8007d1c <xTaskIncrementTick+0x158>)
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	4a41      	ldr	r2, [pc, #260]	; (8007d20 <xTaskIncrementTick+0x15c>)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4b40      	ldr	r3, [pc, #256]	; (8007d24 <xTaskIncrementTick+0x160>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	4a3f      	ldr	r2, [pc, #252]	; (8007d24 <xTaskIncrementTick+0x160>)
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	f000 f9a5 	bl	8007f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c2e:	4b3e      	ldr	r3, [pc, #248]	; (8007d28 <xTaskIncrementTick+0x164>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d34d      	bcc.n	8007cd4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c38:	4b38      	ldr	r3, [pc, #224]	; (8007d1c <xTaskIncrementTick+0x158>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <xTaskIncrementTick+0x82>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <xTaskIncrementTick+0x84>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d004      	beq.n	8007c56 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c4c:	4b36      	ldr	r3, [pc, #216]	; (8007d28 <xTaskIncrementTick+0x164>)
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	601a      	str	r2, [r3, #0]
					break;
 8007c54:	e03e      	b.n	8007cd4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c56:	4b31      	ldr	r3, [pc, #196]	; (8007d1c <xTaskIncrementTick+0x158>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d203      	bcs.n	8007c76 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c6e:	4a2e      	ldr	r2, [pc, #184]	; (8007d28 <xTaskIncrementTick+0x164>)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6013      	str	r3, [r2, #0]
						break;
 8007c74:	e02e      	b.n	8007cd4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fc8e 	bl	800759c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fc85 	bl	800759c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	2201      	movs	r2, #1
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	4b24      	ldr	r3, [pc, #144]	; (8007d2c <xTaskIncrementTick+0x168>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <xTaskIncrementTick+0x168>)
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	; (8007d30 <xTaskIncrementTick+0x16c>)
 8007cb2:	441a      	add	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7ff fc11 	bl	80074e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc4:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <xTaskIncrementTick+0x170>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d3b4      	bcc.n	8007c38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd2:	e7b1      	b.n	8007c38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <xTaskIncrementTick+0x170>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cda:	4915      	ldr	r1, [pc, #84]	; (8007d30 <xTaskIncrementTick+0x16c>)
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d907      	bls.n	8007cfc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e004      	b.n	8007cfc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007cf2:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <xTaskIncrementTick+0x174>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	4a0f      	ldr	r2, [pc, #60]	; (8007d38 <xTaskIncrementTick+0x174>)
 8007cfa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <xTaskIncrementTick+0x178>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007d04:	2301      	movs	r3, #1
 8007d06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d08:	697b      	ldr	r3, [r7, #20]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000b68 	.word	0x20000b68
 8007d18:	20000b44 	.word	0x20000b44
 8007d1c:	20000af8 	.word	0x20000af8
 8007d20:	20000afc 	.word	0x20000afc
 8007d24:	20000b58 	.word	0x20000b58
 8007d28:	20000b60 	.word	0x20000b60
 8007d2c:	20000b48 	.word	0x20000b48
 8007d30:	20000a44 	.word	0x20000a44
 8007d34:	20000a40 	.word	0x20000a40
 8007d38:	20000b50 	.word	0x20000b50
 8007d3c:	20000b54 	.word	0x20000b54

08007d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d46:	4b29      	ldr	r3, [pc, #164]	; (8007dec <vTaskSwitchContext+0xac>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d4e:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <vTaskSwitchContext+0xb0>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d54:	e044      	b.n	8007de0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007d56:	4b26      	ldr	r3, [pc, #152]	; (8007df0 <vTaskSwitchContext+0xb0>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007d5c:	4b25      	ldr	r3, [pc, #148]	; (8007df4 <vTaskSwitchContext+0xb4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	fab3 f383 	clz	r3, r3
 8007d68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	f1c3 031f 	rsb	r3, r3, #31
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	4921      	ldr	r1, [pc, #132]	; (8007df8 <vTaskSwitchContext+0xb8>)
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	607b      	str	r3, [r7, #4]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <vTaskSwitchContext+0x5a>
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <vTaskSwitchContext+0xb8>)
 8007da8:	4413      	add	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	605a      	str	r2, [r3, #4]
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d104      	bne.n	8007dcc <vTaskSwitchContext+0x8c>
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	605a      	str	r2, [r3, #4]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <vTaskSwitchContext+0xbc>)
 8007dd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <vTaskSwitchContext+0xbc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	334c      	adds	r3, #76	; 0x4c
 8007ddc:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <vTaskSwitchContext+0xc0>)
 8007dde:	6013      	str	r3, [r2, #0]
}
 8007de0:	bf00      	nop
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	20000b68 	.word	0x20000b68
 8007df0:	20000b54 	.word	0x20000b54
 8007df4:	20000b48 	.word	0x20000b48
 8007df8:	20000a44 	.word	0x20000a44
 8007dfc:	20000a40 	.word	0x20000a40
 8007e00:	20000080 	.word	0x20000080

08007e04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e0c:	f000 f852 	bl	8007eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e10:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <prvIdleTask+0x28>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d9f9      	bls.n	8007e0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <prvIdleTask+0x2c>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e28:	e7f0      	b.n	8007e0c <prvIdleTask+0x8>
 8007e2a:	bf00      	nop
 8007e2c:	20000a44 	.word	0x20000a44
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	e00c      	b.n	8007e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <prvInitialiseTaskLists+0x60>)
 8007e4c:	4413      	add	r3, r2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fb1a 	bl	8007488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3301      	adds	r3, #1
 8007e58:	607b      	str	r3, [r7, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b06      	cmp	r3, #6
 8007e5e:	d9ef      	bls.n	8007e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e60:	480d      	ldr	r0, [pc, #52]	; (8007e98 <prvInitialiseTaskLists+0x64>)
 8007e62:	f7ff fb11 	bl	8007488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e66:	480d      	ldr	r0, [pc, #52]	; (8007e9c <prvInitialiseTaskLists+0x68>)
 8007e68:	f7ff fb0e 	bl	8007488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e6c:	480c      	ldr	r0, [pc, #48]	; (8007ea0 <prvInitialiseTaskLists+0x6c>)
 8007e6e:	f7ff fb0b 	bl	8007488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e72:	480c      	ldr	r0, [pc, #48]	; (8007ea4 <prvInitialiseTaskLists+0x70>)
 8007e74:	f7ff fb08 	bl	8007488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e78:	480b      	ldr	r0, [pc, #44]	; (8007ea8 <prvInitialiseTaskLists+0x74>)
 8007e7a:	f7ff fb05 	bl	8007488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <prvInitialiseTaskLists+0x78>)
 8007e80:	4a05      	ldr	r2, [pc, #20]	; (8007e98 <prvInitialiseTaskLists+0x64>)
 8007e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <prvInitialiseTaskLists+0x7c>)
 8007e86:	4a05      	ldr	r2, [pc, #20]	; (8007e9c <prvInitialiseTaskLists+0x68>)
 8007e88:	601a      	str	r2, [r3, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000a44 	.word	0x20000a44
 8007e98:	20000ad0 	.word	0x20000ad0
 8007e9c:	20000ae4 	.word	0x20000ae4
 8007ea0:	20000b00 	.word	0x20000b00
 8007ea4:	20000b14 	.word	0x20000b14
 8007ea8:	20000b2c 	.word	0x20000b2c
 8007eac:	20000af8 	.word	0x20000af8
 8007eb0:	20000afc 	.word	0x20000afc

08007eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eba:	e019      	b.n	8007ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ebc:	f000 fa12 	bl	80082e4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ec0:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <prvCheckTasksWaitingTermination+0x50>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fb65 	bl	800759c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <prvCheckTasksWaitingTermination+0x54>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	4a0b      	ldr	r2, [pc, #44]	; (8007f08 <prvCheckTasksWaitingTermination+0x54>)
 8007eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <prvCheckTasksWaitingTermination+0x58>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <prvCheckTasksWaitingTermination+0x58>)
 8007ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ee6:	f000 fa2d 	bl	8008344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f810 	bl	8007f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ef0:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <prvCheckTasksWaitingTermination+0x58>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e1      	bne.n	8007ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000b14 	.word	0x20000b14
 8007f08:	20000b40 	.word	0x20000b40
 8007f0c:	20000b28 	.word	0x20000b28

08007f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	334c      	adds	r3, #76	; 0x4c
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f002 fa95 	bl	800a44c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d108      	bne.n	8007f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fb7d 	bl	8008630 <vPortFree>
				vPortFree( pxTCB );
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fb7a 	bl	8008630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f3c:	e018      	b.n	8007f70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d103      	bne.n	8007f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb71 	bl	8008630 <vPortFree>
	}
 8007f4e:	e00f      	b.n	8007f70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d00a      	beq.n	8007f70 <prvDeleteTCB+0x60>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	60fb      	str	r3, [r7, #12]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <prvDeleteTCB+0x5e>
	}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <prvResetNextTaskUnblockTime+0x44>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <prvResetNextTaskUnblockTime+0x14>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <prvResetNextTaskUnblockTime+0x16>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <prvResetNextTaskUnblockTime+0x48>)
 8007f94:	f04f 32ff 	mov.w	r2, #4294967295
 8007f98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f9a:	e008      	b.n	8007fae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f9c:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <prvResetNextTaskUnblockTime+0x44>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4a05      	ldr	r2, [pc, #20]	; (8007fc0 <prvResetNextTaskUnblockTime+0x48>)
 8007fac:	6013      	str	r3, [r2, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20000af8 	.word	0x20000af8
 8007fc0:	20000b60 	.word	0x20000b60

08007fc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fce:	4b29      	ldr	r3, [pc, #164]	; (8008074 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd4:	4b28      	ldr	r3, [pc, #160]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff fade 	bl	800759c <uxListRemove>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007fe6:	4b24      	ldr	r3, [pc, #144]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	2201      	movs	r2, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	43da      	mvns	r2, r3
 8007ff4:	4b21      	ldr	r3, [pc, #132]	; (800807c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	4a20      	ldr	r2, [pc, #128]	; (800807c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ffc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d10a      	bne.n	800801c <prvAddCurrentTaskToDelayedList+0x58>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800800c:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	481a      	ldr	r0, [pc, #104]	; (8008080 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008016:	f7ff fa64 	bl	80074e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800801a:	e026      	b.n	800806a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008024:	4b14      	ldr	r3, [pc, #80]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	429a      	cmp	r2, r3
 8008032:	d209      	bcs.n	8008048 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008034:	4b13      	ldr	r3, [pc, #76]	; (8008084 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7ff fa72 	bl	800752a <vListInsert>
}
 8008046:	e010      	b.n	800806a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <prvAddCurrentTaskToDelayedList+0xc4>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3304      	adds	r3, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7ff fa68 	bl	800752a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800805a:	4b0c      	ldr	r3, [pc, #48]	; (800808c <prvAddCurrentTaskToDelayedList+0xc8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	429a      	cmp	r2, r3
 8008062:	d202      	bcs.n	800806a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008064:	4a09      	ldr	r2, [pc, #36]	; (800808c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	6013      	str	r3, [r2, #0]
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000b44 	.word	0x20000b44
 8008078:	20000a40 	.word	0x20000a40
 800807c:	20000b48 	.word	0x20000b48
 8008080:	20000b2c 	.word	0x20000b2c
 8008084:	20000afc 	.word	0x20000afc
 8008088:	20000af8 	.word	0x20000af8
 800808c:	20000b60 	.word	0x20000b60

08008090 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3b04      	subs	r3, #4
 80080a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3b04      	subs	r3, #4
 80080ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f023 0201 	bic.w	r2, r3, #1
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3b04      	subs	r3, #4
 80080be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080c0:	4a0c      	ldr	r2, [pc, #48]	; (80080f4 <pxPortInitialiseStack+0x64>)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3b14      	subs	r3, #20
 80080ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3b04      	subs	r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f06f 0202 	mvn.w	r2, #2
 80080de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3b20      	subs	r3, #32
 80080e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080e6:	68fb      	ldr	r3, [r7, #12]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	080080f9 	.word	0x080080f9

080080f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008102:	4b12      	ldr	r3, [pc, #72]	; (800814c <prvTaskExitError+0x54>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d00a      	beq.n	8008122 <prvTaskExitError+0x2a>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <prvTaskExitError+0x28>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60bb      	str	r3, [r7, #8]
}
 8008134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008136:	bf00      	nop
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0fc      	beq.n	8008138 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20000014 	.word	0x20000014

08008150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008178:	4808      	ldr	r0, [pc, #32]	; (800819c <prvPortStartFirstTask+0x24>)
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	6800      	ldr	r0, [r0, #0]
 800817e:	f380 8808 	msr	MSP, r0
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8814 	msr	CONTROL, r0
 800818a:	b662      	cpsie	i
 800818c:	b661      	cpsie	f
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	df00      	svc	0
 8008198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800819a:	bf00      	nop
 800819c:	e000ed08 	.word	0xe000ed08

080081a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081a6:	4b46      	ldr	r3, [pc, #280]	; (80082c0 <xPortStartScheduler+0x120>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a46      	ldr	r2, [pc, #280]	; (80082c4 <xPortStartScheduler+0x124>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10a      	bne.n	80081c6 <xPortStartScheduler+0x26>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081c6:	4b3e      	ldr	r3, [pc, #248]	; (80082c0 <xPortStartScheduler+0x120>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a3f      	ldr	r2, [pc, #252]	; (80082c8 <xPortStartScheduler+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10a      	bne.n	80081e6 <xPortStartScheduler+0x46>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081e6:	4b39      	ldr	r3, [pc, #228]	; (80082cc <xPortStartScheduler+0x12c>)
 80081e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	22ff      	movs	r2, #255	; 0xff
 80081f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4b31      	ldr	r3, [pc, #196]	; (80082d0 <xPortStartScheduler+0x130>)
 800820c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800820e:	4b31      	ldr	r3, [pc, #196]	; (80082d4 <xPortStartScheduler+0x134>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008214:	e009      	b.n	800822a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008216:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <xPortStartScheduler+0x134>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3b01      	subs	r3, #1
 800821c:	4a2d      	ldr	r2, [pc, #180]	; (80082d4 <xPortStartScheduler+0x134>)
 800821e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d0ef      	beq.n	8008216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008236:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <xPortStartScheduler+0x134>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1c3 0307 	rsb	r3, r3, #7
 800823e:	2b04      	cmp	r3, #4
 8008240:	d00a      	beq.n	8008258 <xPortStartScheduler+0xb8>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	60bb      	str	r3, [r7, #8]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <xPortStartScheduler+0x134>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	4a1d      	ldr	r2, [pc, #116]	; (80082d4 <xPortStartScheduler+0x134>)
 8008260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <xPortStartScheduler+0x134>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800826a:	4a1a      	ldr	r2, [pc, #104]	; (80082d4 <xPortStartScheduler+0x134>)
 800826c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <xPortStartScheduler+0x138>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <xPortStartScheduler+0x138>)
 800827c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <xPortStartScheduler+0x138>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <xPortStartScheduler+0x138>)
 8008288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800828c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800828e:	f000 f8dd 	bl	800844c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <xPortStartScheduler+0x13c>)
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008298:	f000 f8fc 	bl	8008494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800829c:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <xPortStartScheduler+0x140>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a0f      	ldr	r2, [pc, #60]	; (80082e0 <xPortStartScheduler+0x140>)
 80082a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082a8:	f7ff ff66 	bl	8008178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082ac:	f7ff fd48 	bl	8007d40 <vTaskSwitchContext>
	prvTaskExitError();
 80082b0:	f7ff ff22 	bl	80080f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	e000ed00 	.word	0xe000ed00
 80082c4:	410fc271 	.word	0x410fc271
 80082c8:	410fc270 	.word	0x410fc270
 80082cc:	e000e400 	.word	0xe000e400
 80082d0:	20000b6c 	.word	0x20000b6c
 80082d4:	20000b70 	.word	0x20000b70
 80082d8:	e000ed20 	.word	0xe000ed20
 80082dc:	20000014 	.word	0x20000014
 80082e0:	e000ef34 	.word	0xe000ef34

080082e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <vPortEnterCritical+0x58>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3301      	adds	r3, #1
 8008304:	4a0d      	ldr	r2, [pc, #52]	; (800833c <vPortEnterCritical+0x58>)
 8008306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008308:	4b0c      	ldr	r3, [pc, #48]	; (800833c <vPortEnterCritical+0x58>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d10f      	bne.n	8008330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <vPortEnterCritical+0x5c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <vPortEnterCritical+0x4c>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	603b      	str	r3, [r7, #0]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <vPortEnterCritical+0x4a>
	}
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000014 	.word	0x20000014
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <vPortExitCritical+0x50>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <vPortExitCritical+0x24>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	607b      	str	r3, [r7, #4]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <vPortExitCritical+0x50>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3b01      	subs	r3, #1
 800836e:	4a09      	ldr	r2, [pc, #36]	; (8008394 <vPortExitCritical+0x50>)
 8008370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <vPortExitCritical+0x42>
 800837a:	2300      	movs	r3, #0
 800837c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000014 	.word	0x20000014
	...

080083a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083a0:	f3ef 8009 	mrs	r0, PSP
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <pxCurrentTCBConst>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	f01e 0f10 	tst.w	lr, #16
 80083b0:	bf08      	it	eq
 80083b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	6010      	str	r0, [r2, #0]
 80083bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083c4:	f380 8811 	msr	BASEPRI, r0
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f7ff fcb6 	bl	8007d40 <vTaskSwitchContext>
 80083d4:	f04f 0000 	mov.w	r0, #0
 80083d8:	f380 8811 	msr	BASEPRI, r0
 80083dc:	bc09      	pop	{r0, r3}
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e6:	f01e 0f10 	tst.w	lr, #16
 80083ea:	bf08      	it	eq
 80083ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083f0:	f380 8809 	msr	PSP, r0
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst>:
 8008400:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008422:	f7ff fbcf 	bl	8007bc4 <xTaskIncrementTick>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800842c:	4b06      	ldr	r3, [pc, #24]	; (8008448 <SysTick_Handler+0x40>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f383 8811 	msr	BASEPRI, r3
}
 800843e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008456:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <vPortSetupTimerInterrupt+0x38>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <vPortSetupTimerInterrupt+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <vPortSetupTimerInterrupt+0x40>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <vPortSetupTimerInterrupt+0x44>)
 800846a:	3b01      	subs	r3, #1
 800846c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800846e:	4b04      	ldr	r3, [pc, #16]	; (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	e000e010 	.word	0xe000e010
 8008484:	e000e018 	.word	0xe000e018
 8008488:	20000008 	.word	0x20000008
 800848c:	10624dd3 	.word	0x10624dd3
 8008490:	e000e014 	.word	0xe000e014

08008494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084a4 <vPortEnableVFP+0x10>
 8008498:	6801      	ldr	r1, [r0, #0]
 800849a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800849e:	6001      	str	r1, [r0, #0]
 80084a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084a2:	bf00      	nop
 80084a4:	e000ed88 	.word	0xe000ed88

080084a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b4:	f7ff fadc 	bl	8007a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084b8:	4b58      	ldr	r3, [pc, #352]	; (800861c <pvPortMalloc+0x174>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c0:	f000 f910 	bl	80086e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c4:	4b56      	ldr	r3, [pc, #344]	; (8008620 <pvPortMalloc+0x178>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 808e 	bne.w	80085ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01d      	beq.n	8008514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084d8:	2208      	movs	r2, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4413      	add	r3, r2
 80084de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d014      	beq.n	8008514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <pvPortMalloc+0x6c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	617b      	str	r3, [r7, #20]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d069      	beq.n	80085ee <pvPortMalloc+0x146>
 800851a:	4b42      	ldr	r3, [pc, #264]	; (8008624 <pvPortMalloc+0x17c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	429a      	cmp	r2, r3
 8008522:	d864      	bhi.n	80085ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008524:	4b40      	ldr	r3, [pc, #256]	; (8008628 <pvPortMalloc+0x180>)
 8008526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008528:	4b3f      	ldr	r3, [pc, #252]	; (8008628 <pvPortMalloc+0x180>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800852e:	e004      	b.n	800853a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <pvPortMalloc+0xa4>
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f1      	bne.n	8008530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800854c:	4b33      	ldr	r3, [pc, #204]	; (800861c <pvPortMalloc+0x174>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008552:	429a      	cmp	r2, r3
 8008554:	d04b      	beq.n	80085ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2208      	movs	r2, #8
 800855c:	4413      	add	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	2308      	movs	r3, #8
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d91f      	bls.n	80085b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <pvPortMalloc+0xf8>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085b2:	69b8      	ldr	r0, [r7, #24]
 80085b4:	f000 f8f8 	bl	80087a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085b8:	4b1a      	ldr	r3, [pc, #104]	; (8008624 <pvPortMalloc+0x17c>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a18      	ldr	r2, [pc, #96]	; (8008624 <pvPortMalloc+0x17c>)
 80085c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085c6:	4b17      	ldr	r3, [pc, #92]	; (8008624 <pvPortMalloc+0x17c>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b18      	ldr	r3, [pc, #96]	; (800862c <pvPortMalloc+0x184>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085d2:	4b14      	ldr	r3, [pc, #80]	; (8008624 <pvPortMalloc+0x17c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a15      	ldr	r2, [pc, #84]	; (800862c <pvPortMalloc+0x184>)
 80085d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4b10      	ldr	r3, [pc, #64]	; (8008620 <pvPortMalloc+0x178>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085ee:	f7ff fa4d 	bl	8007a8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <pvPortMalloc+0x16a>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60fb      	str	r3, [r7, #12]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <pvPortMalloc+0x168>
	return pvReturn;
 8008612:	69fb      	ldr	r3, [r7, #28]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3728      	adds	r7, #40	; 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	2000177c 	.word	0x2000177c
 8008620:	20001788 	.word	0x20001788
 8008624:	20001780 	.word	0x20001780
 8008628:	20001774 	.word	0x20001774
 800862c:	20001784 	.word	0x20001784

08008630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d048      	beq.n	80086d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008642:	2308      	movs	r3, #8
 8008644:	425b      	negs	r3, r3
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	4b21      	ldr	r3, [pc, #132]	; (80086dc <vPortFree+0xac>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <vPortFree+0x44>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	60fb      	str	r3, [r7, #12]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <vPortFree+0x62>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60bb      	str	r3, [r7, #8]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	4b11      	ldr	r3, [pc, #68]	; (80086dc <vPortFree+0xac>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4013      	ands	r3, r2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d019      	beq.n	80086d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d115      	bne.n	80086d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <vPortFree+0xac>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	43db      	mvns	r3, r3
 80086b2:	401a      	ands	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086b8:	f7ff f9da 	bl	8007a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <vPortFree+0xb0>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4413      	add	r3, r2
 80086c6:	4a06      	ldr	r2, [pc, #24]	; (80086e0 <vPortFree+0xb0>)
 80086c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086ca:	6938      	ldr	r0, [r7, #16]
 80086cc:	f000 f86c 	bl	80087a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80086d0:	f7ff f9dc 	bl	8007a8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086d4:	bf00      	nop
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20001788 	.word	0x20001788
 80086e0:	20001780 	.word	0x20001780

080086e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80086ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086f0:	4b27      	ldr	r3, [pc, #156]	; (8008790 <prvHeapInit+0xac>)
 80086f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3307      	adds	r3, #7
 8008702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0307 	bic.w	r3, r3, #7
 800870a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	4a1f      	ldr	r2, [pc, #124]	; (8008790 <prvHeapInit+0xac>)
 8008714:	4413      	add	r3, r2
 8008716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800871c:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <prvHeapInit+0xb0>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008722:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <prvHeapInit+0xb0>)
 8008724:	2200      	movs	r2, #0
 8008726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008730:	2208      	movs	r2, #8
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4a15      	ldr	r2, [pc, #84]	; (8008798 <prvHeapInit+0xb4>)
 8008744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <prvHeapInit+0xb4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800874e:	4b12      	ldr	r3, [pc, #72]	; (8008798 <prvHeapInit+0xb4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	1ad2      	subs	r2, r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008764:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <prvHeapInit+0xb4>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	4a0a      	ldr	r2, [pc, #40]	; (800879c <prvHeapInit+0xb8>)
 8008772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	4a09      	ldr	r2, [pc, #36]	; (80087a0 <prvHeapInit+0xbc>)
 800877a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800877c:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <prvHeapInit+0xc0>)
 800877e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008782:	601a      	str	r2, [r3, #0]
}
 8008784:	bf00      	nop
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20000b74 	.word	0x20000b74
 8008794:	20001774 	.word	0x20001774
 8008798:	2000177c 	.word	0x2000177c
 800879c:	20001784 	.word	0x20001784
 80087a0:	20001780 	.word	0x20001780
 80087a4:	20001788 	.word	0x20001788

080087a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087b0:	4b28      	ldr	r3, [pc, #160]	; (8008854 <prvInsertBlockIntoFreeList+0xac>)
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	e002      	b.n	80087bc <prvInsertBlockIntoFreeList+0x14>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d8f7      	bhi.n	80087b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	4413      	add	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d108      	bne.n	80087ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	441a      	add	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d118      	bne.n	8008830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <prvInsertBlockIntoFreeList+0xb0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d00d      	beq.n	8008826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	441a      	add	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e008      	b.n	8008838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008826:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <prvInsertBlockIntoFreeList+0xb0>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	e003      	b.n	8008838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	429a      	cmp	r2, r3
 800883e:	d002      	beq.n	8008846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20001774 	.word	0x20001774
 8008858:	2000177c 	.word	0x2000177c

0800885c <arm_fir_init_f32>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	9c04      	ldr	r4, [sp, #16]
 8008860:	6082      	str	r2, [r0, #8]
 8008862:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8008866:	3c01      	subs	r4, #1
 8008868:	440c      	add	r4, r1
 800886a:	8001      	strh	r1, [r0, #0]
 800886c:	4605      	mov	r5, r0
 800886e:	00a2      	lsls	r2, r4, #2
 8008870:	4618      	mov	r0, r3
 8008872:	2100      	movs	r1, #0
 8008874:	f001 fdcd 	bl	800a412 <memset>
 8008878:	6068      	str	r0, [r5, #4]
 800887a:	bd38      	pop	{r3, r4, r5, pc}

0800887c <arm_fir_f32>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	ed2d 8b10 	vpush	{d8-d15}
 8008884:	b08b      	sub	sp, #44	; 0x2c
 8008886:	f8b0 8000 	ldrh.w	r8, [r0]
 800888a:	9003      	str	r0, [sp, #12]
 800888c:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8008890:	461e      	mov	r6, r3
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 8008898:	3b01      	subs	r3, #1
 800889a:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800889e:	08f3      	lsrs	r3, r6, #3
 80088a0:	9002      	str	r0, [sp, #8]
 80088a2:	9500      	str	r5, [sp, #0]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	f000 81f1 	beq.w	8008c8c <arm_fir_f32+0x410>
 80088aa:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 80088ae:	f100 0620 	add.w	r6, r0, #32
 80088b2:	9405      	str	r4, [sp, #20]
 80088b4:	0164      	lsls	r4, r4, #5
 80088b6:	4420      	add	r0, r4
 80088b8:	f008 0a07 	and.w	sl, r8, #7
 80088bc:	9607      	str	r6, [sp, #28]
 80088be:	9006      	str	r0, [sp, #24]
 80088c0:	469c      	mov	ip, r3
 80088c2:	4650      	mov	r0, sl
 80088c4:	4623      	mov	r3, r4
 80088c6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80088ca:	f8cd 8020 	str.w	r8, [sp, #32]
 80088ce:	1937      	adds	r7, r6, r4
 80088d0:	f109 0b1c 	add.w	fp, r9, #28
 80088d4:	f8dd e014 	ldr.w	lr, [sp, #20]
 80088d8:	9209      	str	r2, [sp, #36]	; 0x24
 80088da:	f8cd 9014 	str.w	r9, [sp, #20]
 80088de:	f101 0620 	add.w	r6, r1, #32
 80088e2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80088e6:	9106      	str	r1, [sp, #24]
 80088e8:	3520      	adds	r5, #32
 80088ea:	f102 0420 	add.w	r4, r2, #32
 80088ee:	4698      	mov	r8, r3
 80088f0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80088f4:	f845 3c20 	str.w	r3, [r5, #-32]
 80088f8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80088fc:	f845 3c1c 	str.w	r3, [r5, #-28]
 8008900:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8008904:	f845 3c18 	str.w	r3, [r5, #-24]
 8008908:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800890c:	f845 3c14 	str.w	r3, [r5, #-20]
 8008910:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8008914:	f845 3c10 	str.w	r3, [r5, #-16]
 8008918:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800891c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8008920:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008924:	f845 3c08 	str.w	r3, [r5, #-8]
 8008928:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800892c:	f845 3c04 	str.w	r3, [r5, #-4]
 8008930:	ed1b 2a07 	vldr	s4, [fp, #-28]	; 0xffffffe4
 8008934:	ed5b 1a06 	vldr	s3, [fp, #-24]	; 0xffffffe8
 8008938:	ed1b 1a05 	vldr	s2, [fp, #-20]	; 0xffffffec
 800893c:	ed5b 0a04 	vldr	s1, [fp, #-16]
 8008940:	ed1b 0a03 	vldr	s0, [fp, #-12]
 8008944:	ed1b 8a02 	vldr	s16, [fp, #-8]
 8008948:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800894c:	eddf 6af5 	vldr	s13, [pc, #980]	; 8008d24 <arm_fir_f32+0x4a8>
 8008950:	465a      	mov	r2, fp
 8008952:	f1be 0f00 	cmp.w	lr, #0
 8008956:	f000 81fe 	beq.w	8008d56 <arm_fir_f32+0x4da>
 800895a:	f10b 0120 	add.w	r1, fp, #32
 800895e:	eef0 ba66 	vmov.f32	s23, s13
 8008962:	eeb0 6a66 	vmov.f32	s12, s13
 8008966:	eeb0 9a66 	vmov.f32	s18, s13
 800896a:	eef0 9a66 	vmov.f32	s19, s13
 800896e:	eeb0 aa66 	vmov.f32	s20, s13
 8008972:	eef0 aa66 	vmov.f32	s21, s13
 8008976:	eeb0 ba66 	vmov.f32	s22, s13
 800897a:	460a      	mov	r2, r1
 800897c:	4653      	mov	r3, sl
 800897e:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8008982:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8008986:	ed53 ea07 	vldr	s29, [r3, #-28]	; 0xffffffe4
 800898a:	ed13 ea06 	vldr	s28, [r3, #-24]	; 0xffffffe8
 800898e:	ed53 da05 	vldr	s27, [r3, #-20]	; 0xffffffec
 8008992:	ed53 ca04 	vldr	s25, [r3, #-16]
 8008996:	ed53 2a03 	vldr	s5, [r3, #-12]
 800899a:	ed13 4a02 	vldr	s8, [r3, #-8]
 800899e:	ed13 5a01 	vldr	s10, [r3, #-4]
 80089a2:	ee67 fa02 	vmul.f32	s31, s14, s4
 80089a6:	ee27 da21 	vmul.f32	s26, s14, s3
 80089aa:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 80089ae:	ee27 ca01 	vmul.f32	s24, s14, s2
 80089b2:	ee27 3a20 	vmul.f32	s6, s14, s1
 80089b6:	ee67 3a00 	vmul.f32	s7, s14, s0
 80089ba:	ee67 5a08 	vmul.f32	s11, s14, s16
 80089be:	ee27 fa28 	vmul.f32	s30, s14, s17
 80089c2:	ee67 7a24 	vmul.f32	s15, s14, s9
 80089c6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80089ca:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80089ce:	ee6e faa1 	vmul.f32	s31, s29, s3
 80089d2:	ee2e da81 	vmul.f32	s26, s29, s2
 80089d6:	ed52 1a06 	vldr	s3, [r2, #-24]	; 0xffffffe8
 80089da:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80089de:	ee73 9a29 	vadd.f32	s19, s6, s19
 80089e2:	ee2e caa0 	vmul.f32	s24, s29, s1
 80089e6:	ee2e 3a80 	vmul.f32	s6, s29, s0
 80089ea:	ee33 9a89 	vadd.f32	s18, s7, s18
 80089ee:	ee35 6a86 	vadd.f32	s12, s11, s12
 80089f2:	ee6e 3a88 	vmul.f32	s7, s29, s16
 80089f6:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 80089fa:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80089fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a02:	ee24 faae 	vmul.f32	s30, s9, s29
 8008a06:	ee6e ea82 	vmul.f32	s29, s29, s4
 8008a0a:	ee2e 7a01 	vmul.f32	s14, s28, s2
 8008a0e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8008a12:	ed12 1a05 	vldr	s2, [r2, #-20]	; 0xffffffec
 8008a16:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008a1a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008a1e:	ee2e da20 	vmul.f32	s26, s28, s1
 8008a22:	ee2e ca00 	vmul.f32	s24, s28, s0
 8008a26:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008a2a:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008a2e:	ee2e 3a08 	vmul.f32	s6, s28, s16
 8008a32:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8008a36:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008a3a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008a3e:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8008a42:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8008a46:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8008a4a:	ee2e ea21 	vmul.f32	s28, s28, s3
 8008a4e:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 8008a52:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008a56:	ed52 0a04 	vldr	s1, [r2, #-16]
 8008a5a:	ee2d da80 	vmul.f32	s26, s27, s0
 8008a5e:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8008a62:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008a66:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008a6a:	ee2d ca88 	vmul.f32	s24, s27, s16
 8008a6e:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8008a72:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008a76:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008a7a:	ee64 3aad 	vmul.f32	s7, s9, s27
 8008a7e:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8008a82:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008a86:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8008a8a:	ee21 faad 	vmul.f32	s30, s3, s27
 8008a8e:	ee6d da81 	vmul.f32	s27, s27, s2
 8008a92:	ee6c fa80 	vmul.f32	s31, s25, s0
 8008a96:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8008a9a:	ed12 0a03 	vldr	s0, [r2, #-12]
 8008a9e:	ee3d da2a 	vadd.f32	s26, s26, s21
 8008aa2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008aa6:	ee6c aa88 	vmul.f32	s21, s25, s16
 8008aaa:	ee2c caa8 	vmul.f32	s24, s25, s17
 8008aae:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008ab2:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008ab6:	ee24 3aac 	vmul.f32	s6, s9, s25
 8008aba:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8008abe:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008ac2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008ac6:	ee61 5aac 	vmul.f32	s11, s3, s25
 8008aca:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8008ace:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8008ad2:	ee6c caa0 	vmul.f32	s25, s25, s1
 8008ad6:	ee62 ea88 	vmul.f32	s29, s5, s16
 8008ada:	ee3a da8d 	vadd.f32	s26, s21, s26
 8008ade:	ed12 8a02 	vldr	s16, [r2, #-8]
 8008ae2:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8008ae6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8008aea:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008aee:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008af2:	ee24 caa2 	vmul.f32	s24, s9, s5
 8008af6:	ee22 3a22 	vmul.f32	s6, s4, s5
 8008afa:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008afe:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008b02:	ee61 3aa2 	vmul.f32	s7, s3, s5
 8008b06:	ee61 5a22 	vmul.f32	s11, s2, s5
 8008b0a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008b0e:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8008b12:	ee20 faa2 	vmul.f32	s30, s1, s5
 8008b16:	ee62 2a80 	vmul.f32	s5, s5, s0
 8008b1a:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8008b1e:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8008b22:	ee24 ba28 	vmul.f32	s22, s8, s17
 8008b26:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8008b2a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008b2e:	ee24 da84 	vmul.f32	s26, s9, s8
 8008b32:	ee22 ca04 	vmul.f32	s24, s4, s8
 8008b36:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008b3a:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008b3e:	ee21 3a84 	vmul.f32	s6, s3, s8
 8008b42:	ee61 3a04 	vmul.f32	s7, s2, s8
 8008b46:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008b4a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008b4e:	ee60 5a84 	vmul.f32	s11, s1, s8
 8008b52:	ee20 7a04 	vmul.f32	s14, s0, s8
 8008b56:	ee64 6a08 	vmul.f32	s13, s8, s16
 8008b5a:	ed52 8a01 	vldr	s17, [r2, #-4]
 8008b5e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008b62:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008b66:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008b6a:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8008b6e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008b72:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8008b76:	ee64 4a85 	vmul.f32	s9, s9, s10
 8008b7a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008b7e:	ee22 4a05 	vmul.f32	s8, s4, s10
 8008b82:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008b86:	ee61 2a85 	vmul.f32	s5, s3, s10
 8008b8a:	ee21 3a05 	vmul.f32	s6, s2, s10
 8008b8e:	ee60 3a85 	vmul.f32	s7, s1, s10
 8008b92:	ee60 5a05 	vmul.f32	s11, s0, s10
 8008b96:	ee68 ba05 	vmul.f32	s23, s16, s10
 8008b9a:	ee65 7a28 	vmul.f32	s15, s10, s17
 8008b9e:	3320      	adds	r3, #32
 8008ba0:	429f      	cmp	r7, r3
 8008ba2:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8008ba6:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8008baa:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8008bae:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008bb2:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008bb6:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008bba:	ee7b ba87 	vadd.f32	s23, s23, s14
 8008bbe:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8008bc2:	f102 0220 	add.w	r2, r2, #32
 8008bc6:	f47f aeda 	bne.w	800897e <arm_fir_f32+0x102>
 8008bca:	eb0b 0208 	add.w	r2, fp, r8
 8008bce:	46cb      	mov	fp, r9
 8008bd0:	b3a0      	cbz	r0, 8008c3c <arm_fir_f32+0x3c0>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	ecfb 7a01 	vldmia	fp!, {s15}
 8008bd8:	ecf2 5a01 	vldmia	r2!, {s11}
 8008bdc:	ee27 2a82 	vmul.f32	s4, s15, s4
 8008be0:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8008be4:	ee27 3a81 	vmul.f32	s6, s15, s2
 8008be8:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8008bec:	ee27 4a80 	vmul.f32	s8, s15, s0
 8008bf0:	ee67 4a88 	vmul.f32	s9, s15, s16
 8008bf4:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8008bf8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	ee3b ba02 	vadd.f32	s22, s22, s4
 8008c02:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8008c06:	eeb0 2a61 	vmov.f32	s4, s3
 8008c0a:	ee3a aa03 	vadd.f32	s20, s20, s6
 8008c0e:	eef0 1a41 	vmov.f32	s3, s2
 8008c12:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8008c16:	eeb0 1a60 	vmov.f32	s2, s1
 8008c1a:	ee39 9a04 	vadd.f32	s18, s18, s8
 8008c1e:	eef0 0a40 	vmov.f32	s1, s0
 8008c22:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008c26:	eeb0 0a48 	vmov.f32	s0, s16
 8008c2a:	ee7b ba85 	vadd.f32	s23, s23, s10
 8008c2e:	eeb0 8a68 	vmov.f32	s16, s17
 8008c32:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c36:	eef0 8a65 	vmov.f32	s17, s11
 8008c3a:	d1cb      	bne.n	8008bd4 <arm_fir_f32+0x358>
 8008c3c:	f1bc 0c01 	subs.w	ip, ip, #1
 8008c40:	ed04 ba08 	vstr	s22, [r4, #-32]	; 0xffffffe0
 8008c44:	ed44 aa07 	vstr	s21, [r4, #-28]	; 0xffffffe4
 8008c48:	ed04 aa06 	vstr	s20, [r4, #-24]	; 0xffffffe8
 8008c4c:	ed44 9a05 	vstr	s19, [r4, #-20]	; 0xffffffec
 8008c50:	ed04 9a04 	vstr	s18, [r4, #-16]
 8008c54:	ed04 6a03 	vstr	s12, [r4, #-12]
 8008c58:	ed44 ba02 	vstr	s23, [r4, #-8]
 8008c5c:	ed44 6a01 	vstr	s13, [r4, #-4]
 8008c60:	f106 0620 	add.w	r6, r6, #32
 8008c64:	f105 0520 	add.w	r5, r5, #32
 8008c68:	f104 0420 	add.w	r4, r4, #32
 8008c6c:	468b      	mov	fp, r1
 8008c6e:	f47f ae3f 	bne.w	80088f0 <arm_fir_f32+0x74>
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	9800      	ldr	r0, [sp, #0]
 8008c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c7c:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8008c80:	015b      	lsls	r3, r3, #5
 8008c82:	4418      	add	r0, r3
 8008c84:	4419      	add	r1, r3
 8008c86:	441a      	add	r2, r3
 8008c88:	4499      	add	r9, r3
 8008c8a:	9000      	str	r0, [sp, #0]
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	f013 0707 	ands.w	r7, r3, #7
 8008c92:	d020      	beq.n	8008cd6 <arm_fir_f32+0x45a>
 8008c94:	00bf      	lsls	r7, r7, #2
 8008c96:	9e00      	ldr	r6, [sp, #0]
 8008c98:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008c9c:	eb01 0c07 	add.w	ip, r1, r7
 8008ca0:	464d      	mov	r5, r9
 8008ca2:	f851 3b04 	ldr.w	r3, [r1], #4
 8008ca6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008d24 <arm_fir_f32+0x4a8>
 8008caa:	f846 3b04 	str.w	r3, [r6], #4
 8008cae:	4674      	mov	r4, lr
 8008cb0:	4643      	mov	r3, r8
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	ecf0 7a01 	vldmia	r0!, {s15}
 8008cb8:	ecf4 6a01 	vldmia	r4!, {s13}
 8008cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cc6:	d1f5      	bne.n	8008cb4 <arm_fir_f32+0x438>
 8008cc8:	4561      	cmp	r1, ip
 8008cca:	eca2 7a01 	vstmia	r2!, {s14}
 8008cce:	f105 0504 	add.w	r5, r5, #4
 8008cd2:	d1e6      	bne.n	8008ca2 <arm_fir_f32+0x426>
 8008cd4:	44b9      	add	r9, r7
 8008cd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8008ce0:	685d      	ldr	r5, [r3, #4]
 8008ce2:	d021      	beq.n	8008d28 <arm_fir_f32+0x4ac>
 8008ce4:	f109 0210 	add.w	r2, r9, #16
 8008ce8:	f105 0310 	add.w	r3, r5, #16
 8008cec:	4621      	mov	r1, r4
 8008cee:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8008cf2:	f843 0c10 	str.w	r0, [r3, #-16]
 8008cf6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8008cfa:	f843 0c0c 	str.w	r0, [r3, #-12]
 8008cfe:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8008d02:	f843 0c08 	str.w	r0, [r3, #-8]
 8008d06:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008d0a:	f843 0c04 	str.w	r0, [r3, #-4]
 8008d0e:	3901      	subs	r1, #1
 8008d10:	f102 0210 	add.w	r2, r2, #16
 8008d14:	f103 0310 	add.w	r3, r3, #16
 8008d18:	d1e9      	bne.n	8008cee <arm_fir_f32+0x472>
 8008d1a:	0124      	lsls	r4, r4, #4
 8008d1c:	44a1      	add	r9, r4
 8008d1e:	4425      	add	r5, r4
 8008d20:	e002      	b.n	8008d28 <arm_fir_f32+0x4ac>
 8008d22:	bf00      	nop
 8008d24:	00000000 	.word	0x00000000
 8008d28:	f018 0803 	ands.w	r8, r8, #3
 8008d2c:	d00e      	beq.n	8008d4c <arm_fir_f32+0x4d0>
 8008d2e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d32:	602b      	str	r3, [r5, #0]
 8008d34:	f1b8 0801 	subs.w	r8, r8, #1
 8008d38:	d008      	beq.n	8008d4c <arm_fir_f32+0x4d0>
 8008d3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008d3e:	606b      	str	r3, [r5, #4]
 8008d40:	f1b8 0f01 	cmp.w	r8, #1
 8008d44:	bf1c      	itt	ne
 8008d46:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8008d4a:	60ab      	strne	r3, [r5, #8]
 8008d4c:	b00b      	add	sp, #44	; 0x2c
 8008d4e:	ecbd 8b10 	vpop	{d8-d15}
 8008d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	eef0 ba66 	vmov.f32	s23, s13
 8008d5a:	eeb0 6a66 	vmov.f32	s12, s13
 8008d5e:	eeb0 9a66 	vmov.f32	s18, s13
 8008d62:	eef0 9a66 	vmov.f32	s19, s13
 8008d66:	eeb0 aa66 	vmov.f32	s20, s13
 8008d6a:	eef0 aa66 	vmov.f32	s21, s13
 8008d6e:	eeb0 ba66 	vmov.f32	s22, s13
 8008d72:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008d76:	f102 0120 	add.w	r1, r2, #32
 8008d7a:	e729      	b.n	8008bd0 <arm_fir_f32+0x354>

08008d7c <atan2>:
 8008d7c:	f000 b908 	b.w	8008f90 <__ieee754_atan2>

08008d80 <sqrt>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	ed2d 8b02 	vpush	{d8}
 8008d86:	ec55 4b10 	vmov	r4, r5, d0
 8008d8a:	f000 f825 	bl	8008dd8 <__ieee754_sqrt>
 8008d8e:	4622      	mov	r2, r4
 8008d90:	462b      	mov	r3, r5
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	eeb0 8a40 	vmov.f32	s16, s0
 8008d9a:	eef0 8a60 	vmov.f32	s17, s1
 8008d9e:	f7f7 fecd 	bl	8000b3c <__aeabi_dcmpun>
 8008da2:	b990      	cbnz	r0, 8008dca <sqrt+0x4a>
 8008da4:	2200      	movs	r2, #0
 8008da6:	2300      	movs	r3, #0
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	f7f7 fe9e 	bl	8000aec <__aeabi_dcmplt>
 8008db0:	b158      	cbz	r0, 8008dca <sqrt+0x4a>
 8008db2:	f001 fbd7 	bl	800a564 <__errno>
 8008db6:	2321      	movs	r3, #33	; 0x21
 8008db8:	6003      	str	r3, [r0, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7f7 fd4b 	bl	800085c <__aeabi_ddiv>
 8008dc6:	ec41 0b18 	vmov	d8, r0, r1
 8008dca:	eeb0 0a48 	vmov.f32	s0, s16
 8008dce:	eef0 0a68 	vmov.f32	s1, s17
 8008dd2:	ecbd 8b02 	vpop	{d8}
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}

08008dd8 <__ieee754_sqrt>:
 8008dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ec55 4b10 	vmov	r4, r5, d0
 8008de0:	4e67      	ldr	r6, [pc, #412]	; (8008f80 <__ieee754_sqrt+0x1a8>)
 8008de2:	43ae      	bics	r6, r5
 8008de4:	ee10 0a10 	vmov	r0, s0
 8008de8:	ee10 2a10 	vmov	r2, s0
 8008dec:	4629      	mov	r1, r5
 8008dee:	462b      	mov	r3, r5
 8008df0:	d10d      	bne.n	8008e0e <__ieee754_sqrt+0x36>
 8008df2:	f7f7 fc09 	bl	8000608 <__aeabi_dmul>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f7f7 fa4d 	bl	800029c <__adddf3>
 8008e02:	4604      	mov	r4, r0
 8008e04:	460d      	mov	r5, r1
 8008e06:	ec45 4b10 	vmov	d0, r4, r5
 8008e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	dc0b      	bgt.n	8008e2a <__ieee754_sqrt+0x52>
 8008e12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008e16:	4326      	orrs	r6, r4
 8008e18:	d0f5      	beq.n	8008e06 <__ieee754_sqrt+0x2e>
 8008e1a:	b135      	cbz	r5, 8008e2a <__ieee754_sqrt+0x52>
 8008e1c:	f7f7 fa3c 	bl	8000298 <__aeabi_dsub>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	f7f7 fd1a 	bl	800085c <__aeabi_ddiv>
 8008e28:	e7eb      	b.n	8008e02 <__ieee754_sqrt+0x2a>
 8008e2a:	1509      	asrs	r1, r1, #20
 8008e2c:	f000 808d 	beq.w	8008f4a <__ieee754_sqrt+0x172>
 8008e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e34:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008e38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e3c:	07c9      	lsls	r1, r1, #31
 8008e3e:	bf5c      	itt	pl
 8008e40:	005b      	lslpl	r3, r3, #1
 8008e42:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008e46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e4a:	bf58      	it	pl
 8008e4c:	0052      	lslpl	r2, r2, #1
 8008e4e:	2500      	movs	r5, #0
 8008e50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008e54:	1076      	asrs	r6, r6, #1
 8008e56:	0052      	lsls	r2, r2, #1
 8008e58:	f04f 0e16 	mov.w	lr, #22
 8008e5c:	46ac      	mov	ip, r5
 8008e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e62:	eb0c 0001 	add.w	r0, ip, r1
 8008e66:	4298      	cmp	r0, r3
 8008e68:	bfde      	ittt	le
 8008e6a:	1a1b      	suble	r3, r3, r0
 8008e6c:	eb00 0c01 	addle.w	ip, r0, r1
 8008e70:	186d      	addle	r5, r5, r1
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	f1be 0e01 	subs.w	lr, lr, #1
 8008e78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008e7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008e80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008e84:	d1ed      	bne.n	8008e62 <__ieee754_sqrt+0x8a>
 8008e86:	4674      	mov	r4, lr
 8008e88:	2720      	movs	r7, #32
 8008e8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008e8e:	4563      	cmp	r3, ip
 8008e90:	eb01 000e 	add.w	r0, r1, lr
 8008e94:	dc02      	bgt.n	8008e9c <__ieee754_sqrt+0xc4>
 8008e96:	d113      	bne.n	8008ec0 <__ieee754_sqrt+0xe8>
 8008e98:	4290      	cmp	r0, r2
 8008e9a:	d811      	bhi.n	8008ec0 <__ieee754_sqrt+0xe8>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	eb00 0e01 	add.w	lr, r0, r1
 8008ea2:	da57      	bge.n	8008f54 <__ieee754_sqrt+0x17c>
 8008ea4:	f1be 0f00 	cmp.w	lr, #0
 8008ea8:	db54      	blt.n	8008f54 <__ieee754_sqrt+0x17c>
 8008eaa:	f10c 0801 	add.w	r8, ip, #1
 8008eae:	eba3 030c 	sub.w	r3, r3, ip
 8008eb2:	4290      	cmp	r0, r2
 8008eb4:	bf88      	it	hi
 8008eb6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008eba:	1a12      	subs	r2, r2, r0
 8008ebc:	440c      	add	r4, r1
 8008ebe:	46c4      	mov	ip, r8
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	3f01      	subs	r7, #1
 8008ec4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ec8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008ecc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008ed0:	d1dd      	bne.n	8008e8e <__ieee754_sqrt+0xb6>
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	d01b      	beq.n	8008f0e <__ieee754_sqrt+0x136>
 8008ed6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008f84 <__ieee754_sqrt+0x1ac>
 8008eda:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008f88 <__ieee754_sqrt+0x1b0>
 8008ede:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ee2:	e9db 2300 	ldrd	r2, r3, [fp]
 8008ee6:	f7f7 f9d7 	bl	8000298 <__aeabi_dsub>
 8008eea:	e9da 8900 	ldrd	r8, r9, [sl]
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 fe03 	bl	8000b00 <__aeabi_dcmple>
 8008efa:	b140      	cbz	r0, 8008f0e <__ieee754_sqrt+0x136>
 8008efc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008f00:	e9da 0100 	ldrd	r0, r1, [sl]
 8008f04:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f08:	d126      	bne.n	8008f58 <__ieee754_sqrt+0x180>
 8008f0a:	3501      	adds	r5, #1
 8008f0c:	463c      	mov	r4, r7
 8008f0e:	106a      	asrs	r2, r5, #1
 8008f10:	0863      	lsrs	r3, r4, #1
 8008f12:	07e9      	lsls	r1, r5, #31
 8008f14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008f18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008f1c:	bf48      	it	mi
 8008f1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008f22:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008f26:	461c      	mov	r4, r3
 8008f28:	e76d      	b.n	8008e06 <__ieee754_sqrt+0x2e>
 8008f2a:	0ad3      	lsrs	r3, r2, #11
 8008f2c:	3815      	subs	r0, #21
 8008f2e:	0552      	lsls	r2, r2, #21
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d0fa      	beq.n	8008f2a <__ieee754_sqrt+0x152>
 8008f34:	02dc      	lsls	r4, r3, #11
 8008f36:	d50a      	bpl.n	8008f4e <__ieee754_sqrt+0x176>
 8008f38:	f1c1 0420 	rsb	r4, r1, #32
 8008f3c:	fa22 f404 	lsr.w	r4, r2, r4
 8008f40:	1e4d      	subs	r5, r1, #1
 8008f42:	408a      	lsls	r2, r1
 8008f44:	4323      	orrs	r3, r4
 8008f46:	1b41      	subs	r1, r0, r5
 8008f48:	e772      	b.n	8008e30 <__ieee754_sqrt+0x58>
 8008f4a:	4608      	mov	r0, r1
 8008f4c:	e7f0      	b.n	8008f30 <__ieee754_sqrt+0x158>
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	3101      	adds	r1, #1
 8008f52:	e7ef      	b.n	8008f34 <__ieee754_sqrt+0x15c>
 8008f54:	46e0      	mov	r8, ip
 8008f56:	e7aa      	b.n	8008eae <__ieee754_sqrt+0xd6>
 8008f58:	f7f7 f9a0 	bl	800029c <__adddf3>
 8008f5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	f7f7 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8008f6c:	b120      	cbz	r0, 8008f78 <__ieee754_sqrt+0x1a0>
 8008f6e:	1ca0      	adds	r0, r4, #2
 8008f70:	bf08      	it	eq
 8008f72:	3501      	addeq	r5, #1
 8008f74:	3402      	adds	r4, #2
 8008f76:	e7ca      	b.n	8008f0e <__ieee754_sqrt+0x136>
 8008f78:	3401      	adds	r4, #1
 8008f7a:	f024 0401 	bic.w	r4, r4, #1
 8008f7e:	e7c6      	b.n	8008f0e <__ieee754_sqrt+0x136>
 8008f80:	7ff00000 	.word	0x7ff00000
 8008f84:	20000018 	.word	0x20000018
 8008f88:	20000020 	.word	0x20000020
 8008f8c:	00000000 	.word	0x00000000

08008f90 <__ieee754_atan2>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	ec57 6b11 	vmov	r6, r7, d1
 8008f98:	4273      	negs	r3, r6
 8008f9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009118 <__ieee754_atan2+0x188>
 8008f9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008fa2:	4333      	orrs	r3, r6
 8008fa4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008fa8:	4543      	cmp	r3, r8
 8008faa:	ec51 0b10 	vmov	r0, r1, d0
 8008fae:	ee11 5a10 	vmov	r5, s2
 8008fb2:	d80a      	bhi.n	8008fca <__ieee754_atan2+0x3a>
 8008fb4:	4244      	negs	r4, r0
 8008fb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008fba:	4304      	orrs	r4, r0
 8008fbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008fc0:	4544      	cmp	r4, r8
 8008fc2:	ee10 9a10 	vmov	r9, s0
 8008fc6:	468e      	mov	lr, r1
 8008fc8:	d907      	bls.n	8008fda <__ieee754_atan2+0x4a>
 8008fca:	4632      	mov	r2, r6
 8008fcc:	463b      	mov	r3, r7
 8008fce:	f7f7 f965 	bl	800029c <__adddf3>
 8008fd2:	ec41 0b10 	vmov	d0, r0, r1
 8008fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008fde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008fe2:	4334      	orrs	r4, r6
 8008fe4:	d103      	bne.n	8008fee <__ieee754_atan2+0x5e>
 8008fe6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fea:	f000 b899 	b.w	8009120 <atan>
 8008fee:	17bc      	asrs	r4, r7, #30
 8008ff0:	f004 0402 	and.w	r4, r4, #2
 8008ff4:	ea53 0909 	orrs.w	r9, r3, r9
 8008ff8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008ffc:	d107      	bne.n	800900e <__ieee754_atan2+0x7e>
 8008ffe:	2c02      	cmp	r4, #2
 8009000:	d05f      	beq.n	80090c2 <__ieee754_atan2+0x132>
 8009002:	2c03      	cmp	r4, #3
 8009004:	d1e5      	bne.n	8008fd2 <__ieee754_atan2+0x42>
 8009006:	a140      	add	r1, pc, #256	; (adr r1, 8009108 <__ieee754_atan2+0x178>)
 8009008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900c:	e7e1      	b.n	8008fd2 <__ieee754_atan2+0x42>
 800900e:	4315      	orrs	r5, r2
 8009010:	d106      	bne.n	8009020 <__ieee754_atan2+0x90>
 8009012:	f1be 0f00 	cmp.w	lr, #0
 8009016:	da5f      	bge.n	80090d8 <__ieee754_atan2+0x148>
 8009018:	a13d      	add	r1, pc, #244	; (adr r1, 8009110 <__ieee754_atan2+0x180>)
 800901a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800901e:	e7d8      	b.n	8008fd2 <__ieee754_atan2+0x42>
 8009020:	4542      	cmp	r2, r8
 8009022:	d10f      	bne.n	8009044 <__ieee754_atan2+0xb4>
 8009024:	4293      	cmp	r3, r2
 8009026:	f104 34ff 	add.w	r4, r4, #4294967295
 800902a:	d107      	bne.n	800903c <__ieee754_atan2+0xac>
 800902c:	2c02      	cmp	r4, #2
 800902e:	d84c      	bhi.n	80090ca <__ieee754_atan2+0x13a>
 8009030:	4b33      	ldr	r3, [pc, #204]	; (8009100 <__ieee754_atan2+0x170>)
 8009032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800903a:	e7ca      	b.n	8008fd2 <__ieee754_atan2+0x42>
 800903c:	2c02      	cmp	r4, #2
 800903e:	d848      	bhi.n	80090d2 <__ieee754_atan2+0x142>
 8009040:	4b30      	ldr	r3, [pc, #192]	; (8009104 <__ieee754_atan2+0x174>)
 8009042:	e7f6      	b.n	8009032 <__ieee754_atan2+0xa2>
 8009044:	4543      	cmp	r3, r8
 8009046:	d0e4      	beq.n	8009012 <__ieee754_atan2+0x82>
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800904e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009052:	da1e      	bge.n	8009092 <__ieee754_atan2+0x102>
 8009054:	2f00      	cmp	r7, #0
 8009056:	da01      	bge.n	800905c <__ieee754_atan2+0xcc>
 8009058:	323c      	adds	r2, #60	; 0x3c
 800905a:	db1e      	blt.n	800909a <__ieee754_atan2+0x10a>
 800905c:	4632      	mov	r2, r6
 800905e:	463b      	mov	r3, r7
 8009060:	f7f7 fbfc 	bl	800085c <__aeabi_ddiv>
 8009064:	ec41 0b10 	vmov	d0, r0, r1
 8009068:	f000 f9fa 	bl	8009460 <fabs>
 800906c:	f000 f858 	bl	8009120 <atan>
 8009070:	ec51 0b10 	vmov	r0, r1, d0
 8009074:	2c01      	cmp	r4, #1
 8009076:	d013      	beq.n	80090a0 <__ieee754_atan2+0x110>
 8009078:	2c02      	cmp	r4, #2
 800907a:	d015      	beq.n	80090a8 <__ieee754_atan2+0x118>
 800907c:	2c00      	cmp	r4, #0
 800907e:	d0a8      	beq.n	8008fd2 <__ieee754_atan2+0x42>
 8009080:	a317      	add	r3, pc, #92	; (adr r3, 80090e0 <__ieee754_atan2+0x150>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 f907 	bl	8000298 <__aeabi_dsub>
 800908a:	a317      	add	r3, pc, #92	; (adr r3, 80090e8 <__ieee754_atan2+0x158>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	e014      	b.n	80090bc <__ieee754_atan2+0x12c>
 8009092:	a117      	add	r1, pc, #92	; (adr r1, 80090f0 <__ieee754_atan2+0x160>)
 8009094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009098:	e7ec      	b.n	8009074 <__ieee754_atan2+0xe4>
 800909a:	2000      	movs	r0, #0
 800909c:	2100      	movs	r1, #0
 800909e:	e7e9      	b.n	8009074 <__ieee754_atan2+0xe4>
 80090a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a4:	4619      	mov	r1, r3
 80090a6:	e794      	b.n	8008fd2 <__ieee754_atan2+0x42>
 80090a8:	a30d      	add	r3, pc, #52	; (adr r3, 80090e0 <__ieee754_atan2+0x150>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7f7 f8f3 	bl	8000298 <__aeabi_dsub>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	a10c      	add	r1, pc, #48	; (adr r1, 80090e8 <__ieee754_atan2+0x158>)
 80090b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090bc:	f7f7 f8ec 	bl	8000298 <__aeabi_dsub>
 80090c0:	e787      	b.n	8008fd2 <__ieee754_atan2+0x42>
 80090c2:	a109      	add	r1, pc, #36	; (adr r1, 80090e8 <__ieee754_atan2+0x158>)
 80090c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c8:	e783      	b.n	8008fd2 <__ieee754_atan2+0x42>
 80090ca:	a10b      	add	r1, pc, #44	; (adr r1, 80090f8 <__ieee754_atan2+0x168>)
 80090cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d0:	e77f      	b.n	8008fd2 <__ieee754_atan2+0x42>
 80090d2:	2000      	movs	r0, #0
 80090d4:	2100      	movs	r1, #0
 80090d6:	e77c      	b.n	8008fd2 <__ieee754_atan2+0x42>
 80090d8:	a105      	add	r1, pc, #20	; (adr r1, 80090f0 <__ieee754_atan2+0x160>)
 80090da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090de:	e778      	b.n	8008fd2 <__ieee754_atan2+0x42>
 80090e0:	33145c07 	.word	0x33145c07
 80090e4:	3ca1a626 	.word	0x3ca1a626
 80090e8:	54442d18 	.word	0x54442d18
 80090ec:	400921fb 	.word	0x400921fb
 80090f0:	54442d18 	.word	0x54442d18
 80090f4:	3ff921fb 	.word	0x3ff921fb
 80090f8:	54442d18 	.word	0x54442d18
 80090fc:	3fe921fb 	.word	0x3fe921fb
 8009100:	0800df18 	.word	0x0800df18
 8009104:	0800df30 	.word	0x0800df30
 8009108:	54442d18 	.word	0x54442d18
 800910c:	c00921fb 	.word	0xc00921fb
 8009110:	54442d18 	.word	0x54442d18
 8009114:	bff921fb 	.word	0xbff921fb
 8009118:	7ff00000 	.word	0x7ff00000
 800911c:	00000000 	.word	0x00000000

08009120 <atan>:
 8009120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	ec55 4b10 	vmov	r4, r5, d0
 8009128:	4bc3      	ldr	r3, [pc, #780]	; (8009438 <atan+0x318>)
 800912a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800912e:	429e      	cmp	r6, r3
 8009130:	46ab      	mov	fp, r5
 8009132:	dd18      	ble.n	8009166 <atan+0x46>
 8009134:	4bc1      	ldr	r3, [pc, #772]	; (800943c <atan+0x31c>)
 8009136:	429e      	cmp	r6, r3
 8009138:	dc01      	bgt.n	800913e <atan+0x1e>
 800913a:	d109      	bne.n	8009150 <atan+0x30>
 800913c:	b144      	cbz	r4, 8009150 <atan+0x30>
 800913e:	4622      	mov	r2, r4
 8009140:	462b      	mov	r3, r5
 8009142:	4620      	mov	r0, r4
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 f8a9 	bl	800029c <__adddf3>
 800914a:	4604      	mov	r4, r0
 800914c:	460d      	mov	r5, r1
 800914e:	e006      	b.n	800915e <atan+0x3e>
 8009150:	f1bb 0f00 	cmp.w	fp, #0
 8009154:	f300 8131 	bgt.w	80093ba <atan+0x29a>
 8009158:	a59b      	add	r5, pc, #620	; (adr r5, 80093c8 <atan+0x2a8>)
 800915a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800915e:	ec45 4b10 	vmov	d0, r4, r5
 8009162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	4bb6      	ldr	r3, [pc, #728]	; (8009440 <atan+0x320>)
 8009168:	429e      	cmp	r6, r3
 800916a:	dc14      	bgt.n	8009196 <atan+0x76>
 800916c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009170:	429e      	cmp	r6, r3
 8009172:	dc0d      	bgt.n	8009190 <atan+0x70>
 8009174:	a396      	add	r3, pc, #600	; (adr r3, 80093d0 <atan+0x2b0>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	ee10 0a10 	vmov	r0, s0
 800917e:	4629      	mov	r1, r5
 8009180:	f7f7 f88c 	bl	800029c <__adddf3>
 8009184:	4baf      	ldr	r3, [pc, #700]	; (8009444 <atan+0x324>)
 8009186:	2200      	movs	r2, #0
 8009188:	f7f7 fcce 	bl	8000b28 <__aeabi_dcmpgt>
 800918c:	2800      	cmp	r0, #0
 800918e:	d1e6      	bne.n	800915e <atan+0x3e>
 8009190:	f04f 3aff 	mov.w	sl, #4294967295
 8009194:	e02b      	b.n	80091ee <atan+0xce>
 8009196:	f000 f963 	bl	8009460 <fabs>
 800919a:	4bab      	ldr	r3, [pc, #684]	; (8009448 <atan+0x328>)
 800919c:	429e      	cmp	r6, r3
 800919e:	ec55 4b10 	vmov	r4, r5, d0
 80091a2:	f300 80bf 	bgt.w	8009324 <atan+0x204>
 80091a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80091aa:	429e      	cmp	r6, r3
 80091ac:	f300 80a0 	bgt.w	80092f0 <atan+0x1d0>
 80091b0:	ee10 2a10 	vmov	r2, s0
 80091b4:	ee10 0a10 	vmov	r0, s0
 80091b8:	462b      	mov	r3, r5
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7f7 f86e 	bl	800029c <__adddf3>
 80091c0:	4ba0      	ldr	r3, [pc, #640]	; (8009444 <atan+0x324>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	f7f7 f868 	bl	8000298 <__aeabi_dsub>
 80091c8:	2200      	movs	r2, #0
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7f7 f861 	bl	800029c <__adddf3>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 fb3b 	bl	800085c <__aeabi_ddiv>
 80091e6:	f04f 0a00 	mov.w	sl, #0
 80091ea:	4604      	mov	r4, r0
 80091ec:	460d      	mov	r5, r1
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7f7 fa07 	bl	8000608 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4680      	mov	r8, r0
 8009200:	4689      	mov	r9, r1
 8009202:	f7f7 fa01 	bl	8000608 <__aeabi_dmul>
 8009206:	a374      	add	r3, pc, #464	; (adr r3, 80093d8 <atan+0x2b8>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	4606      	mov	r6, r0
 800920e:	460f      	mov	r7, r1
 8009210:	f7f7 f9fa 	bl	8000608 <__aeabi_dmul>
 8009214:	a372      	add	r3, pc, #456	; (adr r3, 80093e0 <atan+0x2c0>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f7 f83f 	bl	800029c <__adddf3>
 800921e:	4632      	mov	r2, r6
 8009220:	463b      	mov	r3, r7
 8009222:	f7f7 f9f1 	bl	8000608 <__aeabi_dmul>
 8009226:	a370      	add	r3, pc, #448	; (adr r3, 80093e8 <atan+0x2c8>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f7 f836 	bl	800029c <__adddf3>
 8009230:	4632      	mov	r2, r6
 8009232:	463b      	mov	r3, r7
 8009234:	f7f7 f9e8 	bl	8000608 <__aeabi_dmul>
 8009238:	a36d      	add	r3, pc, #436	; (adr r3, 80093f0 <atan+0x2d0>)
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	f7f7 f82d 	bl	800029c <__adddf3>
 8009242:	4632      	mov	r2, r6
 8009244:	463b      	mov	r3, r7
 8009246:	f7f7 f9df 	bl	8000608 <__aeabi_dmul>
 800924a:	a36b      	add	r3, pc, #428	; (adr r3, 80093f8 <atan+0x2d8>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 f824 	bl	800029c <__adddf3>
 8009254:	4632      	mov	r2, r6
 8009256:	463b      	mov	r3, r7
 8009258:	f7f7 f9d6 	bl	8000608 <__aeabi_dmul>
 800925c:	a368      	add	r3, pc, #416	; (adr r3, 8009400 <atan+0x2e0>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 f81b 	bl	800029c <__adddf3>
 8009266:	4642      	mov	r2, r8
 8009268:	464b      	mov	r3, r9
 800926a:	f7f7 f9cd 	bl	8000608 <__aeabi_dmul>
 800926e:	a366      	add	r3, pc, #408	; (adr r3, 8009408 <atan+0x2e8>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	4680      	mov	r8, r0
 8009276:	4689      	mov	r9, r1
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 f9c4 	bl	8000608 <__aeabi_dmul>
 8009280:	a363      	add	r3, pc, #396	; (adr r3, 8009410 <atan+0x2f0>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f7 f807 	bl	8000298 <__aeabi_dsub>
 800928a:	4632      	mov	r2, r6
 800928c:	463b      	mov	r3, r7
 800928e:	f7f7 f9bb 	bl	8000608 <__aeabi_dmul>
 8009292:	a361      	add	r3, pc, #388	; (adr r3, 8009418 <atan+0x2f8>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f6 fffe 	bl	8000298 <__aeabi_dsub>
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	a35e      	add	r3, pc, #376	; (adr r3, 8009420 <atan+0x300>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f6 fff5 	bl	8000298 <__aeabi_dsub>
 80092ae:	4632      	mov	r2, r6
 80092b0:	463b      	mov	r3, r7
 80092b2:	f7f7 f9a9 	bl	8000608 <__aeabi_dmul>
 80092b6:	a35c      	add	r3, pc, #368	; (adr r3, 8009428 <atan+0x308>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f6 ffec 	bl	8000298 <__aeabi_dsub>
 80092c0:	4632      	mov	r2, r6
 80092c2:	463b      	mov	r3, r7
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f6 ffe4 	bl	800029c <__adddf3>
 80092d4:	4622      	mov	r2, r4
 80092d6:	462b      	mov	r3, r5
 80092d8:	f7f7 f996 	bl	8000608 <__aeabi_dmul>
 80092dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	d14b      	bne.n	800937e <atan+0x25e>
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f6 ffd5 	bl	8000298 <__aeabi_dsub>
 80092ee:	e72c      	b.n	800914a <atan+0x2a>
 80092f0:	ee10 0a10 	vmov	r0, s0
 80092f4:	4b53      	ldr	r3, [pc, #332]	; (8009444 <atan+0x324>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f6 ffcd 	bl	8000298 <__aeabi_dsub>
 80092fe:	4b51      	ldr	r3, [pc, #324]	; (8009444 <atan+0x324>)
 8009300:	4606      	mov	r6, r0
 8009302:	460f      	mov	r7, r1
 8009304:	2200      	movs	r2, #0
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	f7f6 ffc7 	bl	800029c <__adddf3>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 faa1 	bl	800085c <__aeabi_ddiv>
 800931a:	f04f 0a01 	mov.w	sl, #1
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	e764      	b.n	80091ee <atan+0xce>
 8009324:	4b49      	ldr	r3, [pc, #292]	; (800944c <atan+0x32c>)
 8009326:	429e      	cmp	r6, r3
 8009328:	da1d      	bge.n	8009366 <atan+0x246>
 800932a:	ee10 0a10 	vmov	r0, s0
 800932e:	4b48      	ldr	r3, [pc, #288]	; (8009450 <atan+0x330>)
 8009330:	2200      	movs	r2, #0
 8009332:	4629      	mov	r1, r5
 8009334:	f7f6 ffb0 	bl	8000298 <__aeabi_dsub>
 8009338:	4b45      	ldr	r3, [pc, #276]	; (8009450 <atan+0x330>)
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	2200      	movs	r2, #0
 8009340:	4620      	mov	r0, r4
 8009342:	4629      	mov	r1, r5
 8009344:	f7f7 f960 	bl	8000608 <__aeabi_dmul>
 8009348:	4b3e      	ldr	r3, [pc, #248]	; (8009444 <atan+0x324>)
 800934a:	2200      	movs	r2, #0
 800934c:	f7f6 ffa6 	bl	800029c <__adddf3>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 fa80 	bl	800085c <__aeabi_ddiv>
 800935c:	f04f 0a02 	mov.w	sl, #2
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	e743      	b.n	80091ee <atan+0xce>
 8009366:	462b      	mov	r3, r5
 8009368:	ee10 2a10 	vmov	r2, s0
 800936c:	4939      	ldr	r1, [pc, #228]	; (8009454 <atan+0x334>)
 800936e:	2000      	movs	r0, #0
 8009370:	f7f7 fa74 	bl	800085c <__aeabi_ddiv>
 8009374:	f04f 0a03 	mov.w	sl, #3
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	e737      	b.n	80091ee <atan+0xce>
 800937e:	4b36      	ldr	r3, [pc, #216]	; (8009458 <atan+0x338>)
 8009380:	4e36      	ldr	r6, [pc, #216]	; (800945c <atan+0x33c>)
 8009382:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ff85 	bl	8000298 <__aeabi_dsub>
 800938e:	4622      	mov	r2, r4
 8009390:	462b      	mov	r3, r5
 8009392:	f7f6 ff81 	bl	8000298 <__aeabi_dsub>
 8009396:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80093a2:	f7f6 ff79 	bl	8000298 <__aeabi_dsub>
 80093a6:	f1bb 0f00 	cmp.w	fp, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	460d      	mov	r5, r1
 80093ae:	f6bf aed6 	bge.w	800915e <atan+0x3e>
 80093b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093b6:	461d      	mov	r5, r3
 80093b8:	e6d1      	b.n	800915e <atan+0x3e>
 80093ba:	a51d      	add	r5, pc, #116	; (adr r5, 8009430 <atan+0x310>)
 80093bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093c0:	e6cd      	b.n	800915e <atan+0x3e>
 80093c2:	bf00      	nop
 80093c4:	f3af 8000 	nop.w
 80093c8:	54442d18 	.word	0x54442d18
 80093cc:	bff921fb 	.word	0xbff921fb
 80093d0:	8800759c 	.word	0x8800759c
 80093d4:	7e37e43c 	.word	0x7e37e43c
 80093d8:	e322da11 	.word	0xe322da11
 80093dc:	3f90ad3a 	.word	0x3f90ad3a
 80093e0:	24760deb 	.word	0x24760deb
 80093e4:	3fa97b4b 	.word	0x3fa97b4b
 80093e8:	a0d03d51 	.word	0xa0d03d51
 80093ec:	3fb10d66 	.word	0x3fb10d66
 80093f0:	c54c206e 	.word	0xc54c206e
 80093f4:	3fb745cd 	.word	0x3fb745cd
 80093f8:	920083ff 	.word	0x920083ff
 80093fc:	3fc24924 	.word	0x3fc24924
 8009400:	5555550d 	.word	0x5555550d
 8009404:	3fd55555 	.word	0x3fd55555
 8009408:	2c6a6c2f 	.word	0x2c6a6c2f
 800940c:	bfa2b444 	.word	0xbfa2b444
 8009410:	52defd9a 	.word	0x52defd9a
 8009414:	3fadde2d 	.word	0x3fadde2d
 8009418:	af749a6d 	.word	0xaf749a6d
 800941c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009420:	fe231671 	.word	0xfe231671
 8009424:	3fbc71c6 	.word	0x3fbc71c6
 8009428:	9998ebc4 	.word	0x9998ebc4
 800942c:	3fc99999 	.word	0x3fc99999
 8009430:	54442d18 	.word	0x54442d18
 8009434:	3ff921fb 	.word	0x3ff921fb
 8009438:	440fffff 	.word	0x440fffff
 800943c:	7ff00000 	.word	0x7ff00000
 8009440:	3fdbffff 	.word	0x3fdbffff
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	3ff2ffff 	.word	0x3ff2ffff
 800944c:	40038000 	.word	0x40038000
 8009450:	3ff80000 	.word	0x3ff80000
 8009454:	bff00000 	.word	0xbff00000
 8009458:	0800df68 	.word	0x0800df68
 800945c:	0800df48 	.word	0x0800df48

08009460 <fabs>:
 8009460:	ec51 0b10 	vmov	r0, r1, d0
 8009464:	ee10 2a10 	vmov	r2, s0
 8009468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800946c:	ec43 2b10 	vmov	d0, r2, r3
 8009470:	4770      	bx	lr

08009472 <__cvt>:
 8009472:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009476:	ec55 4b10 	vmov	r4, r5, d0
 800947a:	2d00      	cmp	r5, #0
 800947c:	460e      	mov	r6, r1
 800947e:	4619      	mov	r1, r3
 8009480:	462b      	mov	r3, r5
 8009482:	bfbb      	ittet	lt
 8009484:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009488:	461d      	movlt	r5, r3
 800948a:	2300      	movge	r3, #0
 800948c:	232d      	movlt	r3, #45	; 0x2d
 800948e:	700b      	strb	r3, [r1, #0]
 8009490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009492:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009496:	4691      	mov	r9, r2
 8009498:	f023 0820 	bic.w	r8, r3, #32
 800949c:	bfbc      	itt	lt
 800949e:	4622      	movlt	r2, r4
 80094a0:	4614      	movlt	r4, r2
 80094a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094a6:	d005      	beq.n	80094b4 <__cvt+0x42>
 80094a8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094ac:	d100      	bne.n	80094b0 <__cvt+0x3e>
 80094ae:	3601      	adds	r6, #1
 80094b0:	2102      	movs	r1, #2
 80094b2:	e000      	b.n	80094b6 <__cvt+0x44>
 80094b4:	2103      	movs	r1, #3
 80094b6:	ab03      	add	r3, sp, #12
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	ab02      	add	r3, sp, #8
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	ec45 4b10 	vmov	d0, r4, r5
 80094c2:	4653      	mov	r3, sl
 80094c4:	4632      	mov	r2, r6
 80094c6:	f001 f917 	bl	800a6f8 <_dtoa_r>
 80094ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80094ce:	4607      	mov	r7, r0
 80094d0:	d102      	bne.n	80094d8 <__cvt+0x66>
 80094d2:	f019 0f01 	tst.w	r9, #1
 80094d6:	d022      	beq.n	800951e <__cvt+0xac>
 80094d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094dc:	eb07 0906 	add.w	r9, r7, r6
 80094e0:	d110      	bne.n	8009504 <__cvt+0x92>
 80094e2:	783b      	ldrb	r3, [r7, #0]
 80094e4:	2b30      	cmp	r3, #48	; 0x30
 80094e6:	d10a      	bne.n	80094fe <__cvt+0x8c>
 80094e8:	2200      	movs	r2, #0
 80094ea:	2300      	movs	r3, #0
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f7 faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f4:	b918      	cbnz	r0, 80094fe <__cvt+0x8c>
 80094f6:	f1c6 0601 	rsb	r6, r6, #1
 80094fa:	f8ca 6000 	str.w	r6, [sl]
 80094fe:	f8da 3000 	ldr.w	r3, [sl]
 8009502:	4499      	add	r9, r3
 8009504:	2200      	movs	r2, #0
 8009506:	2300      	movs	r3, #0
 8009508:	4620      	mov	r0, r4
 800950a:	4629      	mov	r1, r5
 800950c:	f7f7 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009510:	b108      	cbz	r0, 8009516 <__cvt+0xa4>
 8009512:	f8cd 900c 	str.w	r9, [sp, #12]
 8009516:	2230      	movs	r2, #48	; 0x30
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	454b      	cmp	r3, r9
 800951c:	d307      	bcc.n	800952e <__cvt+0xbc>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009522:	1bdb      	subs	r3, r3, r7
 8009524:	4638      	mov	r0, r7
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	b004      	add	sp, #16
 800952a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952e:	1c59      	adds	r1, r3, #1
 8009530:	9103      	str	r1, [sp, #12]
 8009532:	701a      	strb	r2, [r3, #0]
 8009534:	e7f0      	b.n	8009518 <__cvt+0xa6>

08009536 <__exponent>:
 8009536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009538:	4603      	mov	r3, r0
 800953a:	2900      	cmp	r1, #0
 800953c:	bfb8      	it	lt
 800953e:	4249      	neglt	r1, r1
 8009540:	f803 2b02 	strb.w	r2, [r3], #2
 8009544:	bfb4      	ite	lt
 8009546:	222d      	movlt	r2, #45	; 0x2d
 8009548:	222b      	movge	r2, #43	; 0x2b
 800954a:	2909      	cmp	r1, #9
 800954c:	7042      	strb	r2, [r0, #1]
 800954e:	dd2a      	ble.n	80095a6 <__exponent+0x70>
 8009550:	f10d 0207 	add.w	r2, sp, #7
 8009554:	4617      	mov	r7, r2
 8009556:	260a      	movs	r6, #10
 8009558:	4694      	mov	ip, r2
 800955a:	fb91 f5f6 	sdiv	r5, r1, r6
 800955e:	fb06 1415 	mls	r4, r6, r5, r1
 8009562:	3430      	adds	r4, #48	; 0x30
 8009564:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009568:	460c      	mov	r4, r1
 800956a:	2c63      	cmp	r4, #99	; 0x63
 800956c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009570:	4629      	mov	r1, r5
 8009572:	dcf1      	bgt.n	8009558 <__exponent+0x22>
 8009574:	3130      	adds	r1, #48	; 0x30
 8009576:	f1ac 0402 	sub.w	r4, ip, #2
 800957a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800957e:	1c41      	adds	r1, r0, #1
 8009580:	4622      	mov	r2, r4
 8009582:	42ba      	cmp	r2, r7
 8009584:	d30a      	bcc.n	800959c <__exponent+0x66>
 8009586:	f10d 0209 	add.w	r2, sp, #9
 800958a:	eba2 020c 	sub.w	r2, r2, ip
 800958e:	42bc      	cmp	r4, r7
 8009590:	bf88      	it	hi
 8009592:	2200      	movhi	r2, #0
 8009594:	4413      	add	r3, r2
 8009596:	1a18      	subs	r0, r3, r0
 8009598:	b003      	add	sp, #12
 800959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095a0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80095a4:	e7ed      	b.n	8009582 <__exponent+0x4c>
 80095a6:	2330      	movs	r3, #48	; 0x30
 80095a8:	3130      	adds	r1, #48	; 0x30
 80095aa:	7083      	strb	r3, [r0, #2]
 80095ac:	70c1      	strb	r1, [r0, #3]
 80095ae:	1d03      	adds	r3, r0, #4
 80095b0:	e7f1      	b.n	8009596 <__exponent+0x60>
	...

080095b4 <_printf_float>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	ed2d 8b02 	vpush	{d8}
 80095bc:	b08d      	sub	sp, #52	; 0x34
 80095be:	460c      	mov	r4, r1
 80095c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80095c4:	4616      	mov	r6, r2
 80095c6:	461f      	mov	r7, r3
 80095c8:	4605      	mov	r5, r0
 80095ca:	f000 ff2b 	bl	800a424 <_localeconv_r>
 80095ce:	f8d0 a000 	ldr.w	sl, [r0]
 80095d2:	4650      	mov	r0, sl
 80095d4:	f7f6 fe54 	bl	8000280 <strlen>
 80095d8:	2300      	movs	r3, #0
 80095da:	930a      	str	r3, [sp, #40]	; 0x28
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	9305      	str	r3, [sp, #20]
 80095e0:	f8d8 3000 	ldr.w	r3, [r8]
 80095e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095e8:	3307      	adds	r3, #7
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	f103 0208 	add.w	r2, r3, #8
 80095f2:	f8c8 2000 	str.w	r2, [r8]
 80095f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095fe:	9307      	str	r3, [sp, #28]
 8009600:	f8cd 8018 	str.w	r8, [sp, #24]
 8009604:	ee08 0a10 	vmov	s16, r0
 8009608:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800960c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009610:	4b9e      	ldr	r3, [pc, #632]	; (800988c <_printf_float+0x2d8>)
 8009612:	f04f 32ff 	mov.w	r2, #4294967295
 8009616:	f7f7 fa91 	bl	8000b3c <__aeabi_dcmpun>
 800961a:	bb88      	cbnz	r0, 8009680 <_printf_float+0xcc>
 800961c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009620:	4b9a      	ldr	r3, [pc, #616]	; (800988c <_printf_float+0x2d8>)
 8009622:	f04f 32ff 	mov.w	r2, #4294967295
 8009626:	f7f7 fa6b 	bl	8000b00 <__aeabi_dcmple>
 800962a:	bb48      	cbnz	r0, 8009680 <_printf_float+0xcc>
 800962c:	2200      	movs	r2, #0
 800962e:	2300      	movs	r3, #0
 8009630:	4640      	mov	r0, r8
 8009632:	4649      	mov	r1, r9
 8009634:	f7f7 fa5a 	bl	8000aec <__aeabi_dcmplt>
 8009638:	b110      	cbz	r0, 8009640 <_printf_float+0x8c>
 800963a:	232d      	movs	r3, #45	; 0x2d
 800963c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009640:	4a93      	ldr	r2, [pc, #588]	; (8009890 <_printf_float+0x2dc>)
 8009642:	4b94      	ldr	r3, [pc, #592]	; (8009894 <_printf_float+0x2e0>)
 8009644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009648:	bf94      	ite	ls
 800964a:	4690      	movls	r8, r2
 800964c:	4698      	movhi	r8, r3
 800964e:	2303      	movs	r3, #3
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	f023 0304 	bic.w	r3, r3, #4
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	f04f 0900 	mov.w	r9, #0
 800965e:	9700      	str	r7, [sp, #0]
 8009660:	4633      	mov	r3, r6
 8009662:	aa0b      	add	r2, sp, #44	; 0x2c
 8009664:	4621      	mov	r1, r4
 8009666:	4628      	mov	r0, r5
 8009668:	f000 f9da 	bl	8009a20 <_printf_common>
 800966c:	3001      	adds	r0, #1
 800966e:	f040 8090 	bne.w	8009792 <_printf_float+0x1de>
 8009672:	f04f 30ff 	mov.w	r0, #4294967295
 8009676:	b00d      	add	sp, #52	; 0x34
 8009678:	ecbd 8b02 	vpop	{d8}
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	4642      	mov	r2, r8
 8009682:	464b      	mov	r3, r9
 8009684:	4640      	mov	r0, r8
 8009686:	4649      	mov	r1, r9
 8009688:	f7f7 fa58 	bl	8000b3c <__aeabi_dcmpun>
 800968c:	b140      	cbz	r0, 80096a0 <_printf_float+0xec>
 800968e:	464b      	mov	r3, r9
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfbc      	itt	lt
 8009694:	232d      	movlt	r3, #45	; 0x2d
 8009696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800969a:	4a7f      	ldr	r2, [pc, #508]	; (8009898 <_printf_float+0x2e4>)
 800969c:	4b7f      	ldr	r3, [pc, #508]	; (800989c <_printf_float+0x2e8>)
 800969e:	e7d1      	b.n	8009644 <_printf_float+0x90>
 80096a0:	6863      	ldr	r3, [r4, #4]
 80096a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096a6:	9206      	str	r2, [sp, #24]
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	d13f      	bne.n	800972c <_printf_float+0x178>
 80096ac:	2306      	movs	r3, #6
 80096ae:	6063      	str	r3, [r4, #4]
 80096b0:	9b05      	ldr	r3, [sp, #20]
 80096b2:	6861      	ldr	r1, [r4, #4]
 80096b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80096b8:	2300      	movs	r3, #0
 80096ba:	9303      	str	r3, [sp, #12]
 80096bc:	ab0a      	add	r3, sp, #40	; 0x28
 80096be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80096c2:	ab09      	add	r3, sp, #36	; 0x24
 80096c4:	ec49 8b10 	vmov	d0, r8, r9
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	6022      	str	r2, [r4, #0]
 80096cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096d0:	4628      	mov	r0, r5
 80096d2:	f7ff fece 	bl	8009472 <__cvt>
 80096d6:	9b06      	ldr	r3, [sp, #24]
 80096d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096da:	2b47      	cmp	r3, #71	; 0x47
 80096dc:	4680      	mov	r8, r0
 80096de:	d108      	bne.n	80096f2 <_printf_float+0x13e>
 80096e0:	1cc8      	adds	r0, r1, #3
 80096e2:	db02      	blt.n	80096ea <_printf_float+0x136>
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	4299      	cmp	r1, r3
 80096e8:	dd41      	ble.n	800976e <_printf_float+0x1ba>
 80096ea:	f1ab 0302 	sub.w	r3, fp, #2
 80096ee:	fa5f fb83 	uxtb.w	fp, r3
 80096f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096f6:	d820      	bhi.n	800973a <_printf_float+0x186>
 80096f8:	3901      	subs	r1, #1
 80096fa:	465a      	mov	r2, fp
 80096fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009700:	9109      	str	r1, [sp, #36]	; 0x24
 8009702:	f7ff ff18 	bl	8009536 <__exponent>
 8009706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009708:	1813      	adds	r3, r2, r0
 800970a:	2a01      	cmp	r2, #1
 800970c:	4681      	mov	r9, r0
 800970e:	6123      	str	r3, [r4, #16]
 8009710:	dc02      	bgt.n	8009718 <_printf_float+0x164>
 8009712:	6822      	ldr	r2, [r4, #0]
 8009714:	07d2      	lsls	r2, r2, #31
 8009716:	d501      	bpl.n	800971c <_printf_float+0x168>
 8009718:	3301      	adds	r3, #1
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009720:	2b00      	cmp	r3, #0
 8009722:	d09c      	beq.n	800965e <_printf_float+0xaa>
 8009724:	232d      	movs	r3, #45	; 0x2d
 8009726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800972a:	e798      	b.n	800965e <_printf_float+0xaa>
 800972c:	9a06      	ldr	r2, [sp, #24]
 800972e:	2a47      	cmp	r2, #71	; 0x47
 8009730:	d1be      	bne.n	80096b0 <_printf_float+0xfc>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1bc      	bne.n	80096b0 <_printf_float+0xfc>
 8009736:	2301      	movs	r3, #1
 8009738:	e7b9      	b.n	80096ae <_printf_float+0xfa>
 800973a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800973e:	d118      	bne.n	8009772 <_printf_float+0x1be>
 8009740:	2900      	cmp	r1, #0
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	dd0b      	ble.n	800975e <_printf_float+0x1aa>
 8009746:	6121      	str	r1, [r4, #16]
 8009748:	b913      	cbnz	r3, 8009750 <_printf_float+0x19c>
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	07d0      	lsls	r0, r2, #31
 800974e:	d502      	bpl.n	8009756 <_printf_float+0x1a2>
 8009750:	3301      	adds	r3, #1
 8009752:	440b      	add	r3, r1
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	65a1      	str	r1, [r4, #88]	; 0x58
 8009758:	f04f 0900 	mov.w	r9, #0
 800975c:	e7de      	b.n	800971c <_printf_float+0x168>
 800975e:	b913      	cbnz	r3, 8009766 <_printf_float+0x1b2>
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	07d2      	lsls	r2, r2, #31
 8009764:	d501      	bpl.n	800976a <_printf_float+0x1b6>
 8009766:	3302      	adds	r3, #2
 8009768:	e7f4      	b.n	8009754 <_printf_float+0x1a0>
 800976a:	2301      	movs	r3, #1
 800976c:	e7f2      	b.n	8009754 <_printf_float+0x1a0>
 800976e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009774:	4299      	cmp	r1, r3
 8009776:	db05      	blt.n	8009784 <_printf_float+0x1d0>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	6121      	str	r1, [r4, #16]
 800977c:	07d8      	lsls	r0, r3, #31
 800977e:	d5ea      	bpl.n	8009756 <_printf_float+0x1a2>
 8009780:	1c4b      	adds	r3, r1, #1
 8009782:	e7e7      	b.n	8009754 <_printf_float+0x1a0>
 8009784:	2900      	cmp	r1, #0
 8009786:	bfd4      	ite	le
 8009788:	f1c1 0202 	rsble	r2, r1, #2
 800978c:	2201      	movgt	r2, #1
 800978e:	4413      	add	r3, r2
 8009790:	e7e0      	b.n	8009754 <_printf_float+0x1a0>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	055a      	lsls	r2, r3, #21
 8009796:	d407      	bmi.n	80097a8 <_printf_float+0x1f4>
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	4642      	mov	r2, r8
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	d12c      	bne.n	8009800 <_printf_float+0x24c>
 80097a6:	e764      	b.n	8009672 <_printf_float+0xbe>
 80097a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097ac:	f240 80e0 	bls.w	8009970 <_printf_float+0x3bc>
 80097b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097b4:	2200      	movs	r2, #0
 80097b6:	2300      	movs	r3, #0
 80097b8:	f7f7 f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d034      	beq.n	800982a <_printf_float+0x276>
 80097c0:	4a37      	ldr	r2, [pc, #220]	; (80098a0 <_printf_float+0x2ec>)
 80097c2:	2301      	movs	r3, #1
 80097c4:	4631      	mov	r1, r6
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b8      	blx	r7
 80097ca:	3001      	adds	r0, #1
 80097cc:	f43f af51 	beq.w	8009672 <_printf_float+0xbe>
 80097d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097d4:	429a      	cmp	r2, r3
 80097d6:	db02      	blt.n	80097de <_printf_float+0x22a>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	07d8      	lsls	r0, r3, #31
 80097dc:	d510      	bpl.n	8009800 <_printf_float+0x24c>
 80097de:	ee18 3a10 	vmov	r3, s16
 80097e2:	4652      	mov	r2, sl
 80097e4:	4631      	mov	r1, r6
 80097e6:	4628      	mov	r0, r5
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	f43f af41 	beq.w	8009672 <_printf_float+0xbe>
 80097f0:	f04f 0800 	mov.w	r8, #0
 80097f4:	f104 091a 	add.w	r9, r4, #26
 80097f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fa:	3b01      	subs	r3, #1
 80097fc:	4543      	cmp	r3, r8
 80097fe:	dc09      	bgt.n	8009814 <_printf_float+0x260>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	079b      	lsls	r3, r3, #30
 8009804:	f100 8107 	bmi.w	8009a16 <_printf_float+0x462>
 8009808:	68e0      	ldr	r0, [r4, #12]
 800980a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800980c:	4298      	cmp	r0, r3
 800980e:	bfb8      	it	lt
 8009810:	4618      	movlt	r0, r3
 8009812:	e730      	b.n	8009676 <_printf_float+0xc2>
 8009814:	2301      	movs	r3, #1
 8009816:	464a      	mov	r2, r9
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f af27 	beq.w	8009672 <_printf_float+0xbe>
 8009824:	f108 0801 	add.w	r8, r8, #1
 8009828:	e7e6      	b.n	80097f8 <_printf_float+0x244>
 800982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	dc39      	bgt.n	80098a4 <_printf_float+0x2f0>
 8009830:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <_printf_float+0x2ec>)
 8009832:	2301      	movs	r3, #1
 8009834:	4631      	mov	r1, r6
 8009836:	4628      	mov	r0, r5
 8009838:	47b8      	blx	r7
 800983a:	3001      	adds	r0, #1
 800983c:	f43f af19 	beq.w	8009672 <_printf_float+0xbe>
 8009840:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009844:	4313      	orrs	r3, r2
 8009846:	d102      	bne.n	800984e <_printf_float+0x29a>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	07d9      	lsls	r1, r3, #31
 800984c:	d5d8      	bpl.n	8009800 <_printf_float+0x24c>
 800984e:	ee18 3a10 	vmov	r3, s16
 8009852:	4652      	mov	r2, sl
 8009854:	4631      	mov	r1, r6
 8009856:	4628      	mov	r0, r5
 8009858:	47b8      	blx	r7
 800985a:	3001      	adds	r0, #1
 800985c:	f43f af09 	beq.w	8009672 <_printf_float+0xbe>
 8009860:	f04f 0900 	mov.w	r9, #0
 8009864:	f104 0a1a 	add.w	sl, r4, #26
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	425b      	negs	r3, r3
 800986c:	454b      	cmp	r3, r9
 800986e:	dc01      	bgt.n	8009874 <_printf_float+0x2c0>
 8009870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009872:	e792      	b.n	800979a <_printf_float+0x1e6>
 8009874:	2301      	movs	r3, #1
 8009876:	4652      	mov	r2, sl
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	47b8      	blx	r7
 800987e:	3001      	adds	r0, #1
 8009880:	f43f aef7 	beq.w	8009672 <_printf_float+0xbe>
 8009884:	f109 0901 	add.w	r9, r9, #1
 8009888:	e7ee      	b.n	8009868 <_printf_float+0x2b4>
 800988a:	bf00      	nop
 800988c:	7fefffff 	.word	0x7fefffff
 8009890:	0800df88 	.word	0x0800df88
 8009894:	0800df8c 	.word	0x0800df8c
 8009898:	0800df90 	.word	0x0800df90
 800989c:	0800df94 	.word	0x0800df94
 80098a0:	0800df98 	.word	0x0800df98
 80098a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098a8:	429a      	cmp	r2, r3
 80098aa:	bfa8      	it	ge
 80098ac:	461a      	movge	r2, r3
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	4691      	mov	r9, r2
 80098b2:	dc37      	bgt.n	8009924 <_printf_float+0x370>
 80098b4:	f04f 0b00 	mov.w	fp, #0
 80098b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098bc:	f104 021a 	add.w	r2, r4, #26
 80098c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	eba3 0309 	sub.w	r3, r3, r9
 80098c8:	455b      	cmp	r3, fp
 80098ca:	dc33      	bgt.n	8009934 <_printf_float+0x380>
 80098cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d0:	429a      	cmp	r2, r3
 80098d2:	db3b      	blt.n	800994c <_printf_float+0x398>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	07da      	lsls	r2, r3, #31
 80098d8:	d438      	bmi.n	800994c <_printf_float+0x398>
 80098da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098de:	eba2 0903 	sub.w	r9, r2, r3
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	1ad2      	subs	r2, r2, r3
 80098e6:	4591      	cmp	r9, r2
 80098e8:	bfa8      	it	ge
 80098ea:	4691      	movge	r9, r2
 80098ec:	f1b9 0f00 	cmp.w	r9, #0
 80098f0:	dc35      	bgt.n	800995e <_printf_float+0x3aa>
 80098f2:	f04f 0800 	mov.w	r8, #0
 80098f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098fa:	f104 0a1a 	add.w	sl, r4, #26
 80098fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	eba3 0309 	sub.w	r3, r3, r9
 8009908:	4543      	cmp	r3, r8
 800990a:	f77f af79 	ble.w	8009800 <_printf_float+0x24c>
 800990e:	2301      	movs	r3, #1
 8009910:	4652      	mov	r2, sl
 8009912:	4631      	mov	r1, r6
 8009914:	4628      	mov	r0, r5
 8009916:	47b8      	blx	r7
 8009918:	3001      	adds	r0, #1
 800991a:	f43f aeaa 	beq.w	8009672 <_printf_float+0xbe>
 800991e:	f108 0801 	add.w	r8, r8, #1
 8009922:	e7ec      	b.n	80098fe <_printf_float+0x34a>
 8009924:	4613      	mov	r3, r2
 8009926:	4631      	mov	r1, r6
 8009928:	4642      	mov	r2, r8
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	d1c0      	bne.n	80098b4 <_printf_float+0x300>
 8009932:	e69e      	b.n	8009672 <_printf_float+0xbe>
 8009934:	2301      	movs	r3, #1
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	9205      	str	r2, [sp, #20]
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	f43f ae97 	beq.w	8009672 <_printf_float+0xbe>
 8009944:	9a05      	ldr	r2, [sp, #20]
 8009946:	f10b 0b01 	add.w	fp, fp, #1
 800994a:	e7b9      	b.n	80098c0 <_printf_float+0x30c>
 800994c:	ee18 3a10 	vmov	r3, s16
 8009950:	4652      	mov	r2, sl
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	d1be      	bne.n	80098da <_printf_float+0x326>
 800995c:	e689      	b.n	8009672 <_printf_float+0xbe>
 800995e:	9a05      	ldr	r2, [sp, #20]
 8009960:	464b      	mov	r3, r9
 8009962:	4442      	add	r2, r8
 8009964:	4631      	mov	r1, r6
 8009966:	4628      	mov	r0, r5
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	d1c1      	bne.n	80098f2 <_printf_float+0x33e>
 800996e:	e680      	b.n	8009672 <_printf_float+0xbe>
 8009970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009972:	2a01      	cmp	r2, #1
 8009974:	dc01      	bgt.n	800997a <_printf_float+0x3c6>
 8009976:	07db      	lsls	r3, r3, #31
 8009978:	d53a      	bpl.n	80099f0 <_printf_float+0x43c>
 800997a:	2301      	movs	r3, #1
 800997c:	4642      	mov	r2, r8
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	47b8      	blx	r7
 8009984:	3001      	adds	r0, #1
 8009986:	f43f ae74 	beq.w	8009672 <_printf_float+0xbe>
 800998a:	ee18 3a10 	vmov	r3, s16
 800998e:	4652      	mov	r2, sl
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	f43f ae6b 	beq.w	8009672 <_printf_float+0xbe>
 800999c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099a0:	2200      	movs	r2, #0
 80099a2:	2300      	movs	r3, #0
 80099a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80099a8:	f7f7 f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ac:	b9d8      	cbnz	r0, 80099e6 <_printf_float+0x432>
 80099ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80099b2:	f108 0201 	add.w	r2, r8, #1
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	d10e      	bne.n	80099de <_printf_float+0x42a>
 80099c0:	e657      	b.n	8009672 <_printf_float+0xbe>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4652      	mov	r2, sl
 80099c6:	4631      	mov	r1, r6
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b8      	blx	r7
 80099cc:	3001      	adds	r0, #1
 80099ce:	f43f ae50 	beq.w	8009672 <_printf_float+0xbe>
 80099d2:	f108 0801 	add.w	r8, r8, #1
 80099d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d8:	3b01      	subs	r3, #1
 80099da:	4543      	cmp	r3, r8
 80099dc:	dcf1      	bgt.n	80099c2 <_printf_float+0x40e>
 80099de:	464b      	mov	r3, r9
 80099e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099e4:	e6da      	b.n	800979c <_printf_float+0x1e8>
 80099e6:	f04f 0800 	mov.w	r8, #0
 80099ea:	f104 0a1a 	add.w	sl, r4, #26
 80099ee:	e7f2      	b.n	80099d6 <_printf_float+0x422>
 80099f0:	2301      	movs	r3, #1
 80099f2:	4642      	mov	r2, r8
 80099f4:	e7df      	b.n	80099b6 <_printf_float+0x402>
 80099f6:	2301      	movs	r3, #1
 80099f8:	464a      	mov	r2, r9
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	f43f ae36 	beq.w	8009672 <_printf_float+0xbe>
 8009a06:	f108 0801 	add.w	r8, r8, #1
 8009a0a:	68e3      	ldr	r3, [r4, #12]
 8009a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a0e:	1a5b      	subs	r3, r3, r1
 8009a10:	4543      	cmp	r3, r8
 8009a12:	dcf0      	bgt.n	80099f6 <_printf_float+0x442>
 8009a14:	e6f8      	b.n	8009808 <_printf_float+0x254>
 8009a16:	f04f 0800 	mov.w	r8, #0
 8009a1a:	f104 0919 	add.w	r9, r4, #25
 8009a1e:	e7f4      	b.n	8009a0a <_printf_float+0x456>

08009a20 <_printf_common>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	4616      	mov	r6, r2
 8009a26:	4699      	mov	r9, r3
 8009a28:	688a      	ldr	r2, [r1, #8]
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	bfb8      	it	lt
 8009a34:	4613      	movlt	r3, r2
 8009a36:	6033      	str	r3, [r6, #0]
 8009a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	b10a      	cbz	r2, 8009a46 <_printf_common+0x26>
 8009a42:	3301      	adds	r3, #1
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	0699      	lsls	r1, r3, #26
 8009a4a:	bf42      	ittt	mi
 8009a4c:	6833      	ldrmi	r3, [r6, #0]
 8009a4e:	3302      	addmi	r3, #2
 8009a50:	6033      	strmi	r3, [r6, #0]
 8009a52:	6825      	ldr	r5, [r4, #0]
 8009a54:	f015 0506 	ands.w	r5, r5, #6
 8009a58:	d106      	bne.n	8009a68 <_printf_common+0x48>
 8009a5a:	f104 0a19 	add.w	sl, r4, #25
 8009a5e:	68e3      	ldr	r3, [r4, #12]
 8009a60:	6832      	ldr	r2, [r6, #0]
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	dc26      	bgt.n	8009ab6 <_printf_common+0x96>
 8009a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a6c:	1e13      	subs	r3, r2, #0
 8009a6e:	6822      	ldr	r2, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	2301      	movne	r3, #1
 8009a74:	0692      	lsls	r2, r2, #26
 8009a76:	d42b      	bmi.n	8009ad0 <_printf_common+0xb0>
 8009a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4638      	mov	r0, r7
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d01e      	beq.n	8009ac4 <_printf_common+0xa4>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	f003 0306 	and.w	r3, r3, #6
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	bf02      	ittt	eq
 8009a92:	68e5      	ldreq	r5, [r4, #12]
 8009a94:	6833      	ldreq	r3, [r6, #0]
 8009a96:	1aed      	subeq	r5, r5, r3
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	bf0c      	ite	eq
 8009a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aa0:	2500      	movne	r5, #0
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bfc4      	itt	gt
 8009aa6:	1a9b      	subgt	r3, r3, r2
 8009aa8:	18ed      	addgt	r5, r5, r3
 8009aaa:	2600      	movs	r6, #0
 8009aac:	341a      	adds	r4, #26
 8009aae:	42b5      	cmp	r5, r6
 8009ab0:	d11a      	bne.n	8009ae8 <_printf_common+0xc8>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e008      	b.n	8009ac8 <_printf_common+0xa8>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4652      	mov	r2, sl
 8009aba:	4649      	mov	r1, r9
 8009abc:	4638      	mov	r0, r7
 8009abe:	47c0      	blx	r8
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d103      	bne.n	8009acc <_printf_common+0xac>
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009acc:	3501      	adds	r5, #1
 8009ace:	e7c6      	b.n	8009a5e <_printf_common+0x3e>
 8009ad0:	18e1      	adds	r1, r4, r3
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	2030      	movs	r0, #48	; 0x30
 8009ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ada:	4422      	add	r2, r4
 8009adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	e7c7      	b.n	8009a78 <_printf_common+0x58>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	4622      	mov	r2, r4
 8009aec:	4649      	mov	r1, r9
 8009aee:	4638      	mov	r0, r7
 8009af0:	47c0      	blx	r8
 8009af2:	3001      	adds	r0, #1
 8009af4:	d0e6      	beq.n	8009ac4 <_printf_common+0xa4>
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7d9      	b.n	8009aae <_printf_common+0x8e>
	...

08009afc <_printf_i>:
 8009afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	7e0f      	ldrb	r7, [r1, #24]
 8009b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b04:	2f78      	cmp	r7, #120	; 0x78
 8009b06:	4691      	mov	r9, r2
 8009b08:	4680      	mov	r8, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	469a      	mov	sl, r3
 8009b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b12:	d807      	bhi.n	8009b24 <_printf_i+0x28>
 8009b14:	2f62      	cmp	r7, #98	; 0x62
 8009b16:	d80a      	bhi.n	8009b2e <_printf_i+0x32>
 8009b18:	2f00      	cmp	r7, #0
 8009b1a:	f000 80d4 	beq.w	8009cc6 <_printf_i+0x1ca>
 8009b1e:	2f58      	cmp	r7, #88	; 0x58
 8009b20:	f000 80c0 	beq.w	8009ca4 <_printf_i+0x1a8>
 8009b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b2c:	e03a      	b.n	8009ba4 <_printf_i+0xa8>
 8009b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b32:	2b15      	cmp	r3, #21
 8009b34:	d8f6      	bhi.n	8009b24 <_printf_i+0x28>
 8009b36:	a101      	add	r1, pc, #4	; (adr r1, 8009b3c <_printf_i+0x40>)
 8009b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	08009ba9 	.word	0x08009ba9
 8009b44:	08009b25 	.word	0x08009b25
 8009b48:	08009b25 	.word	0x08009b25
 8009b4c:	08009b25 	.word	0x08009b25
 8009b50:	08009b25 	.word	0x08009b25
 8009b54:	08009ba9 	.word	0x08009ba9
 8009b58:	08009b25 	.word	0x08009b25
 8009b5c:	08009b25 	.word	0x08009b25
 8009b60:	08009b25 	.word	0x08009b25
 8009b64:	08009b25 	.word	0x08009b25
 8009b68:	08009cad 	.word	0x08009cad
 8009b6c:	08009bd5 	.word	0x08009bd5
 8009b70:	08009c67 	.word	0x08009c67
 8009b74:	08009b25 	.word	0x08009b25
 8009b78:	08009b25 	.word	0x08009b25
 8009b7c:	08009ccf 	.word	0x08009ccf
 8009b80:	08009b25 	.word	0x08009b25
 8009b84:	08009bd5 	.word	0x08009bd5
 8009b88:	08009b25 	.word	0x08009b25
 8009b8c:	08009b25 	.word	0x08009b25
 8009b90:	08009c6f 	.word	0x08009c6f
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e09f      	b.n	8009ce8 <_printf_i+0x1ec>
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	0607      	lsls	r7, r0, #24
 8009bae:	f103 0104 	add.w	r1, r3, #4
 8009bb2:	6029      	str	r1, [r5, #0]
 8009bb4:	d501      	bpl.n	8009bba <_printf_i+0xbe>
 8009bb6:	681e      	ldr	r6, [r3, #0]
 8009bb8:	e003      	b.n	8009bc2 <_printf_i+0xc6>
 8009bba:	0646      	lsls	r6, r0, #25
 8009bbc:	d5fb      	bpl.n	8009bb6 <_printf_i+0xba>
 8009bbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	da03      	bge.n	8009bce <_printf_i+0xd2>
 8009bc6:	232d      	movs	r3, #45	; 0x2d
 8009bc8:	4276      	negs	r6, r6
 8009bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bce:	485a      	ldr	r0, [pc, #360]	; (8009d38 <_printf_i+0x23c>)
 8009bd0:	230a      	movs	r3, #10
 8009bd2:	e012      	b.n	8009bfa <_printf_i+0xfe>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	6820      	ldr	r0, [r4, #0]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	6029      	str	r1, [r5, #0]
 8009bdc:	0605      	lsls	r5, r0, #24
 8009bde:	d501      	bpl.n	8009be4 <_printf_i+0xe8>
 8009be0:	681e      	ldr	r6, [r3, #0]
 8009be2:	e002      	b.n	8009bea <_printf_i+0xee>
 8009be4:	0641      	lsls	r1, r0, #25
 8009be6:	d5fb      	bpl.n	8009be0 <_printf_i+0xe4>
 8009be8:	881e      	ldrh	r6, [r3, #0]
 8009bea:	4853      	ldr	r0, [pc, #332]	; (8009d38 <_printf_i+0x23c>)
 8009bec:	2f6f      	cmp	r7, #111	; 0x6f
 8009bee:	bf0c      	ite	eq
 8009bf0:	2308      	moveq	r3, #8
 8009bf2:	230a      	movne	r3, #10
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bfa:	6865      	ldr	r5, [r4, #4]
 8009bfc:	60a5      	str	r5, [r4, #8]
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	bfa2      	ittt	ge
 8009c02:	6821      	ldrge	r1, [r4, #0]
 8009c04:	f021 0104 	bicge.w	r1, r1, #4
 8009c08:	6021      	strge	r1, [r4, #0]
 8009c0a:	b90e      	cbnz	r6, 8009c10 <_printf_i+0x114>
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	d04b      	beq.n	8009ca8 <_printf_i+0x1ac>
 8009c10:	4615      	mov	r5, r2
 8009c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c16:	fb03 6711 	mls	r7, r3, r1, r6
 8009c1a:	5dc7      	ldrb	r7, [r0, r7]
 8009c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c20:	4637      	mov	r7, r6
 8009c22:	42bb      	cmp	r3, r7
 8009c24:	460e      	mov	r6, r1
 8009c26:	d9f4      	bls.n	8009c12 <_printf_i+0x116>
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d10b      	bne.n	8009c44 <_printf_i+0x148>
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	07de      	lsls	r6, r3, #31
 8009c30:	d508      	bpl.n	8009c44 <_printf_i+0x148>
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	6861      	ldr	r1, [r4, #4]
 8009c36:	4299      	cmp	r1, r3
 8009c38:	bfde      	ittt	le
 8009c3a:	2330      	movle	r3, #48	; 0x30
 8009c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c44:	1b52      	subs	r2, r2, r5
 8009c46:	6122      	str	r2, [r4, #16]
 8009c48:	f8cd a000 	str.w	sl, [sp]
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	aa03      	add	r2, sp, #12
 8009c50:	4621      	mov	r1, r4
 8009c52:	4640      	mov	r0, r8
 8009c54:	f7ff fee4 	bl	8009a20 <_printf_common>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d14a      	bne.n	8009cf2 <_printf_i+0x1f6>
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	b004      	add	sp, #16
 8009c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	f043 0320 	orr.w	r3, r3, #32
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	4833      	ldr	r0, [pc, #204]	; (8009d3c <_printf_i+0x240>)
 8009c70:	2778      	movs	r7, #120	; 0x78
 8009c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	6829      	ldr	r1, [r5, #0]
 8009c7a:	061f      	lsls	r7, r3, #24
 8009c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c80:	d402      	bmi.n	8009c88 <_printf_i+0x18c>
 8009c82:	065f      	lsls	r7, r3, #25
 8009c84:	bf48      	it	mi
 8009c86:	b2b6      	uxthmi	r6, r6
 8009c88:	07df      	lsls	r7, r3, #31
 8009c8a:	bf48      	it	mi
 8009c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009c90:	6029      	str	r1, [r5, #0]
 8009c92:	bf48      	it	mi
 8009c94:	6023      	strmi	r3, [r4, #0]
 8009c96:	b91e      	cbnz	r6, 8009ca0 <_printf_i+0x1a4>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	f023 0320 	bic.w	r3, r3, #32
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	e7a7      	b.n	8009bf4 <_printf_i+0xf8>
 8009ca4:	4824      	ldr	r0, [pc, #144]	; (8009d38 <_printf_i+0x23c>)
 8009ca6:	e7e4      	b.n	8009c72 <_printf_i+0x176>
 8009ca8:	4615      	mov	r5, r2
 8009caa:	e7bd      	b.n	8009c28 <_printf_i+0x12c>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	6826      	ldr	r6, [r4, #0]
 8009cb0:	6961      	ldr	r1, [r4, #20]
 8009cb2:	1d18      	adds	r0, r3, #4
 8009cb4:	6028      	str	r0, [r5, #0]
 8009cb6:	0635      	lsls	r5, r6, #24
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	d501      	bpl.n	8009cc0 <_printf_i+0x1c4>
 8009cbc:	6019      	str	r1, [r3, #0]
 8009cbe:	e002      	b.n	8009cc6 <_printf_i+0x1ca>
 8009cc0:	0670      	lsls	r0, r6, #25
 8009cc2:	d5fb      	bpl.n	8009cbc <_printf_i+0x1c0>
 8009cc4:	8019      	strh	r1, [r3, #0]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6123      	str	r3, [r4, #16]
 8009cca:	4615      	mov	r5, r2
 8009ccc:	e7bc      	b.n	8009c48 <_printf_i+0x14c>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	1d1a      	adds	r2, r3, #4
 8009cd2:	602a      	str	r2, [r5, #0]
 8009cd4:	681d      	ldr	r5, [r3, #0]
 8009cd6:	6862      	ldr	r2, [r4, #4]
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f7f6 fa80 	bl	80001e0 <memchr>
 8009ce0:	b108      	cbz	r0, 8009ce6 <_printf_i+0x1ea>
 8009ce2:	1b40      	subs	r0, r0, r5
 8009ce4:	6060      	str	r0, [r4, #4]
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	2300      	movs	r3, #0
 8009cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf0:	e7aa      	b.n	8009c48 <_printf_i+0x14c>
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	47d0      	blx	sl
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d0ad      	beq.n	8009c5c <_printf_i+0x160>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	079b      	lsls	r3, r3, #30
 8009d04:	d413      	bmi.n	8009d2e <_printf_i+0x232>
 8009d06:	68e0      	ldr	r0, [r4, #12]
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	4298      	cmp	r0, r3
 8009d0c:	bfb8      	it	lt
 8009d0e:	4618      	movlt	r0, r3
 8009d10:	e7a6      	b.n	8009c60 <_printf_i+0x164>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4632      	mov	r2, r6
 8009d16:	4649      	mov	r1, r9
 8009d18:	4640      	mov	r0, r8
 8009d1a:	47d0      	blx	sl
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d09d      	beq.n	8009c5c <_printf_i+0x160>
 8009d20:	3501      	adds	r5, #1
 8009d22:	68e3      	ldr	r3, [r4, #12]
 8009d24:	9903      	ldr	r1, [sp, #12]
 8009d26:	1a5b      	subs	r3, r3, r1
 8009d28:	42ab      	cmp	r3, r5
 8009d2a:	dcf2      	bgt.n	8009d12 <_printf_i+0x216>
 8009d2c:	e7eb      	b.n	8009d06 <_printf_i+0x20a>
 8009d2e:	2500      	movs	r5, #0
 8009d30:	f104 0619 	add.w	r6, r4, #25
 8009d34:	e7f5      	b.n	8009d22 <_printf_i+0x226>
 8009d36:	bf00      	nop
 8009d38:	0800df9a 	.word	0x0800df9a
 8009d3c:	0800dfab 	.word	0x0800dfab

08009d40 <_scanf_float>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	b087      	sub	sp, #28
 8009d46:	4617      	mov	r7, r2
 8009d48:	9303      	str	r3, [sp, #12]
 8009d4a:	688b      	ldr	r3, [r1, #8]
 8009d4c:	1e5a      	subs	r2, r3, #1
 8009d4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d52:	bf83      	ittte	hi
 8009d54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d58:	195b      	addhi	r3, r3, r5
 8009d5a:	9302      	strhi	r3, [sp, #8]
 8009d5c:	2300      	movls	r3, #0
 8009d5e:	bf86      	itte	hi
 8009d60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d64:	608b      	strhi	r3, [r1, #8]
 8009d66:	9302      	strls	r3, [sp, #8]
 8009d68:	680b      	ldr	r3, [r1, #0]
 8009d6a:	468b      	mov	fp, r1
 8009d6c:	2500      	movs	r5, #0
 8009d6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009d72:	f84b 3b1c 	str.w	r3, [fp], #28
 8009d76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	465e      	mov	r6, fp
 8009d80:	46aa      	mov	sl, r5
 8009d82:	46a9      	mov	r9, r5
 8009d84:	9501      	str	r5, [sp, #4]
 8009d86:	68a2      	ldr	r2, [r4, #8]
 8009d88:	b152      	cbz	r2, 8009da0 <_scanf_float+0x60>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b4e      	cmp	r3, #78	; 0x4e
 8009d90:	d864      	bhi.n	8009e5c <_scanf_float+0x11c>
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	d83c      	bhi.n	8009e10 <_scanf_float+0xd0>
 8009d96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d9a:	b2c8      	uxtb	r0, r1
 8009d9c:	280e      	cmp	r0, #14
 8009d9e:	d93a      	bls.n	8009e16 <_scanf_float+0xd6>
 8009da0:	f1b9 0f00 	cmp.w	r9, #0
 8009da4:	d003      	beq.n	8009dae <_scanf_float+0x6e>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009db2:	f1ba 0f01 	cmp.w	sl, #1
 8009db6:	f200 8113 	bhi.w	8009fe0 <_scanf_float+0x2a0>
 8009dba:	455e      	cmp	r6, fp
 8009dbc:	f200 8105 	bhi.w	8009fca <_scanf_float+0x28a>
 8009dc0:	2501      	movs	r5, #1
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	b007      	add	sp, #28
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009dce:	2a0d      	cmp	r2, #13
 8009dd0:	d8e6      	bhi.n	8009da0 <_scanf_float+0x60>
 8009dd2:	a101      	add	r1, pc, #4	; (adr r1, 8009dd8 <_scanf_float+0x98>)
 8009dd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009dd8:	08009f17 	.word	0x08009f17
 8009ddc:	08009da1 	.word	0x08009da1
 8009de0:	08009da1 	.word	0x08009da1
 8009de4:	08009da1 	.word	0x08009da1
 8009de8:	08009f77 	.word	0x08009f77
 8009dec:	08009f4f 	.word	0x08009f4f
 8009df0:	08009da1 	.word	0x08009da1
 8009df4:	08009da1 	.word	0x08009da1
 8009df8:	08009f25 	.word	0x08009f25
 8009dfc:	08009da1 	.word	0x08009da1
 8009e00:	08009da1 	.word	0x08009da1
 8009e04:	08009da1 	.word	0x08009da1
 8009e08:	08009da1 	.word	0x08009da1
 8009e0c:	08009edd 	.word	0x08009edd
 8009e10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e14:	e7db      	b.n	8009dce <_scanf_float+0x8e>
 8009e16:	290e      	cmp	r1, #14
 8009e18:	d8c2      	bhi.n	8009da0 <_scanf_float+0x60>
 8009e1a:	a001      	add	r0, pc, #4	; (adr r0, 8009e20 <_scanf_float+0xe0>)
 8009e1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e20:	08009ecf 	.word	0x08009ecf
 8009e24:	08009da1 	.word	0x08009da1
 8009e28:	08009ecf 	.word	0x08009ecf
 8009e2c:	08009f63 	.word	0x08009f63
 8009e30:	08009da1 	.word	0x08009da1
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009eb9 	.word	0x08009eb9
 8009e3c:	08009eb9 	.word	0x08009eb9
 8009e40:	08009eb9 	.word	0x08009eb9
 8009e44:	08009eb9 	.word	0x08009eb9
 8009e48:	08009eb9 	.word	0x08009eb9
 8009e4c:	08009eb9 	.word	0x08009eb9
 8009e50:	08009eb9 	.word	0x08009eb9
 8009e54:	08009eb9 	.word	0x08009eb9
 8009e58:	08009eb9 	.word	0x08009eb9
 8009e5c:	2b6e      	cmp	r3, #110	; 0x6e
 8009e5e:	d809      	bhi.n	8009e74 <_scanf_float+0x134>
 8009e60:	2b60      	cmp	r3, #96	; 0x60
 8009e62:	d8b2      	bhi.n	8009dca <_scanf_float+0x8a>
 8009e64:	2b54      	cmp	r3, #84	; 0x54
 8009e66:	d077      	beq.n	8009f58 <_scanf_float+0x218>
 8009e68:	2b59      	cmp	r3, #89	; 0x59
 8009e6a:	d199      	bne.n	8009da0 <_scanf_float+0x60>
 8009e6c:	2d07      	cmp	r5, #7
 8009e6e:	d197      	bne.n	8009da0 <_scanf_float+0x60>
 8009e70:	2508      	movs	r5, #8
 8009e72:	e029      	b.n	8009ec8 <_scanf_float+0x188>
 8009e74:	2b74      	cmp	r3, #116	; 0x74
 8009e76:	d06f      	beq.n	8009f58 <_scanf_float+0x218>
 8009e78:	2b79      	cmp	r3, #121	; 0x79
 8009e7a:	e7f6      	b.n	8009e6a <_scanf_float+0x12a>
 8009e7c:	6821      	ldr	r1, [r4, #0]
 8009e7e:	05c8      	lsls	r0, r1, #23
 8009e80:	d51a      	bpl.n	8009eb8 <_scanf_float+0x178>
 8009e82:	9b02      	ldr	r3, [sp, #8]
 8009e84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009e88:	6021      	str	r1, [r4, #0]
 8009e8a:	f109 0901 	add.w	r9, r9, #1
 8009e8e:	b11b      	cbz	r3, 8009e98 <_scanf_float+0x158>
 8009e90:	3b01      	subs	r3, #1
 8009e92:	3201      	adds	r2, #1
 8009e94:	9302      	str	r3, [sp, #8]
 8009e96:	60a2      	str	r2, [r4, #8]
 8009e98:	68a3      	ldr	r3, [r4, #8]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	60a3      	str	r3, [r4, #8]
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	6123      	str	r3, [r4, #16]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	607b      	str	r3, [r7, #4]
 8009eac:	f340 8084 	ble.w	8009fb8 <_scanf_float+0x278>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	603b      	str	r3, [r7, #0]
 8009eb6:	e766      	b.n	8009d86 <_scanf_float+0x46>
 8009eb8:	eb1a 0f05 	cmn.w	sl, r5
 8009ebc:	f47f af70 	bne.w	8009da0 <_scanf_float+0x60>
 8009ec0:	6822      	ldr	r2, [r4, #0]
 8009ec2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	f806 3b01 	strb.w	r3, [r6], #1
 8009ecc:	e7e4      	b.n	8009e98 <_scanf_float+0x158>
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	0610      	lsls	r0, r2, #24
 8009ed2:	f57f af65 	bpl.w	8009da0 <_scanf_float+0x60>
 8009ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eda:	e7f4      	b.n	8009ec6 <_scanf_float+0x186>
 8009edc:	f1ba 0f00 	cmp.w	sl, #0
 8009ee0:	d10e      	bne.n	8009f00 <_scanf_float+0x1c0>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d10e      	bne.n	8009f06 <_scanf_float+0x1c6>
 8009ee8:	6822      	ldr	r2, [r4, #0]
 8009eea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009eee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ef2:	d108      	bne.n	8009f06 <_scanf_float+0x1c6>
 8009ef4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ef8:	6022      	str	r2, [r4, #0]
 8009efa:	f04f 0a01 	mov.w	sl, #1
 8009efe:	e7e3      	b.n	8009ec8 <_scanf_float+0x188>
 8009f00:	f1ba 0f02 	cmp.w	sl, #2
 8009f04:	d055      	beq.n	8009fb2 <_scanf_float+0x272>
 8009f06:	2d01      	cmp	r5, #1
 8009f08:	d002      	beq.n	8009f10 <_scanf_float+0x1d0>
 8009f0a:	2d04      	cmp	r5, #4
 8009f0c:	f47f af48 	bne.w	8009da0 <_scanf_float+0x60>
 8009f10:	3501      	adds	r5, #1
 8009f12:	b2ed      	uxtb	r5, r5
 8009f14:	e7d8      	b.n	8009ec8 <_scanf_float+0x188>
 8009f16:	f1ba 0f01 	cmp.w	sl, #1
 8009f1a:	f47f af41 	bne.w	8009da0 <_scanf_float+0x60>
 8009f1e:	f04f 0a02 	mov.w	sl, #2
 8009f22:	e7d1      	b.n	8009ec8 <_scanf_float+0x188>
 8009f24:	b97d      	cbnz	r5, 8009f46 <_scanf_float+0x206>
 8009f26:	f1b9 0f00 	cmp.w	r9, #0
 8009f2a:	f47f af3c 	bne.w	8009da6 <_scanf_float+0x66>
 8009f2e:	6822      	ldr	r2, [r4, #0]
 8009f30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f38:	f47f af39 	bne.w	8009dae <_scanf_float+0x6e>
 8009f3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	2501      	movs	r5, #1
 8009f44:	e7c0      	b.n	8009ec8 <_scanf_float+0x188>
 8009f46:	2d03      	cmp	r5, #3
 8009f48:	d0e2      	beq.n	8009f10 <_scanf_float+0x1d0>
 8009f4a:	2d05      	cmp	r5, #5
 8009f4c:	e7de      	b.n	8009f0c <_scanf_float+0x1cc>
 8009f4e:	2d02      	cmp	r5, #2
 8009f50:	f47f af26 	bne.w	8009da0 <_scanf_float+0x60>
 8009f54:	2503      	movs	r5, #3
 8009f56:	e7b7      	b.n	8009ec8 <_scanf_float+0x188>
 8009f58:	2d06      	cmp	r5, #6
 8009f5a:	f47f af21 	bne.w	8009da0 <_scanf_float+0x60>
 8009f5e:	2507      	movs	r5, #7
 8009f60:	e7b2      	b.n	8009ec8 <_scanf_float+0x188>
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	0591      	lsls	r1, r2, #22
 8009f66:	f57f af1b 	bpl.w	8009da0 <_scanf_float+0x60>
 8009f6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009f6e:	6022      	str	r2, [r4, #0]
 8009f70:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f74:	e7a8      	b.n	8009ec8 <_scanf_float+0x188>
 8009f76:	6822      	ldr	r2, [r4, #0]
 8009f78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009f7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f80:	d006      	beq.n	8009f90 <_scanf_float+0x250>
 8009f82:	0550      	lsls	r0, r2, #21
 8009f84:	f57f af0c 	bpl.w	8009da0 <_scanf_float+0x60>
 8009f88:	f1b9 0f00 	cmp.w	r9, #0
 8009f8c:	f43f af0f 	beq.w	8009dae <_scanf_float+0x6e>
 8009f90:	0591      	lsls	r1, r2, #22
 8009f92:	bf58      	it	pl
 8009f94:	9901      	ldrpl	r1, [sp, #4]
 8009f96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f9a:	bf58      	it	pl
 8009f9c:	eba9 0101 	subpl.w	r1, r9, r1
 8009fa0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009fa4:	bf58      	it	pl
 8009fa6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009faa:	6022      	str	r2, [r4, #0]
 8009fac:	f04f 0900 	mov.w	r9, #0
 8009fb0:	e78a      	b.n	8009ec8 <_scanf_float+0x188>
 8009fb2:	f04f 0a03 	mov.w	sl, #3
 8009fb6:	e787      	b.n	8009ec8 <_scanf_float+0x188>
 8009fb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4798      	blx	r3
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f43f aedf 	beq.w	8009d86 <_scanf_float+0x46>
 8009fc8:	e6ea      	b.n	8009da0 <_scanf_float+0x60>
 8009fca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fd2:	463a      	mov	r2, r7
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4798      	blx	r3
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	6123      	str	r3, [r4, #16]
 8009fde:	e6ec      	b.n	8009dba <_scanf_float+0x7a>
 8009fe0:	1e6b      	subs	r3, r5, #1
 8009fe2:	2b06      	cmp	r3, #6
 8009fe4:	d825      	bhi.n	800a032 <_scanf_float+0x2f2>
 8009fe6:	2d02      	cmp	r5, #2
 8009fe8:	d836      	bhi.n	800a058 <_scanf_float+0x318>
 8009fea:	455e      	cmp	r6, fp
 8009fec:	f67f aee8 	bls.w	8009dc0 <_scanf_float+0x80>
 8009ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ff4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ff8:	463a      	mov	r2, r7
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4798      	blx	r3
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	3b01      	subs	r3, #1
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	e7f1      	b.n	8009fea <_scanf_float+0x2aa>
 800a006:	9802      	ldr	r0, [sp, #8]
 800a008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a00c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a010:	9002      	str	r0, [sp, #8]
 800a012:	463a      	mov	r2, r7
 800a014:	4640      	mov	r0, r8
 800a016:	4798      	blx	r3
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a022:	fa5f fa8a 	uxtb.w	sl, sl
 800a026:	f1ba 0f02 	cmp.w	sl, #2
 800a02a:	d1ec      	bne.n	800a006 <_scanf_float+0x2c6>
 800a02c:	3d03      	subs	r5, #3
 800a02e:	b2ed      	uxtb	r5, r5
 800a030:	1b76      	subs	r6, r6, r5
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	05da      	lsls	r2, r3, #23
 800a036:	d52f      	bpl.n	800a098 <_scanf_float+0x358>
 800a038:	055b      	lsls	r3, r3, #21
 800a03a:	d510      	bpl.n	800a05e <_scanf_float+0x31e>
 800a03c:	455e      	cmp	r6, fp
 800a03e:	f67f aebf 	bls.w	8009dc0 <_scanf_float+0x80>
 800a042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a04a:	463a      	mov	r2, r7
 800a04c:	4640      	mov	r0, r8
 800a04e:	4798      	blx	r3
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	3b01      	subs	r3, #1
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	e7f1      	b.n	800a03c <_scanf_float+0x2fc>
 800a058:	46aa      	mov	sl, r5
 800a05a:	9602      	str	r6, [sp, #8]
 800a05c:	e7df      	b.n	800a01e <_scanf_float+0x2de>
 800a05e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	2965      	cmp	r1, #101	; 0x65
 800a066:	f103 33ff 	add.w	r3, r3, #4294967295
 800a06a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a06e:	6123      	str	r3, [r4, #16]
 800a070:	d00c      	beq.n	800a08c <_scanf_float+0x34c>
 800a072:	2945      	cmp	r1, #69	; 0x45
 800a074:	d00a      	beq.n	800a08c <_scanf_float+0x34c>
 800a076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a07a:	463a      	mov	r2, r7
 800a07c:	4640      	mov	r0, r8
 800a07e:	4798      	blx	r3
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a086:	3b01      	subs	r3, #1
 800a088:	1eb5      	subs	r5, r6, #2
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a090:	463a      	mov	r2, r7
 800a092:	4640      	mov	r0, r8
 800a094:	4798      	blx	r3
 800a096:	462e      	mov	r6, r5
 800a098:	6825      	ldr	r5, [r4, #0]
 800a09a:	f015 0510 	ands.w	r5, r5, #16
 800a09e:	d158      	bne.n	800a152 <_scanf_float+0x412>
 800a0a0:	7035      	strb	r5, [r6, #0]
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ac:	d11c      	bne.n	800a0e8 <_scanf_float+0x3a8>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	454b      	cmp	r3, r9
 800a0b2:	eba3 0209 	sub.w	r2, r3, r9
 800a0b6:	d124      	bne.n	800a102 <_scanf_float+0x3c2>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4659      	mov	r1, fp
 800a0bc:	4640      	mov	r0, r8
 800a0be:	f002 fcc7 	bl	800ca50 <_strtod_r>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	6821      	ldr	r1, [r4, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f011 0f02 	tst.w	r1, #2
 800a0cc:	ec57 6b10 	vmov	r6, r7, d0
 800a0d0:	f103 0204 	add.w	r2, r3, #4
 800a0d4:	d020      	beq.n	800a118 <_scanf_float+0x3d8>
 800a0d6:	9903      	ldr	r1, [sp, #12]
 800a0d8:	600a      	str	r2, [r1, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	e9c3 6700 	strd	r6, r7, [r3]
 800a0e0:	68e3      	ldr	r3, [r4, #12]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60e3      	str	r3, [r4, #12]
 800a0e6:	e66c      	b.n	8009dc2 <_scanf_float+0x82>
 800a0e8:	9b04      	ldr	r3, [sp, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0e4      	beq.n	800a0b8 <_scanf_float+0x378>
 800a0ee:	9905      	ldr	r1, [sp, #20]
 800a0f0:	230a      	movs	r3, #10
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	3101      	adds	r1, #1
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f002 fd32 	bl	800cb60 <_strtol_r>
 800a0fc:	9b04      	ldr	r3, [sp, #16]
 800a0fe:	9e05      	ldr	r6, [sp, #20]
 800a100:	1ac2      	subs	r2, r0, r3
 800a102:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a106:	429e      	cmp	r6, r3
 800a108:	bf28      	it	cs
 800a10a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a10e:	4912      	ldr	r1, [pc, #72]	; (800a158 <_scanf_float+0x418>)
 800a110:	4630      	mov	r0, r6
 800a112:	f000 f91b 	bl	800a34c <siprintf>
 800a116:	e7cf      	b.n	800a0b8 <_scanf_float+0x378>
 800a118:	f011 0f04 	tst.w	r1, #4
 800a11c:	9903      	ldr	r1, [sp, #12]
 800a11e:	600a      	str	r2, [r1, #0]
 800a120:	d1db      	bne.n	800a0da <_scanf_float+0x39a>
 800a122:	f8d3 8000 	ldr.w	r8, [r3]
 800a126:	ee10 2a10 	vmov	r2, s0
 800a12a:	ee10 0a10 	vmov	r0, s0
 800a12e:	463b      	mov	r3, r7
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 fd03 	bl	8000b3c <__aeabi_dcmpun>
 800a136:	b128      	cbz	r0, 800a144 <_scanf_float+0x404>
 800a138:	4808      	ldr	r0, [pc, #32]	; (800a15c <_scanf_float+0x41c>)
 800a13a:	f000 fa4f 	bl	800a5dc <nanf>
 800a13e:	ed88 0a00 	vstr	s0, [r8]
 800a142:	e7cd      	b.n	800a0e0 <_scanf_float+0x3a0>
 800a144:	4630      	mov	r0, r6
 800a146:	4639      	mov	r1, r7
 800a148:	f7f6 fd56 	bl	8000bf8 <__aeabi_d2f>
 800a14c:	f8c8 0000 	str.w	r0, [r8]
 800a150:	e7c6      	b.n	800a0e0 <_scanf_float+0x3a0>
 800a152:	2500      	movs	r5, #0
 800a154:	e635      	b.n	8009dc2 <_scanf_float+0x82>
 800a156:	bf00      	nop
 800a158:	0800dfbc 	.word	0x0800dfbc
 800a15c:	0800e34d 	.word	0x0800e34d

0800a160 <std>:
 800a160:	2300      	movs	r3, #0
 800a162:	b510      	push	{r4, lr}
 800a164:	4604      	mov	r4, r0
 800a166:	e9c0 3300 	strd	r3, r3, [r0]
 800a16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a16e:	6083      	str	r3, [r0, #8]
 800a170:	8181      	strh	r1, [r0, #12]
 800a172:	6643      	str	r3, [r0, #100]	; 0x64
 800a174:	81c2      	strh	r2, [r0, #14]
 800a176:	6183      	str	r3, [r0, #24]
 800a178:	4619      	mov	r1, r3
 800a17a:	2208      	movs	r2, #8
 800a17c:	305c      	adds	r0, #92	; 0x5c
 800a17e:	f000 f948 	bl	800a412 <memset>
 800a182:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <std+0x58>)
 800a184:	6263      	str	r3, [r4, #36]	; 0x24
 800a186:	4b0d      	ldr	r3, [pc, #52]	; (800a1bc <std+0x5c>)
 800a188:	62a3      	str	r3, [r4, #40]	; 0x28
 800a18a:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <std+0x60>)
 800a18c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a18e:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <std+0x64>)
 800a190:	6323      	str	r3, [r4, #48]	; 0x30
 800a192:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <std+0x68>)
 800a194:	6224      	str	r4, [r4, #32]
 800a196:	429c      	cmp	r4, r3
 800a198:	d006      	beq.n	800a1a8 <std+0x48>
 800a19a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a19e:	4294      	cmp	r4, r2
 800a1a0:	d002      	beq.n	800a1a8 <std+0x48>
 800a1a2:	33d0      	adds	r3, #208	; 0xd0
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	d105      	bne.n	800a1b4 <std+0x54>
 800a1a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b0:	f000 ba02 	b.w	800a5b8 <__retarget_lock_init_recursive>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800a38d 	.word	0x0800a38d
 800a1bc:	0800a3af 	.word	0x0800a3af
 800a1c0:	0800a3e7 	.word	0x0800a3e7
 800a1c4:	0800a40b 	.word	0x0800a40b
 800a1c8:	2000178c 	.word	0x2000178c

0800a1cc <stdio_exit_handler>:
 800a1cc:	4a02      	ldr	r2, [pc, #8]	; (800a1d8 <stdio_exit_handler+0xc>)
 800a1ce:	4903      	ldr	r1, [pc, #12]	; (800a1dc <stdio_exit_handler+0x10>)
 800a1d0:	4803      	ldr	r0, [pc, #12]	; (800a1e0 <stdio_exit_handler+0x14>)
 800a1d2:	f000 b869 	b.w	800a2a8 <_fwalk_sglue>
 800a1d6:	bf00      	nop
 800a1d8:	20000028 	.word	0x20000028
 800a1dc:	0800cf21 	.word	0x0800cf21
 800a1e0:	20000034 	.word	0x20000034

0800a1e4 <cleanup_stdio>:
 800a1e4:	6841      	ldr	r1, [r0, #4]
 800a1e6:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <cleanup_stdio+0x34>)
 800a1e8:	4299      	cmp	r1, r3
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	d001      	beq.n	800a1f4 <cleanup_stdio+0x10>
 800a1f0:	f002 fe96 	bl	800cf20 <_fflush_r>
 800a1f4:	68a1      	ldr	r1, [r4, #8]
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <cleanup_stdio+0x38>)
 800a1f8:	4299      	cmp	r1, r3
 800a1fa:	d002      	beq.n	800a202 <cleanup_stdio+0x1e>
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f002 fe8f 	bl	800cf20 <_fflush_r>
 800a202:	68e1      	ldr	r1, [r4, #12]
 800a204:	4b06      	ldr	r3, [pc, #24]	; (800a220 <cleanup_stdio+0x3c>)
 800a206:	4299      	cmp	r1, r3
 800a208:	d004      	beq.n	800a214 <cleanup_stdio+0x30>
 800a20a:	4620      	mov	r0, r4
 800a20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a210:	f002 be86 	b.w	800cf20 <_fflush_r>
 800a214:	bd10      	pop	{r4, pc}
 800a216:	bf00      	nop
 800a218:	2000178c 	.word	0x2000178c
 800a21c:	200017f4 	.word	0x200017f4
 800a220:	2000185c 	.word	0x2000185c

0800a224 <global_stdio_init.part.0>:
 800a224:	b510      	push	{r4, lr}
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <global_stdio_init.part.0+0x30>)
 800a228:	4c0b      	ldr	r4, [pc, #44]	; (800a258 <global_stdio_init.part.0+0x34>)
 800a22a:	4a0c      	ldr	r2, [pc, #48]	; (800a25c <global_stdio_init.part.0+0x38>)
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	4620      	mov	r0, r4
 800a230:	2200      	movs	r2, #0
 800a232:	2104      	movs	r1, #4
 800a234:	f7ff ff94 	bl	800a160 <std>
 800a238:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a23c:	2201      	movs	r2, #1
 800a23e:	2109      	movs	r1, #9
 800a240:	f7ff ff8e 	bl	800a160 <std>
 800a244:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a248:	2202      	movs	r2, #2
 800a24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a24e:	2112      	movs	r1, #18
 800a250:	f7ff bf86 	b.w	800a160 <std>
 800a254:	200018c4 	.word	0x200018c4
 800a258:	2000178c 	.word	0x2000178c
 800a25c:	0800a1cd 	.word	0x0800a1cd

0800a260 <__sfp_lock_acquire>:
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__sfp_lock_acquire+0x8>)
 800a262:	f000 b9aa 	b.w	800a5ba <__retarget_lock_acquire_recursive>
 800a266:	bf00      	nop
 800a268:	200018cd 	.word	0x200018cd

0800a26c <__sfp_lock_release>:
 800a26c:	4801      	ldr	r0, [pc, #4]	; (800a274 <__sfp_lock_release+0x8>)
 800a26e:	f000 b9a5 	b.w	800a5bc <__retarget_lock_release_recursive>
 800a272:	bf00      	nop
 800a274:	200018cd 	.word	0x200018cd

0800a278 <__sinit>:
 800a278:	b510      	push	{r4, lr}
 800a27a:	4604      	mov	r4, r0
 800a27c:	f7ff fff0 	bl	800a260 <__sfp_lock_acquire>
 800a280:	6a23      	ldr	r3, [r4, #32]
 800a282:	b11b      	cbz	r3, 800a28c <__sinit+0x14>
 800a284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a288:	f7ff bff0 	b.w	800a26c <__sfp_lock_release>
 800a28c:	4b04      	ldr	r3, [pc, #16]	; (800a2a0 <__sinit+0x28>)
 800a28e:	6223      	str	r3, [r4, #32]
 800a290:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <__sinit+0x2c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1f5      	bne.n	800a284 <__sinit+0xc>
 800a298:	f7ff ffc4 	bl	800a224 <global_stdio_init.part.0>
 800a29c:	e7f2      	b.n	800a284 <__sinit+0xc>
 800a29e:	bf00      	nop
 800a2a0:	0800a1e5 	.word	0x0800a1e5
 800a2a4:	200018c4 	.word	0x200018c4

0800a2a8 <_fwalk_sglue>:
 800a2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	4688      	mov	r8, r1
 800a2b0:	4614      	mov	r4, r2
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a2bc:	d505      	bpl.n	800a2ca <_fwalk_sglue+0x22>
 800a2be:	6824      	ldr	r4, [r4, #0]
 800a2c0:	2c00      	cmp	r4, #0
 800a2c2:	d1f7      	bne.n	800a2b4 <_fwalk_sglue+0xc>
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d907      	bls.n	800a2e0 <_fwalk_sglue+0x38>
 800a2d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	d003      	beq.n	800a2e0 <_fwalk_sglue+0x38>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4638      	mov	r0, r7
 800a2dc:	47c0      	blx	r8
 800a2de:	4306      	orrs	r6, r0
 800a2e0:	3568      	adds	r5, #104	; 0x68
 800a2e2:	e7e9      	b.n	800a2b8 <_fwalk_sglue+0x10>

0800a2e4 <sniprintf>:
 800a2e4:	b40c      	push	{r2, r3}
 800a2e6:	b530      	push	{r4, r5, lr}
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <sniprintf+0x64>)
 800a2ea:	1e0c      	subs	r4, r1, #0
 800a2ec:	681d      	ldr	r5, [r3, #0]
 800a2ee:	b09d      	sub	sp, #116	; 0x74
 800a2f0:	da08      	bge.n	800a304 <sniprintf+0x20>
 800a2f2:	238b      	movs	r3, #139	; 0x8b
 800a2f4:	602b      	str	r3, [r5, #0]
 800a2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fa:	b01d      	add	sp, #116	; 0x74
 800a2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a300:	b002      	add	sp, #8
 800a302:	4770      	bx	lr
 800a304:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a308:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a30c:	bf14      	ite	ne
 800a30e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a312:	4623      	moveq	r3, r4
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	9307      	str	r3, [sp, #28]
 800a318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a31c:	9002      	str	r0, [sp, #8]
 800a31e:	9006      	str	r0, [sp, #24]
 800a320:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a324:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a326:	ab21      	add	r3, sp, #132	; 0x84
 800a328:	a902      	add	r1, sp, #8
 800a32a:	4628      	mov	r0, r5
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	f002 fc73 	bl	800cc18 <_svfiprintf_r>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	bfbc      	itt	lt
 800a336:	238b      	movlt	r3, #139	; 0x8b
 800a338:	602b      	strlt	r3, [r5, #0]
 800a33a:	2c00      	cmp	r4, #0
 800a33c:	d0dd      	beq.n	800a2fa <sniprintf+0x16>
 800a33e:	9b02      	ldr	r3, [sp, #8]
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	e7d9      	b.n	800a2fa <sniprintf+0x16>
 800a346:	bf00      	nop
 800a348:	20000080 	.word	0x20000080

0800a34c <siprintf>:
 800a34c:	b40e      	push	{r1, r2, r3}
 800a34e:	b500      	push	{lr}
 800a350:	b09c      	sub	sp, #112	; 0x70
 800a352:	ab1d      	add	r3, sp, #116	; 0x74
 800a354:	9002      	str	r0, [sp, #8]
 800a356:	9006      	str	r0, [sp, #24]
 800a358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a35c:	4809      	ldr	r0, [pc, #36]	; (800a384 <siprintf+0x38>)
 800a35e:	9107      	str	r1, [sp, #28]
 800a360:	9104      	str	r1, [sp, #16]
 800a362:	4909      	ldr	r1, [pc, #36]	; (800a388 <siprintf+0x3c>)
 800a364:	f853 2b04 	ldr.w	r2, [r3], #4
 800a368:	9105      	str	r1, [sp, #20]
 800a36a:	6800      	ldr	r0, [r0, #0]
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	a902      	add	r1, sp, #8
 800a370:	f002 fc52 	bl	800cc18 <_svfiprintf_r>
 800a374:	9b02      	ldr	r3, [sp, #8]
 800a376:	2200      	movs	r2, #0
 800a378:	701a      	strb	r2, [r3, #0]
 800a37a:	b01c      	add	sp, #112	; 0x70
 800a37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a380:	b003      	add	sp, #12
 800a382:	4770      	bx	lr
 800a384:	20000080 	.word	0x20000080
 800a388:	ffff0208 	.word	0xffff0208

0800a38c <__sread>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	460c      	mov	r4, r1
 800a390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a394:	f000 f8c2 	bl	800a51c <_read_r>
 800a398:	2800      	cmp	r0, #0
 800a39a:	bfab      	itete	ge
 800a39c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a39e:	89a3      	ldrhlt	r3, [r4, #12]
 800a3a0:	181b      	addge	r3, r3, r0
 800a3a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3a6:	bfac      	ite	ge
 800a3a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3aa:	81a3      	strhlt	r3, [r4, #12]
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <__swrite>:
 800a3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b2:	461f      	mov	r7, r3
 800a3b4:	898b      	ldrh	r3, [r1, #12]
 800a3b6:	05db      	lsls	r3, r3, #23
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4616      	mov	r6, r2
 800a3be:	d505      	bpl.n	800a3cc <__swrite+0x1e>
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f000 f896 	bl	800a4f8 <_lseek_r>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	4632      	mov	r2, r6
 800a3da:	463b      	mov	r3, r7
 800a3dc:	4628      	mov	r0, r5
 800a3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	f000 b8ad 	b.w	800a540 <_write_r>

0800a3e6 <__sseek>:
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	f000 f883 	bl	800a4f8 <_lseek_r>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	bf15      	itete	ne
 800a3f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a402:	81a3      	strheq	r3, [r4, #12]
 800a404:	bf18      	it	ne
 800a406:	81a3      	strhne	r3, [r4, #12]
 800a408:	bd10      	pop	{r4, pc}

0800a40a <__sclose>:
 800a40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40e:	f000 b80d 	b.w	800a42c <_close_r>

0800a412 <memset>:
 800a412:	4402      	add	r2, r0
 800a414:	4603      	mov	r3, r0
 800a416:	4293      	cmp	r3, r2
 800a418:	d100      	bne.n	800a41c <memset+0xa>
 800a41a:	4770      	bx	lr
 800a41c:	f803 1b01 	strb.w	r1, [r3], #1
 800a420:	e7f9      	b.n	800a416 <memset+0x4>
	...

0800a424 <_localeconv_r>:
 800a424:	4800      	ldr	r0, [pc, #0]	; (800a428 <_localeconv_r+0x4>)
 800a426:	4770      	bx	lr
 800a428:	20000174 	.word	0x20000174

0800a42c <_close_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d06      	ldr	r5, [pc, #24]	; (800a448 <_close_r+0x1c>)
 800a430:	2300      	movs	r3, #0
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f7f8 f89b 	bl	8002572 <_close>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_close_r+0x1a>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_close_r+0x1a>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	200018c8 	.word	0x200018c8

0800a44c <_reclaim_reent>:
 800a44c:	4b29      	ldr	r3, [pc, #164]	; (800a4f4 <_reclaim_reent+0xa8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4283      	cmp	r3, r0
 800a452:	b570      	push	{r4, r5, r6, lr}
 800a454:	4604      	mov	r4, r0
 800a456:	d04b      	beq.n	800a4f0 <_reclaim_reent+0xa4>
 800a458:	69c3      	ldr	r3, [r0, #28]
 800a45a:	b143      	cbz	r3, 800a46e <_reclaim_reent+0x22>
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d144      	bne.n	800a4ec <_reclaim_reent+0xa0>
 800a462:	69e3      	ldr	r3, [r4, #28]
 800a464:	6819      	ldr	r1, [r3, #0]
 800a466:	b111      	cbz	r1, 800a46e <_reclaim_reent+0x22>
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 ff37 	bl	800b2dc <_free_r>
 800a46e:	6961      	ldr	r1, [r4, #20]
 800a470:	b111      	cbz	r1, 800a478 <_reclaim_reent+0x2c>
 800a472:	4620      	mov	r0, r4
 800a474:	f000 ff32 	bl	800b2dc <_free_r>
 800a478:	69e1      	ldr	r1, [r4, #28]
 800a47a:	b111      	cbz	r1, 800a482 <_reclaim_reent+0x36>
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 ff2d 	bl	800b2dc <_free_r>
 800a482:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a484:	b111      	cbz	r1, 800a48c <_reclaim_reent+0x40>
 800a486:	4620      	mov	r0, r4
 800a488:	f000 ff28 	bl	800b2dc <_free_r>
 800a48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a48e:	b111      	cbz	r1, 800a496 <_reclaim_reent+0x4a>
 800a490:	4620      	mov	r0, r4
 800a492:	f000 ff23 	bl	800b2dc <_free_r>
 800a496:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a498:	b111      	cbz	r1, 800a4a0 <_reclaim_reent+0x54>
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 ff1e 	bl	800b2dc <_free_r>
 800a4a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4a2:	b111      	cbz	r1, 800a4aa <_reclaim_reent+0x5e>
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 ff19 	bl	800b2dc <_free_r>
 800a4aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a4ac:	b111      	cbz	r1, 800a4b4 <_reclaim_reent+0x68>
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 ff14 	bl	800b2dc <_free_r>
 800a4b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4b6:	b111      	cbz	r1, 800a4be <_reclaim_reent+0x72>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 ff0f 	bl	800b2dc <_free_r>
 800a4be:	6a23      	ldr	r3, [r4, #32]
 800a4c0:	b1b3      	cbz	r3, 800a4f0 <_reclaim_reent+0xa4>
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4c8:	4718      	bx	r3
 800a4ca:	5949      	ldr	r1, [r1, r5]
 800a4cc:	b941      	cbnz	r1, 800a4e0 <_reclaim_reent+0x94>
 800a4ce:	3504      	adds	r5, #4
 800a4d0:	69e3      	ldr	r3, [r4, #28]
 800a4d2:	2d80      	cmp	r5, #128	; 0x80
 800a4d4:	68d9      	ldr	r1, [r3, #12]
 800a4d6:	d1f8      	bne.n	800a4ca <_reclaim_reent+0x7e>
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 feff 	bl	800b2dc <_free_r>
 800a4de:	e7c0      	b.n	800a462 <_reclaim_reent+0x16>
 800a4e0:	680e      	ldr	r6, [r1, #0]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fefa 	bl	800b2dc <_free_r>
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	e7ef      	b.n	800a4cc <_reclaim_reent+0x80>
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	e7ef      	b.n	800a4d0 <_reclaim_reent+0x84>
 800a4f0:	bd70      	pop	{r4, r5, r6, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20000080 	.word	0x20000080

0800a4f8 <_lseek_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d07      	ldr	r5, [pc, #28]	; (800a518 <_lseek_r+0x20>)
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	4608      	mov	r0, r1
 800a500:	4611      	mov	r1, r2
 800a502:	2200      	movs	r2, #0
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	f7f8 f85a 	bl	80025c0 <_lseek>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_lseek_r+0x1e>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_lseek_r+0x1e>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	200018c8 	.word	0x200018c8

0800a51c <_read_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d07      	ldr	r5, [pc, #28]	; (800a53c <_read_r+0x20>)
 800a520:	4604      	mov	r4, r0
 800a522:	4608      	mov	r0, r1
 800a524:	4611      	mov	r1, r2
 800a526:	2200      	movs	r2, #0
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f7f7 ffe8 	bl	8002500 <_read>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_read_r+0x1e>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_read_r+0x1e>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	200018c8 	.word	0x200018c8

0800a540 <_write_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_write_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f7 fff3 	bl	800253a <_write>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_write_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_write_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	200018c8 	.word	0x200018c8

0800a564 <__errno>:
 800a564:	4b01      	ldr	r3, [pc, #4]	; (800a56c <__errno+0x8>)
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20000080 	.word	0x20000080

0800a570 <__libc_init_array>:
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	4d0d      	ldr	r5, [pc, #52]	; (800a5a8 <__libc_init_array+0x38>)
 800a574:	4c0d      	ldr	r4, [pc, #52]	; (800a5ac <__libc_init_array+0x3c>)
 800a576:	1b64      	subs	r4, r4, r5
 800a578:	10a4      	asrs	r4, r4, #2
 800a57a:	2600      	movs	r6, #0
 800a57c:	42a6      	cmp	r6, r4
 800a57e:	d109      	bne.n	800a594 <__libc_init_array+0x24>
 800a580:	4d0b      	ldr	r5, [pc, #44]	; (800a5b0 <__libc_init_array+0x40>)
 800a582:	4c0c      	ldr	r4, [pc, #48]	; (800a5b4 <__libc_init_array+0x44>)
 800a584:	f003 fbd4 	bl	800dd30 <_init>
 800a588:	1b64      	subs	r4, r4, r5
 800a58a:	10a4      	asrs	r4, r4, #2
 800a58c:	2600      	movs	r6, #0
 800a58e:	42a6      	cmp	r6, r4
 800a590:	d105      	bne.n	800a59e <__libc_init_array+0x2e>
 800a592:	bd70      	pop	{r4, r5, r6, pc}
 800a594:	f855 3b04 	ldr.w	r3, [r5], #4
 800a598:	4798      	blx	r3
 800a59a:	3601      	adds	r6, #1
 800a59c:	e7ee      	b.n	800a57c <__libc_init_array+0xc>
 800a59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a2:	4798      	blx	r3
 800a5a4:	3601      	adds	r6, #1
 800a5a6:	e7f2      	b.n	800a58e <__libc_init_array+0x1e>
 800a5a8:	0800e3b0 	.word	0x0800e3b0
 800a5ac:	0800e3b0 	.word	0x0800e3b0
 800a5b0:	0800e3b0 	.word	0x0800e3b0
 800a5b4:	0800e3b4 	.word	0x0800e3b4

0800a5b8 <__retarget_lock_init_recursive>:
 800a5b8:	4770      	bx	lr

0800a5ba <__retarget_lock_acquire_recursive>:
 800a5ba:	4770      	bx	lr

0800a5bc <__retarget_lock_release_recursive>:
 800a5bc:	4770      	bx	lr

0800a5be <memcpy>:
 800a5be:	440a      	add	r2, r1
 800a5c0:	4291      	cmp	r1, r2
 800a5c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5c6:	d100      	bne.n	800a5ca <memcpy+0xc>
 800a5c8:	4770      	bx	lr
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d4:	4291      	cmp	r1, r2
 800a5d6:	d1f9      	bne.n	800a5cc <memcpy+0xe>
 800a5d8:	bd10      	pop	{r4, pc}
	...

0800a5dc <nanf>:
 800a5dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a5e4 <nanf+0x8>
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	7fc00000 	.word	0x7fc00000

0800a5e8 <quorem>:
 800a5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	6903      	ldr	r3, [r0, #16]
 800a5ee:	690c      	ldr	r4, [r1, #16]
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	db7e      	blt.n	800a6f4 <quorem+0x10c>
 800a5f6:	3c01      	subs	r4, #1
 800a5f8:	f101 0814 	add.w	r8, r1, #20
 800a5fc:	f100 0514 	add.w	r5, r0, #20
 800a600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a60a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a60e:	3301      	adds	r3, #1
 800a610:	429a      	cmp	r2, r3
 800a612:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a616:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a61a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a61e:	d331      	bcc.n	800a684 <quorem+0x9c>
 800a620:	f04f 0e00 	mov.w	lr, #0
 800a624:	4640      	mov	r0, r8
 800a626:	46ac      	mov	ip, r5
 800a628:	46f2      	mov	sl, lr
 800a62a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a62e:	b293      	uxth	r3, r2
 800a630:	fb06 e303 	mla	r3, r6, r3, lr
 800a634:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a638:	0c1a      	lsrs	r2, r3, #16
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	ebaa 0303 	sub.w	r3, sl, r3
 800a640:	f8dc a000 	ldr.w	sl, [ip]
 800a644:	fa13 f38a 	uxtah	r3, r3, sl
 800a648:	fb06 220e 	mla	r2, r6, lr, r2
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a654:	b292      	uxth	r2, r2
 800a656:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a65a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a65e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a662:	4581      	cmp	r9, r0
 800a664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a668:	f84c 3b04 	str.w	r3, [ip], #4
 800a66c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a670:	d2db      	bcs.n	800a62a <quorem+0x42>
 800a672:	f855 300b 	ldr.w	r3, [r5, fp]
 800a676:	b92b      	cbnz	r3, 800a684 <quorem+0x9c>
 800a678:	9b01      	ldr	r3, [sp, #4]
 800a67a:	3b04      	subs	r3, #4
 800a67c:	429d      	cmp	r5, r3
 800a67e:	461a      	mov	r2, r3
 800a680:	d32c      	bcc.n	800a6dc <quorem+0xf4>
 800a682:	613c      	str	r4, [r7, #16]
 800a684:	4638      	mov	r0, r7
 800a686:	f001 f9ef 	bl	800ba68 <__mcmp>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	db22      	blt.n	800a6d4 <quorem+0xec>
 800a68e:	3601      	adds	r6, #1
 800a690:	4629      	mov	r1, r5
 800a692:	2000      	movs	r0, #0
 800a694:	f858 2b04 	ldr.w	r2, [r8], #4
 800a698:	f8d1 c000 	ldr.w	ip, [r1]
 800a69c:	b293      	uxth	r3, r2
 800a69e:	1ac3      	subs	r3, r0, r3
 800a6a0:	0c12      	lsrs	r2, r2, #16
 800a6a2:	fa13 f38c 	uxtah	r3, r3, ip
 800a6a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a6aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6b4:	45c1      	cmp	r9, r8
 800a6b6:	f841 3b04 	str.w	r3, [r1], #4
 800a6ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6be:	d2e9      	bcs.n	800a694 <quorem+0xac>
 800a6c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6c8:	b922      	cbnz	r2, 800a6d4 <quorem+0xec>
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	429d      	cmp	r5, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	d30a      	bcc.n	800a6e8 <quorem+0x100>
 800a6d2:	613c      	str	r4, [r7, #16]
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	b003      	add	sp, #12
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	3b04      	subs	r3, #4
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	d1ce      	bne.n	800a682 <quorem+0x9a>
 800a6e4:	3c01      	subs	r4, #1
 800a6e6:	e7c9      	b.n	800a67c <quorem+0x94>
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	3b04      	subs	r3, #4
 800a6ec:	2a00      	cmp	r2, #0
 800a6ee:	d1f0      	bne.n	800a6d2 <quorem+0xea>
 800a6f0:	3c01      	subs	r4, #1
 800a6f2:	e7eb      	b.n	800a6cc <quorem+0xe4>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e7ee      	b.n	800a6d6 <quorem+0xee>

0800a6f8 <_dtoa_r>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	ed2d 8b04 	vpush	{d8-d9}
 800a700:	69c5      	ldr	r5, [r0, #28]
 800a702:	b093      	sub	sp, #76	; 0x4c
 800a704:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a708:	ec57 6b10 	vmov	r6, r7, d0
 800a70c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a710:	9107      	str	r1, [sp, #28]
 800a712:	4604      	mov	r4, r0
 800a714:	920a      	str	r2, [sp, #40]	; 0x28
 800a716:	930d      	str	r3, [sp, #52]	; 0x34
 800a718:	b975      	cbnz	r5, 800a738 <_dtoa_r+0x40>
 800a71a:	2010      	movs	r0, #16
 800a71c:	f000 fe2a 	bl	800b374 <malloc>
 800a720:	4602      	mov	r2, r0
 800a722:	61e0      	str	r0, [r4, #28]
 800a724:	b920      	cbnz	r0, 800a730 <_dtoa_r+0x38>
 800a726:	4bae      	ldr	r3, [pc, #696]	; (800a9e0 <_dtoa_r+0x2e8>)
 800a728:	21ef      	movs	r1, #239	; 0xef
 800a72a:	48ae      	ldr	r0, [pc, #696]	; (800a9e4 <_dtoa_r+0x2ec>)
 800a72c:	f002 fc64 	bl	800cff8 <__assert_func>
 800a730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a734:	6005      	str	r5, [r0, #0]
 800a736:	60c5      	str	r5, [r0, #12]
 800a738:	69e3      	ldr	r3, [r4, #28]
 800a73a:	6819      	ldr	r1, [r3, #0]
 800a73c:	b151      	cbz	r1, 800a754 <_dtoa_r+0x5c>
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	604a      	str	r2, [r1, #4]
 800a742:	2301      	movs	r3, #1
 800a744:	4093      	lsls	r3, r2
 800a746:	608b      	str	r3, [r1, #8]
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 ff07 	bl	800b55c <_Bfree>
 800a74e:	69e3      	ldr	r3, [r4, #28]
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	1e3b      	subs	r3, r7, #0
 800a756:	bfbb      	ittet	lt
 800a758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a75c:	9303      	strlt	r3, [sp, #12]
 800a75e:	2300      	movge	r3, #0
 800a760:	2201      	movlt	r2, #1
 800a762:	bfac      	ite	ge
 800a764:	f8c8 3000 	strge.w	r3, [r8]
 800a768:	f8c8 2000 	strlt.w	r2, [r8]
 800a76c:	4b9e      	ldr	r3, [pc, #632]	; (800a9e8 <_dtoa_r+0x2f0>)
 800a76e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a772:	ea33 0308 	bics.w	r3, r3, r8
 800a776:	d11b      	bne.n	800a7b0 <_dtoa_r+0xb8>
 800a778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a77a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a784:	4333      	orrs	r3, r6
 800a786:	f000 8593 	beq.w	800b2b0 <_dtoa_r+0xbb8>
 800a78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a78c:	b963      	cbnz	r3, 800a7a8 <_dtoa_r+0xb0>
 800a78e:	4b97      	ldr	r3, [pc, #604]	; (800a9ec <_dtoa_r+0x2f4>)
 800a790:	e027      	b.n	800a7e2 <_dtoa_r+0xea>
 800a792:	4b97      	ldr	r3, [pc, #604]	; (800a9f0 <_dtoa_r+0x2f8>)
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	3308      	adds	r3, #8
 800a798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	9800      	ldr	r0, [sp, #0]
 800a79e:	b013      	add	sp, #76	; 0x4c
 800a7a0:	ecbd 8b04 	vpop	{d8-d9}
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	4b90      	ldr	r3, [pc, #576]	; (800a9ec <_dtoa_r+0x2f4>)
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	3303      	adds	r3, #3
 800a7ae:	e7f3      	b.n	800a798 <_dtoa_r+0xa0>
 800a7b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	ec51 0b17 	vmov	r0, r1, d7
 800a7ba:	eeb0 8a47 	vmov.f32	s16, s14
 800a7be:	eef0 8a67 	vmov.f32	s17, s15
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f7f6 f988 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7c8:	4681      	mov	r9, r0
 800a7ca:	b160      	cbz	r0, 800a7e6 <_dtoa_r+0xee>
 800a7cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8568 	beq.w	800b2aa <_dtoa_r+0xbb2>
 800a7da:	4b86      	ldr	r3, [pc, #536]	; (800a9f4 <_dtoa_r+0x2fc>)
 800a7dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	e7da      	b.n	800a79c <_dtoa_r+0xa4>
 800a7e6:	aa10      	add	r2, sp, #64	; 0x40
 800a7e8:	a911      	add	r1, sp, #68	; 0x44
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	eeb0 0a48 	vmov.f32	s0, s16
 800a7f0:	eef0 0a68 	vmov.f32	s1, s17
 800a7f4:	f001 fa4e 	bl	800bc94 <__d2b>
 800a7f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	d07f      	beq.n	800a902 <_dtoa_r+0x20a>
 800a802:	ee18 3a90 	vmov	r3, s17
 800a806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a80a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a80e:	ec51 0b18 	vmov	r0, r1, d8
 800a812:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a81a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a81e:	4619      	mov	r1, r3
 800a820:	2200      	movs	r2, #0
 800a822:	4b75      	ldr	r3, [pc, #468]	; (800a9f8 <_dtoa_r+0x300>)
 800a824:	f7f5 fd38 	bl	8000298 <__aeabi_dsub>
 800a828:	a367      	add	r3, pc, #412	; (adr r3, 800a9c8 <_dtoa_r+0x2d0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 feeb 	bl	8000608 <__aeabi_dmul>
 800a832:	a367      	add	r3, pc, #412	; (adr r3, 800a9d0 <_dtoa_r+0x2d8>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	f7f5 fd30 	bl	800029c <__adddf3>
 800a83c:	4606      	mov	r6, r0
 800a83e:	4628      	mov	r0, r5
 800a840:	460f      	mov	r7, r1
 800a842:	f7f5 fe77 	bl	8000534 <__aeabi_i2d>
 800a846:	a364      	add	r3, pc, #400	; (adr r3, 800a9d8 <_dtoa_r+0x2e0>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fedc 	bl	8000608 <__aeabi_dmul>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fd20 	bl	800029c <__adddf3>
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	f7f6 f982 	bl	8000b68 <__aeabi_d2iz>
 800a864:	2200      	movs	r2, #0
 800a866:	4683      	mov	fp, r0
 800a868:	2300      	movs	r3, #0
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f6 f93d 	bl	8000aec <__aeabi_dcmplt>
 800a872:	b148      	cbz	r0, 800a888 <_dtoa_r+0x190>
 800a874:	4658      	mov	r0, fp
 800a876:	f7f5 fe5d 	bl	8000534 <__aeabi_i2d>
 800a87a:	4632      	mov	r2, r6
 800a87c:	463b      	mov	r3, r7
 800a87e:	f7f6 f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a882:	b908      	cbnz	r0, 800a888 <_dtoa_r+0x190>
 800a884:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a888:	f1bb 0f16 	cmp.w	fp, #22
 800a88c:	d857      	bhi.n	800a93e <_dtoa_r+0x246>
 800a88e:	4b5b      	ldr	r3, [pc, #364]	; (800a9fc <_dtoa_r+0x304>)
 800a890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	ec51 0b18 	vmov	r0, r1, d8
 800a89c:	f7f6 f926 	bl	8000aec <__aeabi_dcmplt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d04e      	beq.n	800a942 <_dtoa_r+0x24a>
 800a8a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ae:	1b5b      	subs	r3, r3, r5
 800a8b0:	1e5a      	subs	r2, r3, #1
 800a8b2:	bf45      	ittet	mi
 800a8b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8b8:	9305      	strmi	r3, [sp, #20]
 800a8ba:	2300      	movpl	r3, #0
 800a8bc:	2300      	movmi	r3, #0
 800a8be:	9206      	str	r2, [sp, #24]
 800a8c0:	bf54      	ite	pl
 800a8c2:	9305      	strpl	r3, [sp, #20]
 800a8c4:	9306      	strmi	r3, [sp, #24]
 800a8c6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ca:	db3c      	blt.n	800a946 <_dtoa_r+0x24e>
 800a8cc:	9b06      	ldr	r3, [sp, #24]
 800a8ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a8d2:	445b      	add	r3, fp
 800a8d4:	9306      	str	r3, [sp, #24]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	d868      	bhi.n	800a9b2 <_dtoa_r+0x2ba>
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	bfc4      	itt	gt
 800a8e4:	3b04      	subgt	r3, #4
 800a8e6:	9307      	strgt	r3, [sp, #28]
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a8ee:	bfcc      	ite	gt
 800a8f0:	2500      	movgt	r5, #0
 800a8f2:	2501      	movle	r5, #1
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	f200 8085 	bhi.w	800aa04 <_dtoa_r+0x30c>
 800a8fa:	e8df f003 	tbb	[pc, r3]
 800a8fe:	3b2e      	.short	0x3b2e
 800a900:	5839      	.short	0x5839
 800a902:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a906:	441d      	add	r5, r3
 800a908:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a90c:	2b20      	cmp	r3, #32
 800a90e:	bfc1      	itttt	gt
 800a910:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a914:	fa08 f803 	lslgt.w	r8, r8, r3
 800a918:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a91c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a920:	bfd6      	itet	le
 800a922:	f1c3 0320 	rsble	r3, r3, #32
 800a926:	ea48 0003 	orrgt.w	r0, r8, r3
 800a92a:	fa06 f003 	lslle.w	r0, r6, r3
 800a92e:	f7f5 fdf1 	bl	8000514 <__aeabi_ui2d>
 800a932:	2201      	movs	r2, #1
 800a934:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a938:	3d01      	subs	r5, #1
 800a93a:	920e      	str	r2, [sp, #56]	; 0x38
 800a93c:	e76f      	b.n	800a81e <_dtoa_r+0x126>
 800a93e:	2301      	movs	r3, #1
 800a940:	e7b3      	b.n	800a8aa <_dtoa_r+0x1b2>
 800a942:	900c      	str	r0, [sp, #48]	; 0x30
 800a944:	e7b2      	b.n	800a8ac <_dtoa_r+0x1b4>
 800a946:	9b05      	ldr	r3, [sp, #20]
 800a948:	eba3 030b 	sub.w	r3, r3, fp
 800a94c:	9305      	str	r3, [sp, #20]
 800a94e:	f1cb 0300 	rsb	r3, fp, #0
 800a952:	9308      	str	r3, [sp, #32]
 800a954:	2300      	movs	r3, #0
 800a956:	930b      	str	r3, [sp, #44]	; 0x2c
 800a958:	e7bf      	b.n	800a8da <_dtoa_r+0x1e2>
 800a95a:	2300      	movs	r3, #0
 800a95c:	9309      	str	r3, [sp, #36]	; 0x24
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	2b00      	cmp	r3, #0
 800a962:	dc52      	bgt.n	800aa0a <_dtoa_r+0x312>
 800a964:	2301      	movs	r3, #1
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	461a      	mov	r2, r3
 800a96c:	920a      	str	r2, [sp, #40]	; 0x28
 800a96e:	e00b      	b.n	800a988 <_dtoa_r+0x290>
 800a970:	2301      	movs	r3, #1
 800a972:	e7f3      	b.n	800a95c <_dtoa_r+0x264>
 800a974:	2300      	movs	r3, #0
 800a976:	9309      	str	r3, [sp, #36]	; 0x24
 800a978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97a:	445b      	add	r3, fp
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	3301      	adds	r3, #1
 800a980:	2b01      	cmp	r3, #1
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	bfb8      	it	lt
 800a986:	2301      	movlt	r3, #1
 800a988:	69e0      	ldr	r0, [r4, #28]
 800a98a:	2100      	movs	r1, #0
 800a98c:	2204      	movs	r2, #4
 800a98e:	f102 0614 	add.w	r6, r2, #20
 800a992:	429e      	cmp	r6, r3
 800a994:	d93d      	bls.n	800aa12 <_dtoa_r+0x31a>
 800a996:	6041      	str	r1, [r0, #4]
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fd9f 	bl	800b4dc <_Balloc>
 800a99e:	9000      	str	r0, [sp, #0]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d139      	bne.n	800aa18 <_dtoa_r+0x320>
 800a9a4:	4b16      	ldr	r3, [pc, #88]	; (800aa00 <_dtoa_r+0x308>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f240 11af 	movw	r1, #431	; 0x1af
 800a9ac:	e6bd      	b.n	800a72a <_dtoa_r+0x32>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e7e1      	b.n	800a976 <_dtoa_r+0x27e>
 800a9b2:	2501      	movs	r5, #1
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9307      	str	r3, [sp, #28]
 800a9b8:	9509      	str	r5, [sp, #36]	; 0x24
 800a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2312      	movs	r3, #18
 800a9c6:	e7d1      	b.n	800a96c <_dtoa_r+0x274>
 800a9c8:	636f4361 	.word	0x636f4361
 800a9cc:	3fd287a7 	.word	0x3fd287a7
 800a9d0:	8b60c8b3 	.word	0x8b60c8b3
 800a9d4:	3fc68a28 	.word	0x3fc68a28
 800a9d8:	509f79fb 	.word	0x509f79fb
 800a9dc:	3fd34413 	.word	0x3fd34413
 800a9e0:	0800dfce 	.word	0x0800dfce
 800a9e4:	0800dfe5 	.word	0x0800dfe5
 800a9e8:	7ff00000 	.word	0x7ff00000
 800a9ec:	0800dfca 	.word	0x0800dfca
 800a9f0:	0800dfc1 	.word	0x0800dfc1
 800a9f4:	0800df99 	.word	0x0800df99
 800a9f8:	3ff80000 	.word	0x3ff80000
 800a9fc:	0800e0d0 	.word	0x0800e0d0
 800aa00:	0800e03d 	.word	0x0800e03d
 800aa04:	2301      	movs	r3, #1
 800aa06:	9309      	str	r3, [sp, #36]	; 0x24
 800aa08:	e7d7      	b.n	800a9ba <_dtoa_r+0x2c2>
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	e7ba      	b.n	800a988 <_dtoa_r+0x290>
 800aa12:	3101      	adds	r1, #1
 800aa14:	0052      	lsls	r2, r2, #1
 800aa16:	e7ba      	b.n	800a98e <_dtoa_r+0x296>
 800aa18:	69e3      	ldr	r3, [r4, #28]
 800aa1a:	9a00      	ldr	r2, [sp, #0]
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	2b0e      	cmp	r3, #14
 800aa22:	f200 80a8 	bhi.w	800ab76 <_dtoa_r+0x47e>
 800aa26:	2d00      	cmp	r5, #0
 800aa28:	f000 80a5 	beq.w	800ab76 <_dtoa_r+0x47e>
 800aa2c:	f1bb 0f00 	cmp.w	fp, #0
 800aa30:	dd38      	ble.n	800aaa4 <_dtoa_r+0x3ac>
 800aa32:	4bc0      	ldr	r3, [pc, #768]	; (800ad34 <_dtoa_r+0x63c>)
 800aa34:	f00b 020f 	and.w	r2, fp, #15
 800aa38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa40:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa44:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aa48:	d019      	beq.n	800aa7e <_dtoa_r+0x386>
 800aa4a:	4bbb      	ldr	r3, [pc, #748]	; (800ad38 <_dtoa_r+0x640>)
 800aa4c:	ec51 0b18 	vmov	r0, r1, d8
 800aa50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa54:	f7f5 ff02 	bl	800085c <__aeabi_ddiv>
 800aa58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa5c:	f008 080f 	and.w	r8, r8, #15
 800aa60:	2503      	movs	r5, #3
 800aa62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ad38 <_dtoa_r+0x640>
 800aa66:	f1b8 0f00 	cmp.w	r8, #0
 800aa6a:	d10a      	bne.n	800aa82 <_dtoa_r+0x38a>
 800aa6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa70:	4632      	mov	r2, r6
 800aa72:	463b      	mov	r3, r7
 800aa74:	f7f5 fef2 	bl	800085c <__aeabi_ddiv>
 800aa78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa7c:	e02b      	b.n	800aad6 <_dtoa_r+0x3de>
 800aa7e:	2502      	movs	r5, #2
 800aa80:	e7ef      	b.n	800aa62 <_dtoa_r+0x36a>
 800aa82:	f018 0f01 	tst.w	r8, #1
 800aa86:	d008      	beq.n	800aa9a <_dtoa_r+0x3a2>
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa90:	f7f5 fdba 	bl	8000608 <__aeabi_dmul>
 800aa94:	3501      	adds	r5, #1
 800aa96:	4606      	mov	r6, r0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa9e:	f109 0908 	add.w	r9, r9, #8
 800aaa2:	e7e0      	b.n	800aa66 <_dtoa_r+0x36e>
 800aaa4:	f000 809f 	beq.w	800abe6 <_dtoa_r+0x4ee>
 800aaa8:	f1cb 0600 	rsb	r6, fp, #0
 800aaac:	4ba1      	ldr	r3, [pc, #644]	; (800ad34 <_dtoa_r+0x63c>)
 800aaae:	4fa2      	ldr	r7, [pc, #648]	; (800ad38 <_dtoa_r+0x640>)
 800aab0:	f006 020f 	and.w	r2, r6, #15
 800aab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	ec51 0b18 	vmov	r0, r1, d8
 800aac0:	f7f5 fda2 	bl	8000608 <__aeabi_dmul>
 800aac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac8:	1136      	asrs	r6, r6, #4
 800aaca:	2300      	movs	r3, #0
 800aacc:	2502      	movs	r5, #2
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d17e      	bne.n	800abd0 <_dtoa_r+0x4d8>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1d0      	bne.n	800aa78 <_dtoa_r+0x380>
 800aad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aad8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 8084 	beq.w	800abea <_dtoa_r+0x4f2>
 800aae2:	4b96      	ldr	r3, [pc, #600]	; (800ad3c <_dtoa_r+0x644>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	4640      	mov	r0, r8
 800aae8:	4649      	mov	r1, r9
 800aaea:	f7f5 ffff 	bl	8000aec <__aeabi_dcmplt>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d07b      	beq.n	800abea <_dtoa_r+0x4f2>
 800aaf2:	9b04      	ldr	r3, [sp, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d078      	beq.n	800abea <_dtoa_r+0x4f2>
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dd39      	ble.n	800ab72 <_dtoa_r+0x47a>
 800aafe:	4b90      	ldr	r3, [pc, #576]	; (800ad40 <_dtoa_r+0x648>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	f7f5 fd7f 	bl	8000608 <__aeabi_dmul>
 800ab0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0e:	9e01      	ldr	r6, [sp, #4]
 800ab10:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab14:	3501      	adds	r5, #1
 800ab16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f7f5 fd0a 	bl	8000534 <__aeabi_i2d>
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	f7f5 fd70 	bl	8000608 <__aeabi_dmul>
 800ab28:	4b86      	ldr	r3, [pc, #536]	; (800ad44 <_dtoa_r+0x64c>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f7f5 fbb6 	bl	800029c <__adddf3>
 800ab30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	9303      	str	r3, [sp, #12]
 800ab3a:	2e00      	cmp	r6, #0
 800ab3c:	d158      	bne.n	800abf0 <_dtoa_r+0x4f8>
 800ab3e:	4b82      	ldr	r3, [pc, #520]	; (800ad48 <_dtoa_r+0x650>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fba7 	bl	8000298 <__aeabi_dsub>
 800ab4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab4e:	4680      	mov	r8, r0
 800ab50:	4689      	mov	r9, r1
 800ab52:	f7f5 ffe9 	bl	8000b28 <__aeabi_dcmpgt>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f040 8296 	bne.w	800b088 <_dtoa_r+0x990>
 800ab5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab60:	4640      	mov	r0, r8
 800ab62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 ffc0 	bl	8000aec <__aeabi_dcmplt>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f040 8289 	bne.w	800b084 <_dtoa_r+0x98c>
 800ab72:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f2c0 814e 	blt.w	800ae1a <_dtoa_r+0x722>
 800ab7e:	f1bb 0f0e 	cmp.w	fp, #14
 800ab82:	f300 814a 	bgt.w	800ae1a <_dtoa_r+0x722>
 800ab86:	4b6b      	ldr	r3, [pc, #428]	; (800ad34 <_dtoa_r+0x63c>)
 800ab88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f280 80dc 	bge.w	800ad50 <_dtoa_r+0x658>
 800ab98:	9b04      	ldr	r3, [sp, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f300 80d8 	bgt.w	800ad50 <_dtoa_r+0x658>
 800aba0:	f040 826f 	bne.w	800b082 <_dtoa_r+0x98a>
 800aba4:	4b68      	ldr	r3, [pc, #416]	; (800ad48 <_dtoa_r+0x650>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	4640      	mov	r0, r8
 800abaa:	4649      	mov	r1, r9
 800abac:	f7f5 fd2c 	bl	8000608 <__aeabi_dmul>
 800abb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abb4:	f7f5 ffae 	bl	8000b14 <__aeabi_dcmpge>
 800abb8:	9e04      	ldr	r6, [sp, #16]
 800abba:	4637      	mov	r7, r6
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f040 8245 	bne.w	800b04c <_dtoa_r+0x954>
 800abc2:	9d00      	ldr	r5, [sp, #0]
 800abc4:	2331      	movs	r3, #49	; 0x31
 800abc6:	f805 3b01 	strb.w	r3, [r5], #1
 800abca:	f10b 0b01 	add.w	fp, fp, #1
 800abce:	e241      	b.n	800b054 <_dtoa_r+0x95c>
 800abd0:	07f2      	lsls	r2, r6, #31
 800abd2:	d505      	bpl.n	800abe0 <_dtoa_r+0x4e8>
 800abd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abd8:	f7f5 fd16 	bl	8000608 <__aeabi_dmul>
 800abdc:	3501      	adds	r5, #1
 800abde:	2301      	movs	r3, #1
 800abe0:	1076      	asrs	r6, r6, #1
 800abe2:	3708      	adds	r7, #8
 800abe4:	e773      	b.n	800aace <_dtoa_r+0x3d6>
 800abe6:	2502      	movs	r5, #2
 800abe8:	e775      	b.n	800aad6 <_dtoa_r+0x3de>
 800abea:	9e04      	ldr	r6, [sp, #16]
 800abec:	465f      	mov	r7, fp
 800abee:	e792      	b.n	800ab16 <_dtoa_r+0x41e>
 800abf0:	9900      	ldr	r1, [sp, #0]
 800abf2:	4b50      	ldr	r3, [pc, #320]	; (800ad34 <_dtoa_r+0x63c>)
 800abf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abf8:	4431      	add	r1, r6
 800abfa:	9102      	str	r1, [sp, #8]
 800abfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abfe:	eeb0 9a47 	vmov.f32	s18, s14
 800ac02:	eef0 9a67 	vmov.f32	s19, s15
 800ac06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	d044      	beq.n	800ac9c <_dtoa_r+0x5a4>
 800ac12:	494e      	ldr	r1, [pc, #312]	; (800ad4c <_dtoa_r+0x654>)
 800ac14:	2000      	movs	r0, #0
 800ac16:	f7f5 fe21 	bl	800085c <__aeabi_ddiv>
 800ac1a:	ec53 2b19 	vmov	r2, r3, d9
 800ac1e:	f7f5 fb3b 	bl	8000298 <__aeabi_dsub>
 800ac22:	9d00      	ldr	r5, [sp, #0]
 800ac24:	ec41 0b19 	vmov	d9, r0, r1
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f7f5 ff9c 	bl	8000b68 <__aeabi_d2iz>
 800ac30:	4606      	mov	r6, r0
 800ac32:	f7f5 fc7f 	bl	8000534 <__aeabi_i2d>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	f7f5 fb2b 	bl	8000298 <__aeabi_dsub>
 800ac42:	3630      	adds	r6, #48	; 0x30
 800ac44:	f805 6b01 	strb.w	r6, [r5], #1
 800ac48:	ec53 2b19 	vmov	r2, r3, d9
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4689      	mov	r9, r1
 800ac50:	f7f5 ff4c 	bl	8000aec <__aeabi_dcmplt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d164      	bne.n	800ad22 <_dtoa_r+0x62a>
 800ac58:	4642      	mov	r2, r8
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	4937      	ldr	r1, [pc, #220]	; (800ad3c <_dtoa_r+0x644>)
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f7f5 fb1a 	bl	8000298 <__aeabi_dsub>
 800ac64:	ec53 2b19 	vmov	r2, r3, d9
 800ac68:	f7f5 ff40 	bl	8000aec <__aeabi_dcmplt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f040 80b6 	bne.w	800adde <_dtoa_r+0x6e6>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	429d      	cmp	r5, r3
 800ac76:	f43f af7c 	beq.w	800ab72 <_dtoa_r+0x47a>
 800ac7a:	4b31      	ldr	r3, [pc, #196]	; (800ad40 <_dtoa_r+0x648>)
 800ac7c:	ec51 0b19 	vmov	r0, r1, d9
 800ac80:	2200      	movs	r2, #0
 800ac82:	f7f5 fcc1 	bl	8000608 <__aeabi_dmul>
 800ac86:	4b2e      	ldr	r3, [pc, #184]	; (800ad40 <_dtoa_r+0x648>)
 800ac88:	ec41 0b19 	vmov	d9, r0, r1
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4649      	mov	r1, r9
 800ac92:	f7f5 fcb9 	bl	8000608 <__aeabi_dmul>
 800ac96:	4680      	mov	r8, r0
 800ac98:	4689      	mov	r9, r1
 800ac9a:	e7c5      	b.n	800ac28 <_dtoa_r+0x530>
 800ac9c:	ec51 0b17 	vmov	r0, r1, d7
 800aca0:	f7f5 fcb2 	bl	8000608 <__aeabi_dmul>
 800aca4:	9b02      	ldr	r3, [sp, #8]
 800aca6:	9d00      	ldr	r5, [sp, #0]
 800aca8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acaa:	ec41 0b19 	vmov	d9, r0, r1
 800acae:	4649      	mov	r1, r9
 800acb0:	4640      	mov	r0, r8
 800acb2:	f7f5 ff59 	bl	8000b68 <__aeabi_d2iz>
 800acb6:	4606      	mov	r6, r0
 800acb8:	f7f5 fc3c 	bl	8000534 <__aeabi_i2d>
 800acbc:	3630      	adds	r6, #48	; 0x30
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 fae7 	bl	8000298 <__aeabi_dsub>
 800acca:	f805 6b01 	strb.w	r6, [r5], #1
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	429d      	cmp	r5, r3
 800acd2:	4680      	mov	r8, r0
 800acd4:	4689      	mov	r9, r1
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	d124      	bne.n	800ad26 <_dtoa_r+0x62e>
 800acdc:	4b1b      	ldr	r3, [pc, #108]	; (800ad4c <_dtoa_r+0x654>)
 800acde:	ec51 0b19 	vmov	r0, r1, d9
 800ace2:	f7f5 fadb 	bl	800029c <__adddf3>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 ff1b 	bl	8000b28 <__aeabi_dcmpgt>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d173      	bne.n	800adde <_dtoa_r+0x6e6>
 800acf6:	ec53 2b19 	vmov	r2, r3, d9
 800acfa:	4914      	ldr	r1, [pc, #80]	; (800ad4c <_dtoa_r+0x654>)
 800acfc:	2000      	movs	r0, #0
 800acfe:	f7f5 facb 	bl	8000298 <__aeabi_dsub>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 feef 	bl	8000aec <__aeabi_dcmplt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f43f af2f 	beq.w	800ab72 <_dtoa_r+0x47a>
 800ad14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad16:	1e6b      	subs	r3, r5, #1
 800ad18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad1e:	2b30      	cmp	r3, #48	; 0x30
 800ad20:	d0f8      	beq.n	800ad14 <_dtoa_r+0x61c>
 800ad22:	46bb      	mov	fp, r7
 800ad24:	e04a      	b.n	800adbc <_dtoa_r+0x6c4>
 800ad26:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <_dtoa_r+0x648>)
 800ad28:	f7f5 fc6e 	bl	8000608 <__aeabi_dmul>
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4689      	mov	r9, r1
 800ad30:	e7bd      	b.n	800acae <_dtoa_r+0x5b6>
 800ad32:	bf00      	nop
 800ad34:	0800e0d0 	.word	0x0800e0d0
 800ad38:	0800e0a8 	.word	0x0800e0a8
 800ad3c:	3ff00000 	.word	0x3ff00000
 800ad40:	40240000 	.word	0x40240000
 800ad44:	401c0000 	.word	0x401c0000
 800ad48:	40140000 	.word	0x40140000
 800ad4c:	3fe00000 	.word	0x3fe00000
 800ad50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad54:	9d00      	ldr	r5, [sp, #0]
 800ad56:	4642      	mov	r2, r8
 800ad58:	464b      	mov	r3, r9
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	f7f5 fd7d 	bl	800085c <__aeabi_ddiv>
 800ad62:	f7f5 ff01 	bl	8000b68 <__aeabi_d2iz>
 800ad66:	9001      	str	r0, [sp, #4]
 800ad68:	f7f5 fbe4 	bl	8000534 <__aeabi_i2d>
 800ad6c:	4642      	mov	r2, r8
 800ad6e:	464b      	mov	r3, r9
 800ad70:	f7f5 fc4a 	bl	8000608 <__aeabi_dmul>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 fa8c 	bl	8000298 <__aeabi_dsub>
 800ad80:	9e01      	ldr	r6, [sp, #4]
 800ad82:	9f04      	ldr	r7, [sp, #16]
 800ad84:	3630      	adds	r6, #48	; 0x30
 800ad86:	f805 6b01 	strb.w	r6, [r5], #1
 800ad8a:	9e00      	ldr	r6, [sp, #0]
 800ad8c:	1bae      	subs	r6, r5, r6
 800ad8e:	42b7      	cmp	r7, r6
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	d134      	bne.n	800ae00 <_dtoa_r+0x708>
 800ad96:	f7f5 fa81 	bl	800029c <__adddf3>
 800ad9a:	4642      	mov	r2, r8
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460f      	mov	r7, r1
 800ada2:	f7f5 fec1 	bl	8000b28 <__aeabi_dcmpgt>
 800ada6:	b9c8      	cbnz	r0, 800addc <_dtoa_r+0x6e4>
 800ada8:	4642      	mov	r2, r8
 800adaa:	464b      	mov	r3, r9
 800adac:	4630      	mov	r0, r6
 800adae:	4639      	mov	r1, r7
 800adb0:	f7f5 fe92 	bl	8000ad8 <__aeabi_dcmpeq>
 800adb4:	b110      	cbz	r0, 800adbc <_dtoa_r+0x6c4>
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	07db      	lsls	r3, r3, #31
 800adba:	d40f      	bmi.n	800addc <_dtoa_r+0x6e4>
 800adbc:	4651      	mov	r1, sl
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fbcc 	bl	800b55c <_Bfree>
 800adc4:	2300      	movs	r3, #0
 800adc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adc8:	702b      	strb	r3, [r5, #0]
 800adca:	f10b 0301 	add.w	r3, fp, #1
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add2:	2b00      	cmp	r3, #0
 800add4:	f43f ace2 	beq.w	800a79c <_dtoa_r+0xa4>
 800add8:	601d      	str	r5, [r3, #0]
 800adda:	e4df      	b.n	800a79c <_dtoa_r+0xa4>
 800addc:	465f      	mov	r7, fp
 800adde:	462b      	mov	r3, r5
 800ade0:	461d      	mov	r5, r3
 800ade2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ade6:	2a39      	cmp	r2, #57	; 0x39
 800ade8:	d106      	bne.n	800adf8 <_dtoa_r+0x700>
 800adea:	9a00      	ldr	r2, [sp, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d1f7      	bne.n	800ade0 <_dtoa_r+0x6e8>
 800adf0:	9900      	ldr	r1, [sp, #0]
 800adf2:	2230      	movs	r2, #48	; 0x30
 800adf4:	3701      	adds	r7, #1
 800adf6:	700a      	strb	r2, [r1, #0]
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	3201      	adds	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e790      	b.n	800ad22 <_dtoa_r+0x62a>
 800ae00:	4ba3      	ldr	r3, [pc, #652]	; (800b090 <_dtoa_r+0x998>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fc00 	bl	8000608 <__aeabi_dmul>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460f      	mov	r7, r1
 800ae10:	f7f5 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d09e      	beq.n	800ad56 <_dtoa_r+0x65e>
 800ae18:	e7d0      	b.n	800adbc <_dtoa_r+0x6c4>
 800ae1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	f000 80ca 	beq.w	800afb6 <_dtoa_r+0x8be>
 800ae22:	9a07      	ldr	r2, [sp, #28]
 800ae24:	2a01      	cmp	r2, #1
 800ae26:	f300 80ad 	bgt.w	800af84 <_dtoa_r+0x88c>
 800ae2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	f000 80a5 	beq.w	800af7c <_dtoa_r+0x884>
 800ae32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae36:	9e08      	ldr	r6, [sp, #32]
 800ae38:	9d05      	ldr	r5, [sp, #20]
 800ae3a:	9a05      	ldr	r2, [sp, #20]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	9205      	str	r2, [sp, #20]
 800ae40:	9a06      	ldr	r2, [sp, #24]
 800ae42:	2101      	movs	r1, #1
 800ae44:	441a      	add	r2, r3
 800ae46:	4620      	mov	r0, r4
 800ae48:	9206      	str	r2, [sp, #24]
 800ae4a:	f000 fc87 	bl	800b75c <__i2b>
 800ae4e:	4607      	mov	r7, r0
 800ae50:	b165      	cbz	r5, 800ae6c <_dtoa_r+0x774>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd09      	ble.n	800ae6c <_dtoa_r+0x774>
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	9a05      	ldr	r2, [sp, #20]
 800ae5c:	bfa8      	it	ge
 800ae5e:	462b      	movge	r3, r5
 800ae60:	1ad2      	subs	r2, r2, r3
 800ae62:	9205      	str	r2, [sp, #20]
 800ae64:	9a06      	ldr	r2, [sp, #24]
 800ae66:	1aed      	subs	r5, r5, r3
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	9306      	str	r3, [sp, #24]
 800ae6c:	9b08      	ldr	r3, [sp, #32]
 800ae6e:	b1f3      	cbz	r3, 800aeae <_dtoa_r+0x7b6>
 800ae70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 80a3 	beq.w	800afbe <_dtoa_r+0x8c6>
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	dd10      	ble.n	800ae9e <_dtoa_r+0x7a6>
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4632      	mov	r2, r6
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fd2b 	bl	800b8dc <__pow5mult>
 800ae86:	4652      	mov	r2, sl
 800ae88:	4601      	mov	r1, r0
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f000 fc7b 	bl	800b788 <__multiply>
 800ae92:	4651      	mov	r1, sl
 800ae94:	4680      	mov	r8, r0
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 fb60 	bl	800b55c <_Bfree>
 800ae9c:	46c2      	mov	sl, r8
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	1b9a      	subs	r2, r3, r6
 800aea2:	d004      	beq.n	800aeae <_dtoa_r+0x7b6>
 800aea4:	4651      	mov	r1, sl
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 fd18 	bl	800b8dc <__pow5mult>
 800aeac:	4682      	mov	sl, r0
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fc53 	bl	800b75c <__i2b>
 800aeb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	4606      	mov	r6, r0
 800aebc:	f340 8081 	ble.w	800afc2 <_dtoa_r+0x8ca>
 800aec0:	461a      	mov	r2, r3
 800aec2:	4601      	mov	r1, r0
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fd09 	bl	800b8dc <__pow5mult>
 800aeca:	9b07      	ldr	r3, [sp, #28]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	4606      	mov	r6, r0
 800aed0:	dd7a      	ble.n	800afc8 <_dtoa_r+0x8d0>
 800aed2:	f04f 0800 	mov.w	r8, #0
 800aed6:	6933      	ldr	r3, [r6, #16]
 800aed8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aedc:	6918      	ldr	r0, [r3, #16]
 800aede:	f000 fbef 	bl	800b6c0 <__hi0bits>
 800aee2:	f1c0 0020 	rsb	r0, r0, #32
 800aee6:	9b06      	ldr	r3, [sp, #24]
 800aee8:	4418      	add	r0, r3
 800aeea:	f010 001f 	ands.w	r0, r0, #31
 800aeee:	f000 8094 	beq.w	800b01a <_dtoa_r+0x922>
 800aef2:	f1c0 0320 	rsb	r3, r0, #32
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	f340 8085 	ble.w	800b006 <_dtoa_r+0x90e>
 800aefc:	9b05      	ldr	r3, [sp, #20]
 800aefe:	f1c0 001c 	rsb	r0, r0, #28
 800af02:	4403      	add	r3, r0
 800af04:	9305      	str	r3, [sp, #20]
 800af06:	9b06      	ldr	r3, [sp, #24]
 800af08:	4403      	add	r3, r0
 800af0a:	4405      	add	r5, r0
 800af0c:	9306      	str	r3, [sp, #24]
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dd05      	ble.n	800af20 <_dtoa_r+0x828>
 800af14:	4651      	mov	r1, sl
 800af16:	461a      	mov	r2, r3
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fd39 	bl	800b990 <__lshift>
 800af1e:	4682      	mov	sl, r0
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	dd05      	ble.n	800af32 <_dtoa_r+0x83a>
 800af26:	4631      	mov	r1, r6
 800af28:	461a      	mov	r2, r3
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fd30 	bl	800b990 <__lshift>
 800af30:	4606      	mov	r6, r0
 800af32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	d072      	beq.n	800b01e <_dtoa_r+0x926>
 800af38:	4631      	mov	r1, r6
 800af3a:	4650      	mov	r0, sl
 800af3c:	f000 fd94 	bl	800ba68 <__mcmp>
 800af40:	2800      	cmp	r0, #0
 800af42:	da6c      	bge.n	800b01e <_dtoa_r+0x926>
 800af44:	2300      	movs	r3, #0
 800af46:	4651      	mov	r1, sl
 800af48:	220a      	movs	r2, #10
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fb28 	bl	800b5a0 <__multadd>
 800af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af56:	4682      	mov	sl, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 81b0 	beq.w	800b2be <_dtoa_r+0xbc6>
 800af5e:	2300      	movs	r3, #0
 800af60:	4639      	mov	r1, r7
 800af62:	220a      	movs	r2, #10
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fb1b 	bl	800b5a0 <__multadd>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	4607      	mov	r7, r0
 800af70:	f300 8096 	bgt.w	800b0a0 <_dtoa_r+0x9a8>
 800af74:	9b07      	ldr	r3, [sp, #28]
 800af76:	2b02      	cmp	r3, #2
 800af78:	dc59      	bgt.n	800b02e <_dtoa_r+0x936>
 800af7a:	e091      	b.n	800b0a0 <_dtoa_r+0x9a8>
 800af7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af82:	e758      	b.n	800ae36 <_dtoa_r+0x73e>
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	1e5e      	subs	r6, r3, #1
 800af88:	9b08      	ldr	r3, [sp, #32]
 800af8a:	42b3      	cmp	r3, r6
 800af8c:	bfbf      	itttt	lt
 800af8e:	9b08      	ldrlt	r3, [sp, #32]
 800af90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800af92:	9608      	strlt	r6, [sp, #32]
 800af94:	1af3      	sublt	r3, r6, r3
 800af96:	bfb4      	ite	lt
 800af98:	18d2      	addlt	r2, r2, r3
 800af9a:	1b9e      	subge	r6, r3, r6
 800af9c:	9b04      	ldr	r3, [sp, #16]
 800af9e:	bfbc      	itt	lt
 800afa0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800afa2:	2600      	movlt	r6, #0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfb7      	itett	lt
 800afa8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800afac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800afb0:	1a9d      	sublt	r5, r3, r2
 800afb2:	2300      	movlt	r3, #0
 800afb4:	e741      	b.n	800ae3a <_dtoa_r+0x742>
 800afb6:	9e08      	ldr	r6, [sp, #32]
 800afb8:	9d05      	ldr	r5, [sp, #20]
 800afba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afbc:	e748      	b.n	800ae50 <_dtoa_r+0x758>
 800afbe:	9a08      	ldr	r2, [sp, #32]
 800afc0:	e770      	b.n	800aea4 <_dtoa_r+0x7ac>
 800afc2:	9b07      	ldr	r3, [sp, #28]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	dc19      	bgt.n	800affc <_dtoa_r+0x904>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	b9bb      	cbnz	r3, 800affc <_dtoa_r+0x904>
 800afcc:	9b03      	ldr	r3, [sp, #12]
 800afce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd2:	b99b      	cbnz	r3, 800affc <_dtoa_r+0x904>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afda:	0d1b      	lsrs	r3, r3, #20
 800afdc:	051b      	lsls	r3, r3, #20
 800afde:	b183      	cbz	r3, 800b002 <_dtoa_r+0x90a>
 800afe0:	9b05      	ldr	r3, [sp, #20]
 800afe2:	3301      	adds	r3, #1
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	3301      	adds	r3, #1
 800afea:	9306      	str	r3, [sp, #24]
 800afec:	f04f 0801 	mov.w	r8, #1
 800aff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f47f af6f 	bne.w	800aed6 <_dtoa_r+0x7de>
 800aff8:	2001      	movs	r0, #1
 800affa:	e774      	b.n	800aee6 <_dtoa_r+0x7ee>
 800affc:	f04f 0800 	mov.w	r8, #0
 800b000:	e7f6      	b.n	800aff0 <_dtoa_r+0x8f8>
 800b002:	4698      	mov	r8, r3
 800b004:	e7f4      	b.n	800aff0 <_dtoa_r+0x8f8>
 800b006:	d082      	beq.n	800af0e <_dtoa_r+0x816>
 800b008:	9a05      	ldr	r2, [sp, #20]
 800b00a:	331c      	adds	r3, #28
 800b00c:	441a      	add	r2, r3
 800b00e:	9205      	str	r2, [sp, #20]
 800b010:	9a06      	ldr	r2, [sp, #24]
 800b012:	441a      	add	r2, r3
 800b014:	441d      	add	r5, r3
 800b016:	9206      	str	r2, [sp, #24]
 800b018:	e779      	b.n	800af0e <_dtoa_r+0x816>
 800b01a:	4603      	mov	r3, r0
 800b01c:	e7f4      	b.n	800b008 <_dtoa_r+0x910>
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	dc37      	bgt.n	800b094 <_dtoa_r+0x99c>
 800b024:	9b07      	ldr	r3, [sp, #28]
 800b026:	2b02      	cmp	r3, #2
 800b028:	dd34      	ble.n	800b094 <_dtoa_r+0x99c>
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	9b01      	ldr	r3, [sp, #4]
 800b030:	b963      	cbnz	r3, 800b04c <_dtoa_r+0x954>
 800b032:	4631      	mov	r1, r6
 800b034:	2205      	movs	r2, #5
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fab2 	bl	800b5a0 <__multadd>
 800b03c:	4601      	mov	r1, r0
 800b03e:	4606      	mov	r6, r0
 800b040:	4650      	mov	r0, sl
 800b042:	f000 fd11 	bl	800ba68 <__mcmp>
 800b046:	2800      	cmp	r0, #0
 800b048:	f73f adbb 	bgt.w	800abc2 <_dtoa_r+0x4ca>
 800b04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b04e:	9d00      	ldr	r5, [sp, #0]
 800b050:	ea6f 0b03 	mvn.w	fp, r3
 800b054:	f04f 0800 	mov.w	r8, #0
 800b058:	4631      	mov	r1, r6
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fa7e 	bl	800b55c <_Bfree>
 800b060:	2f00      	cmp	r7, #0
 800b062:	f43f aeab 	beq.w	800adbc <_dtoa_r+0x6c4>
 800b066:	f1b8 0f00 	cmp.w	r8, #0
 800b06a:	d005      	beq.n	800b078 <_dtoa_r+0x980>
 800b06c:	45b8      	cmp	r8, r7
 800b06e:	d003      	beq.n	800b078 <_dtoa_r+0x980>
 800b070:	4641      	mov	r1, r8
 800b072:	4620      	mov	r0, r4
 800b074:	f000 fa72 	bl	800b55c <_Bfree>
 800b078:	4639      	mov	r1, r7
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fa6e 	bl	800b55c <_Bfree>
 800b080:	e69c      	b.n	800adbc <_dtoa_r+0x6c4>
 800b082:	2600      	movs	r6, #0
 800b084:	4637      	mov	r7, r6
 800b086:	e7e1      	b.n	800b04c <_dtoa_r+0x954>
 800b088:	46bb      	mov	fp, r7
 800b08a:	4637      	mov	r7, r6
 800b08c:	e599      	b.n	800abc2 <_dtoa_r+0x4ca>
 800b08e:	bf00      	nop
 800b090:	40240000 	.word	0x40240000
 800b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 80c8 	beq.w	800b22c <_dtoa_r+0xb34>
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	dd05      	ble.n	800b0b0 <_dtoa_r+0x9b8>
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fc71 	bl	800b990 <__lshift>
 800b0ae:	4607      	mov	r7, r0
 800b0b0:	f1b8 0f00 	cmp.w	r8, #0
 800b0b4:	d05b      	beq.n	800b16e <_dtoa_r+0xa76>
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fa0f 	bl	800b4dc <_Balloc>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b928      	cbnz	r0, 800b0ce <_dtoa_r+0x9d6>
 800b0c2:	4b83      	ldr	r3, [pc, #524]	; (800b2d0 <_dtoa_r+0xbd8>)
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b0ca:	f7ff bb2e 	b.w	800a72a <_dtoa_r+0x32>
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	3202      	adds	r2, #2
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	f107 010c 	add.w	r1, r7, #12
 800b0d8:	300c      	adds	r0, #12
 800b0da:	f7ff fa70 	bl	800a5be <memcpy>
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 fc54 	bl	800b990 <__lshift>
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	9308      	str	r3, [sp, #32]
 800b0f6:	9b02      	ldr	r3, [sp, #8]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	46b8      	mov	r8, r7
 800b0fe:	9306      	str	r3, [sp, #24]
 800b100:	4607      	mov	r7, r0
 800b102:	9b04      	ldr	r3, [sp, #16]
 800b104:	4631      	mov	r1, r6
 800b106:	3b01      	subs	r3, #1
 800b108:	4650      	mov	r0, sl
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	f7ff fa6c 	bl	800a5e8 <quorem>
 800b110:	4641      	mov	r1, r8
 800b112:	9002      	str	r0, [sp, #8]
 800b114:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b118:	4650      	mov	r0, sl
 800b11a:	f000 fca5 	bl	800ba68 <__mcmp>
 800b11e:	463a      	mov	r2, r7
 800b120:	9005      	str	r0, [sp, #20]
 800b122:	4631      	mov	r1, r6
 800b124:	4620      	mov	r0, r4
 800b126:	f000 fcbb 	bl	800baa0 <__mdiff>
 800b12a:	68c2      	ldr	r2, [r0, #12]
 800b12c:	4605      	mov	r5, r0
 800b12e:	bb02      	cbnz	r2, 800b172 <_dtoa_r+0xa7a>
 800b130:	4601      	mov	r1, r0
 800b132:	4650      	mov	r0, sl
 800b134:	f000 fc98 	bl	800ba68 <__mcmp>
 800b138:	4602      	mov	r2, r0
 800b13a:	4629      	mov	r1, r5
 800b13c:	4620      	mov	r0, r4
 800b13e:	9209      	str	r2, [sp, #36]	; 0x24
 800b140:	f000 fa0c 	bl	800b55c <_Bfree>
 800b144:	9b07      	ldr	r3, [sp, #28]
 800b146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b148:	9d04      	ldr	r5, [sp, #16]
 800b14a:	ea43 0102 	orr.w	r1, r3, r2
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	4319      	orrs	r1, r3
 800b152:	d110      	bne.n	800b176 <_dtoa_r+0xa7e>
 800b154:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b158:	d029      	beq.n	800b1ae <_dtoa_r+0xab6>
 800b15a:	9b05      	ldr	r3, [sp, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dd02      	ble.n	800b166 <_dtoa_r+0xa6e>
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	f883 9000 	strb.w	r9, [r3]
 800b16c:	e774      	b.n	800b058 <_dtoa_r+0x960>
 800b16e:	4638      	mov	r0, r7
 800b170:	e7ba      	b.n	800b0e8 <_dtoa_r+0x9f0>
 800b172:	2201      	movs	r2, #1
 800b174:	e7e1      	b.n	800b13a <_dtoa_r+0xa42>
 800b176:	9b05      	ldr	r3, [sp, #20]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	db04      	blt.n	800b186 <_dtoa_r+0xa8e>
 800b17c:	9907      	ldr	r1, [sp, #28]
 800b17e:	430b      	orrs	r3, r1
 800b180:	9906      	ldr	r1, [sp, #24]
 800b182:	430b      	orrs	r3, r1
 800b184:	d120      	bne.n	800b1c8 <_dtoa_r+0xad0>
 800b186:	2a00      	cmp	r2, #0
 800b188:	dded      	ble.n	800b166 <_dtoa_r+0xa6e>
 800b18a:	4651      	mov	r1, sl
 800b18c:	2201      	movs	r2, #1
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fbfe 	bl	800b990 <__lshift>
 800b194:	4631      	mov	r1, r6
 800b196:	4682      	mov	sl, r0
 800b198:	f000 fc66 	bl	800ba68 <__mcmp>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	dc03      	bgt.n	800b1a8 <_dtoa_r+0xab0>
 800b1a0:	d1e1      	bne.n	800b166 <_dtoa_r+0xa6e>
 800b1a2:	f019 0f01 	tst.w	r9, #1
 800b1a6:	d0de      	beq.n	800b166 <_dtoa_r+0xa6e>
 800b1a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1ac:	d1d8      	bne.n	800b160 <_dtoa_r+0xa68>
 800b1ae:	9a01      	ldr	r2, [sp, #4]
 800b1b0:	2339      	movs	r3, #57	; 0x39
 800b1b2:	7013      	strb	r3, [r2, #0]
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	461d      	mov	r5, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1be:	2a39      	cmp	r2, #57	; 0x39
 800b1c0:	d06c      	beq.n	800b29c <_dtoa_r+0xba4>
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e747      	b.n	800b058 <_dtoa_r+0x960>
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	dd07      	ble.n	800b1dc <_dtoa_r+0xae4>
 800b1cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1d0:	d0ed      	beq.n	800b1ae <_dtoa_r+0xab6>
 800b1d2:	9a01      	ldr	r2, [sp, #4]
 800b1d4:	f109 0301 	add.w	r3, r9, #1
 800b1d8:	7013      	strb	r3, [r2, #0]
 800b1da:	e73d      	b.n	800b058 <_dtoa_r+0x960>
 800b1dc:	9b04      	ldr	r3, [sp, #16]
 800b1de:	9a08      	ldr	r2, [sp, #32]
 800b1e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d043      	beq.n	800b270 <_dtoa_r+0xb78>
 800b1e8:	4651      	mov	r1, sl
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	220a      	movs	r2, #10
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 f9d6 	bl	800b5a0 <__multadd>
 800b1f4:	45b8      	cmp	r8, r7
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	f04f 0300 	mov.w	r3, #0
 800b1fc:	f04f 020a 	mov.w	r2, #10
 800b200:	4641      	mov	r1, r8
 800b202:	4620      	mov	r0, r4
 800b204:	d107      	bne.n	800b216 <_dtoa_r+0xb1e>
 800b206:	f000 f9cb 	bl	800b5a0 <__multadd>
 800b20a:	4680      	mov	r8, r0
 800b20c:	4607      	mov	r7, r0
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	3301      	adds	r3, #1
 800b212:	9304      	str	r3, [sp, #16]
 800b214:	e775      	b.n	800b102 <_dtoa_r+0xa0a>
 800b216:	f000 f9c3 	bl	800b5a0 <__multadd>
 800b21a:	4639      	mov	r1, r7
 800b21c:	4680      	mov	r8, r0
 800b21e:	2300      	movs	r3, #0
 800b220:	220a      	movs	r2, #10
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f9bc 	bl	800b5a0 <__multadd>
 800b228:	4607      	mov	r7, r0
 800b22a:	e7f0      	b.n	800b20e <_dtoa_r+0xb16>
 800b22c:	9b04      	ldr	r3, [sp, #16]
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	9d00      	ldr	r5, [sp, #0]
 800b232:	4631      	mov	r1, r6
 800b234:	4650      	mov	r0, sl
 800b236:	f7ff f9d7 	bl	800a5e8 <quorem>
 800b23a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	f805 9b01 	strb.w	r9, [r5], #1
 800b244:	1aea      	subs	r2, r5, r3
 800b246:	9b01      	ldr	r3, [sp, #4]
 800b248:	4293      	cmp	r3, r2
 800b24a:	dd07      	ble.n	800b25c <_dtoa_r+0xb64>
 800b24c:	4651      	mov	r1, sl
 800b24e:	2300      	movs	r3, #0
 800b250:	220a      	movs	r2, #10
 800b252:	4620      	mov	r0, r4
 800b254:	f000 f9a4 	bl	800b5a0 <__multadd>
 800b258:	4682      	mov	sl, r0
 800b25a:	e7ea      	b.n	800b232 <_dtoa_r+0xb3a>
 800b25c:	9b01      	ldr	r3, [sp, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfc8      	it	gt
 800b262:	461d      	movgt	r5, r3
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	bfd8      	it	le
 800b268:	2501      	movle	r5, #1
 800b26a:	441d      	add	r5, r3
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	4651      	mov	r1, sl
 800b272:	2201      	movs	r2, #1
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fb8b 	bl	800b990 <__lshift>
 800b27a:	4631      	mov	r1, r6
 800b27c:	4682      	mov	sl, r0
 800b27e:	f000 fbf3 	bl	800ba68 <__mcmp>
 800b282:	2800      	cmp	r0, #0
 800b284:	dc96      	bgt.n	800b1b4 <_dtoa_r+0xabc>
 800b286:	d102      	bne.n	800b28e <_dtoa_r+0xb96>
 800b288:	f019 0f01 	tst.w	r9, #1
 800b28c:	d192      	bne.n	800b1b4 <_dtoa_r+0xabc>
 800b28e:	462b      	mov	r3, r5
 800b290:	461d      	mov	r5, r3
 800b292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b296:	2a30      	cmp	r2, #48	; 0x30
 800b298:	d0fa      	beq.n	800b290 <_dtoa_r+0xb98>
 800b29a:	e6dd      	b.n	800b058 <_dtoa_r+0x960>
 800b29c:	9a00      	ldr	r2, [sp, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d189      	bne.n	800b1b6 <_dtoa_r+0xabe>
 800b2a2:	f10b 0b01 	add.w	fp, fp, #1
 800b2a6:	2331      	movs	r3, #49	; 0x31
 800b2a8:	e796      	b.n	800b1d8 <_dtoa_r+0xae0>
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <_dtoa_r+0xbdc>)
 800b2ac:	f7ff ba99 	b.w	800a7e2 <_dtoa_r+0xea>
 800b2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f47f aa6d 	bne.w	800a792 <_dtoa_r+0x9a>
 800b2b8:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <_dtoa_r+0xbe0>)
 800b2ba:	f7ff ba92 	b.w	800a7e2 <_dtoa_r+0xea>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dcb5      	bgt.n	800b230 <_dtoa_r+0xb38>
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	f73f aeb1 	bgt.w	800b02e <_dtoa_r+0x936>
 800b2cc:	e7b0      	b.n	800b230 <_dtoa_r+0xb38>
 800b2ce:	bf00      	nop
 800b2d0:	0800e03d 	.word	0x0800e03d
 800b2d4:	0800df98 	.word	0x0800df98
 800b2d8:	0800dfc1 	.word	0x0800dfc1

0800b2dc <_free_r>:
 800b2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d044      	beq.n	800b36c <_free_r+0x90>
 800b2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e6:	9001      	str	r0, [sp, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ee:	bfb8      	it	lt
 800b2f0:	18e4      	addlt	r4, r4, r3
 800b2f2:	f000 f8e7 	bl	800b4c4 <__malloc_lock>
 800b2f6:	4a1e      	ldr	r2, [pc, #120]	; (800b370 <_free_r+0x94>)
 800b2f8:	9801      	ldr	r0, [sp, #4]
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	b933      	cbnz	r3, 800b30c <_free_r+0x30>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b308:	f000 b8e2 	b.w	800b4d0 <__malloc_unlock>
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d908      	bls.n	800b322 <_free_r+0x46>
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	1961      	adds	r1, r4, r5
 800b314:	428b      	cmp	r3, r1
 800b316:	bf01      	itttt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	1949      	addeq	r1, r1, r5
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	e7ed      	b.n	800b2fe <_free_r+0x22>
 800b322:	461a      	mov	r2, r3
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b10b      	cbz	r3, 800b32c <_free_r+0x50>
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x46>
 800b32c:	6811      	ldr	r1, [r2, #0]
 800b32e:	1855      	adds	r5, r2, r1
 800b330:	42a5      	cmp	r5, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x70>
 800b334:	6824      	ldr	r4, [r4, #0]
 800b336:	4421      	add	r1, r4
 800b338:	1854      	adds	r4, r2, r1
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	d1e0      	bne.n	800b302 <_free_r+0x26>
 800b340:	681c      	ldr	r4, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	6053      	str	r3, [r2, #4]
 800b346:	440c      	add	r4, r1
 800b348:	6014      	str	r4, [r2, #0]
 800b34a:	e7da      	b.n	800b302 <_free_r+0x26>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x78>
 800b34e:	230c      	movs	r3, #12
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	e7d6      	b.n	800b302 <_free_r+0x26>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	1961      	adds	r1, r4, r5
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf04      	itt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	bf04      	itt	eq
 800b364:	1949      	addeq	r1, r1, r5
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	6054      	str	r4, [r2, #4]
 800b36a:	e7ca      	b.n	800b302 <_free_r+0x26>
 800b36c:	b003      	add	sp, #12
 800b36e:	bd30      	pop	{r4, r5, pc}
 800b370:	200018d0 	.word	0x200018d0

0800b374 <malloc>:
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <malloc+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f000 b823 	b.w	800b3c4 <_malloc_r>
 800b37e:	bf00      	nop
 800b380:	20000080 	.word	0x20000080

0800b384 <sbrk_aligned>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4e0e      	ldr	r6, [pc, #56]	; (800b3c0 <sbrk_aligned+0x3c>)
 800b388:	460c      	mov	r4, r1
 800b38a:	6831      	ldr	r1, [r6, #0]
 800b38c:	4605      	mov	r5, r0
 800b38e:	b911      	cbnz	r1, 800b396 <sbrk_aligned+0x12>
 800b390:	f001 fe1a 	bl	800cfc8 <_sbrk_r>
 800b394:	6030      	str	r0, [r6, #0]
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f001 fe15 	bl	800cfc8 <_sbrk_r>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	d00a      	beq.n	800b3b8 <sbrk_aligned+0x34>
 800b3a2:	1cc4      	adds	r4, r0, #3
 800b3a4:	f024 0403 	bic.w	r4, r4, #3
 800b3a8:	42a0      	cmp	r0, r4
 800b3aa:	d007      	beq.n	800b3bc <sbrk_aligned+0x38>
 800b3ac:	1a21      	subs	r1, r4, r0
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f001 fe0a 	bl	800cfc8 <_sbrk_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	d101      	bne.n	800b3bc <sbrk_aligned+0x38>
 800b3b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b3bc:	4620      	mov	r0, r4
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	200018d4 	.word	0x200018d4

0800b3c4 <_malloc_r>:
 800b3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	1ccd      	adds	r5, r1, #3
 800b3ca:	f025 0503 	bic.w	r5, r5, #3
 800b3ce:	3508      	adds	r5, #8
 800b3d0:	2d0c      	cmp	r5, #12
 800b3d2:	bf38      	it	cc
 800b3d4:	250c      	movcc	r5, #12
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	4607      	mov	r7, r0
 800b3da:	db01      	blt.n	800b3e0 <_malloc_r+0x1c>
 800b3dc:	42a9      	cmp	r1, r5
 800b3de:	d905      	bls.n	800b3ec <_malloc_r+0x28>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4c0 <_malloc_r+0xfc>
 800b3f0:	f000 f868 	bl	800b4c4 <__malloc_lock>
 800b3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f8:	461c      	mov	r4, r3
 800b3fa:	bb5c      	cbnz	r4, 800b454 <_malloc_r+0x90>
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4638      	mov	r0, r7
 800b400:	f7ff ffc0 	bl	800b384 <sbrk_aligned>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	4604      	mov	r4, r0
 800b408:	d155      	bne.n	800b4b6 <_malloc_r+0xf2>
 800b40a:	f8d8 4000 	ldr.w	r4, [r8]
 800b40e:	4626      	mov	r6, r4
 800b410:	2e00      	cmp	r6, #0
 800b412:	d145      	bne.n	800b4a0 <_malloc_r+0xdc>
 800b414:	2c00      	cmp	r4, #0
 800b416:	d048      	beq.n	800b4aa <_malloc_r+0xe6>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	4631      	mov	r1, r6
 800b41c:	4638      	mov	r0, r7
 800b41e:	eb04 0903 	add.w	r9, r4, r3
 800b422:	f001 fdd1 	bl	800cfc8 <_sbrk_r>
 800b426:	4581      	cmp	r9, r0
 800b428:	d13f      	bne.n	800b4aa <_malloc_r+0xe6>
 800b42a:	6821      	ldr	r1, [r4, #0]
 800b42c:	1a6d      	subs	r5, r5, r1
 800b42e:	4629      	mov	r1, r5
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff ffa7 	bl	800b384 <sbrk_aligned>
 800b436:	3001      	adds	r0, #1
 800b438:	d037      	beq.n	800b4aa <_malloc_r+0xe6>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	442b      	add	r3, r5
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	f8d8 3000 	ldr.w	r3, [r8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d038      	beq.n	800b4ba <_malloc_r+0xf6>
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	42a2      	cmp	r2, r4
 800b44c:	d12b      	bne.n	800b4a6 <_malloc_r+0xe2>
 800b44e:	2200      	movs	r2, #0
 800b450:	605a      	str	r2, [r3, #4]
 800b452:	e00f      	b.n	800b474 <_malloc_r+0xb0>
 800b454:	6822      	ldr	r2, [r4, #0]
 800b456:	1b52      	subs	r2, r2, r5
 800b458:	d41f      	bmi.n	800b49a <_malloc_r+0xd6>
 800b45a:	2a0b      	cmp	r2, #11
 800b45c:	d917      	bls.n	800b48e <_malloc_r+0xca>
 800b45e:	1961      	adds	r1, r4, r5
 800b460:	42a3      	cmp	r3, r4
 800b462:	6025      	str	r5, [r4, #0]
 800b464:	bf18      	it	ne
 800b466:	6059      	strne	r1, [r3, #4]
 800b468:	6863      	ldr	r3, [r4, #4]
 800b46a:	bf08      	it	eq
 800b46c:	f8c8 1000 	streq.w	r1, [r8]
 800b470:	5162      	str	r2, [r4, r5]
 800b472:	604b      	str	r3, [r1, #4]
 800b474:	4638      	mov	r0, r7
 800b476:	f104 060b 	add.w	r6, r4, #11
 800b47a:	f000 f829 	bl	800b4d0 <__malloc_unlock>
 800b47e:	f026 0607 	bic.w	r6, r6, #7
 800b482:	1d23      	adds	r3, r4, #4
 800b484:	1af2      	subs	r2, r6, r3
 800b486:	d0ae      	beq.n	800b3e6 <_malloc_r+0x22>
 800b488:	1b9b      	subs	r3, r3, r6
 800b48a:	50a3      	str	r3, [r4, r2]
 800b48c:	e7ab      	b.n	800b3e6 <_malloc_r+0x22>
 800b48e:	42a3      	cmp	r3, r4
 800b490:	6862      	ldr	r2, [r4, #4]
 800b492:	d1dd      	bne.n	800b450 <_malloc_r+0x8c>
 800b494:	f8c8 2000 	str.w	r2, [r8]
 800b498:	e7ec      	b.n	800b474 <_malloc_r+0xb0>
 800b49a:	4623      	mov	r3, r4
 800b49c:	6864      	ldr	r4, [r4, #4]
 800b49e:	e7ac      	b.n	800b3fa <_malloc_r+0x36>
 800b4a0:	4634      	mov	r4, r6
 800b4a2:	6876      	ldr	r6, [r6, #4]
 800b4a4:	e7b4      	b.n	800b410 <_malloc_r+0x4c>
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	e7cc      	b.n	800b444 <_malloc_r+0x80>
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	f000 f80e 	bl	800b4d0 <__malloc_unlock>
 800b4b4:	e797      	b.n	800b3e6 <_malloc_r+0x22>
 800b4b6:	6025      	str	r5, [r4, #0]
 800b4b8:	e7dc      	b.n	800b474 <_malloc_r+0xb0>
 800b4ba:	605b      	str	r3, [r3, #4]
 800b4bc:	deff      	udf	#255	; 0xff
 800b4be:	bf00      	nop
 800b4c0:	200018d0 	.word	0x200018d0

0800b4c4 <__malloc_lock>:
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <__malloc_lock+0x8>)
 800b4c6:	f7ff b878 	b.w	800a5ba <__retarget_lock_acquire_recursive>
 800b4ca:	bf00      	nop
 800b4cc:	200018cc 	.word	0x200018cc

0800b4d0 <__malloc_unlock>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <__malloc_unlock+0x8>)
 800b4d2:	f7ff b873 	b.w	800a5bc <__retarget_lock_release_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	200018cc 	.word	0x200018cc

0800b4dc <_Balloc>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	69c6      	ldr	r6, [r0, #28]
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	b976      	cbnz	r6, 800b504 <_Balloc+0x28>
 800b4e6:	2010      	movs	r0, #16
 800b4e8:	f7ff ff44 	bl	800b374 <malloc>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	61e0      	str	r0, [r4, #28]
 800b4f0:	b920      	cbnz	r0, 800b4fc <_Balloc+0x20>
 800b4f2:	4b18      	ldr	r3, [pc, #96]	; (800b554 <_Balloc+0x78>)
 800b4f4:	4818      	ldr	r0, [pc, #96]	; (800b558 <_Balloc+0x7c>)
 800b4f6:	216b      	movs	r1, #107	; 0x6b
 800b4f8:	f001 fd7e 	bl	800cff8 <__assert_func>
 800b4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b500:	6006      	str	r6, [r0, #0]
 800b502:	60c6      	str	r6, [r0, #12]
 800b504:	69e6      	ldr	r6, [r4, #28]
 800b506:	68f3      	ldr	r3, [r6, #12]
 800b508:	b183      	cbz	r3, 800b52c <_Balloc+0x50>
 800b50a:	69e3      	ldr	r3, [r4, #28]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b512:	b9b8      	cbnz	r0, 800b544 <_Balloc+0x68>
 800b514:	2101      	movs	r1, #1
 800b516:	fa01 f605 	lsl.w	r6, r1, r5
 800b51a:	1d72      	adds	r2, r6, #5
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	4620      	mov	r0, r4
 800b520:	f001 fd88 	bl	800d034 <_calloc_r>
 800b524:	b160      	cbz	r0, 800b540 <_Balloc+0x64>
 800b526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b52a:	e00e      	b.n	800b54a <_Balloc+0x6e>
 800b52c:	2221      	movs	r2, #33	; 0x21
 800b52e:	2104      	movs	r1, #4
 800b530:	4620      	mov	r0, r4
 800b532:	f001 fd7f 	bl	800d034 <_calloc_r>
 800b536:	69e3      	ldr	r3, [r4, #28]
 800b538:	60f0      	str	r0, [r6, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1e4      	bne.n	800b50a <_Balloc+0x2e>
 800b540:	2000      	movs	r0, #0
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	6802      	ldr	r2, [r0, #0]
 800b546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b54a:	2300      	movs	r3, #0
 800b54c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b550:	e7f7      	b.n	800b542 <_Balloc+0x66>
 800b552:	bf00      	nop
 800b554:	0800dfce 	.word	0x0800dfce
 800b558:	0800e04e 	.word	0x0800e04e

0800b55c <_Bfree>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	69c6      	ldr	r6, [r0, #28]
 800b560:	4605      	mov	r5, r0
 800b562:	460c      	mov	r4, r1
 800b564:	b976      	cbnz	r6, 800b584 <_Bfree+0x28>
 800b566:	2010      	movs	r0, #16
 800b568:	f7ff ff04 	bl	800b374 <malloc>
 800b56c:	4602      	mov	r2, r0
 800b56e:	61e8      	str	r0, [r5, #28]
 800b570:	b920      	cbnz	r0, 800b57c <_Bfree+0x20>
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <_Bfree+0x3c>)
 800b574:	4809      	ldr	r0, [pc, #36]	; (800b59c <_Bfree+0x40>)
 800b576:	218f      	movs	r1, #143	; 0x8f
 800b578:	f001 fd3e 	bl	800cff8 <__assert_func>
 800b57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b580:	6006      	str	r6, [r0, #0]
 800b582:	60c6      	str	r6, [r0, #12]
 800b584:	b13c      	cbz	r4, 800b596 <_Bfree+0x3a>
 800b586:	69eb      	ldr	r3, [r5, #28]
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b590:	6021      	str	r1, [r4, #0]
 800b592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	0800dfce 	.word	0x0800dfce
 800b59c:	0800e04e 	.word	0x0800e04e

0800b5a0 <__multadd>:
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	690d      	ldr	r5, [r1, #16]
 800b5a6:	4607      	mov	r7, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	f101 0c14 	add.w	ip, r1, #20
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	f8dc 3000 	ldr.w	r3, [ip]
 800b5b6:	b299      	uxth	r1, r3
 800b5b8:	fb02 6101 	mla	r1, r2, r1, r6
 800b5bc:	0c1e      	lsrs	r6, r3, #16
 800b5be:	0c0b      	lsrs	r3, r1, #16
 800b5c0:	fb02 3306 	mla	r3, r2, r6, r3
 800b5c4:	b289      	uxth	r1, r1
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5cc:	4285      	cmp	r5, r0
 800b5ce:	f84c 1b04 	str.w	r1, [ip], #4
 800b5d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5d6:	dcec      	bgt.n	800b5b2 <__multadd+0x12>
 800b5d8:	b30e      	cbz	r6, 800b61e <__multadd+0x7e>
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	42ab      	cmp	r3, r5
 800b5de:	dc19      	bgt.n	800b614 <__multadd+0x74>
 800b5e0:	6861      	ldr	r1, [r4, #4]
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	3101      	adds	r1, #1
 800b5e6:	f7ff ff79 	bl	800b4dc <_Balloc>
 800b5ea:	4680      	mov	r8, r0
 800b5ec:	b928      	cbnz	r0, 800b5fa <__multadd+0x5a>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	; (800b624 <__multadd+0x84>)
 800b5f2:	480d      	ldr	r0, [pc, #52]	; (800b628 <__multadd+0x88>)
 800b5f4:	21ba      	movs	r1, #186	; 0xba
 800b5f6:	f001 fcff 	bl	800cff8 <__assert_func>
 800b5fa:	6922      	ldr	r2, [r4, #16]
 800b5fc:	3202      	adds	r2, #2
 800b5fe:	f104 010c 	add.w	r1, r4, #12
 800b602:	0092      	lsls	r2, r2, #2
 800b604:	300c      	adds	r0, #12
 800b606:	f7fe ffda 	bl	800a5be <memcpy>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4638      	mov	r0, r7
 800b60e:	f7ff ffa5 	bl	800b55c <_Bfree>
 800b612:	4644      	mov	r4, r8
 800b614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b618:	3501      	adds	r5, #1
 800b61a:	615e      	str	r6, [r3, #20]
 800b61c:	6125      	str	r5, [r4, #16]
 800b61e:	4620      	mov	r0, r4
 800b620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b624:	0800e03d 	.word	0x0800e03d
 800b628:	0800e04e 	.word	0x0800e04e

0800b62c <__s2b>:
 800b62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b630:	460c      	mov	r4, r1
 800b632:	4615      	mov	r5, r2
 800b634:	461f      	mov	r7, r3
 800b636:	2209      	movs	r2, #9
 800b638:	3308      	adds	r3, #8
 800b63a:	4606      	mov	r6, r0
 800b63c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b640:	2100      	movs	r1, #0
 800b642:	2201      	movs	r2, #1
 800b644:	429a      	cmp	r2, r3
 800b646:	db09      	blt.n	800b65c <__s2b+0x30>
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff ff47 	bl	800b4dc <_Balloc>
 800b64e:	b940      	cbnz	r0, 800b662 <__s2b+0x36>
 800b650:	4602      	mov	r2, r0
 800b652:	4b19      	ldr	r3, [pc, #100]	; (800b6b8 <__s2b+0x8c>)
 800b654:	4819      	ldr	r0, [pc, #100]	; (800b6bc <__s2b+0x90>)
 800b656:	21d3      	movs	r1, #211	; 0xd3
 800b658:	f001 fcce 	bl	800cff8 <__assert_func>
 800b65c:	0052      	lsls	r2, r2, #1
 800b65e:	3101      	adds	r1, #1
 800b660:	e7f0      	b.n	800b644 <__s2b+0x18>
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	6143      	str	r3, [r0, #20]
 800b666:	2d09      	cmp	r5, #9
 800b668:	f04f 0301 	mov.w	r3, #1
 800b66c:	6103      	str	r3, [r0, #16]
 800b66e:	dd16      	ble.n	800b69e <__s2b+0x72>
 800b670:	f104 0909 	add.w	r9, r4, #9
 800b674:	46c8      	mov	r8, r9
 800b676:	442c      	add	r4, r5
 800b678:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b67c:	4601      	mov	r1, r0
 800b67e:	3b30      	subs	r3, #48	; 0x30
 800b680:	220a      	movs	r2, #10
 800b682:	4630      	mov	r0, r6
 800b684:	f7ff ff8c 	bl	800b5a0 <__multadd>
 800b688:	45a0      	cmp	r8, r4
 800b68a:	d1f5      	bne.n	800b678 <__s2b+0x4c>
 800b68c:	f1a5 0408 	sub.w	r4, r5, #8
 800b690:	444c      	add	r4, r9
 800b692:	1b2d      	subs	r5, r5, r4
 800b694:	1963      	adds	r3, r4, r5
 800b696:	42bb      	cmp	r3, r7
 800b698:	db04      	blt.n	800b6a4 <__s2b+0x78>
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	340a      	adds	r4, #10
 800b6a0:	2509      	movs	r5, #9
 800b6a2:	e7f6      	b.n	800b692 <__s2b+0x66>
 800b6a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	3b30      	subs	r3, #48	; 0x30
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f7ff ff76 	bl	800b5a0 <__multadd>
 800b6b4:	e7ee      	b.n	800b694 <__s2b+0x68>
 800b6b6:	bf00      	nop
 800b6b8:	0800e03d 	.word	0x0800e03d
 800b6bc:	0800e04e 	.word	0x0800e04e

0800b6c0 <__hi0bits>:
 800b6c0:	0c03      	lsrs	r3, r0, #16
 800b6c2:	041b      	lsls	r3, r3, #16
 800b6c4:	b9d3      	cbnz	r3, 800b6fc <__hi0bits+0x3c>
 800b6c6:	0400      	lsls	r0, r0, #16
 800b6c8:	2310      	movs	r3, #16
 800b6ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6ce:	bf04      	itt	eq
 800b6d0:	0200      	lsleq	r0, r0, #8
 800b6d2:	3308      	addeq	r3, #8
 800b6d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6d8:	bf04      	itt	eq
 800b6da:	0100      	lsleq	r0, r0, #4
 800b6dc:	3304      	addeq	r3, #4
 800b6de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6e2:	bf04      	itt	eq
 800b6e4:	0080      	lsleq	r0, r0, #2
 800b6e6:	3302      	addeq	r3, #2
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	db05      	blt.n	800b6f8 <__hi0bits+0x38>
 800b6ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6f0:	f103 0301 	add.w	r3, r3, #1
 800b6f4:	bf08      	it	eq
 800b6f6:	2320      	moveq	r3, #32
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	4770      	bx	lr
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	e7e4      	b.n	800b6ca <__hi0bits+0xa>

0800b700 <__lo0bits>:
 800b700:	6803      	ldr	r3, [r0, #0]
 800b702:	f013 0207 	ands.w	r2, r3, #7
 800b706:	d00c      	beq.n	800b722 <__lo0bits+0x22>
 800b708:	07d9      	lsls	r1, r3, #31
 800b70a:	d422      	bmi.n	800b752 <__lo0bits+0x52>
 800b70c:	079a      	lsls	r2, r3, #30
 800b70e:	bf49      	itett	mi
 800b710:	085b      	lsrmi	r3, r3, #1
 800b712:	089b      	lsrpl	r3, r3, #2
 800b714:	6003      	strmi	r3, [r0, #0]
 800b716:	2201      	movmi	r2, #1
 800b718:	bf5c      	itt	pl
 800b71a:	6003      	strpl	r3, [r0, #0]
 800b71c:	2202      	movpl	r2, #2
 800b71e:	4610      	mov	r0, r2
 800b720:	4770      	bx	lr
 800b722:	b299      	uxth	r1, r3
 800b724:	b909      	cbnz	r1, 800b72a <__lo0bits+0x2a>
 800b726:	0c1b      	lsrs	r3, r3, #16
 800b728:	2210      	movs	r2, #16
 800b72a:	b2d9      	uxtb	r1, r3
 800b72c:	b909      	cbnz	r1, 800b732 <__lo0bits+0x32>
 800b72e:	3208      	adds	r2, #8
 800b730:	0a1b      	lsrs	r3, r3, #8
 800b732:	0719      	lsls	r1, r3, #28
 800b734:	bf04      	itt	eq
 800b736:	091b      	lsreq	r3, r3, #4
 800b738:	3204      	addeq	r2, #4
 800b73a:	0799      	lsls	r1, r3, #30
 800b73c:	bf04      	itt	eq
 800b73e:	089b      	lsreq	r3, r3, #2
 800b740:	3202      	addeq	r2, #2
 800b742:	07d9      	lsls	r1, r3, #31
 800b744:	d403      	bmi.n	800b74e <__lo0bits+0x4e>
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	f102 0201 	add.w	r2, r2, #1
 800b74c:	d003      	beq.n	800b756 <__lo0bits+0x56>
 800b74e:	6003      	str	r3, [r0, #0]
 800b750:	e7e5      	b.n	800b71e <__lo0bits+0x1e>
 800b752:	2200      	movs	r2, #0
 800b754:	e7e3      	b.n	800b71e <__lo0bits+0x1e>
 800b756:	2220      	movs	r2, #32
 800b758:	e7e1      	b.n	800b71e <__lo0bits+0x1e>
	...

0800b75c <__i2b>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	460c      	mov	r4, r1
 800b760:	2101      	movs	r1, #1
 800b762:	f7ff febb 	bl	800b4dc <_Balloc>
 800b766:	4602      	mov	r2, r0
 800b768:	b928      	cbnz	r0, 800b776 <__i2b+0x1a>
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <__i2b+0x24>)
 800b76c:	4805      	ldr	r0, [pc, #20]	; (800b784 <__i2b+0x28>)
 800b76e:	f240 1145 	movw	r1, #325	; 0x145
 800b772:	f001 fc41 	bl	800cff8 <__assert_func>
 800b776:	2301      	movs	r3, #1
 800b778:	6144      	str	r4, [r0, #20]
 800b77a:	6103      	str	r3, [r0, #16]
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	bf00      	nop
 800b780:	0800e03d 	.word	0x0800e03d
 800b784:	0800e04e 	.word	0x0800e04e

0800b788 <__multiply>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	4691      	mov	r9, r2
 800b78e:	690a      	ldr	r2, [r1, #16]
 800b790:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b794:	429a      	cmp	r2, r3
 800b796:	bfb8      	it	lt
 800b798:	460b      	movlt	r3, r1
 800b79a:	460c      	mov	r4, r1
 800b79c:	bfbc      	itt	lt
 800b79e:	464c      	movlt	r4, r9
 800b7a0:	4699      	movlt	r9, r3
 800b7a2:	6927      	ldr	r7, [r4, #16]
 800b7a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	6861      	ldr	r1, [r4, #4]
 800b7ac:	eb07 060a 	add.w	r6, r7, sl
 800b7b0:	42b3      	cmp	r3, r6
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	bfb8      	it	lt
 800b7b6:	3101      	addlt	r1, #1
 800b7b8:	f7ff fe90 	bl	800b4dc <_Balloc>
 800b7bc:	b930      	cbnz	r0, 800b7cc <__multiply+0x44>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	4b44      	ldr	r3, [pc, #272]	; (800b8d4 <__multiply+0x14c>)
 800b7c2:	4845      	ldr	r0, [pc, #276]	; (800b8d8 <__multiply+0x150>)
 800b7c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7c8:	f001 fc16 	bl	800cff8 <__assert_func>
 800b7cc:	f100 0514 	add.w	r5, r0, #20
 800b7d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	4543      	cmp	r3, r8
 800b7da:	d321      	bcc.n	800b820 <__multiply+0x98>
 800b7dc:	f104 0314 	add.w	r3, r4, #20
 800b7e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7e4:	f109 0314 	add.w	r3, r9, #20
 800b7e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7ec:	9202      	str	r2, [sp, #8]
 800b7ee:	1b3a      	subs	r2, r7, r4
 800b7f0:	3a15      	subs	r2, #21
 800b7f2:	f022 0203 	bic.w	r2, r2, #3
 800b7f6:	3204      	adds	r2, #4
 800b7f8:	f104 0115 	add.w	r1, r4, #21
 800b7fc:	428f      	cmp	r7, r1
 800b7fe:	bf38      	it	cc
 800b800:	2204      	movcc	r2, #4
 800b802:	9201      	str	r2, [sp, #4]
 800b804:	9a02      	ldr	r2, [sp, #8]
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d80c      	bhi.n	800b826 <__multiply+0x9e>
 800b80c:	2e00      	cmp	r6, #0
 800b80e:	dd03      	ble.n	800b818 <__multiply+0x90>
 800b810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b814:	2b00      	cmp	r3, #0
 800b816:	d05b      	beq.n	800b8d0 <__multiply+0x148>
 800b818:	6106      	str	r6, [r0, #16]
 800b81a:	b005      	add	sp, #20
 800b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b820:	f843 2b04 	str.w	r2, [r3], #4
 800b824:	e7d8      	b.n	800b7d8 <__multiply+0x50>
 800b826:	f8b3 a000 	ldrh.w	sl, [r3]
 800b82a:	f1ba 0f00 	cmp.w	sl, #0
 800b82e:	d024      	beq.n	800b87a <__multiply+0xf2>
 800b830:	f104 0e14 	add.w	lr, r4, #20
 800b834:	46a9      	mov	r9, r5
 800b836:	f04f 0c00 	mov.w	ip, #0
 800b83a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b83e:	f8d9 1000 	ldr.w	r1, [r9]
 800b842:	fa1f fb82 	uxth.w	fp, r2
 800b846:	b289      	uxth	r1, r1
 800b848:	fb0a 110b 	mla	r1, sl, fp, r1
 800b84c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b850:	f8d9 2000 	ldr.w	r2, [r9]
 800b854:	4461      	add	r1, ip
 800b856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b85a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b85e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b862:	b289      	uxth	r1, r1
 800b864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b868:	4577      	cmp	r7, lr
 800b86a:	f849 1b04 	str.w	r1, [r9], #4
 800b86e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b872:	d8e2      	bhi.n	800b83a <__multiply+0xb2>
 800b874:	9a01      	ldr	r2, [sp, #4]
 800b876:	f845 c002 	str.w	ip, [r5, r2]
 800b87a:	9a03      	ldr	r2, [sp, #12]
 800b87c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b880:	3304      	adds	r3, #4
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	d021      	beq.n	800b8cc <__multiply+0x144>
 800b888:	6829      	ldr	r1, [r5, #0]
 800b88a:	f104 0c14 	add.w	ip, r4, #20
 800b88e:	46ae      	mov	lr, r5
 800b890:	f04f 0a00 	mov.w	sl, #0
 800b894:	f8bc b000 	ldrh.w	fp, [ip]
 800b898:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b89c:	fb09 220b 	mla	r2, r9, fp, r2
 800b8a0:	4452      	add	r2, sl
 800b8a2:	b289      	uxth	r1, r1
 800b8a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8a8:	f84e 1b04 	str.w	r1, [lr], #4
 800b8ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8b4:	f8be 1000 	ldrh.w	r1, [lr]
 800b8b8:	fb09 110a 	mla	r1, r9, sl, r1
 800b8bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8c0:	4567      	cmp	r7, ip
 800b8c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8c6:	d8e5      	bhi.n	800b894 <__multiply+0x10c>
 800b8c8:	9a01      	ldr	r2, [sp, #4]
 800b8ca:	50a9      	str	r1, [r5, r2]
 800b8cc:	3504      	adds	r5, #4
 800b8ce:	e799      	b.n	800b804 <__multiply+0x7c>
 800b8d0:	3e01      	subs	r6, #1
 800b8d2:	e79b      	b.n	800b80c <__multiply+0x84>
 800b8d4:	0800e03d 	.word	0x0800e03d
 800b8d8:	0800e04e 	.word	0x0800e04e

0800b8dc <__pow5mult>:
 800b8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	4615      	mov	r5, r2
 800b8e2:	f012 0203 	ands.w	r2, r2, #3
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	d007      	beq.n	800b8fc <__pow5mult+0x20>
 800b8ec:	4c25      	ldr	r4, [pc, #148]	; (800b984 <__pow5mult+0xa8>)
 800b8ee:	3a01      	subs	r2, #1
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8f6:	f7ff fe53 	bl	800b5a0 <__multadd>
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	10ad      	asrs	r5, r5, #2
 800b8fe:	d03d      	beq.n	800b97c <__pow5mult+0xa0>
 800b900:	69f4      	ldr	r4, [r6, #28]
 800b902:	b97c      	cbnz	r4, 800b924 <__pow5mult+0x48>
 800b904:	2010      	movs	r0, #16
 800b906:	f7ff fd35 	bl	800b374 <malloc>
 800b90a:	4602      	mov	r2, r0
 800b90c:	61f0      	str	r0, [r6, #28]
 800b90e:	b928      	cbnz	r0, 800b91c <__pow5mult+0x40>
 800b910:	4b1d      	ldr	r3, [pc, #116]	; (800b988 <__pow5mult+0xac>)
 800b912:	481e      	ldr	r0, [pc, #120]	; (800b98c <__pow5mult+0xb0>)
 800b914:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b918:	f001 fb6e 	bl	800cff8 <__assert_func>
 800b91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b920:	6004      	str	r4, [r0, #0]
 800b922:	60c4      	str	r4, [r0, #12]
 800b924:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b92c:	b94c      	cbnz	r4, 800b942 <__pow5mult+0x66>
 800b92e:	f240 2171 	movw	r1, #625	; 0x271
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ff12 	bl	800b75c <__i2b>
 800b938:	2300      	movs	r3, #0
 800b93a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b93e:	4604      	mov	r4, r0
 800b940:	6003      	str	r3, [r0, #0]
 800b942:	f04f 0900 	mov.w	r9, #0
 800b946:	07eb      	lsls	r3, r5, #31
 800b948:	d50a      	bpl.n	800b960 <__pow5mult+0x84>
 800b94a:	4639      	mov	r1, r7
 800b94c:	4622      	mov	r2, r4
 800b94e:	4630      	mov	r0, r6
 800b950:	f7ff ff1a 	bl	800b788 <__multiply>
 800b954:	4639      	mov	r1, r7
 800b956:	4680      	mov	r8, r0
 800b958:	4630      	mov	r0, r6
 800b95a:	f7ff fdff 	bl	800b55c <_Bfree>
 800b95e:	4647      	mov	r7, r8
 800b960:	106d      	asrs	r5, r5, #1
 800b962:	d00b      	beq.n	800b97c <__pow5mult+0xa0>
 800b964:	6820      	ldr	r0, [r4, #0]
 800b966:	b938      	cbnz	r0, 800b978 <__pow5mult+0x9c>
 800b968:	4622      	mov	r2, r4
 800b96a:	4621      	mov	r1, r4
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff ff0b 	bl	800b788 <__multiply>
 800b972:	6020      	str	r0, [r4, #0]
 800b974:	f8c0 9000 	str.w	r9, [r0]
 800b978:	4604      	mov	r4, r0
 800b97a:	e7e4      	b.n	800b946 <__pow5mult+0x6a>
 800b97c:	4638      	mov	r0, r7
 800b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b982:	bf00      	nop
 800b984:	0800e198 	.word	0x0800e198
 800b988:	0800dfce 	.word	0x0800dfce
 800b98c:	0800e04e 	.word	0x0800e04e

0800b990 <__lshift>:
 800b990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b994:	460c      	mov	r4, r1
 800b996:	6849      	ldr	r1, [r1, #4]
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	4691      	mov	r9, r2
 800b9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9a8:	f108 0601 	add.w	r6, r8, #1
 800b9ac:	42b3      	cmp	r3, r6
 800b9ae:	db0b      	blt.n	800b9c8 <__lshift+0x38>
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f7ff fd93 	bl	800b4dc <_Balloc>
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	b948      	cbnz	r0, 800b9ce <__lshift+0x3e>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	4b28      	ldr	r3, [pc, #160]	; (800ba60 <__lshift+0xd0>)
 800b9be:	4829      	ldr	r0, [pc, #164]	; (800ba64 <__lshift+0xd4>)
 800b9c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9c4:	f001 fb18 	bl	800cff8 <__assert_func>
 800b9c8:	3101      	adds	r1, #1
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	e7ee      	b.n	800b9ac <__lshift+0x1c>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f100 0114 	add.w	r1, r0, #20
 800b9d4:	f100 0210 	add.w	r2, r0, #16
 800b9d8:	4618      	mov	r0, r3
 800b9da:	4553      	cmp	r3, sl
 800b9dc:	db33      	blt.n	800ba46 <__lshift+0xb6>
 800b9de:	6920      	ldr	r0, [r4, #16]
 800b9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9e4:	f104 0314 	add.w	r3, r4, #20
 800b9e8:	f019 091f 	ands.w	r9, r9, #31
 800b9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9f4:	d02b      	beq.n	800ba4e <__lshift+0xbe>
 800b9f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b9fa:	468a      	mov	sl, r1
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	fa00 f009 	lsl.w	r0, r0, r9
 800ba04:	4310      	orrs	r0, r2
 800ba06:	f84a 0b04 	str.w	r0, [sl], #4
 800ba0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0e:	459c      	cmp	ip, r3
 800ba10:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba14:	d8f3      	bhi.n	800b9fe <__lshift+0x6e>
 800ba16:	ebac 0304 	sub.w	r3, ip, r4
 800ba1a:	3b15      	subs	r3, #21
 800ba1c:	f023 0303 	bic.w	r3, r3, #3
 800ba20:	3304      	adds	r3, #4
 800ba22:	f104 0015 	add.w	r0, r4, #21
 800ba26:	4584      	cmp	ip, r0
 800ba28:	bf38      	it	cc
 800ba2a:	2304      	movcc	r3, #4
 800ba2c:	50ca      	str	r2, [r1, r3]
 800ba2e:	b10a      	cbz	r2, 800ba34 <__lshift+0xa4>
 800ba30:	f108 0602 	add.w	r6, r8, #2
 800ba34:	3e01      	subs	r6, #1
 800ba36:	4638      	mov	r0, r7
 800ba38:	612e      	str	r6, [r5, #16]
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	f7ff fd8e 	bl	800b55c <_Bfree>
 800ba40:	4628      	mov	r0, r5
 800ba42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	e7c5      	b.n	800b9da <__lshift+0x4a>
 800ba4e:	3904      	subs	r1, #4
 800ba50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba58:	459c      	cmp	ip, r3
 800ba5a:	d8f9      	bhi.n	800ba50 <__lshift+0xc0>
 800ba5c:	e7ea      	b.n	800ba34 <__lshift+0xa4>
 800ba5e:	bf00      	nop
 800ba60:	0800e03d 	.word	0x0800e03d
 800ba64:	0800e04e 	.word	0x0800e04e

0800ba68 <__mcmp>:
 800ba68:	b530      	push	{r4, r5, lr}
 800ba6a:	6902      	ldr	r2, [r0, #16]
 800ba6c:	690c      	ldr	r4, [r1, #16]
 800ba6e:	1b12      	subs	r2, r2, r4
 800ba70:	d10e      	bne.n	800ba90 <__mcmp+0x28>
 800ba72:	f100 0314 	add.w	r3, r0, #20
 800ba76:	3114      	adds	r1, #20
 800ba78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba88:	42a5      	cmp	r5, r4
 800ba8a:	d003      	beq.n	800ba94 <__mcmp+0x2c>
 800ba8c:	d305      	bcc.n	800ba9a <__mcmp+0x32>
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4610      	mov	r0, r2
 800ba92:	bd30      	pop	{r4, r5, pc}
 800ba94:	4283      	cmp	r3, r0
 800ba96:	d3f3      	bcc.n	800ba80 <__mcmp+0x18>
 800ba98:	e7fa      	b.n	800ba90 <__mcmp+0x28>
 800ba9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9e:	e7f7      	b.n	800ba90 <__mcmp+0x28>

0800baa0 <__mdiff>:
 800baa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	460c      	mov	r4, r1
 800baa6:	4606      	mov	r6, r0
 800baa8:	4611      	mov	r1, r2
 800baaa:	4620      	mov	r0, r4
 800baac:	4690      	mov	r8, r2
 800baae:	f7ff ffdb 	bl	800ba68 <__mcmp>
 800bab2:	1e05      	subs	r5, r0, #0
 800bab4:	d110      	bne.n	800bad8 <__mdiff+0x38>
 800bab6:	4629      	mov	r1, r5
 800bab8:	4630      	mov	r0, r6
 800baba:	f7ff fd0f 	bl	800b4dc <_Balloc>
 800babe:	b930      	cbnz	r0, 800bace <__mdiff+0x2e>
 800bac0:	4b3a      	ldr	r3, [pc, #232]	; (800bbac <__mdiff+0x10c>)
 800bac2:	4602      	mov	r2, r0
 800bac4:	f240 2137 	movw	r1, #567	; 0x237
 800bac8:	4839      	ldr	r0, [pc, #228]	; (800bbb0 <__mdiff+0x110>)
 800baca:	f001 fa95 	bl	800cff8 <__assert_func>
 800bace:	2301      	movs	r3, #1
 800bad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad8:	bfa4      	itt	ge
 800bada:	4643      	movge	r3, r8
 800badc:	46a0      	movge	r8, r4
 800bade:	4630      	mov	r0, r6
 800bae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bae4:	bfa6      	itte	ge
 800bae6:	461c      	movge	r4, r3
 800bae8:	2500      	movge	r5, #0
 800baea:	2501      	movlt	r5, #1
 800baec:	f7ff fcf6 	bl	800b4dc <_Balloc>
 800baf0:	b920      	cbnz	r0, 800bafc <__mdiff+0x5c>
 800baf2:	4b2e      	ldr	r3, [pc, #184]	; (800bbac <__mdiff+0x10c>)
 800baf4:	4602      	mov	r2, r0
 800baf6:	f240 2145 	movw	r1, #581	; 0x245
 800bafa:	e7e5      	b.n	800bac8 <__mdiff+0x28>
 800bafc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb00:	6926      	ldr	r6, [r4, #16]
 800bb02:	60c5      	str	r5, [r0, #12]
 800bb04:	f104 0914 	add.w	r9, r4, #20
 800bb08:	f108 0514 	add.w	r5, r8, #20
 800bb0c:	f100 0e14 	add.w	lr, r0, #20
 800bb10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb18:	f108 0210 	add.w	r2, r8, #16
 800bb1c:	46f2      	mov	sl, lr
 800bb1e:	2100      	movs	r1, #0
 800bb20:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb28:	fa11 f88b 	uxtah	r8, r1, fp
 800bb2c:	b299      	uxth	r1, r3
 800bb2e:	0c1b      	lsrs	r3, r3, #16
 800bb30:	eba8 0801 	sub.w	r8, r8, r1
 800bb34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb3c:	fa1f f888 	uxth.w	r8, r8
 800bb40:	1419      	asrs	r1, r3, #16
 800bb42:	454e      	cmp	r6, r9
 800bb44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb48:	f84a 3b04 	str.w	r3, [sl], #4
 800bb4c:	d8e8      	bhi.n	800bb20 <__mdiff+0x80>
 800bb4e:	1b33      	subs	r3, r6, r4
 800bb50:	3b15      	subs	r3, #21
 800bb52:	f023 0303 	bic.w	r3, r3, #3
 800bb56:	3304      	adds	r3, #4
 800bb58:	3415      	adds	r4, #21
 800bb5a:	42a6      	cmp	r6, r4
 800bb5c:	bf38      	it	cc
 800bb5e:	2304      	movcc	r3, #4
 800bb60:	441d      	add	r5, r3
 800bb62:	4473      	add	r3, lr
 800bb64:	469e      	mov	lr, r3
 800bb66:	462e      	mov	r6, r5
 800bb68:	4566      	cmp	r6, ip
 800bb6a:	d30e      	bcc.n	800bb8a <__mdiff+0xea>
 800bb6c:	f10c 0203 	add.w	r2, ip, #3
 800bb70:	1b52      	subs	r2, r2, r5
 800bb72:	f022 0203 	bic.w	r2, r2, #3
 800bb76:	3d03      	subs	r5, #3
 800bb78:	45ac      	cmp	ip, r5
 800bb7a:	bf38      	it	cc
 800bb7c:	2200      	movcc	r2, #0
 800bb7e:	4413      	add	r3, r2
 800bb80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb84:	b17a      	cbz	r2, 800bba6 <__mdiff+0x106>
 800bb86:	6107      	str	r7, [r0, #16]
 800bb88:	e7a4      	b.n	800bad4 <__mdiff+0x34>
 800bb8a:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb8e:	fa11 f288 	uxtah	r2, r1, r8
 800bb92:	1414      	asrs	r4, r2, #16
 800bb94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb98:	b292      	uxth	r2, r2
 800bb9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb9e:	f84e 2b04 	str.w	r2, [lr], #4
 800bba2:	1421      	asrs	r1, r4, #16
 800bba4:	e7e0      	b.n	800bb68 <__mdiff+0xc8>
 800bba6:	3f01      	subs	r7, #1
 800bba8:	e7ea      	b.n	800bb80 <__mdiff+0xe0>
 800bbaa:	bf00      	nop
 800bbac:	0800e03d 	.word	0x0800e03d
 800bbb0:	0800e04e 	.word	0x0800e04e

0800bbb4 <__ulp>:
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	ed8d 0b00 	vstr	d0, [sp]
 800bbba:	9a01      	ldr	r2, [sp, #4]
 800bbbc:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <__ulp+0x48>)
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	dc08      	bgt.n	800bbda <__ulp+0x26>
 800bbc8:	425b      	negs	r3, r3
 800bbca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bbce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbd2:	da04      	bge.n	800bbde <__ulp+0x2a>
 800bbd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbd8:	4113      	asrs	r3, r2
 800bbda:	2200      	movs	r2, #0
 800bbdc:	e008      	b.n	800bbf0 <__ulp+0x3c>
 800bbde:	f1a2 0314 	sub.w	r3, r2, #20
 800bbe2:	2b1e      	cmp	r3, #30
 800bbe4:	bfda      	itte	le
 800bbe6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bbea:	40da      	lsrle	r2, r3
 800bbec:	2201      	movgt	r2, #1
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	ec41 0b10 	vmov	d0, r0, r1
 800bbf8:	b002      	add	sp, #8
 800bbfa:	4770      	bx	lr
 800bbfc:	7ff00000 	.word	0x7ff00000

0800bc00 <__b2d>:
 800bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc04:	6906      	ldr	r6, [r0, #16]
 800bc06:	f100 0814 	add.w	r8, r0, #20
 800bc0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bc0e:	1f37      	subs	r7, r6, #4
 800bc10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7ff fd53 	bl	800b6c0 <__hi0bits>
 800bc1a:	f1c0 0320 	rsb	r3, r0, #32
 800bc1e:	280a      	cmp	r0, #10
 800bc20:	600b      	str	r3, [r1, #0]
 800bc22:	491b      	ldr	r1, [pc, #108]	; (800bc90 <__b2d+0x90>)
 800bc24:	dc15      	bgt.n	800bc52 <__b2d+0x52>
 800bc26:	f1c0 0c0b 	rsb	ip, r0, #11
 800bc2a:	fa22 f30c 	lsr.w	r3, r2, ip
 800bc2e:	45b8      	cmp	r8, r7
 800bc30:	ea43 0501 	orr.w	r5, r3, r1
 800bc34:	bf34      	ite	cc
 800bc36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc3a:	2300      	movcs	r3, #0
 800bc3c:	3015      	adds	r0, #21
 800bc3e:	fa02 f000 	lsl.w	r0, r2, r0
 800bc42:	fa23 f30c 	lsr.w	r3, r3, ip
 800bc46:	4303      	orrs	r3, r0
 800bc48:	461c      	mov	r4, r3
 800bc4a:	ec45 4b10 	vmov	d0, r4, r5
 800bc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc52:	45b8      	cmp	r8, r7
 800bc54:	bf3a      	itte	cc
 800bc56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bc5a:	f1a6 0708 	subcc.w	r7, r6, #8
 800bc5e:	2300      	movcs	r3, #0
 800bc60:	380b      	subs	r0, #11
 800bc62:	d012      	beq.n	800bc8a <__b2d+0x8a>
 800bc64:	f1c0 0120 	rsb	r1, r0, #32
 800bc68:	fa23 f401 	lsr.w	r4, r3, r1
 800bc6c:	4082      	lsls	r2, r0
 800bc6e:	4322      	orrs	r2, r4
 800bc70:	4547      	cmp	r7, r8
 800bc72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bc76:	bf8c      	ite	hi
 800bc78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc7c:	2200      	movls	r2, #0
 800bc7e:	4083      	lsls	r3, r0
 800bc80:	40ca      	lsrs	r2, r1
 800bc82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc86:	4313      	orrs	r3, r2
 800bc88:	e7de      	b.n	800bc48 <__b2d+0x48>
 800bc8a:	ea42 0501 	orr.w	r5, r2, r1
 800bc8e:	e7db      	b.n	800bc48 <__b2d+0x48>
 800bc90:	3ff00000 	.word	0x3ff00000

0800bc94 <__d2b>:
 800bc94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc98:	460f      	mov	r7, r1
 800bc9a:	2101      	movs	r1, #1
 800bc9c:	ec59 8b10 	vmov	r8, r9, d0
 800bca0:	4616      	mov	r6, r2
 800bca2:	f7ff fc1b 	bl	800b4dc <_Balloc>
 800bca6:	4604      	mov	r4, r0
 800bca8:	b930      	cbnz	r0, 800bcb8 <__d2b+0x24>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <__d2b+0xac>)
 800bcae:	4825      	ldr	r0, [pc, #148]	; (800bd44 <__d2b+0xb0>)
 800bcb0:	f240 310f 	movw	r1, #783	; 0x30f
 800bcb4:	f001 f9a0 	bl	800cff8 <__assert_func>
 800bcb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcc0:	bb2d      	cbnz	r5, 800bd0e <__d2b+0x7a>
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	f1b8 0300 	subs.w	r3, r8, #0
 800bcc8:	d026      	beq.n	800bd18 <__d2b+0x84>
 800bcca:	4668      	mov	r0, sp
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	f7ff fd17 	bl	800b700 <__lo0bits>
 800bcd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcd6:	b1e8      	cbz	r0, 800bd14 <__d2b+0x80>
 800bcd8:	f1c0 0320 	rsb	r3, r0, #32
 800bcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bce0:	430b      	orrs	r3, r1
 800bce2:	40c2      	lsrs	r2, r0
 800bce4:	6163      	str	r3, [r4, #20]
 800bce6:	9201      	str	r2, [sp, #4]
 800bce8:	9b01      	ldr	r3, [sp, #4]
 800bcea:	61a3      	str	r3, [r4, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	bf14      	ite	ne
 800bcf0:	2202      	movne	r2, #2
 800bcf2:	2201      	moveq	r2, #1
 800bcf4:	6122      	str	r2, [r4, #16]
 800bcf6:	b1bd      	cbz	r5, 800bd28 <__d2b+0x94>
 800bcf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcfc:	4405      	add	r5, r0
 800bcfe:	603d      	str	r5, [r7, #0]
 800bd00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd04:	6030      	str	r0, [r6, #0]
 800bd06:	4620      	mov	r0, r4
 800bd08:	b003      	add	sp, #12
 800bd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd12:	e7d6      	b.n	800bcc2 <__d2b+0x2e>
 800bd14:	6161      	str	r1, [r4, #20]
 800bd16:	e7e7      	b.n	800bce8 <__d2b+0x54>
 800bd18:	a801      	add	r0, sp, #4
 800bd1a:	f7ff fcf1 	bl	800b700 <__lo0bits>
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	6163      	str	r3, [r4, #20]
 800bd22:	3020      	adds	r0, #32
 800bd24:	2201      	movs	r2, #1
 800bd26:	e7e5      	b.n	800bcf4 <__d2b+0x60>
 800bd28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd30:	6038      	str	r0, [r7, #0]
 800bd32:	6918      	ldr	r0, [r3, #16]
 800bd34:	f7ff fcc4 	bl	800b6c0 <__hi0bits>
 800bd38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd3c:	e7e2      	b.n	800bd04 <__d2b+0x70>
 800bd3e:	bf00      	nop
 800bd40:	0800e03d 	.word	0x0800e03d
 800bd44:	0800e04e 	.word	0x0800e04e

0800bd48 <__ratio>:
 800bd48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	4688      	mov	r8, r1
 800bd4e:	4669      	mov	r1, sp
 800bd50:	4681      	mov	r9, r0
 800bd52:	f7ff ff55 	bl	800bc00 <__b2d>
 800bd56:	a901      	add	r1, sp, #4
 800bd58:	4640      	mov	r0, r8
 800bd5a:	ec55 4b10 	vmov	r4, r5, d0
 800bd5e:	f7ff ff4f 	bl	800bc00 <__b2d>
 800bd62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bd6a:	eba3 0c02 	sub.w	ip, r3, r2
 800bd6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd72:	1a9b      	subs	r3, r3, r2
 800bd74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd78:	ec51 0b10 	vmov	r0, r1, d0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfd6      	itet	le
 800bd80:	460a      	movle	r2, r1
 800bd82:	462a      	movgt	r2, r5
 800bd84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd88:	468b      	mov	fp, r1
 800bd8a:	462f      	mov	r7, r5
 800bd8c:	bfd4      	ite	le
 800bd8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bd92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd96:	4620      	mov	r0, r4
 800bd98:	ee10 2a10 	vmov	r2, s0
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	4639      	mov	r1, r7
 800bda0:	f7f4 fd5c 	bl	800085c <__aeabi_ddiv>
 800bda4:	ec41 0b10 	vmov	d0, r0, r1
 800bda8:	b003      	add	sp, #12
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdae <__copybits>:
 800bdae:	3901      	subs	r1, #1
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	1149      	asrs	r1, r1, #5
 800bdb4:	6914      	ldr	r4, [r2, #16]
 800bdb6:	3101      	adds	r1, #1
 800bdb8:	f102 0314 	add.w	r3, r2, #20
 800bdbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bdc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdc4:	1f05      	subs	r5, r0, #4
 800bdc6:	42a3      	cmp	r3, r4
 800bdc8:	d30c      	bcc.n	800bde4 <__copybits+0x36>
 800bdca:	1aa3      	subs	r3, r4, r2
 800bdcc:	3b11      	subs	r3, #17
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	3211      	adds	r2, #17
 800bdd4:	42a2      	cmp	r2, r4
 800bdd6:	bf88      	it	hi
 800bdd8:	2300      	movhi	r3, #0
 800bdda:	4418      	add	r0, r3
 800bddc:	2300      	movs	r3, #0
 800bdde:	4288      	cmp	r0, r1
 800bde0:	d305      	bcc.n	800bdee <__copybits+0x40>
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bde8:	f845 6f04 	str.w	r6, [r5, #4]!
 800bdec:	e7eb      	b.n	800bdc6 <__copybits+0x18>
 800bdee:	f840 3b04 	str.w	r3, [r0], #4
 800bdf2:	e7f4      	b.n	800bdde <__copybits+0x30>

0800bdf4 <__any_on>:
 800bdf4:	f100 0214 	add.w	r2, r0, #20
 800bdf8:	6900      	ldr	r0, [r0, #16]
 800bdfa:	114b      	asrs	r3, r1, #5
 800bdfc:	4298      	cmp	r0, r3
 800bdfe:	b510      	push	{r4, lr}
 800be00:	db11      	blt.n	800be26 <__any_on+0x32>
 800be02:	dd0a      	ble.n	800be1a <__any_on+0x26>
 800be04:	f011 011f 	ands.w	r1, r1, #31
 800be08:	d007      	beq.n	800be1a <__any_on+0x26>
 800be0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be0e:	fa24 f001 	lsr.w	r0, r4, r1
 800be12:	fa00 f101 	lsl.w	r1, r0, r1
 800be16:	428c      	cmp	r4, r1
 800be18:	d10b      	bne.n	800be32 <__any_on+0x3e>
 800be1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be1e:	4293      	cmp	r3, r2
 800be20:	d803      	bhi.n	800be2a <__any_on+0x36>
 800be22:	2000      	movs	r0, #0
 800be24:	bd10      	pop	{r4, pc}
 800be26:	4603      	mov	r3, r0
 800be28:	e7f7      	b.n	800be1a <__any_on+0x26>
 800be2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be2e:	2900      	cmp	r1, #0
 800be30:	d0f5      	beq.n	800be1e <__any_on+0x2a>
 800be32:	2001      	movs	r0, #1
 800be34:	e7f6      	b.n	800be24 <__any_on+0x30>

0800be36 <sulp>:
 800be36:	b570      	push	{r4, r5, r6, lr}
 800be38:	4604      	mov	r4, r0
 800be3a:	460d      	mov	r5, r1
 800be3c:	ec45 4b10 	vmov	d0, r4, r5
 800be40:	4616      	mov	r6, r2
 800be42:	f7ff feb7 	bl	800bbb4 <__ulp>
 800be46:	ec51 0b10 	vmov	r0, r1, d0
 800be4a:	b17e      	cbz	r6, 800be6c <sulp+0x36>
 800be4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd09      	ble.n	800be6c <sulp+0x36>
 800be58:	051b      	lsls	r3, r3, #20
 800be5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800be5e:	2400      	movs	r4, #0
 800be60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800be64:	4622      	mov	r2, r4
 800be66:	462b      	mov	r3, r5
 800be68:	f7f4 fbce 	bl	8000608 <__aeabi_dmul>
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be70 <_strtod_l>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	ed2d 8b02 	vpush	{d8}
 800be78:	b09b      	sub	sp, #108	; 0x6c
 800be7a:	4604      	mov	r4, r0
 800be7c:	9213      	str	r2, [sp, #76]	; 0x4c
 800be7e:	2200      	movs	r2, #0
 800be80:	9216      	str	r2, [sp, #88]	; 0x58
 800be82:	460d      	mov	r5, r1
 800be84:	f04f 0800 	mov.w	r8, #0
 800be88:	f04f 0900 	mov.w	r9, #0
 800be8c:	460a      	mov	r2, r1
 800be8e:	9215      	str	r2, [sp, #84]	; 0x54
 800be90:	7811      	ldrb	r1, [r2, #0]
 800be92:	292b      	cmp	r1, #43	; 0x2b
 800be94:	d04c      	beq.n	800bf30 <_strtod_l+0xc0>
 800be96:	d83a      	bhi.n	800bf0e <_strtod_l+0x9e>
 800be98:	290d      	cmp	r1, #13
 800be9a:	d834      	bhi.n	800bf06 <_strtod_l+0x96>
 800be9c:	2908      	cmp	r1, #8
 800be9e:	d834      	bhi.n	800bf0a <_strtod_l+0x9a>
 800bea0:	2900      	cmp	r1, #0
 800bea2:	d03d      	beq.n	800bf20 <_strtod_l+0xb0>
 800bea4:	2200      	movs	r2, #0
 800bea6:	920a      	str	r2, [sp, #40]	; 0x28
 800bea8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800beaa:	7832      	ldrb	r2, [r6, #0]
 800beac:	2a30      	cmp	r2, #48	; 0x30
 800beae:	f040 80b4 	bne.w	800c01a <_strtod_l+0x1aa>
 800beb2:	7872      	ldrb	r2, [r6, #1]
 800beb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800beb8:	2a58      	cmp	r2, #88	; 0x58
 800beba:	d170      	bne.n	800bf9e <_strtod_l+0x12e>
 800bebc:	9302      	str	r3, [sp, #8]
 800bebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	ab16      	add	r3, sp, #88	; 0x58
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	4a8e      	ldr	r2, [pc, #568]	; (800c100 <_strtod_l+0x290>)
 800bec8:	ab17      	add	r3, sp, #92	; 0x5c
 800beca:	a915      	add	r1, sp, #84	; 0x54
 800becc:	4620      	mov	r0, r4
 800bece:	f001 f92f 	bl	800d130 <__gethex>
 800bed2:	f010 070f 	ands.w	r7, r0, #15
 800bed6:	4605      	mov	r5, r0
 800bed8:	d005      	beq.n	800bee6 <_strtod_l+0x76>
 800beda:	2f06      	cmp	r7, #6
 800bedc:	d12a      	bne.n	800bf34 <_strtod_l+0xc4>
 800bede:	3601      	adds	r6, #1
 800bee0:	2300      	movs	r3, #0
 800bee2:	9615      	str	r6, [sp, #84]	; 0x54
 800bee4:	930a      	str	r3, [sp, #40]	; 0x28
 800bee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 857f 	bne.w	800c9ec <_strtod_l+0xb7c>
 800beee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef0:	b1db      	cbz	r3, 800bf2a <_strtod_l+0xba>
 800bef2:	4642      	mov	r2, r8
 800bef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bef8:	ec43 2b10 	vmov	d0, r2, r3
 800befc:	b01b      	add	sp, #108	; 0x6c
 800befe:	ecbd 8b02 	vpop	{d8}
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	2920      	cmp	r1, #32
 800bf08:	d1cc      	bne.n	800bea4 <_strtod_l+0x34>
 800bf0a:	3201      	adds	r2, #1
 800bf0c:	e7bf      	b.n	800be8e <_strtod_l+0x1e>
 800bf0e:	292d      	cmp	r1, #45	; 0x2d
 800bf10:	d1c8      	bne.n	800bea4 <_strtod_l+0x34>
 800bf12:	2101      	movs	r1, #1
 800bf14:	910a      	str	r1, [sp, #40]	; 0x28
 800bf16:	1c51      	adds	r1, r2, #1
 800bf18:	9115      	str	r1, [sp, #84]	; 0x54
 800bf1a:	7852      	ldrb	r2, [r2, #1]
 800bf1c:	2a00      	cmp	r2, #0
 800bf1e:	d1c3      	bne.n	800bea8 <_strtod_l+0x38>
 800bf20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf22:	9515      	str	r5, [sp, #84]	; 0x54
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f040 855f 	bne.w	800c9e8 <_strtod_l+0xb78>
 800bf2a:	4642      	mov	r2, r8
 800bf2c:	464b      	mov	r3, r9
 800bf2e:	e7e3      	b.n	800bef8 <_strtod_l+0x88>
 800bf30:	2100      	movs	r1, #0
 800bf32:	e7ef      	b.n	800bf14 <_strtod_l+0xa4>
 800bf34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf36:	b13a      	cbz	r2, 800bf48 <_strtod_l+0xd8>
 800bf38:	2135      	movs	r1, #53	; 0x35
 800bf3a:	a818      	add	r0, sp, #96	; 0x60
 800bf3c:	f7ff ff37 	bl	800bdae <__copybits>
 800bf40:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff fb0a 	bl	800b55c <_Bfree>
 800bf48:	3f01      	subs	r7, #1
 800bf4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf4c:	2f04      	cmp	r7, #4
 800bf4e:	d806      	bhi.n	800bf5e <_strtod_l+0xee>
 800bf50:	e8df f007 	tbb	[pc, r7]
 800bf54:	201d0314 	.word	0x201d0314
 800bf58:	14          	.byte	0x14
 800bf59:	00          	.byte	0x00
 800bf5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bf5e:	05e9      	lsls	r1, r5, #23
 800bf60:	bf48      	it	mi
 800bf62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bf66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf6a:	0d1b      	lsrs	r3, r3, #20
 800bf6c:	051b      	lsls	r3, r3, #20
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1b9      	bne.n	800bee6 <_strtod_l+0x76>
 800bf72:	f7fe faf7 	bl	800a564 <__errno>
 800bf76:	2322      	movs	r3, #34	; 0x22
 800bf78:	6003      	str	r3, [r0, #0]
 800bf7a:	e7b4      	b.n	800bee6 <_strtod_l+0x76>
 800bf7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bf80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bf8c:	e7e7      	b.n	800bf5e <_strtod_l+0xee>
 800bf8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c108 <_strtod_l+0x298>
 800bf92:	e7e4      	b.n	800bf5e <_strtod_l+0xee>
 800bf94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bf98:	f04f 38ff 	mov.w	r8, #4294967295
 800bf9c:	e7df      	b.n	800bf5e <_strtod_l+0xee>
 800bf9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfa0:	1c5a      	adds	r2, r3, #1
 800bfa2:	9215      	str	r2, [sp, #84]	; 0x54
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	2b30      	cmp	r3, #48	; 0x30
 800bfa8:	d0f9      	beq.n	800bf9e <_strtod_l+0x12e>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d09b      	beq.n	800bee6 <_strtod_l+0x76>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	f04f 0a00 	mov.w	sl, #0
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bfbe:	46d3      	mov	fp, sl
 800bfc0:	220a      	movs	r2, #10
 800bfc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bfc4:	7806      	ldrb	r6, [r0, #0]
 800bfc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bfca:	b2d9      	uxtb	r1, r3
 800bfcc:	2909      	cmp	r1, #9
 800bfce:	d926      	bls.n	800c01e <_strtod_l+0x1ae>
 800bfd0:	494c      	ldr	r1, [pc, #304]	; (800c104 <_strtod_l+0x294>)
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f000 ffe6 	bl	800cfa4 <strncmp>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d030      	beq.n	800c03e <_strtod_l+0x1ce>
 800bfdc:	2000      	movs	r0, #0
 800bfde:	4632      	mov	r2, r6
 800bfe0:	9005      	str	r0, [sp, #20]
 800bfe2:	465e      	mov	r6, fp
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2a65      	cmp	r2, #101	; 0x65
 800bfe8:	d001      	beq.n	800bfee <_strtod_l+0x17e>
 800bfea:	2a45      	cmp	r2, #69	; 0x45
 800bfec:	d113      	bne.n	800c016 <_strtod_l+0x1a6>
 800bfee:	b91e      	cbnz	r6, 800bff8 <_strtod_l+0x188>
 800bff0:	9a04      	ldr	r2, [sp, #16]
 800bff2:	4302      	orrs	r2, r0
 800bff4:	d094      	beq.n	800bf20 <_strtod_l+0xb0>
 800bff6:	2600      	movs	r6, #0
 800bff8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bffa:	1c6a      	adds	r2, r5, #1
 800bffc:	9215      	str	r2, [sp, #84]	; 0x54
 800bffe:	786a      	ldrb	r2, [r5, #1]
 800c000:	2a2b      	cmp	r2, #43	; 0x2b
 800c002:	d074      	beq.n	800c0ee <_strtod_l+0x27e>
 800c004:	2a2d      	cmp	r2, #45	; 0x2d
 800c006:	d078      	beq.n	800c0fa <_strtod_l+0x28a>
 800c008:	f04f 0c00 	mov.w	ip, #0
 800c00c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c010:	2909      	cmp	r1, #9
 800c012:	d97f      	bls.n	800c114 <_strtod_l+0x2a4>
 800c014:	9515      	str	r5, [sp, #84]	; 0x54
 800c016:	2700      	movs	r7, #0
 800c018:	e09e      	b.n	800c158 <_strtod_l+0x2e8>
 800c01a:	2300      	movs	r3, #0
 800c01c:	e7c8      	b.n	800bfb0 <_strtod_l+0x140>
 800c01e:	f1bb 0f08 	cmp.w	fp, #8
 800c022:	bfd8      	it	le
 800c024:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c026:	f100 0001 	add.w	r0, r0, #1
 800c02a:	bfda      	itte	le
 800c02c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c030:	9309      	strle	r3, [sp, #36]	; 0x24
 800c032:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c036:	f10b 0b01 	add.w	fp, fp, #1
 800c03a:	9015      	str	r0, [sp, #84]	; 0x54
 800c03c:	e7c1      	b.n	800bfc2 <_strtod_l+0x152>
 800c03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	9215      	str	r2, [sp, #84]	; 0x54
 800c044:	785a      	ldrb	r2, [r3, #1]
 800c046:	f1bb 0f00 	cmp.w	fp, #0
 800c04a:	d037      	beq.n	800c0bc <_strtod_l+0x24c>
 800c04c:	9005      	str	r0, [sp, #20]
 800c04e:	465e      	mov	r6, fp
 800c050:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c054:	2b09      	cmp	r3, #9
 800c056:	d912      	bls.n	800c07e <_strtod_l+0x20e>
 800c058:	2301      	movs	r3, #1
 800c05a:	e7c4      	b.n	800bfe6 <_strtod_l+0x176>
 800c05c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	9215      	str	r2, [sp, #84]	; 0x54
 800c062:	785a      	ldrb	r2, [r3, #1]
 800c064:	3001      	adds	r0, #1
 800c066:	2a30      	cmp	r2, #48	; 0x30
 800c068:	d0f8      	beq.n	800c05c <_strtod_l+0x1ec>
 800c06a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c06e:	2b08      	cmp	r3, #8
 800c070:	f200 84c1 	bhi.w	800c9f6 <_strtod_l+0xb86>
 800c074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c076:	9005      	str	r0, [sp, #20]
 800c078:	2000      	movs	r0, #0
 800c07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c07c:	4606      	mov	r6, r0
 800c07e:	3a30      	subs	r2, #48	; 0x30
 800c080:	f100 0301 	add.w	r3, r0, #1
 800c084:	d014      	beq.n	800c0b0 <_strtod_l+0x240>
 800c086:	9905      	ldr	r1, [sp, #20]
 800c088:	4419      	add	r1, r3
 800c08a:	9105      	str	r1, [sp, #20]
 800c08c:	4633      	mov	r3, r6
 800c08e:	eb00 0c06 	add.w	ip, r0, r6
 800c092:	210a      	movs	r1, #10
 800c094:	4563      	cmp	r3, ip
 800c096:	d113      	bne.n	800c0c0 <_strtod_l+0x250>
 800c098:	1833      	adds	r3, r6, r0
 800c09a:	2b08      	cmp	r3, #8
 800c09c:	f106 0601 	add.w	r6, r6, #1
 800c0a0:	4406      	add	r6, r0
 800c0a2:	dc1a      	bgt.n	800c0da <_strtod_l+0x26a>
 800c0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0a6:	230a      	movs	r3, #10
 800c0a8:	fb03 2301 	mla	r3, r3, r1, r2
 800c0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c0b2:	1c51      	adds	r1, r2, #1
 800c0b4:	9115      	str	r1, [sp, #84]	; 0x54
 800c0b6:	7852      	ldrb	r2, [r2, #1]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	e7c9      	b.n	800c050 <_strtod_l+0x1e0>
 800c0bc:	4658      	mov	r0, fp
 800c0be:	e7d2      	b.n	800c066 <_strtod_l+0x1f6>
 800c0c0:	2b08      	cmp	r3, #8
 800c0c2:	f103 0301 	add.w	r3, r3, #1
 800c0c6:	dc03      	bgt.n	800c0d0 <_strtod_l+0x260>
 800c0c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c0ca:	434f      	muls	r7, r1
 800c0cc:	9709      	str	r7, [sp, #36]	; 0x24
 800c0ce:	e7e1      	b.n	800c094 <_strtod_l+0x224>
 800c0d0:	2b10      	cmp	r3, #16
 800c0d2:	bfd8      	it	le
 800c0d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c0d8:	e7dc      	b.n	800c094 <_strtod_l+0x224>
 800c0da:	2e10      	cmp	r6, #16
 800c0dc:	bfdc      	itt	le
 800c0de:	230a      	movle	r3, #10
 800c0e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c0e4:	e7e3      	b.n	800c0ae <_strtod_l+0x23e>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	9305      	str	r3, [sp, #20]
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e780      	b.n	800bff0 <_strtod_l+0x180>
 800c0ee:	f04f 0c00 	mov.w	ip, #0
 800c0f2:	1caa      	adds	r2, r5, #2
 800c0f4:	9215      	str	r2, [sp, #84]	; 0x54
 800c0f6:	78aa      	ldrb	r2, [r5, #2]
 800c0f8:	e788      	b.n	800c00c <_strtod_l+0x19c>
 800c0fa:	f04f 0c01 	mov.w	ip, #1
 800c0fe:	e7f8      	b.n	800c0f2 <_strtod_l+0x282>
 800c100:	0800e1a8 	.word	0x0800e1a8
 800c104:	0800e1a4 	.word	0x0800e1a4
 800c108:	7ff00000 	.word	0x7ff00000
 800c10c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c10e:	1c51      	adds	r1, r2, #1
 800c110:	9115      	str	r1, [sp, #84]	; 0x54
 800c112:	7852      	ldrb	r2, [r2, #1]
 800c114:	2a30      	cmp	r2, #48	; 0x30
 800c116:	d0f9      	beq.n	800c10c <_strtod_l+0x29c>
 800c118:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c11c:	2908      	cmp	r1, #8
 800c11e:	f63f af7a 	bhi.w	800c016 <_strtod_l+0x1a6>
 800c122:	3a30      	subs	r2, #48	; 0x30
 800c124:	9208      	str	r2, [sp, #32]
 800c126:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c128:	920c      	str	r2, [sp, #48]	; 0x30
 800c12a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c12c:	1c57      	adds	r7, r2, #1
 800c12e:	9715      	str	r7, [sp, #84]	; 0x54
 800c130:	7852      	ldrb	r2, [r2, #1]
 800c132:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c136:	f1be 0f09 	cmp.w	lr, #9
 800c13a:	d938      	bls.n	800c1ae <_strtod_l+0x33e>
 800c13c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c13e:	1a7f      	subs	r7, r7, r1
 800c140:	2f08      	cmp	r7, #8
 800c142:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c146:	dc03      	bgt.n	800c150 <_strtod_l+0x2e0>
 800c148:	9908      	ldr	r1, [sp, #32]
 800c14a:	428f      	cmp	r7, r1
 800c14c:	bfa8      	it	ge
 800c14e:	460f      	movge	r7, r1
 800c150:	f1bc 0f00 	cmp.w	ip, #0
 800c154:	d000      	beq.n	800c158 <_strtod_l+0x2e8>
 800c156:	427f      	negs	r7, r7
 800c158:	2e00      	cmp	r6, #0
 800c15a:	d14f      	bne.n	800c1fc <_strtod_l+0x38c>
 800c15c:	9904      	ldr	r1, [sp, #16]
 800c15e:	4301      	orrs	r1, r0
 800c160:	f47f aec1 	bne.w	800bee6 <_strtod_l+0x76>
 800c164:	2b00      	cmp	r3, #0
 800c166:	f47f aedb 	bne.w	800bf20 <_strtod_l+0xb0>
 800c16a:	2a69      	cmp	r2, #105	; 0x69
 800c16c:	d029      	beq.n	800c1c2 <_strtod_l+0x352>
 800c16e:	dc26      	bgt.n	800c1be <_strtod_l+0x34e>
 800c170:	2a49      	cmp	r2, #73	; 0x49
 800c172:	d026      	beq.n	800c1c2 <_strtod_l+0x352>
 800c174:	2a4e      	cmp	r2, #78	; 0x4e
 800c176:	f47f aed3 	bne.w	800bf20 <_strtod_l+0xb0>
 800c17a:	499b      	ldr	r1, [pc, #620]	; (800c3e8 <_strtod_l+0x578>)
 800c17c:	a815      	add	r0, sp, #84	; 0x54
 800c17e:	f001 fa17 	bl	800d5b0 <__match>
 800c182:	2800      	cmp	r0, #0
 800c184:	f43f aecc 	beq.w	800bf20 <_strtod_l+0xb0>
 800c188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	2b28      	cmp	r3, #40	; 0x28
 800c18e:	d12f      	bne.n	800c1f0 <_strtod_l+0x380>
 800c190:	4996      	ldr	r1, [pc, #600]	; (800c3ec <_strtod_l+0x57c>)
 800c192:	aa18      	add	r2, sp, #96	; 0x60
 800c194:	a815      	add	r0, sp, #84	; 0x54
 800c196:	f001 fa1f 	bl	800d5d8 <__hexnan>
 800c19a:	2805      	cmp	r0, #5
 800c19c:	d128      	bne.n	800c1f0 <_strtod_l+0x380>
 800c19e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c1a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c1ac:	e69b      	b.n	800bee6 <_strtod_l+0x76>
 800c1ae:	9f08      	ldr	r7, [sp, #32]
 800c1b0:	210a      	movs	r1, #10
 800c1b2:	fb01 2107 	mla	r1, r1, r7, r2
 800c1b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c1ba:	9208      	str	r2, [sp, #32]
 800c1bc:	e7b5      	b.n	800c12a <_strtod_l+0x2ba>
 800c1be:	2a6e      	cmp	r2, #110	; 0x6e
 800c1c0:	e7d9      	b.n	800c176 <_strtod_l+0x306>
 800c1c2:	498b      	ldr	r1, [pc, #556]	; (800c3f0 <_strtod_l+0x580>)
 800c1c4:	a815      	add	r0, sp, #84	; 0x54
 800c1c6:	f001 f9f3 	bl	800d5b0 <__match>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f43f aea8 	beq.w	800bf20 <_strtod_l+0xb0>
 800c1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1d2:	4988      	ldr	r1, [pc, #544]	; (800c3f4 <_strtod_l+0x584>)
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	a815      	add	r0, sp, #84	; 0x54
 800c1d8:	9315      	str	r3, [sp, #84]	; 0x54
 800c1da:	f001 f9e9 	bl	800d5b0 <__match>
 800c1de:	b910      	cbnz	r0, 800c1e6 <_strtod_l+0x376>
 800c1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	9315      	str	r3, [sp, #84]	; 0x54
 800c1e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c404 <_strtod_l+0x594>
 800c1ea:	f04f 0800 	mov.w	r8, #0
 800c1ee:	e67a      	b.n	800bee6 <_strtod_l+0x76>
 800c1f0:	4881      	ldr	r0, [pc, #516]	; (800c3f8 <_strtod_l+0x588>)
 800c1f2:	f000 fef9 	bl	800cfe8 <nan>
 800c1f6:	ec59 8b10 	vmov	r8, r9, d0
 800c1fa:	e674      	b.n	800bee6 <_strtod_l+0x76>
 800c1fc:	9b05      	ldr	r3, [sp, #20]
 800c1fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c200:	1afb      	subs	r3, r7, r3
 800c202:	f1bb 0f00 	cmp.w	fp, #0
 800c206:	bf08      	it	eq
 800c208:	46b3      	moveq	fp, r6
 800c20a:	2e10      	cmp	r6, #16
 800c20c:	9308      	str	r3, [sp, #32]
 800c20e:	4635      	mov	r5, r6
 800c210:	bfa8      	it	ge
 800c212:	2510      	movge	r5, #16
 800c214:	f7f4 f97e 	bl	8000514 <__aeabi_ui2d>
 800c218:	2e09      	cmp	r6, #9
 800c21a:	4680      	mov	r8, r0
 800c21c:	4689      	mov	r9, r1
 800c21e:	dd13      	ble.n	800c248 <_strtod_l+0x3d8>
 800c220:	4b76      	ldr	r3, [pc, #472]	; (800c3fc <_strtod_l+0x58c>)
 800c222:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c226:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c22a:	f7f4 f9ed 	bl	8000608 <__aeabi_dmul>
 800c22e:	4680      	mov	r8, r0
 800c230:	4650      	mov	r0, sl
 800c232:	4689      	mov	r9, r1
 800c234:	f7f4 f96e 	bl	8000514 <__aeabi_ui2d>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	4640      	mov	r0, r8
 800c23e:	4649      	mov	r1, r9
 800c240:	f7f4 f82c 	bl	800029c <__adddf3>
 800c244:	4680      	mov	r8, r0
 800c246:	4689      	mov	r9, r1
 800c248:	2e0f      	cmp	r6, #15
 800c24a:	dc38      	bgt.n	800c2be <_strtod_l+0x44e>
 800c24c:	9b08      	ldr	r3, [sp, #32]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f43f ae49 	beq.w	800bee6 <_strtod_l+0x76>
 800c254:	dd24      	ble.n	800c2a0 <_strtod_l+0x430>
 800c256:	2b16      	cmp	r3, #22
 800c258:	dc0b      	bgt.n	800c272 <_strtod_l+0x402>
 800c25a:	4968      	ldr	r1, [pc, #416]	; (800c3fc <_strtod_l+0x58c>)
 800c25c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c264:	4642      	mov	r2, r8
 800c266:	464b      	mov	r3, r9
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	4680      	mov	r8, r0
 800c26e:	4689      	mov	r9, r1
 800c270:	e639      	b.n	800bee6 <_strtod_l+0x76>
 800c272:	9a08      	ldr	r2, [sp, #32]
 800c274:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c278:	4293      	cmp	r3, r2
 800c27a:	db20      	blt.n	800c2be <_strtod_l+0x44e>
 800c27c:	4c5f      	ldr	r4, [pc, #380]	; (800c3fc <_strtod_l+0x58c>)
 800c27e:	f1c6 060f 	rsb	r6, r6, #15
 800c282:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c286:	4642      	mov	r2, r8
 800c288:	464b      	mov	r3, r9
 800c28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28e:	f7f4 f9bb 	bl	8000608 <__aeabi_dmul>
 800c292:	9b08      	ldr	r3, [sp, #32]
 800c294:	1b9e      	subs	r6, r3, r6
 800c296:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c29a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c29e:	e7e3      	b.n	800c268 <_strtod_l+0x3f8>
 800c2a0:	9b08      	ldr	r3, [sp, #32]
 800c2a2:	3316      	adds	r3, #22
 800c2a4:	db0b      	blt.n	800c2be <_strtod_l+0x44e>
 800c2a6:	9b05      	ldr	r3, [sp, #20]
 800c2a8:	1bdf      	subs	r7, r3, r7
 800c2aa:	4b54      	ldr	r3, [pc, #336]	; (800c3fc <_strtod_l+0x58c>)
 800c2ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	f7f4 fad0 	bl	800085c <__aeabi_ddiv>
 800c2bc:	e7d6      	b.n	800c26c <_strtod_l+0x3fc>
 800c2be:	9b08      	ldr	r3, [sp, #32]
 800c2c0:	1b75      	subs	r5, r6, r5
 800c2c2:	441d      	add	r5, r3
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	dd70      	ble.n	800c3aa <_strtod_l+0x53a>
 800c2c8:	f015 030f 	ands.w	r3, r5, #15
 800c2cc:	d00a      	beq.n	800c2e4 <_strtod_l+0x474>
 800c2ce:	494b      	ldr	r1, [pc, #300]	; (800c3fc <_strtod_l+0x58c>)
 800c2d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2dc:	f7f4 f994 	bl	8000608 <__aeabi_dmul>
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	4689      	mov	r9, r1
 800c2e4:	f035 050f 	bics.w	r5, r5, #15
 800c2e8:	d04d      	beq.n	800c386 <_strtod_l+0x516>
 800c2ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c2ee:	dd22      	ble.n	800c336 <_strtod_l+0x4c6>
 800c2f0:	2500      	movs	r5, #0
 800c2f2:	46ab      	mov	fp, r5
 800c2f4:	9509      	str	r5, [sp, #36]	; 0x24
 800c2f6:	9505      	str	r5, [sp, #20]
 800c2f8:	2322      	movs	r3, #34	; 0x22
 800c2fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c404 <_strtod_l+0x594>
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	f04f 0800 	mov.w	r8, #0
 800c304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c306:	2b00      	cmp	r3, #0
 800c308:	f43f aded 	beq.w	800bee6 <_strtod_l+0x76>
 800c30c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c30e:	4620      	mov	r0, r4
 800c310:	f7ff f924 	bl	800b55c <_Bfree>
 800c314:	9905      	ldr	r1, [sp, #20]
 800c316:	4620      	mov	r0, r4
 800c318:	f7ff f920 	bl	800b55c <_Bfree>
 800c31c:	4659      	mov	r1, fp
 800c31e:	4620      	mov	r0, r4
 800c320:	f7ff f91c 	bl	800b55c <_Bfree>
 800c324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff f918 	bl	800b55c <_Bfree>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4620      	mov	r0, r4
 800c330:	f7ff f914 	bl	800b55c <_Bfree>
 800c334:	e5d7      	b.n	800bee6 <_strtod_l+0x76>
 800c336:	4b32      	ldr	r3, [pc, #200]	; (800c400 <_strtod_l+0x590>)
 800c338:	9304      	str	r3, [sp, #16]
 800c33a:	2300      	movs	r3, #0
 800c33c:	112d      	asrs	r5, r5, #4
 800c33e:	4640      	mov	r0, r8
 800c340:	4649      	mov	r1, r9
 800c342:	469a      	mov	sl, r3
 800c344:	2d01      	cmp	r5, #1
 800c346:	dc21      	bgt.n	800c38c <_strtod_l+0x51c>
 800c348:	b10b      	cbz	r3, 800c34e <_strtod_l+0x4de>
 800c34a:	4680      	mov	r8, r0
 800c34c:	4689      	mov	r9, r1
 800c34e:	492c      	ldr	r1, [pc, #176]	; (800c400 <_strtod_l+0x590>)
 800c350:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c354:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c358:	4642      	mov	r2, r8
 800c35a:	464b      	mov	r3, r9
 800c35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c360:	f7f4 f952 	bl	8000608 <__aeabi_dmul>
 800c364:	4b27      	ldr	r3, [pc, #156]	; (800c404 <_strtod_l+0x594>)
 800c366:	460a      	mov	r2, r1
 800c368:	400b      	ands	r3, r1
 800c36a:	4927      	ldr	r1, [pc, #156]	; (800c408 <_strtod_l+0x598>)
 800c36c:	428b      	cmp	r3, r1
 800c36e:	4680      	mov	r8, r0
 800c370:	d8be      	bhi.n	800c2f0 <_strtod_l+0x480>
 800c372:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c376:	428b      	cmp	r3, r1
 800c378:	bf86      	itte	hi
 800c37a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c40c <_strtod_l+0x59c>
 800c37e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c382:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c386:	2300      	movs	r3, #0
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	e07b      	b.n	800c484 <_strtod_l+0x614>
 800c38c:	07ea      	lsls	r2, r5, #31
 800c38e:	d505      	bpl.n	800c39c <_strtod_l+0x52c>
 800c390:	9b04      	ldr	r3, [sp, #16]
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	f7f4 f937 	bl	8000608 <__aeabi_dmul>
 800c39a:	2301      	movs	r3, #1
 800c39c:	9a04      	ldr	r2, [sp, #16]
 800c39e:	3208      	adds	r2, #8
 800c3a0:	f10a 0a01 	add.w	sl, sl, #1
 800c3a4:	106d      	asrs	r5, r5, #1
 800c3a6:	9204      	str	r2, [sp, #16]
 800c3a8:	e7cc      	b.n	800c344 <_strtod_l+0x4d4>
 800c3aa:	d0ec      	beq.n	800c386 <_strtod_l+0x516>
 800c3ac:	426d      	negs	r5, r5
 800c3ae:	f015 020f 	ands.w	r2, r5, #15
 800c3b2:	d00a      	beq.n	800c3ca <_strtod_l+0x55a>
 800c3b4:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <_strtod_l+0x58c>)
 800c3b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	4649      	mov	r1, r9
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	f7f4 fa4b 	bl	800085c <__aeabi_ddiv>
 800c3c6:	4680      	mov	r8, r0
 800c3c8:	4689      	mov	r9, r1
 800c3ca:	112d      	asrs	r5, r5, #4
 800c3cc:	d0db      	beq.n	800c386 <_strtod_l+0x516>
 800c3ce:	2d1f      	cmp	r5, #31
 800c3d0:	dd1e      	ble.n	800c410 <_strtod_l+0x5a0>
 800c3d2:	2500      	movs	r5, #0
 800c3d4:	46ab      	mov	fp, r5
 800c3d6:	9509      	str	r5, [sp, #36]	; 0x24
 800c3d8:	9505      	str	r5, [sp, #20]
 800c3da:	2322      	movs	r3, #34	; 0x22
 800c3dc:	f04f 0800 	mov.w	r8, #0
 800c3e0:	f04f 0900 	mov.w	r9, #0
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	e78d      	b.n	800c304 <_strtod_l+0x494>
 800c3e8:	0800df95 	.word	0x0800df95
 800c3ec:	0800e1bc 	.word	0x0800e1bc
 800c3f0:	0800df8d 	.word	0x0800df8d
 800c3f4:	0800dfc4 	.word	0x0800dfc4
 800c3f8:	0800e34d 	.word	0x0800e34d
 800c3fc:	0800e0d0 	.word	0x0800e0d0
 800c400:	0800e0a8 	.word	0x0800e0a8
 800c404:	7ff00000 	.word	0x7ff00000
 800c408:	7ca00000 	.word	0x7ca00000
 800c40c:	7fefffff 	.word	0x7fefffff
 800c410:	f015 0310 	ands.w	r3, r5, #16
 800c414:	bf18      	it	ne
 800c416:	236a      	movne	r3, #106	; 0x6a
 800c418:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c7bc <_strtod_l+0x94c>
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	4640      	mov	r0, r8
 800c420:	4649      	mov	r1, r9
 800c422:	2300      	movs	r3, #0
 800c424:	07ea      	lsls	r2, r5, #31
 800c426:	d504      	bpl.n	800c432 <_strtod_l+0x5c2>
 800c428:	e9da 2300 	ldrd	r2, r3, [sl]
 800c42c:	f7f4 f8ec 	bl	8000608 <__aeabi_dmul>
 800c430:	2301      	movs	r3, #1
 800c432:	106d      	asrs	r5, r5, #1
 800c434:	f10a 0a08 	add.w	sl, sl, #8
 800c438:	d1f4      	bne.n	800c424 <_strtod_l+0x5b4>
 800c43a:	b10b      	cbz	r3, 800c440 <_strtod_l+0x5d0>
 800c43c:	4680      	mov	r8, r0
 800c43e:	4689      	mov	r9, r1
 800c440:	9b04      	ldr	r3, [sp, #16]
 800c442:	b1bb      	cbz	r3, 800c474 <_strtod_l+0x604>
 800c444:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c448:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	4649      	mov	r1, r9
 800c450:	dd10      	ble.n	800c474 <_strtod_l+0x604>
 800c452:	2b1f      	cmp	r3, #31
 800c454:	f340 811e 	ble.w	800c694 <_strtod_l+0x824>
 800c458:	2b34      	cmp	r3, #52	; 0x34
 800c45a:	bfde      	ittt	le
 800c45c:	f04f 33ff 	movle.w	r3, #4294967295
 800c460:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c464:	4093      	lslle	r3, r2
 800c466:	f04f 0800 	mov.w	r8, #0
 800c46a:	bfcc      	ite	gt
 800c46c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c470:	ea03 0901 	andle.w	r9, r3, r1
 800c474:	2200      	movs	r2, #0
 800c476:	2300      	movs	r3, #0
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c480:	2800      	cmp	r0, #0
 800c482:	d1a6      	bne.n	800c3d2 <_strtod_l+0x562>
 800c484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c48a:	4633      	mov	r3, r6
 800c48c:	465a      	mov	r2, fp
 800c48e:	4620      	mov	r0, r4
 800c490:	f7ff f8cc 	bl	800b62c <__s2b>
 800c494:	9009      	str	r0, [sp, #36]	; 0x24
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f af2a 	beq.w	800c2f0 <_strtod_l+0x480>
 800c49c:	9a08      	ldr	r2, [sp, #32]
 800c49e:	9b05      	ldr	r3, [sp, #20]
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	eba3 0307 	sub.w	r3, r3, r7
 800c4a6:	bfa8      	it	ge
 800c4a8:	2300      	movge	r3, #0
 800c4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ac:	2500      	movs	r5, #0
 800c4ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c4b2:	9312      	str	r3, [sp, #72]	; 0x48
 800c4b4:	46ab      	mov	fp, r5
 800c4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	6859      	ldr	r1, [r3, #4]
 800c4bc:	f7ff f80e 	bl	800b4dc <_Balloc>
 800c4c0:	9005      	str	r0, [sp, #20]
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	f43f af18 	beq.w	800c2f8 <_strtod_l+0x488>
 800c4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	3202      	adds	r2, #2
 800c4ce:	f103 010c 	add.w	r1, r3, #12
 800c4d2:	0092      	lsls	r2, r2, #2
 800c4d4:	300c      	adds	r0, #12
 800c4d6:	f7fe f872 	bl	800a5be <memcpy>
 800c4da:	ec49 8b10 	vmov	d0, r8, r9
 800c4de:	aa18      	add	r2, sp, #96	; 0x60
 800c4e0:	a917      	add	r1, sp, #92	; 0x5c
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f7ff fbd6 	bl	800bc94 <__d2b>
 800c4e8:	ec49 8b18 	vmov	d8, r8, r9
 800c4ec:	9016      	str	r0, [sp, #88]	; 0x58
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	f43f af02 	beq.w	800c2f8 <_strtod_l+0x488>
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7ff f930 	bl	800b75c <__i2b>
 800c4fc:	4683      	mov	fp, r0
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f43f aefa 	beq.w	800c2f8 <_strtod_l+0x488>
 800c504:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c506:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c508:	2e00      	cmp	r6, #0
 800c50a:	bfab      	itete	ge
 800c50c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c50e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c510:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c512:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c516:	bfac      	ite	ge
 800c518:	eb06 0a03 	addge.w	sl, r6, r3
 800c51c:	1b9f      	sublt	r7, r3, r6
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	1af6      	subs	r6, r6, r3
 800c522:	4416      	add	r6, r2
 800c524:	4ba0      	ldr	r3, [pc, #640]	; (800c7a8 <_strtod_l+0x938>)
 800c526:	3e01      	subs	r6, #1
 800c528:	429e      	cmp	r6, r3
 800c52a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c52e:	f280 80c4 	bge.w	800c6ba <_strtod_l+0x84a>
 800c532:	1b9b      	subs	r3, r3, r6
 800c534:	2b1f      	cmp	r3, #31
 800c536:	eba2 0203 	sub.w	r2, r2, r3
 800c53a:	f04f 0101 	mov.w	r1, #1
 800c53e:	f300 80b0 	bgt.w	800c6a2 <_strtod_l+0x832>
 800c542:	fa01 f303 	lsl.w	r3, r1, r3
 800c546:	930e      	str	r3, [sp, #56]	; 0x38
 800c548:	2300      	movs	r3, #0
 800c54a:	930d      	str	r3, [sp, #52]	; 0x34
 800c54c:	eb0a 0602 	add.w	r6, sl, r2
 800c550:	9b04      	ldr	r3, [sp, #16]
 800c552:	45b2      	cmp	sl, r6
 800c554:	4417      	add	r7, r2
 800c556:	441f      	add	r7, r3
 800c558:	4653      	mov	r3, sl
 800c55a:	bfa8      	it	ge
 800c55c:	4633      	movge	r3, r6
 800c55e:	42bb      	cmp	r3, r7
 800c560:	bfa8      	it	ge
 800c562:	463b      	movge	r3, r7
 800c564:	2b00      	cmp	r3, #0
 800c566:	bfc2      	ittt	gt
 800c568:	1af6      	subgt	r6, r6, r3
 800c56a:	1aff      	subgt	r7, r7, r3
 800c56c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c572:	2b00      	cmp	r3, #0
 800c574:	dd17      	ble.n	800c5a6 <_strtod_l+0x736>
 800c576:	4659      	mov	r1, fp
 800c578:	461a      	mov	r2, r3
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7ff f9ae 	bl	800b8dc <__pow5mult>
 800c580:	4683      	mov	fp, r0
 800c582:	2800      	cmp	r0, #0
 800c584:	f43f aeb8 	beq.w	800c2f8 <_strtod_l+0x488>
 800c588:	4601      	mov	r1, r0
 800c58a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7ff f8fb 	bl	800b788 <__multiply>
 800c592:	900b      	str	r0, [sp, #44]	; 0x2c
 800c594:	2800      	cmp	r0, #0
 800c596:	f43f aeaf 	beq.w	800c2f8 <_strtod_l+0x488>
 800c59a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7fe ffdd 	bl	800b55c <_Bfree>
 800c5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5a4:	9316      	str	r3, [sp, #88]	; 0x58
 800c5a6:	2e00      	cmp	r6, #0
 800c5a8:	f300 808c 	bgt.w	800c6c4 <_strtod_l+0x854>
 800c5ac:	9b08      	ldr	r3, [sp, #32]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	dd08      	ble.n	800c5c4 <_strtod_l+0x754>
 800c5b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5b4:	9905      	ldr	r1, [sp, #20]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f7ff f990 	bl	800b8dc <__pow5mult>
 800c5bc:	9005      	str	r0, [sp, #20]
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f ae9a 	beq.w	800c2f8 <_strtod_l+0x488>
 800c5c4:	2f00      	cmp	r7, #0
 800c5c6:	dd08      	ble.n	800c5da <_strtod_l+0x76a>
 800c5c8:	9905      	ldr	r1, [sp, #20]
 800c5ca:	463a      	mov	r2, r7
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7ff f9df 	bl	800b990 <__lshift>
 800c5d2:	9005      	str	r0, [sp, #20]
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	f43f ae8f 	beq.w	800c2f8 <_strtod_l+0x488>
 800c5da:	f1ba 0f00 	cmp.w	sl, #0
 800c5de:	dd08      	ble.n	800c5f2 <_strtod_l+0x782>
 800c5e0:	4659      	mov	r1, fp
 800c5e2:	4652      	mov	r2, sl
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f7ff f9d3 	bl	800b990 <__lshift>
 800c5ea:	4683      	mov	fp, r0
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	f43f ae83 	beq.w	800c2f8 <_strtod_l+0x488>
 800c5f2:	9a05      	ldr	r2, [sp, #20]
 800c5f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7ff fa52 	bl	800baa0 <__mdiff>
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f43f ae7a 	beq.w	800c2f8 <_strtod_l+0x488>
 800c604:	68c3      	ldr	r3, [r0, #12]
 800c606:	930b      	str	r3, [sp, #44]	; 0x2c
 800c608:	2300      	movs	r3, #0
 800c60a:	60c3      	str	r3, [r0, #12]
 800c60c:	4659      	mov	r1, fp
 800c60e:	f7ff fa2b 	bl	800ba68 <__mcmp>
 800c612:	2800      	cmp	r0, #0
 800c614:	da60      	bge.n	800c6d8 <_strtod_l+0x868>
 800c616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c618:	ea53 0308 	orrs.w	r3, r3, r8
 800c61c:	f040 8084 	bne.w	800c728 <_strtod_l+0x8b8>
 800c620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c624:	2b00      	cmp	r3, #0
 800c626:	d17f      	bne.n	800c728 <_strtod_l+0x8b8>
 800c628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c62c:	0d1b      	lsrs	r3, r3, #20
 800c62e:	051b      	lsls	r3, r3, #20
 800c630:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c634:	d978      	bls.n	800c728 <_strtod_l+0x8b8>
 800c636:	696b      	ldr	r3, [r5, #20]
 800c638:	b913      	cbnz	r3, 800c640 <_strtod_l+0x7d0>
 800c63a:	692b      	ldr	r3, [r5, #16]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	dd73      	ble.n	800c728 <_strtod_l+0x8b8>
 800c640:	4629      	mov	r1, r5
 800c642:	2201      	movs	r2, #1
 800c644:	4620      	mov	r0, r4
 800c646:	f7ff f9a3 	bl	800b990 <__lshift>
 800c64a:	4659      	mov	r1, fp
 800c64c:	4605      	mov	r5, r0
 800c64e:	f7ff fa0b 	bl	800ba68 <__mcmp>
 800c652:	2800      	cmp	r0, #0
 800c654:	dd68      	ble.n	800c728 <_strtod_l+0x8b8>
 800c656:	9904      	ldr	r1, [sp, #16]
 800c658:	4a54      	ldr	r2, [pc, #336]	; (800c7ac <_strtod_l+0x93c>)
 800c65a:	464b      	mov	r3, r9
 800c65c:	2900      	cmp	r1, #0
 800c65e:	f000 8084 	beq.w	800c76a <_strtod_l+0x8fa>
 800c662:	ea02 0109 	and.w	r1, r2, r9
 800c666:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c66a:	dc7e      	bgt.n	800c76a <_strtod_l+0x8fa>
 800c66c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c670:	f77f aeb3 	ble.w	800c3da <_strtod_l+0x56a>
 800c674:	4b4e      	ldr	r3, [pc, #312]	; (800c7b0 <_strtod_l+0x940>)
 800c676:	4640      	mov	r0, r8
 800c678:	4649      	mov	r1, r9
 800c67a:	2200      	movs	r2, #0
 800c67c:	f7f3 ffc4 	bl	8000608 <__aeabi_dmul>
 800c680:	4b4a      	ldr	r3, [pc, #296]	; (800c7ac <_strtod_l+0x93c>)
 800c682:	400b      	ands	r3, r1
 800c684:	4680      	mov	r8, r0
 800c686:	4689      	mov	r9, r1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f47f ae3f 	bne.w	800c30c <_strtod_l+0x49c>
 800c68e:	2322      	movs	r3, #34	; 0x22
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	e63b      	b.n	800c30c <_strtod_l+0x49c>
 800c694:	f04f 32ff 	mov.w	r2, #4294967295
 800c698:	fa02 f303 	lsl.w	r3, r2, r3
 800c69c:	ea03 0808 	and.w	r8, r3, r8
 800c6a0:	e6e8      	b.n	800c474 <_strtod_l+0x604>
 800c6a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c6a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c6aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c6ae:	36e2      	adds	r6, #226	; 0xe2
 800c6b0:	fa01 f306 	lsl.w	r3, r1, r6
 800c6b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c6b8:	e748      	b.n	800c54c <_strtod_l+0x6dc>
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c6c2:	e743      	b.n	800c54c <_strtod_l+0x6dc>
 800c6c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f7ff f961 	bl	800b990 <__lshift>
 800c6ce:	9016      	str	r0, [sp, #88]	; 0x58
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	f47f af6b 	bne.w	800c5ac <_strtod_l+0x73c>
 800c6d6:	e60f      	b.n	800c2f8 <_strtod_l+0x488>
 800c6d8:	46ca      	mov	sl, r9
 800c6da:	d171      	bne.n	800c7c0 <_strtod_l+0x950>
 800c6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6e2:	b352      	cbz	r2, 800c73a <_strtod_l+0x8ca>
 800c6e4:	4a33      	ldr	r2, [pc, #204]	; (800c7b4 <_strtod_l+0x944>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d12a      	bne.n	800c740 <_strtod_l+0x8d0>
 800c6ea:	9b04      	ldr	r3, [sp, #16]
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	b1fb      	cbz	r3, 800c730 <_strtod_l+0x8c0>
 800c6f0:	4b2e      	ldr	r3, [pc, #184]	; (800c7ac <_strtod_l+0x93c>)
 800c6f2:	ea09 0303 	and.w	r3, r9, r3
 800c6f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6fe:	d81a      	bhi.n	800c736 <_strtod_l+0x8c6>
 800c700:	0d1b      	lsrs	r3, r3, #20
 800c702:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	4299      	cmp	r1, r3
 800c70c:	d118      	bne.n	800c740 <_strtod_l+0x8d0>
 800c70e:	4b2a      	ldr	r3, [pc, #168]	; (800c7b8 <_strtod_l+0x948>)
 800c710:	459a      	cmp	sl, r3
 800c712:	d102      	bne.n	800c71a <_strtod_l+0x8aa>
 800c714:	3101      	adds	r1, #1
 800c716:	f43f adef 	beq.w	800c2f8 <_strtod_l+0x488>
 800c71a:	4b24      	ldr	r3, [pc, #144]	; (800c7ac <_strtod_l+0x93c>)
 800c71c:	ea0a 0303 	and.w	r3, sl, r3
 800c720:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c724:	f04f 0800 	mov.w	r8, #0
 800c728:	9b04      	ldr	r3, [sp, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1a2      	bne.n	800c674 <_strtod_l+0x804>
 800c72e:	e5ed      	b.n	800c30c <_strtod_l+0x49c>
 800c730:	f04f 33ff 	mov.w	r3, #4294967295
 800c734:	e7e9      	b.n	800c70a <_strtod_l+0x89a>
 800c736:	4613      	mov	r3, r2
 800c738:	e7e7      	b.n	800c70a <_strtod_l+0x89a>
 800c73a:	ea53 0308 	orrs.w	r3, r3, r8
 800c73e:	d08a      	beq.n	800c656 <_strtod_l+0x7e6>
 800c740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c742:	b1e3      	cbz	r3, 800c77e <_strtod_l+0x90e>
 800c744:	ea13 0f0a 	tst.w	r3, sl
 800c748:	d0ee      	beq.n	800c728 <_strtod_l+0x8b8>
 800c74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c74c:	9a04      	ldr	r2, [sp, #16]
 800c74e:	4640      	mov	r0, r8
 800c750:	4649      	mov	r1, r9
 800c752:	b1c3      	cbz	r3, 800c786 <_strtod_l+0x916>
 800c754:	f7ff fb6f 	bl	800be36 <sulp>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	ec51 0b18 	vmov	r0, r1, d8
 800c760:	f7f3 fd9c 	bl	800029c <__adddf3>
 800c764:	4680      	mov	r8, r0
 800c766:	4689      	mov	r9, r1
 800c768:	e7de      	b.n	800c728 <_strtod_l+0x8b8>
 800c76a:	4013      	ands	r3, r2
 800c76c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c770:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c774:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c778:	f04f 38ff 	mov.w	r8, #4294967295
 800c77c:	e7d4      	b.n	800c728 <_strtod_l+0x8b8>
 800c77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c780:	ea13 0f08 	tst.w	r3, r8
 800c784:	e7e0      	b.n	800c748 <_strtod_l+0x8d8>
 800c786:	f7ff fb56 	bl	800be36 <sulp>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	ec51 0b18 	vmov	r0, r1, d8
 800c792:	f7f3 fd81 	bl	8000298 <__aeabi_dsub>
 800c796:	2200      	movs	r2, #0
 800c798:	2300      	movs	r3, #0
 800c79a:	4680      	mov	r8, r0
 800c79c:	4689      	mov	r9, r1
 800c79e:	f7f4 f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d0c0      	beq.n	800c728 <_strtod_l+0x8b8>
 800c7a6:	e618      	b.n	800c3da <_strtod_l+0x56a>
 800c7a8:	fffffc02 	.word	0xfffffc02
 800c7ac:	7ff00000 	.word	0x7ff00000
 800c7b0:	39500000 	.word	0x39500000
 800c7b4:	000fffff 	.word	0x000fffff
 800c7b8:	7fefffff 	.word	0x7fefffff
 800c7bc:	0800e1d0 	.word	0x0800e1d0
 800c7c0:	4659      	mov	r1, fp
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f7ff fac0 	bl	800bd48 <__ratio>
 800c7c8:	ec57 6b10 	vmov	r6, r7, d0
 800c7cc:	ee10 0a10 	vmov	r0, s0
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	f7f4 f992 	bl	8000b00 <__aeabi_dcmple>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d071      	beq.n	800c8c4 <_strtod_l+0xa54>
 800c7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d17c      	bne.n	800c8e0 <_strtod_l+0xa70>
 800c7e6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ea:	d15a      	bne.n	800c8a2 <_strtod_l+0xa32>
 800c7ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d15d      	bne.n	800c8b0 <_strtod_l+0xa40>
 800c7f4:	4b90      	ldr	r3, [pc, #576]	; (800ca38 <_strtod_l+0xbc8>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 f976 	bl	8000aec <__aeabi_dcmplt>
 800c800:	2800      	cmp	r0, #0
 800c802:	d15c      	bne.n	800c8be <_strtod_l+0xa4e>
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	4b8c      	ldr	r3, [pc, #560]	; (800ca3c <_strtod_l+0xbcc>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f7f3 fefc 	bl	8000608 <__aeabi_dmul>
 800c810:	4606      	mov	r6, r0
 800c812:	460f      	mov	r7, r1
 800c814:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c818:	9606      	str	r6, [sp, #24]
 800c81a:	9307      	str	r3, [sp, #28]
 800c81c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c820:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c824:	4b86      	ldr	r3, [pc, #536]	; (800ca40 <_strtod_l+0xbd0>)
 800c826:	ea0a 0303 	and.w	r3, sl, r3
 800c82a:	930d      	str	r3, [sp, #52]	; 0x34
 800c82c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c82e:	4b85      	ldr	r3, [pc, #532]	; (800ca44 <_strtod_l+0xbd4>)
 800c830:	429a      	cmp	r2, r3
 800c832:	f040 8090 	bne.w	800c956 <_strtod_l+0xae6>
 800c836:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c83a:	ec49 8b10 	vmov	d0, r8, r9
 800c83e:	f7ff f9b9 	bl	800bbb4 <__ulp>
 800c842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c846:	ec51 0b10 	vmov	r0, r1, d0
 800c84a:	f7f3 fedd 	bl	8000608 <__aeabi_dmul>
 800c84e:	4642      	mov	r2, r8
 800c850:	464b      	mov	r3, r9
 800c852:	f7f3 fd23 	bl	800029c <__adddf3>
 800c856:	460b      	mov	r3, r1
 800c858:	4979      	ldr	r1, [pc, #484]	; (800ca40 <_strtod_l+0xbd0>)
 800c85a:	4a7b      	ldr	r2, [pc, #492]	; (800ca48 <_strtod_l+0xbd8>)
 800c85c:	4019      	ands	r1, r3
 800c85e:	4291      	cmp	r1, r2
 800c860:	4680      	mov	r8, r0
 800c862:	d944      	bls.n	800c8ee <_strtod_l+0xa7e>
 800c864:	ee18 2a90 	vmov	r2, s17
 800c868:	4b78      	ldr	r3, [pc, #480]	; (800ca4c <_strtod_l+0xbdc>)
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d104      	bne.n	800c878 <_strtod_l+0xa08>
 800c86e:	ee18 3a10 	vmov	r3, s16
 800c872:	3301      	adds	r3, #1
 800c874:	f43f ad40 	beq.w	800c2f8 <_strtod_l+0x488>
 800c878:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ca4c <_strtod_l+0xbdc>
 800c87c:	f04f 38ff 	mov.w	r8, #4294967295
 800c880:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c882:	4620      	mov	r0, r4
 800c884:	f7fe fe6a 	bl	800b55c <_Bfree>
 800c888:	9905      	ldr	r1, [sp, #20]
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7fe fe66 	bl	800b55c <_Bfree>
 800c890:	4659      	mov	r1, fp
 800c892:	4620      	mov	r0, r4
 800c894:	f7fe fe62 	bl	800b55c <_Bfree>
 800c898:	4629      	mov	r1, r5
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7fe fe5e 	bl	800b55c <_Bfree>
 800c8a0:	e609      	b.n	800c4b6 <_strtod_l+0x646>
 800c8a2:	f1b8 0f01 	cmp.w	r8, #1
 800c8a6:	d103      	bne.n	800c8b0 <_strtod_l+0xa40>
 800c8a8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ac:	f43f ad95 	beq.w	800c3da <_strtod_l+0x56a>
 800c8b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ca08 <_strtod_l+0xb98>
 800c8b4:	4f60      	ldr	r7, [pc, #384]	; (800ca38 <_strtod_l+0xbc8>)
 800c8b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c8ba:	2600      	movs	r6, #0
 800c8bc:	e7ae      	b.n	800c81c <_strtod_l+0x9ac>
 800c8be:	4f5f      	ldr	r7, [pc, #380]	; (800ca3c <_strtod_l+0xbcc>)
 800c8c0:	2600      	movs	r6, #0
 800c8c2:	e7a7      	b.n	800c814 <_strtod_l+0x9a4>
 800c8c4:	4b5d      	ldr	r3, [pc, #372]	; (800ca3c <_strtod_l+0xbcc>)
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f7f3 fe9c 	bl	8000608 <__aeabi_dmul>
 800c8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460f      	mov	r7, r1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d09c      	beq.n	800c814 <_strtod_l+0x9a4>
 800c8da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c8de:	e79d      	b.n	800c81c <_strtod_l+0x9ac>
 800c8e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ca10 <_strtod_l+0xba0>
 800c8e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c8e8:	ec57 6b17 	vmov	r6, r7, d7
 800c8ec:	e796      	b.n	800c81c <_strtod_l+0x9ac>
 800c8ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	46ca      	mov	sl, r9
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1c2      	bne.n	800c880 <_strtod_l+0xa10>
 800c8fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c900:	0d1b      	lsrs	r3, r3, #20
 800c902:	051b      	lsls	r3, r3, #20
 800c904:	429a      	cmp	r2, r3
 800c906:	d1bb      	bne.n	800c880 <_strtod_l+0xa10>
 800c908:	4630      	mov	r0, r6
 800c90a:	4639      	mov	r1, r7
 800c90c:	f7f4 f9c4 	bl	8000c98 <__aeabi_d2lz>
 800c910:	f7f3 fe4c 	bl	80005ac <__aeabi_l2d>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4630      	mov	r0, r6
 800c91a:	4639      	mov	r1, r7
 800c91c:	f7f3 fcbc 	bl	8000298 <__aeabi_dsub>
 800c920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c922:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c926:	ea43 0308 	orr.w	r3, r3, r8
 800c92a:	4313      	orrs	r3, r2
 800c92c:	4606      	mov	r6, r0
 800c92e:	460f      	mov	r7, r1
 800c930:	d054      	beq.n	800c9dc <_strtod_l+0xb6c>
 800c932:	a339      	add	r3, pc, #228	; (adr r3, 800ca18 <_strtod_l+0xba8>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f4 f8d8 	bl	8000aec <__aeabi_dcmplt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f47f ace5 	bne.w	800c30c <_strtod_l+0x49c>
 800c942:	a337      	add	r3, pc, #220	; (adr r3, 800ca20 <_strtod_l+0xbb0>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	f7f4 f8ec 	bl	8000b28 <__aeabi_dcmpgt>
 800c950:	2800      	cmp	r0, #0
 800c952:	d095      	beq.n	800c880 <_strtod_l+0xa10>
 800c954:	e4da      	b.n	800c30c <_strtod_l+0x49c>
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	b333      	cbz	r3, 800c9a8 <_strtod_l+0xb38>
 800c95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c95c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c960:	d822      	bhi.n	800c9a8 <_strtod_l+0xb38>
 800c962:	a331      	add	r3, pc, #196	; (adr r3, 800ca28 <_strtod_l+0xbb8>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	4630      	mov	r0, r6
 800c96a:	4639      	mov	r1, r7
 800c96c:	f7f4 f8c8 	bl	8000b00 <__aeabi_dcmple>
 800c970:	b1a0      	cbz	r0, 800c99c <_strtod_l+0xb2c>
 800c972:	4639      	mov	r1, r7
 800c974:	4630      	mov	r0, r6
 800c976:	f7f4 f91f 	bl	8000bb8 <__aeabi_d2uiz>
 800c97a:	2801      	cmp	r0, #1
 800c97c:	bf38      	it	cc
 800c97e:	2001      	movcc	r0, #1
 800c980:	f7f3 fdc8 	bl	8000514 <__aeabi_ui2d>
 800c984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	bb23      	cbnz	r3, 800c9d6 <_strtod_l+0xb66>
 800c98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c990:	9010      	str	r0, [sp, #64]	; 0x40
 800c992:	9311      	str	r3, [sp, #68]	; 0x44
 800c994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c998:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c99e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c9b0:	eef0 0a68 	vmov.f32	s1, s17
 800c9b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c9b8:	f7ff f8fc 	bl	800bbb4 <__ulp>
 800c9bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c9c0:	ec53 2b10 	vmov	r2, r3, d0
 800c9c4:	f7f3 fe20 	bl	8000608 <__aeabi_dmul>
 800c9c8:	ec53 2b18 	vmov	r2, r3, d8
 800c9cc:	f7f3 fc66 	bl	800029c <__adddf3>
 800c9d0:	4680      	mov	r8, r0
 800c9d2:	4689      	mov	r9, r1
 800c9d4:	e78d      	b.n	800c8f2 <_strtod_l+0xa82>
 800c9d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c9da:	e7db      	b.n	800c994 <_strtod_l+0xb24>
 800c9dc:	a314      	add	r3, pc, #80	; (adr r3, 800ca30 <_strtod_l+0xbc0>)
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f7f4 f883 	bl	8000aec <__aeabi_dcmplt>
 800c9e6:	e7b3      	b.n	800c950 <_strtod_l+0xae0>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c9ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c9ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	f7ff ba7c 	b.w	800beee <_strtod_l+0x7e>
 800c9f6:	2a65      	cmp	r2, #101	; 0x65
 800c9f8:	f43f ab75 	beq.w	800c0e6 <_strtod_l+0x276>
 800c9fc:	2a45      	cmp	r2, #69	; 0x45
 800c9fe:	f43f ab72 	beq.w	800c0e6 <_strtod_l+0x276>
 800ca02:	2301      	movs	r3, #1
 800ca04:	f7ff bbaa 	b.w	800c15c <_strtod_l+0x2ec>
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	bff00000 	.word	0xbff00000
 800ca10:	00000000 	.word	0x00000000
 800ca14:	3ff00000 	.word	0x3ff00000
 800ca18:	94a03595 	.word	0x94a03595
 800ca1c:	3fdfffff 	.word	0x3fdfffff
 800ca20:	35afe535 	.word	0x35afe535
 800ca24:	3fe00000 	.word	0x3fe00000
 800ca28:	ffc00000 	.word	0xffc00000
 800ca2c:	41dfffff 	.word	0x41dfffff
 800ca30:	94a03595 	.word	0x94a03595
 800ca34:	3fcfffff 	.word	0x3fcfffff
 800ca38:	3ff00000 	.word	0x3ff00000
 800ca3c:	3fe00000 	.word	0x3fe00000
 800ca40:	7ff00000 	.word	0x7ff00000
 800ca44:	7fe00000 	.word	0x7fe00000
 800ca48:	7c9fffff 	.word	0x7c9fffff
 800ca4c:	7fefffff 	.word	0x7fefffff

0800ca50 <_strtod_r>:
 800ca50:	4b01      	ldr	r3, [pc, #4]	; (800ca58 <_strtod_r+0x8>)
 800ca52:	f7ff ba0d 	b.w	800be70 <_strtod_l>
 800ca56:	bf00      	nop
 800ca58:	20000084 	.word	0x20000084

0800ca5c <_strtol_l.constprop.0>:
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca62:	d001      	beq.n	800ca68 <_strtol_l.constprop.0+0xc>
 800ca64:	2b24      	cmp	r3, #36	; 0x24
 800ca66:	d906      	bls.n	800ca76 <_strtol_l.constprop.0+0x1a>
 800ca68:	f7fd fd7c 	bl	800a564 <__errno>
 800ca6c:	2316      	movs	r3, #22
 800ca6e:	6003      	str	r3, [r0, #0]
 800ca70:	2000      	movs	r0, #0
 800ca72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb5c <_strtol_l.constprop.0+0x100>
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	462e      	mov	r6, r5
 800ca7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ca86:	f017 0708 	ands.w	r7, r7, #8
 800ca8a:	d1f7      	bne.n	800ca7c <_strtol_l.constprop.0+0x20>
 800ca8c:	2c2d      	cmp	r4, #45	; 0x2d
 800ca8e:	d132      	bne.n	800caf6 <_strtol_l.constprop.0+0x9a>
 800ca90:	782c      	ldrb	r4, [r5, #0]
 800ca92:	2701      	movs	r7, #1
 800ca94:	1cb5      	adds	r5, r6, #2
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d05b      	beq.n	800cb52 <_strtol_l.constprop.0+0xf6>
 800ca9a:	2b10      	cmp	r3, #16
 800ca9c:	d109      	bne.n	800cab2 <_strtol_l.constprop.0+0x56>
 800ca9e:	2c30      	cmp	r4, #48	; 0x30
 800caa0:	d107      	bne.n	800cab2 <_strtol_l.constprop.0+0x56>
 800caa2:	782c      	ldrb	r4, [r5, #0]
 800caa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800caa8:	2c58      	cmp	r4, #88	; 0x58
 800caaa:	d14d      	bne.n	800cb48 <_strtol_l.constprop.0+0xec>
 800caac:	786c      	ldrb	r4, [r5, #1]
 800caae:	2310      	movs	r3, #16
 800cab0:	3502      	adds	r5, #2
 800cab2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cab6:	f108 38ff 	add.w	r8, r8, #4294967295
 800caba:	f04f 0e00 	mov.w	lr, #0
 800cabe:	fbb8 f9f3 	udiv	r9, r8, r3
 800cac2:	4676      	mov	r6, lr
 800cac4:	fb03 8a19 	mls	sl, r3, r9, r8
 800cac8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cacc:	f1bc 0f09 	cmp.w	ip, #9
 800cad0:	d816      	bhi.n	800cb00 <_strtol_l.constprop.0+0xa4>
 800cad2:	4664      	mov	r4, ip
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	dd24      	ble.n	800cb22 <_strtol_l.constprop.0+0xc6>
 800cad8:	f1be 3fff 	cmp.w	lr, #4294967295
 800cadc:	d008      	beq.n	800caf0 <_strtol_l.constprop.0+0x94>
 800cade:	45b1      	cmp	r9, r6
 800cae0:	d31c      	bcc.n	800cb1c <_strtol_l.constprop.0+0xc0>
 800cae2:	d101      	bne.n	800cae8 <_strtol_l.constprop.0+0x8c>
 800cae4:	45a2      	cmp	sl, r4
 800cae6:	db19      	blt.n	800cb1c <_strtol_l.constprop.0+0xc0>
 800cae8:	fb06 4603 	mla	r6, r6, r3, r4
 800caec:	f04f 0e01 	mov.w	lr, #1
 800caf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caf4:	e7e8      	b.n	800cac8 <_strtol_l.constprop.0+0x6c>
 800caf6:	2c2b      	cmp	r4, #43	; 0x2b
 800caf8:	bf04      	itt	eq
 800cafa:	782c      	ldrbeq	r4, [r5, #0]
 800cafc:	1cb5      	addeq	r5, r6, #2
 800cafe:	e7ca      	b.n	800ca96 <_strtol_l.constprop.0+0x3a>
 800cb00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb04:	f1bc 0f19 	cmp.w	ip, #25
 800cb08:	d801      	bhi.n	800cb0e <_strtol_l.constprop.0+0xb2>
 800cb0a:	3c37      	subs	r4, #55	; 0x37
 800cb0c:	e7e2      	b.n	800cad4 <_strtol_l.constprop.0+0x78>
 800cb0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb12:	f1bc 0f19 	cmp.w	ip, #25
 800cb16:	d804      	bhi.n	800cb22 <_strtol_l.constprop.0+0xc6>
 800cb18:	3c57      	subs	r4, #87	; 0x57
 800cb1a:	e7db      	b.n	800cad4 <_strtol_l.constprop.0+0x78>
 800cb1c:	f04f 3eff 	mov.w	lr, #4294967295
 800cb20:	e7e6      	b.n	800caf0 <_strtol_l.constprop.0+0x94>
 800cb22:	f1be 3fff 	cmp.w	lr, #4294967295
 800cb26:	d105      	bne.n	800cb34 <_strtol_l.constprop.0+0xd8>
 800cb28:	2322      	movs	r3, #34	; 0x22
 800cb2a:	6003      	str	r3, [r0, #0]
 800cb2c:	4646      	mov	r6, r8
 800cb2e:	b942      	cbnz	r2, 800cb42 <_strtol_l.constprop.0+0xe6>
 800cb30:	4630      	mov	r0, r6
 800cb32:	e79e      	b.n	800ca72 <_strtol_l.constprop.0+0x16>
 800cb34:	b107      	cbz	r7, 800cb38 <_strtol_l.constprop.0+0xdc>
 800cb36:	4276      	negs	r6, r6
 800cb38:	2a00      	cmp	r2, #0
 800cb3a:	d0f9      	beq.n	800cb30 <_strtol_l.constprop.0+0xd4>
 800cb3c:	f1be 0f00 	cmp.w	lr, #0
 800cb40:	d000      	beq.n	800cb44 <_strtol_l.constprop.0+0xe8>
 800cb42:	1e69      	subs	r1, r5, #1
 800cb44:	6011      	str	r1, [r2, #0]
 800cb46:	e7f3      	b.n	800cb30 <_strtol_l.constprop.0+0xd4>
 800cb48:	2430      	movs	r4, #48	; 0x30
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1b1      	bne.n	800cab2 <_strtol_l.constprop.0+0x56>
 800cb4e:	2308      	movs	r3, #8
 800cb50:	e7af      	b.n	800cab2 <_strtol_l.constprop.0+0x56>
 800cb52:	2c30      	cmp	r4, #48	; 0x30
 800cb54:	d0a5      	beq.n	800caa2 <_strtol_l.constprop.0+0x46>
 800cb56:	230a      	movs	r3, #10
 800cb58:	e7ab      	b.n	800cab2 <_strtol_l.constprop.0+0x56>
 800cb5a:	bf00      	nop
 800cb5c:	0800e1f9 	.word	0x0800e1f9

0800cb60 <_strtol_r>:
 800cb60:	f7ff bf7c 	b.w	800ca5c <_strtol_l.constprop.0>

0800cb64 <__ssputs_r>:
 800cb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb68:	688e      	ldr	r6, [r1, #8]
 800cb6a:	461f      	mov	r7, r3
 800cb6c:	42be      	cmp	r6, r7
 800cb6e:	680b      	ldr	r3, [r1, #0]
 800cb70:	4682      	mov	sl, r0
 800cb72:	460c      	mov	r4, r1
 800cb74:	4690      	mov	r8, r2
 800cb76:	d82c      	bhi.n	800cbd2 <__ssputs_r+0x6e>
 800cb78:	898a      	ldrh	r2, [r1, #12]
 800cb7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb7e:	d026      	beq.n	800cbce <__ssputs_r+0x6a>
 800cb80:	6965      	ldr	r5, [r4, #20]
 800cb82:	6909      	ldr	r1, [r1, #16]
 800cb84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb88:	eba3 0901 	sub.w	r9, r3, r1
 800cb8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb90:	1c7b      	adds	r3, r7, #1
 800cb92:	444b      	add	r3, r9
 800cb94:	106d      	asrs	r5, r5, #1
 800cb96:	429d      	cmp	r5, r3
 800cb98:	bf38      	it	cc
 800cb9a:	461d      	movcc	r5, r3
 800cb9c:	0553      	lsls	r3, r2, #21
 800cb9e:	d527      	bpl.n	800cbf0 <__ssputs_r+0x8c>
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7fe fc0f 	bl	800b3c4 <_malloc_r>
 800cba6:	4606      	mov	r6, r0
 800cba8:	b360      	cbz	r0, 800cc04 <__ssputs_r+0xa0>
 800cbaa:	6921      	ldr	r1, [r4, #16]
 800cbac:	464a      	mov	r2, r9
 800cbae:	f7fd fd06 	bl	800a5be <memcpy>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	6126      	str	r6, [r4, #16]
 800cbc0:	6165      	str	r5, [r4, #20]
 800cbc2:	444e      	add	r6, r9
 800cbc4:	eba5 0509 	sub.w	r5, r5, r9
 800cbc8:	6026      	str	r6, [r4, #0]
 800cbca:	60a5      	str	r5, [r4, #8]
 800cbcc:	463e      	mov	r6, r7
 800cbce:	42be      	cmp	r6, r7
 800cbd0:	d900      	bls.n	800cbd4 <__ssputs_r+0x70>
 800cbd2:	463e      	mov	r6, r7
 800cbd4:	6820      	ldr	r0, [r4, #0]
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	4641      	mov	r1, r8
 800cbda:	f000 f9c9 	bl	800cf70 <memmove>
 800cbde:	68a3      	ldr	r3, [r4, #8]
 800cbe0:	1b9b      	subs	r3, r3, r6
 800cbe2:	60a3      	str	r3, [r4, #8]
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	4433      	add	r3, r6
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	2000      	movs	r0, #0
 800cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	f000 fd9e 	bl	800d732 <_realloc_r>
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d1e0      	bne.n	800cbbe <__ssputs_r+0x5a>
 800cbfc:	6921      	ldr	r1, [r4, #16]
 800cbfe:	4650      	mov	r0, sl
 800cc00:	f7fe fb6c 	bl	800b2dc <_free_r>
 800cc04:	230c      	movs	r3, #12
 800cc06:	f8ca 3000 	str.w	r3, [sl]
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	f04f 30ff 	mov.w	r0, #4294967295
 800cc16:	e7e9      	b.n	800cbec <__ssputs_r+0x88>

0800cc18 <_svfiprintf_r>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	4698      	mov	r8, r3
 800cc1e:	898b      	ldrh	r3, [r1, #12]
 800cc20:	061b      	lsls	r3, r3, #24
 800cc22:	b09d      	sub	sp, #116	; 0x74
 800cc24:	4607      	mov	r7, r0
 800cc26:	460d      	mov	r5, r1
 800cc28:	4614      	mov	r4, r2
 800cc2a:	d50e      	bpl.n	800cc4a <_svfiprintf_r+0x32>
 800cc2c:	690b      	ldr	r3, [r1, #16]
 800cc2e:	b963      	cbnz	r3, 800cc4a <_svfiprintf_r+0x32>
 800cc30:	2140      	movs	r1, #64	; 0x40
 800cc32:	f7fe fbc7 	bl	800b3c4 <_malloc_r>
 800cc36:	6028      	str	r0, [r5, #0]
 800cc38:	6128      	str	r0, [r5, #16]
 800cc3a:	b920      	cbnz	r0, 800cc46 <_svfiprintf_r+0x2e>
 800cc3c:	230c      	movs	r3, #12
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	f04f 30ff 	mov.w	r0, #4294967295
 800cc44:	e0d0      	b.n	800cde8 <_svfiprintf_r+0x1d0>
 800cc46:	2340      	movs	r3, #64	; 0x40
 800cc48:	616b      	str	r3, [r5, #20]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4e:	2320      	movs	r3, #32
 800cc50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc54:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc58:	2330      	movs	r3, #48	; 0x30
 800cc5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce00 <_svfiprintf_r+0x1e8>
 800cc5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc62:	f04f 0901 	mov.w	r9, #1
 800cc66:	4623      	mov	r3, r4
 800cc68:	469a      	mov	sl, r3
 800cc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc6e:	b10a      	cbz	r2, 800cc74 <_svfiprintf_r+0x5c>
 800cc70:	2a25      	cmp	r2, #37	; 0x25
 800cc72:	d1f9      	bne.n	800cc68 <_svfiprintf_r+0x50>
 800cc74:	ebba 0b04 	subs.w	fp, sl, r4
 800cc78:	d00b      	beq.n	800cc92 <_svfiprintf_r+0x7a>
 800cc7a:	465b      	mov	r3, fp
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4629      	mov	r1, r5
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7ff ff6f 	bl	800cb64 <__ssputs_r>
 800cc86:	3001      	adds	r0, #1
 800cc88:	f000 80a9 	beq.w	800cdde <_svfiprintf_r+0x1c6>
 800cc8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc8e:	445a      	add	r2, fp
 800cc90:	9209      	str	r2, [sp, #36]	; 0x24
 800cc92:	f89a 3000 	ldrb.w	r3, [sl]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 80a1 	beq.w	800cdde <_svfiprintf_r+0x1c6>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca6:	f10a 0a01 	add.w	sl, sl, #1
 800ccaa:	9304      	str	r3, [sp, #16]
 800ccac:	9307      	str	r3, [sp, #28]
 800ccae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccb2:	931a      	str	r3, [sp, #104]	; 0x68
 800ccb4:	4654      	mov	r4, sl
 800ccb6:	2205      	movs	r2, #5
 800ccb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccbc:	4850      	ldr	r0, [pc, #320]	; (800ce00 <_svfiprintf_r+0x1e8>)
 800ccbe:	f7f3 fa8f 	bl	80001e0 <memchr>
 800ccc2:	9a04      	ldr	r2, [sp, #16]
 800ccc4:	b9d8      	cbnz	r0, 800ccfe <_svfiprintf_r+0xe6>
 800ccc6:	06d0      	lsls	r0, r2, #27
 800ccc8:	bf44      	itt	mi
 800ccca:	2320      	movmi	r3, #32
 800cccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd0:	0711      	lsls	r1, r2, #28
 800ccd2:	bf44      	itt	mi
 800ccd4:	232b      	movmi	r3, #43	; 0x2b
 800ccd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccda:	f89a 3000 	ldrb.w	r3, [sl]
 800ccde:	2b2a      	cmp	r3, #42	; 0x2a
 800cce0:	d015      	beq.n	800cd0e <_svfiprintf_r+0xf6>
 800cce2:	9a07      	ldr	r2, [sp, #28]
 800cce4:	4654      	mov	r4, sl
 800cce6:	2000      	movs	r0, #0
 800cce8:	f04f 0c0a 	mov.w	ip, #10
 800ccec:	4621      	mov	r1, r4
 800ccee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccf2:	3b30      	subs	r3, #48	; 0x30
 800ccf4:	2b09      	cmp	r3, #9
 800ccf6:	d94d      	bls.n	800cd94 <_svfiprintf_r+0x17c>
 800ccf8:	b1b0      	cbz	r0, 800cd28 <_svfiprintf_r+0x110>
 800ccfa:	9207      	str	r2, [sp, #28]
 800ccfc:	e014      	b.n	800cd28 <_svfiprintf_r+0x110>
 800ccfe:	eba0 0308 	sub.w	r3, r0, r8
 800cd02:	fa09 f303 	lsl.w	r3, r9, r3
 800cd06:	4313      	orrs	r3, r2
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	46a2      	mov	sl, r4
 800cd0c:	e7d2      	b.n	800ccb4 <_svfiprintf_r+0x9c>
 800cd0e:	9b03      	ldr	r3, [sp, #12]
 800cd10:	1d19      	adds	r1, r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	9103      	str	r1, [sp, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfbb      	ittet	lt
 800cd1a:	425b      	neglt	r3, r3
 800cd1c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd20:	9307      	strge	r3, [sp, #28]
 800cd22:	9307      	strlt	r3, [sp, #28]
 800cd24:	bfb8      	it	lt
 800cd26:	9204      	strlt	r2, [sp, #16]
 800cd28:	7823      	ldrb	r3, [r4, #0]
 800cd2a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd2c:	d10c      	bne.n	800cd48 <_svfiprintf_r+0x130>
 800cd2e:	7863      	ldrb	r3, [r4, #1]
 800cd30:	2b2a      	cmp	r3, #42	; 0x2a
 800cd32:	d134      	bne.n	800cd9e <_svfiprintf_r+0x186>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	1d1a      	adds	r2, r3, #4
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	9203      	str	r2, [sp, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bfb8      	it	lt
 800cd40:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd44:	3402      	adds	r4, #2
 800cd46:	9305      	str	r3, [sp, #20]
 800cd48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce10 <_svfiprintf_r+0x1f8>
 800cd4c:	7821      	ldrb	r1, [r4, #0]
 800cd4e:	2203      	movs	r2, #3
 800cd50:	4650      	mov	r0, sl
 800cd52:	f7f3 fa45 	bl	80001e0 <memchr>
 800cd56:	b138      	cbz	r0, 800cd68 <_svfiprintf_r+0x150>
 800cd58:	9b04      	ldr	r3, [sp, #16]
 800cd5a:	eba0 000a 	sub.w	r0, r0, sl
 800cd5e:	2240      	movs	r2, #64	; 0x40
 800cd60:	4082      	lsls	r2, r0
 800cd62:	4313      	orrs	r3, r2
 800cd64:	3401      	adds	r4, #1
 800cd66:	9304      	str	r3, [sp, #16]
 800cd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6c:	4825      	ldr	r0, [pc, #148]	; (800ce04 <_svfiprintf_r+0x1ec>)
 800cd6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd72:	2206      	movs	r2, #6
 800cd74:	f7f3 fa34 	bl	80001e0 <memchr>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d038      	beq.n	800cdee <_svfiprintf_r+0x1d6>
 800cd7c:	4b22      	ldr	r3, [pc, #136]	; (800ce08 <_svfiprintf_r+0x1f0>)
 800cd7e:	bb1b      	cbnz	r3, 800cdc8 <_svfiprintf_r+0x1b0>
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	3307      	adds	r3, #7
 800cd84:	f023 0307 	bic.w	r3, r3, #7
 800cd88:	3308      	adds	r3, #8
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8e:	4433      	add	r3, r6
 800cd90:	9309      	str	r3, [sp, #36]	; 0x24
 800cd92:	e768      	b.n	800cc66 <_svfiprintf_r+0x4e>
 800cd94:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd98:	460c      	mov	r4, r1
 800cd9a:	2001      	movs	r0, #1
 800cd9c:	e7a6      	b.n	800ccec <_svfiprintf_r+0xd4>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	3401      	adds	r4, #1
 800cda2:	9305      	str	r3, [sp, #20]
 800cda4:	4619      	mov	r1, r3
 800cda6:	f04f 0c0a 	mov.w	ip, #10
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdb0:	3a30      	subs	r2, #48	; 0x30
 800cdb2:	2a09      	cmp	r2, #9
 800cdb4:	d903      	bls.n	800cdbe <_svfiprintf_r+0x1a6>
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0c6      	beq.n	800cd48 <_svfiprintf_r+0x130>
 800cdba:	9105      	str	r1, [sp, #20]
 800cdbc:	e7c4      	b.n	800cd48 <_svfiprintf_r+0x130>
 800cdbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e7f0      	b.n	800cdaa <_svfiprintf_r+0x192>
 800cdc8:	ab03      	add	r3, sp, #12
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	462a      	mov	r2, r5
 800cdce:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <_svfiprintf_r+0x1f4>)
 800cdd0:	a904      	add	r1, sp, #16
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	f7fc fbee 	bl	80095b4 <_printf_float>
 800cdd8:	1c42      	adds	r2, r0, #1
 800cdda:	4606      	mov	r6, r0
 800cddc:	d1d6      	bne.n	800cd8c <_svfiprintf_r+0x174>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	065b      	lsls	r3, r3, #25
 800cde2:	f53f af2d 	bmi.w	800cc40 <_svfiprintf_r+0x28>
 800cde6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cde8:	b01d      	add	sp, #116	; 0x74
 800cdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdee:	ab03      	add	r3, sp, #12
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <_svfiprintf_r+0x1f4>)
 800cdf6:	a904      	add	r1, sp, #16
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	f7fc fe7f 	bl	8009afc <_printf_i>
 800cdfe:	e7eb      	b.n	800cdd8 <_svfiprintf_r+0x1c0>
 800ce00:	0800e2f9 	.word	0x0800e2f9
 800ce04:	0800e303 	.word	0x0800e303
 800ce08:	080095b5 	.word	0x080095b5
 800ce0c:	0800cb65 	.word	0x0800cb65
 800ce10:	0800e2ff 	.word	0x0800e2ff

0800ce14 <__sflush_r>:
 800ce14:	898a      	ldrh	r2, [r1, #12]
 800ce16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	0710      	lsls	r0, r2, #28
 800ce1e:	460c      	mov	r4, r1
 800ce20:	d458      	bmi.n	800ced4 <__sflush_r+0xc0>
 800ce22:	684b      	ldr	r3, [r1, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dc05      	bgt.n	800ce34 <__sflush_r+0x20>
 800ce28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dc02      	bgt.n	800ce34 <__sflush_r+0x20>
 800ce2e:	2000      	movs	r0, #0
 800ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce36:	2e00      	cmp	r6, #0
 800ce38:	d0f9      	beq.n	800ce2e <__sflush_r+0x1a>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce40:	682f      	ldr	r7, [r5, #0]
 800ce42:	6a21      	ldr	r1, [r4, #32]
 800ce44:	602b      	str	r3, [r5, #0]
 800ce46:	d032      	beq.n	800ceae <__sflush_r+0x9a>
 800ce48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	075a      	lsls	r2, r3, #29
 800ce4e:	d505      	bpl.n	800ce5c <__sflush_r+0x48>
 800ce50:	6863      	ldr	r3, [r4, #4]
 800ce52:	1ac0      	subs	r0, r0, r3
 800ce54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce56:	b10b      	cbz	r3, 800ce5c <__sflush_r+0x48>
 800ce58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce5a:	1ac0      	subs	r0, r0, r3
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4602      	mov	r2, r0
 800ce60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce62:	6a21      	ldr	r1, [r4, #32]
 800ce64:	4628      	mov	r0, r5
 800ce66:	47b0      	blx	r6
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	d106      	bne.n	800ce7c <__sflush_r+0x68>
 800ce6e:	6829      	ldr	r1, [r5, #0]
 800ce70:	291d      	cmp	r1, #29
 800ce72:	d82b      	bhi.n	800cecc <__sflush_r+0xb8>
 800ce74:	4a29      	ldr	r2, [pc, #164]	; (800cf1c <__sflush_r+0x108>)
 800ce76:	410a      	asrs	r2, r1
 800ce78:	07d6      	lsls	r6, r2, #31
 800ce7a:	d427      	bmi.n	800cecc <__sflush_r+0xb8>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	6062      	str	r2, [r4, #4]
 800ce80:	04d9      	lsls	r1, r3, #19
 800ce82:	6922      	ldr	r2, [r4, #16]
 800ce84:	6022      	str	r2, [r4, #0]
 800ce86:	d504      	bpl.n	800ce92 <__sflush_r+0x7e>
 800ce88:	1c42      	adds	r2, r0, #1
 800ce8a:	d101      	bne.n	800ce90 <__sflush_r+0x7c>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b903      	cbnz	r3, 800ce92 <__sflush_r+0x7e>
 800ce90:	6560      	str	r0, [r4, #84]	; 0x54
 800ce92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce94:	602f      	str	r7, [r5, #0]
 800ce96:	2900      	cmp	r1, #0
 800ce98:	d0c9      	beq.n	800ce2e <__sflush_r+0x1a>
 800ce9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce9e:	4299      	cmp	r1, r3
 800cea0:	d002      	beq.n	800cea8 <__sflush_r+0x94>
 800cea2:	4628      	mov	r0, r5
 800cea4:	f7fe fa1a 	bl	800b2dc <_free_r>
 800cea8:	2000      	movs	r0, #0
 800ceaa:	6360      	str	r0, [r4, #52]	; 0x34
 800ceac:	e7c0      	b.n	800ce30 <__sflush_r+0x1c>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	47b0      	blx	r6
 800ceb4:	1c41      	adds	r1, r0, #1
 800ceb6:	d1c8      	bne.n	800ce4a <__sflush_r+0x36>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0c5      	beq.n	800ce4a <__sflush_r+0x36>
 800cebe:	2b1d      	cmp	r3, #29
 800cec0:	d001      	beq.n	800cec6 <__sflush_r+0xb2>
 800cec2:	2b16      	cmp	r3, #22
 800cec4:	d101      	bne.n	800ceca <__sflush_r+0xb6>
 800cec6:	602f      	str	r7, [r5, #0]
 800cec8:	e7b1      	b.n	800ce2e <__sflush_r+0x1a>
 800ceca:	89a3      	ldrh	r3, [r4, #12]
 800cecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced0:	81a3      	strh	r3, [r4, #12]
 800ced2:	e7ad      	b.n	800ce30 <__sflush_r+0x1c>
 800ced4:	690f      	ldr	r7, [r1, #16]
 800ced6:	2f00      	cmp	r7, #0
 800ced8:	d0a9      	beq.n	800ce2e <__sflush_r+0x1a>
 800ceda:	0793      	lsls	r3, r2, #30
 800cedc:	680e      	ldr	r6, [r1, #0]
 800cede:	bf08      	it	eq
 800cee0:	694b      	ldreq	r3, [r1, #20]
 800cee2:	600f      	str	r7, [r1, #0]
 800cee4:	bf18      	it	ne
 800cee6:	2300      	movne	r3, #0
 800cee8:	eba6 0807 	sub.w	r8, r6, r7
 800ceec:	608b      	str	r3, [r1, #8]
 800ceee:	f1b8 0f00 	cmp.w	r8, #0
 800cef2:	dd9c      	ble.n	800ce2e <__sflush_r+0x1a>
 800cef4:	6a21      	ldr	r1, [r4, #32]
 800cef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cef8:	4643      	mov	r3, r8
 800cefa:	463a      	mov	r2, r7
 800cefc:	4628      	mov	r0, r5
 800cefe:	47b0      	blx	r6
 800cf00:	2800      	cmp	r0, #0
 800cf02:	dc06      	bgt.n	800cf12 <__sflush_r+0xfe>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	e78e      	b.n	800ce30 <__sflush_r+0x1c>
 800cf12:	4407      	add	r7, r0
 800cf14:	eba8 0800 	sub.w	r8, r8, r0
 800cf18:	e7e9      	b.n	800ceee <__sflush_r+0xda>
 800cf1a:	bf00      	nop
 800cf1c:	dfbffffe 	.word	0xdfbffffe

0800cf20 <_fflush_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	690b      	ldr	r3, [r1, #16]
 800cf24:	4605      	mov	r5, r0
 800cf26:	460c      	mov	r4, r1
 800cf28:	b913      	cbnz	r3, 800cf30 <_fflush_r+0x10>
 800cf2a:	2500      	movs	r5, #0
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	bd38      	pop	{r3, r4, r5, pc}
 800cf30:	b118      	cbz	r0, 800cf3a <_fflush_r+0x1a>
 800cf32:	6a03      	ldr	r3, [r0, #32]
 800cf34:	b90b      	cbnz	r3, 800cf3a <_fflush_r+0x1a>
 800cf36:	f7fd f99f 	bl	800a278 <__sinit>
 800cf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0f3      	beq.n	800cf2a <_fflush_r+0xa>
 800cf42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf44:	07d0      	lsls	r0, r2, #31
 800cf46:	d404      	bmi.n	800cf52 <_fflush_r+0x32>
 800cf48:	0599      	lsls	r1, r3, #22
 800cf4a:	d402      	bmi.n	800cf52 <_fflush_r+0x32>
 800cf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf4e:	f7fd fb34 	bl	800a5ba <__retarget_lock_acquire_recursive>
 800cf52:	4628      	mov	r0, r5
 800cf54:	4621      	mov	r1, r4
 800cf56:	f7ff ff5d 	bl	800ce14 <__sflush_r>
 800cf5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf5c:	07da      	lsls	r2, r3, #31
 800cf5e:	4605      	mov	r5, r0
 800cf60:	d4e4      	bmi.n	800cf2c <_fflush_r+0xc>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	059b      	lsls	r3, r3, #22
 800cf66:	d4e1      	bmi.n	800cf2c <_fflush_r+0xc>
 800cf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6a:	f7fd fb27 	bl	800a5bc <__retarget_lock_release_recursive>
 800cf6e:	e7dd      	b.n	800cf2c <_fflush_r+0xc>

0800cf70 <memmove>:
 800cf70:	4288      	cmp	r0, r1
 800cf72:	b510      	push	{r4, lr}
 800cf74:	eb01 0402 	add.w	r4, r1, r2
 800cf78:	d902      	bls.n	800cf80 <memmove+0x10>
 800cf7a:	4284      	cmp	r4, r0
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	d807      	bhi.n	800cf90 <memmove+0x20>
 800cf80:	1e43      	subs	r3, r0, #1
 800cf82:	42a1      	cmp	r1, r4
 800cf84:	d008      	beq.n	800cf98 <memmove+0x28>
 800cf86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf8e:	e7f8      	b.n	800cf82 <memmove+0x12>
 800cf90:	4402      	add	r2, r0
 800cf92:	4601      	mov	r1, r0
 800cf94:	428a      	cmp	r2, r1
 800cf96:	d100      	bne.n	800cf9a <memmove+0x2a>
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfa2:	e7f7      	b.n	800cf94 <memmove+0x24>

0800cfa4 <strncmp>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	b16a      	cbz	r2, 800cfc4 <strncmp+0x20>
 800cfa8:	3901      	subs	r1, #1
 800cfaa:	1884      	adds	r4, r0, r2
 800cfac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d103      	bne.n	800cfc0 <strncmp+0x1c>
 800cfb8:	42a0      	cmp	r0, r4
 800cfba:	d001      	beq.n	800cfc0 <strncmp+0x1c>
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	d1f5      	bne.n	800cfac <strncmp+0x8>
 800cfc0:	1ad0      	subs	r0, r2, r3
 800cfc2:	bd10      	pop	{r4, pc}
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	e7fc      	b.n	800cfc2 <strncmp+0x1e>

0800cfc8 <_sbrk_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4d06      	ldr	r5, [pc, #24]	; (800cfe4 <_sbrk_r+0x1c>)
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	602b      	str	r3, [r5, #0]
 800cfd4:	f7f5 fb02 	bl	80025dc <_sbrk>
 800cfd8:	1c43      	adds	r3, r0, #1
 800cfda:	d102      	bne.n	800cfe2 <_sbrk_r+0x1a>
 800cfdc:	682b      	ldr	r3, [r5, #0]
 800cfde:	b103      	cbz	r3, 800cfe2 <_sbrk_r+0x1a>
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
 800cfe4:	200018c8 	.word	0x200018c8

0800cfe8 <nan>:
 800cfe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cff0 <nan+0x8>
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	00000000 	.word	0x00000000
 800cff4:	7ff80000 	.word	0x7ff80000

0800cff8 <__assert_func>:
 800cff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cffa:	4614      	mov	r4, r2
 800cffc:	461a      	mov	r2, r3
 800cffe:	4b09      	ldr	r3, [pc, #36]	; (800d024 <__assert_func+0x2c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4605      	mov	r5, r0
 800d004:	68d8      	ldr	r0, [r3, #12]
 800d006:	b14c      	cbz	r4, 800d01c <__assert_func+0x24>
 800d008:	4b07      	ldr	r3, [pc, #28]	; (800d028 <__assert_func+0x30>)
 800d00a:	9100      	str	r1, [sp, #0]
 800d00c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d010:	4906      	ldr	r1, [pc, #24]	; (800d02c <__assert_func+0x34>)
 800d012:	462b      	mov	r3, r5
 800d014:	f000 fbca 	bl	800d7ac <fiprintf>
 800d018:	f000 fbda 	bl	800d7d0 <abort>
 800d01c:	4b04      	ldr	r3, [pc, #16]	; (800d030 <__assert_func+0x38>)
 800d01e:	461c      	mov	r4, r3
 800d020:	e7f3      	b.n	800d00a <__assert_func+0x12>
 800d022:	bf00      	nop
 800d024:	20000080 	.word	0x20000080
 800d028:	0800e312 	.word	0x0800e312
 800d02c:	0800e31f 	.word	0x0800e31f
 800d030:	0800e34d 	.word	0x0800e34d

0800d034 <_calloc_r>:
 800d034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d036:	fba1 2402 	umull	r2, r4, r1, r2
 800d03a:	b94c      	cbnz	r4, 800d050 <_calloc_r+0x1c>
 800d03c:	4611      	mov	r1, r2
 800d03e:	9201      	str	r2, [sp, #4]
 800d040:	f7fe f9c0 	bl	800b3c4 <_malloc_r>
 800d044:	9a01      	ldr	r2, [sp, #4]
 800d046:	4605      	mov	r5, r0
 800d048:	b930      	cbnz	r0, 800d058 <_calloc_r+0x24>
 800d04a:	4628      	mov	r0, r5
 800d04c:	b003      	add	sp, #12
 800d04e:	bd30      	pop	{r4, r5, pc}
 800d050:	220c      	movs	r2, #12
 800d052:	6002      	str	r2, [r0, #0]
 800d054:	2500      	movs	r5, #0
 800d056:	e7f8      	b.n	800d04a <_calloc_r+0x16>
 800d058:	4621      	mov	r1, r4
 800d05a:	f7fd f9da 	bl	800a412 <memset>
 800d05e:	e7f4      	b.n	800d04a <_calloc_r+0x16>

0800d060 <rshift>:
 800d060:	6903      	ldr	r3, [r0, #16]
 800d062:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d06a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d06e:	f100 0414 	add.w	r4, r0, #20
 800d072:	dd45      	ble.n	800d100 <rshift+0xa0>
 800d074:	f011 011f 	ands.w	r1, r1, #31
 800d078:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d07c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d080:	d10c      	bne.n	800d09c <rshift+0x3c>
 800d082:	f100 0710 	add.w	r7, r0, #16
 800d086:	4629      	mov	r1, r5
 800d088:	42b1      	cmp	r1, r6
 800d08a:	d334      	bcc.n	800d0f6 <rshift+0x96>
 800d08c:	1a9b      	subs	r3, r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	1eea      	subs	r2, r5, #3
 800d092:	4296      	cmp	r6, r2
 800d094:	bf38      	it	cc
 800d096:	2300      	movcc	r3, #0
 800d098:	4423      	add	r3, r4
 800d09a:	e015      	b.n	800d0c8 <rshift+0x68>
 800d09c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0a0:	f1c1 0820 	rsb	r8, r1, #32
 800d0a4:	40cf      	lsrs	r7, r1
 800d0a6:	f105 0e04 	add.w	lr, r5, #4
 800d0aa:	46a1      	mov	r9, r4
 800d0ac:	4576      	cmp	r6, lr
 800d0ae:	46f4      	mov	ip, lr
 800d0b0:	d815      	bhi.n	800d0de <rshift+0x7e>
 800d0b2:	1a9a      	subs	r2, r3, r2
 800d0b4:	0092      	lsls	r2, r2, #2
 800d0b6:	3a04      	subs	r2, #4
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	42ae      	cmp	r6, r5
 800d0bc:	bf38      	it	cc
 800d0be:	2200      	movcc	r2, #0
 800d0c0:	18a3      	adds	r3, r4, r2
 800d0c2:	50a7      	str	r7, [r4, r2]
 800d0c4:	b107      	cbz	r7, 800d0c8 <rshift+0x68>
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	1b1a      	subs	r2, r3, r4
 800d0ca:	42a3      	cmp	r3, r4
 800d0cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0d0:	bf08      	it	eq
 800d0d2:	2300      	moveq	r3, #0
 800d0d4:	6102      	str	r2, [r0, #16]
 800d0d6:	bf08      	it	eq
 800d0d8:	6143      	streq	r3, [r0, #20]
 800d0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0de:	f8dc c000 	ldr.w	ip, [ip]
 800d0e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800d0e6:	ea4c 0707 	orr.w	r7, ip, r7
 800d0ea:	f849 7b04 	str.w	r7, [r9], #4
 800d0ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0f2:	40cf      	lsrs	r7, r1
 800d0f4:	e7da      	b.n	800d0ac <rshift+0x4c>
 800d0f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0fe:	e7c3      	b.n	800d088 <rshift+0x28>
 800d100:	4623      	mov	r3, r4
 800d102:	e7e1      	b.n	800d0c8 <rshift+0x68>

0800d104 <__hexdig_fun>:
 800d104:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d108:	2b09      	cmp	r3, #9
 800d10a:	d802      	bhi.n	800d112 <__hexdig_fun+0xe>
 800d10c:	3820      	subs	r0, #32
 800d10e:	b2c0      	uxtb	r0, r0
 800d110:	4770      	bx	lr
 800d112:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d116:	2b05      	cmp	r3, #5
 800d118:	d801      	bhi.n	800d11e <__hexdig_fun+0x1a>
 800d11a:	3847      	subs	r0, #71	; 0x47
 800d11c:	e7f7      	b.n	800d10e <__hexdig_fun+0xa>
 800d11e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d122:	2b05      	cmp	r3, #5
 800d124:	d801      	bhi.n	800d12a <__hexdig_fun+0x26>
 800d126:	3827      	subs	r0, #39	; 0x27
 800d128:	e7f1      	b.n	800d10e <__hexdig_fun+0xa>
 800d12a:	2000      	movs	r0, #0
 800d12c:	4770      	bx	lr
	...

0800d130 <__gethex>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	4617      	mov	r7, r2
 800d136:	680a      	ldr	r2, [r1, #0]
 800d138:	b085      	sub	sp, #20
 800d13a:	f102 0b02 	add.w	fp, r2, #2
 800d13e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d142:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d146:	4681      	mov	r9, r0
 800d148:	468a      	mov	sl, r1
 800d14a:	9302      	str	r3, [sp, #8]
 800d14c:	32fe      	adds	r2, #254	; 0xfe
 800d14e:	eb02 030b 	add.w	r3, r2, fp
 800d152:	46d8      	mov	r8, fp
 800d154:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d158:	9301      	str	r3, [sp, #4]
 800d15a:	2830      	cmp	r0, #48	; 0x30
 800d15c:	d0f7      	beq.n	800d14e <__gethex+0x1e>
 800d15e:	f7ff ffd1 	bl	800d104 <__hexdig_fun>
 800d162:	4604      	mov	r4, r0
 800d164:	2800      	cmp	r0, #0
 800d166:	d138      	bne.n	800d1da <__gethex+0xaa>
 800d168:	49a7      	ldr	r1, [pc, #668]	; (800d408 <__gethex+0x2d8>)
 800d16a:	2201      	movs	r2, #1
 800d16c:	4640      	mov	r0, r8
 800d16e:	f7ff ff19 	bl	800cfa4 <strncmp>
 800d172:	4606      	mov	r6, r0
 800d174:	2800      	cmp	r0, #0
 800d176:	d169      	bne.n	800d24c <__gethex+0x11c>
 800d178:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d17c:	465d      	mov	r5, fp
 800d17e:	f7ff ffc1 	bl	800d104 <__hexdig_fun>
 800d182:	2800      	cmp	r0, #0
 800d184:	d064      	beq.n	800d250 <__gethex+0x120>
 800d186:	465a      	mov	r2, fp
 800d188:	7810      	ldrb	r0, [r2, #0]
 800d18a:	2830      	cmp	r0, #48	; 0x30
 800d18c:	4690      	mov	r8, r2
 800d18e:	f102 0201 	add.w	r2, r2, #1
 800d192:	d0f9      	beq.n	800d188 <__gethex+0x58>
 800d194:	f7ff ffb6 	bl	800d104 <__hexdig_fun>
 800d198:	2301      	movs	r3, #1
 800d19a:	fab0 f480 	clz	r4, r0
 800d19e:	0964      	lsrs	r4, r4, #5
 800d1a0:	465e      	mov	r6, fp
 800d1a2:	9301      	str	r3, [sp, #4]
 800d1a4:	4642      	mov	r2, r8
 800d1a6:	4615      	mov	r5, r2
 800d1a8:	3201      	adds	r2, #1
 800d1aa:	7828      	ldrb	r0, [r5, #0]
 800d1ac:	f7ff ffaa 	bl	800d104 <__hexdig_fun>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d1f8      	bne.n	800d1a6 <__gethex+0x76>
 800d1b4:	4994      	ldr	r1, [pc, #592]	; (800d408 <__gethex+0x2d8>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f7ff fef3 	bl	800cfa4 <strncmp>
 800d1be:	b978      	cbnz	r0, 800d1e0 <__gethex+0xb0>
 800d1c0:	b946      	cbnz	r6, 800d1d4 <__gethex+0xa4>
 800d1c2:	1c6e      	adds	r6, r5, #1
 800d1c4:	4632      	mov	r2, r6
 800d1c6:	4615      	mov	r5, r2
 800d1c8:	3201      	adds	r2, #1
 800d1ca:	7828      	ldrb	r0, [r5, #0]
 800d1cc:	f7ff ff9a 	bl	800d104 <__hexdig_fun>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d1f8      	bne.n	800d1c6 <__gethex+0x96>
 800d1d4:	1b73      	subs	r3, r6, r5
 800d1d6:	009e      	lsls	r6, r3, #2
 800d1d8:	e004      	b.n	800d1e4 <__gethex+0xb4>
 800d1da:	2400      	movs	r4, #0
 800d1dc:	4626      	mov	r6, r4
 800d1de:	e7e1      	b.n	800d1a4 <__gethex+0x74>
 800d1e0:	2e00      	cmp	r6, #0
 800d1e2:	d1f7      	bne.n	800d1d4 <__gethex+0xa4>
 800d1e4:	782b      	ldrb	r3, [r5, #0]
 800d1e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1ea:	2b50      	cmp	r3, #80	; 0x50
 800d1ec:	d13d      	bne.n	800d26a <__gethex+0x13a>
 800d1ee:	786b      	ldrb	r3, [r5, #1]
 800d1f0:	2b2b      	cmp	r3, #43	; 0x2b
 800d1f2:	d02f      	beq.n	800d254 <__gethex+0x124>
 800d1f4:	2b2d      	cmp	r3, #45	; 0x2d
 800d1f6:	d031      	beq.n	800d25c <__gethex+0x12c>
 800d1f8:	1c69      	adds	r1, r5, #1
 800d1fa:	f04f 0b00 	mov.w	fp, #0
 800d1fe:	7808      	ldrb	r0, [r1, #0]
 800d200:	f7ff ff80 	bl	800d104 <__hexdig_fun>
 800d204:	1e42      	subs	r2, r0, #1
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	2a18      	cmp	r2, #24
 800d20a:	d82e      	bhi.n	800d26a <__gethex+0x13a>
 800d20c:	f1a0 0210 	sub.w	r2, r0, #16
 800d210:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d214:	f7ff ff76 	bl	800d104 <__hexdig_fun>
 800d218:	f100 3cff 	add.w	ip, r0, #4294967295
 800d21c:	fa5f fc8c 	uxtb.w	ip, ip
 800d220:	f1bc 0f18 	cmp.w	ip, #24
 800d224:	d91d      	bls.n	800d262 <__gethex+0x132>
 800d226:	f1bb 0f00 	cmp.w	fp, #0
 800d22a:	d000      	beq.n	800d22e <__gethex+0xfe>
 800d22c:	4252      	negs	r2, r2
 800d22e:	4416      	add	r6, r2
 800d230:	f8ca 1000 	str.w	r1, [sl]
 800d234:	b1dc      	cbz	r4, 800d26e <__gethex+0x13e>
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bf14      	ite	ne
 800d23c:	f04f 0800 	movne.w	r8, #0
 800d240:	f04f 0806 	moveq.w	r8, #6
 800d244:	4640      	mov	r0, r8
 800d246:	b005      	add	sp, #20
 800d248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24c:	4645      	mov	r5, r8
 800d24e:	4626      	mov	r6, r4
 800d250:	2401      	movs	r4, #1
 800d252:	e7c7      	b.n	800d1e4 <__gethex+0xb4>
 800d254:	f04f 0b00 	mov.w	fp, #0
 800d258:	1ca9      	adds	r1, r5, #2
 800d25a:	e7d0      	b.n	800d1fe <__gethex+0xce>
 800d25c:	f04f 0b01 	mov.w	fp, #1
 800d260:	e7fa      	b.n	800d258 <__gethex+0x128>
 800d262:	230a      	movs	r3, #10
 800d264:	fb03 0002 	mla	r0, r3, r2, r0
 800d268:	e7d0      	b.n	800d20c <__gethex+0xdc>
 800d26a:	4629      	mov	r1, r5
 800d26c:	e7e0      	b.n	800d230 <__gethex+0x100>
 800d26e:	eba5 0308 	sub.w	r3, r5, r8
 800d272:	3b01      	subs	r3, #1
 800d274:	4621      	mov	r1, r4
 800d276:	2b07      	cmp	r3, #7
 800d278:	dc0a      	bgt.n	800d290 <__gethex+0x160>
 800d27a:	4648      	mov	r0, r9
 800d27c:	f7fe f92e 	bl	800b4dc <_Balloc>
 800d280:	4604      	mov	r4, r0
 800d282:	b940      	cbnz	r0, 800d296 <__gethex+0x166>
 800d284:	4b61      	ldr	r3, [pc, #388]	; (800d40c <__gethex+0x2dc>)
 800d286:	4602      	mov	r2, r0
 800d288:	21e4      	movs	r1, #228	; 0xe4
 800d28a:	4861      	ldr	r0, [pc, #388]	; (800d410 <__gethex+0x2e0>)
 800d28c:	f7ff feb4 	bl	800cff8 <__assert_func>
 800d290:	3101      	adds	r1, #1
 800d292:	105b      	asrs	r3, r3, #1
 800d294:	e7ef      	b.n	800d276 <__gethex+0x146>
 800d296:	f100 0a14 	add.w	sl, r0, #20
 800d29a:	2300      	movs	r3, #0
 800d29c:	495a      	ldr	r1, [pc, #360]	; (800d408 <__gethex+0x2d8>)
 800d29e:	f8cd a004 	str.w	sl, [sp, #4]
 800d2a2:	469b      	mov	fp, r3
 800d2a4:	45a8      	cmp	r8, r5
 800d2a6:	d342      	bcc.n	800d32e <__gethex+0x1fe>
 800d2a8:	9801      	ldr	r0, [sp, #4]
 800d2aa:	f840 bb04 	str.w	fp, [r0], #4
 800d2ae:	eba0 000a 	sub.w	r0, r0, sl
 800d2b2:	1080      	asrs	r0, r0, #2
 800d2b4:	6120      	str	r0, [r4, #16]
 800d2b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d2ba:	4658      	mov	r0, fp
 800d2bc:	f7fe fa00 	bl	800b6c0 <__hi0bits>
 800d2c0:	683d      	ldr	r5, [r7, #0]
 800d2c2:	eba8 0000 	sub.w	r0, r8, r0
 800d2c6:	42a8      	cmp	r0, r5
 800d2c8:	dd59      	ble.n	800d37e <__gethex+0x24e>
 800d2ca:	eba0 0805 	sub.w	r8, r0, r5
 800d2ce:	4641      	mov	r1, r8
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7fe fd8f 	bl	800bdf4 <__any_on>
 800d2d6:	4683      	mov	fp, r0
 800d2d8:	b1b8      	cbz	r0, 800d30a <__gethex+0x1da>
 800d2da:	f108 33ff 	add.w	r3, r8, #4294967295
 800d2de:	1159      	asrs	r1, r3, #5
 800d2e0:	f003 021f 	and.w	r2, r3, #31
 800d2e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d2e8:	f04f 0b01 	mov.w	fp, #1
 800d2ec:	fa0b f202 	lsl.w	r2, fp, r2
 800d2f0:	420a      	tst	r2, r1
 800d2f2:	d00a      	beq.n	800d30a <__gethex+0x1da>
 800d2f4:	455b      	cmp	r3, fp
 800d2f6:	dd06      	ble.n	800d306 <__gethex+0x1d6>
 800d2f8:	f1a8 0102 	sub.w	r1, r8, #2
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f7fe fd79 	bl	800bdf4 <__any_on>
 800d302:	2800      	cmp	r0, #0
 800d304:	d138      	bne.n	800d378 <__gethex+0x248>
 800d306:	f04f 0b02 	mov.w	fp, #2
 800d30a:	4641      	mov	r1, r8
 800d30c:	4620      	mov	r0, r4
 800d30e:	f7ff fea7 	bl	800d060 <rshift>
 800d312:	4446      	add	r6, r8
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	42b3      	cmp	r3, r6
 800d318:	da41      	bge.n	800d39e <__gethex+0x26e>
 800d31a:	4621      	mov	r1, r4
 800d31c:	4648      	mov	r0, r9
 800d31e:	f7fe f91d 	bl	800b55c <_Bfree>
 800d322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d324:	2300      	movs	r3, #0
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d32c:	e78a      	b.n	800d244 <__gethex+0x114>
 800d32e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d332:	2a2e      	cmp	r2, #46	; 0x2e
 800d334:	d014      	beq.n	800d360 <__gethex+0x230>
 800d336:	2b20      	cmp	r3, #32
 800d338:	d106      	bne.n	800d348 <__gethex+0x218>
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	f843 bb04 	str.w	fp, [r3], #4
 800d340:	f04f 0b00 	mov.w	fp, #0
 800d344:	9301      	str	r3, [sp, #4]
 800d346:	465b      	mov	r3, fp
 800d348:	7828      	ldrb	r0, [r5, #0]
 800d34a:	9303      	str	r3, [sp, #12]
 800d34c:	f7ff feda 	bl	800d104 <__hexdig_fun>
 800d350:	9b03      	ldr	r3, [sp, #12]
 800d352:	f000 000f 	and.w	r0, r0, #15
 800d356:	4098      	lsls	r0, r3
 800d358:	ea4b 0b00 	orr.w	fp, fp, r0
 800d35c:	3304      	adds	r3, #4
 800d35e:	e7a1      	b.n	800d2a4 <__gethex+0x174>
 800d360:	45a8      	cmp	r8, r5
 800d362:	d8e8      	bhi.n	800d336 <__gethex+0x206>
 800d364:	2201      	movs	r2, #1
 800d366:	4628      	mov	r0, r5
 800d368:	9303      	str	r3, [sp, #12]
 800d36a:	f7ff fe1b 	bl	800cfa4 <strncmp>
 800d36e:	4926      	ldr	r1, [pc, #152]	; (800d408 <__gethex+0x2d8>)
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	2800      	cmp	r0, #0
 800d374:	d1df      	bne.n	800d336 <__gethex+0x206>
 800d376:	e795      	b.n	800d2a4 <__gethex+0x174>
 800d378:	f04f 0b03 	mov.w	fp, #3
 800d37c:	e7c5      	b.n	800d30a <__gethex+0x1da>
 800d37e:	da0b      	bge.n	800d398 <__gethex+0x268>
 800d380:	eba5 0800 	sub.w	r8, r5, r0
 800d384:	4621      	mov	r1, r4
 800d386:	4642      	mov	r2, r8
 800d388:	4648      	mov	r0, r9
 800d38a:	f7fe fb01 	bl	800b990 <__lshift>
 800d38e:	eba6 0608 	sub.w	r6, r6, r8
 800d392:	4604      	mov	r4, r0
 800d394:	f100 0a14 	add.w	sl, r0, #20
 800d398:	f04f 0b00 	mov.w	fp, #0
 800d39c:	e7ba      	b.n	800d314 <__gethex+0x1e4>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	42b3      	cmp	r3, r6
 800d3a2:	dd73      	ble.n	800d48c <__gethex+0x35c>
 800d3a4:	1b9e      	subs	r6, r3, r6
 800d3a6:	42b5      	cmp	r5, r6
 800d3a8:	dc34      	bgt.n	800d414 <__gethex+0x2e4>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d023      	beq.n	800d3f8 <__gethex+0x2c8>
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d025      	beq.n	800d400 <__gethex+0x2d0>
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d115      	bne.n	800d3e4 <__gethex+0x2b4>
 800d3b8:	42b5      	cmp	r5, r6
 800d3ba:	d113      	bne.n	800d3e4 <__gethex+0x2b4>
 800d3bc:	2d01      	cmp	r5, #1
 800d3be:	d10b      	bne.n	800d3d8 <__gethex+0x2a8>
 800d3c0:	9a02      	ldr	r2, [sp, #8]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6013      	str	r3, [r2, #0]
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	6123      	str	r3, [r4, #16]
 800d3ca:	f8ca 3000 	str.w	r3, [sl]
 800d3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d3d4:	601c      	str	r4, [r3, #0]
 800d3d6:	e735      	b.n	800d244 <__gethex+0x114>
 800d3d8:	1e69      	subs	r1, r5, #1
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f7fe fd0a 	bl	800bdf4 <__any_on>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d1ed      	bne.n	800d3c0 <__gethex+0x290>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4648      	mov	r0, r9
 800d3e8:	f7fe f8b8 	bl	800b55c <_Bfree>
 800d3ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d3f6:	e725      	b.n	800d244 <__gethex+0x114>
 800d3f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1f2      	bne.n	800d3e4 <__gethex+0x2b4>
 800d3fe:	e7df      	b.n	800d3c0 <__gethex+0x290>
 800d400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1dc      	bne.n	800d3c0 <__gethex+0x290>
 800d406:	e7ed      	b.n	800d3e4 <__gethex+0x2b4>
 800d408:	0800e1a4 	.word	0x0800e1a4
 800d40c:	0800e03d 	.word	0x0800e03d
 800d410:	0800e34e 	.word	0x0800e34e
 800d414:	f106 38ff 	add.w	r8, r6, #4294967295
 800d418:	f1bb 0f00 	cmp.w	fp, #0
 800d41c:	d133      	bne.n	800d486 <__gethex+0x356>
 800d41e:	f1b8 0f00 	cmp.w	r8, #0
 800d422:	d004      	beq.n	800d42e <__gethex+0x2fe>
 800d424:	4641      	mov	r1, r8
 800d426:	4620      	mov	r0, r4
 800d428:	f7fe fce4 	bl	800bdf4 <__any_on>
 800d42c:	4683      	mov	fp, r0
 800d42e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d432:	2301      	movs	r3, #1
 800d434:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d438:	f008 081f 	and.w	r8, r8, #31
 800d43c:	fa03 f308 	lsl.w	r3, r3, r8
 800d440:	4213      	tst	r3, r2
 800d442:	4631      	mov	r1, r6
 800d444:	4620      	mov	r0, r4
 800d446:	bf18      	it	ne
 800d448:	f04b 0b02 	orrne.w	fp, fp, #2
 800d44c:	1bad      	subs	r5, r5, r6
 800d44e:	f7ff fe07 	bl	800d060 <rshift>
 800d452:	687e      	ldr	r6, [r7, #4]
 800d454:	f04f 0802 	mov.w	r8, #2
 800d458:	f1bb 0f00 	cmp.w	fp, #0
 800d45c:	d04a      	beq.n	800d4f4 <__gethex+0x3c4>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b02      	cmp	r3, #2
 800d462:	d016      	beq.n	800d492 <__gethex+0x362>
 800d464:	2b03      	cmp	r3, #3
 800d466:	d018      	beq.n	800d49a <__gethex+0x36a>
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d109      	bne.n	800d480 <__gethex+0x350>
 800d46c:	f01b 0f02 	tst.w	fp, #2
 800d470:	d006      	beq.n	800d480 <__gethex+0x350>
 800d472:	f8da 3000 	ldr.w	r3, [sl]
 800d476:	ea4b 0b03 	orr.w	fp, fp, r3
 800d47a:	f01b 0f01 	tst.w	fp, #1
 800d47e:	d10f      	bne.n	800d4a0 <__gethex+0x370>
 800d480:	f048 0810 	orr.w	r8, r8, #16
 800d484:	e036      	b.n	800d4f4 <__gethex+0x3c4>
 800d486:	f04f 0b01 	mov.w	fp, #1
 800d48a:	e7d0      	b.n	800d42e <__gethex+0x2fe>
 800d48c:	f04f 0801 	mov.w	r8, #1
 800d490:	e7e2      	b.n	800d458 <__gethex+0x328>
 800d492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d494:	f1c3 0301 	rsb	r3, r3, #1
 800d498:	930f      	str	r3, [sp, #60]	; 0x3c
 800d49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d0ef      	beq.n	800d480 <__gethex+0x350>
 800d4a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d4a4:	f104 0214 	add.w	r2, r4, #20
 800d4a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4694      	mov	ip, r2
 800d4b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d4be:	d01e      	beq.n	800d4fe <__gethex+0x3ce>
 800d4c0:	3101      	adds	r1, #1
 800d4c2:	f8cc 1000 	str.w	r1, [ip]
 800d4c6:	f1b8 0f02 	cmp.w	r8, #2
 800d4ca:	f104 0214 	add.w	r2, r4, #20
 800d4ce:	d13d      	bne.n	800d54c <__gethex+0x41c>
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	42ab      	cmp	r3, r5
 800d4d6:	d10b      	bne.n	800d4f0 <__gethex+0x3c0>
 800d4d8:	1169      	asrs	r1, r5, #5
 800d4da:	2301      	movs	r3, #1
 800d4dc:	f005 051f 	and.w	r5, r5, #31
 800d4e0:	fa03 f505 	lsl.w	r5, r3, r5
 800d4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4e8:	421d      	tst	r5, r3
 800d4ea:	bf18      	it	ne
 800d4ec:	f04f 0801 	movne.w	r8, #1
 800d4f0:	f048 0820 	orr.w	r8, r8, #32
 800d4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4f6:	601c      	str	r4, [r3, #0]
 800d4f8:	9b02      	ldr	r3, [sp, #8]
 800d4fa:	601e      	str	r6, [r3, #0]
 800d4fc:	e6a2      	b.n	800d244 <__gethex+0x114>
 800d4fe:	4290      	cmp	r0, r2
 800d500:	f842 3c04 	str.w	r3, [r2, #-4]
 800d504:	d8d6      	bhi.n	800d4b4 <__gethex+0x384>
 800d506:	68a2      	ldr	r2, [r4, #8]
 800d508:	4593      	cmp	fp, r2
 800d50a:	db17      	blt.n	800d53c <__gethex+0x40c>
 800d50c:	6861      	ldr	r1, [r4, #4]
 800d50e:	4648      	mov	r0, r9
 800d510:	3101      	adds	r1, #1
 800d512:	f7fd ffe3 	bl	800b4dc <_Balloc>
 800d516:	4682      	mov	sl, r0
 800d518:	b918      	cbnz	r0, 800d522 <__gethex+0x3f2>
 800d51a:	4b1b      	ldr	r3, [pc, #108]	; (800d588 <__gethex+0x458>)
 800d51c:	4602      	mov	r2, r0
 800d51e:	2184      	movs	r1, #132	; 0x84
 800d520:	e6b3      	b.n	800d28a <__gethex+0x15a>
 800d522:	6922      	ldr	r2, [r4, #16]
 800d524:	3202      	adds	r2, #2
 800d526:	f104 010c 	add.w	r1, r4, #12
 800d52a:	0092      	lsls	r2, r2, #2
 800d52c:	300c      	adds	r0, #12
 800d52e:	f7fd f846 	bl	800a5be <memcpy>
 800d532:	4621      	mov	r1, r4
 800d534:	4648      	mov	r0, r9
 800d536:	f7fe f811 	bl	800b55c <_Bfree>
 800d53a:	4654      	mov	r4, sl
 800d53c:	6922      	ldr	r2, [r4, #16]
 800d53e:	1c51      	adds	r1, r2, #1
 800d540:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d544:	6121      	str	r1, [r4, #16]
 800d546:	2101      	movs	r1, #1
 800d548:	6151      	str	r1, [r2, #20]
 800d54a:	e7bc      	b.n	800d4c6 <__gethex+0x396>
 800d54c:	6921      	ldr	r1, [r4, #16]
 800d54e:	4559      	cmp	r1, fp
 800d550:	dd0b      	ble.n	800d56a <__gethex+0x43a>
 800d552:	2101      	movs	r1, #1
 800d554:	4620      	mov	r0, r4
 800d556:	f7ff fd83 	bl	800d060 <rshift>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	3601      	adds	r6, #1
 800d55e:	42b3      	cmp	r3, r6
 800d560:	f6ff aedb 	blt.w	800d31a <__gethex+0x1ea>
 800d564:	f04f 0801 	mov.w	r8, #1
 800d568:	e7c2      	b.n	800d4f0 <__gethex+0x3c0>
 800d56a:	f015 051f 	ands.w	r5, r5, #31
 800d56e:	d0f9      	beq.n	800d564 <__gethex+0x434>
 800d570:	9b01      	ldr	r3, [sp, #4]
 800d572:	441a      	add	r2, r3
 800d574:	f1c5 0520 	rsb	r5, r5, #32
 800d578:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d57c:	f7fe f8a0 	bl	800b6c0 <__hi0bits>
 800d580:	42a8      	cmp	r0, r5
 800d582:	dbe6      	blt.n	800d552 <__gethex+0x422>
 800d584:	e7ee      	b.n	800d564 <__gethex+0x434>
 800d586:	bf00      	nop
 800d588:	0800e03d 	.word	0x0800e03d

0800d58c <L_shift>:
 800d58c:	f1c2 0208 	rsb	r2, r2, #8
 800d590:	0092      	lsls	r2, r2, #2
 800d592:	b570      	push	{r4, r5, r6, lr}
 800d594:	f1c2 0620 	rsb	r6, r2, #32
 800d598:	6843      	ldr	r3, [r0, #4]
 800d59a:	6804      	ldr	r4, [r0, #0]
 800d59c:	fa03 f506 	lsl.w	r5, r3, r6
 800d5a0:	432c      	orrs	r4, r5
 800d5a2:	40d3      	lsrs	r3, r2
 800d5a4:	6004      	str	r4, [r0, #0]
 800d5a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d5aa:	4288      	cmp	r0, r1
 800d5ac:	d3f4      	bcc.n	800d598 <L_shift+0xc>
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}

0800d5b0 <__match>:
 800d5b0:	b530      	push	{r4, r5, lr}
 800d5b2:	6803      	ldr	r3, [r0, #0]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ba:	b914      	cbnz	r4, 800d5c2 <__match+0x12>
 800d5bc:	6003      	str	r3, [r0, #0]
 800d5be:	2001      	movs	r0, #1
 800d5c0:	bd30      	pop	{r4, r5, pc}
 800d5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d5ca:	2d19      	cmp	r5, #25
 800d5cc:	bf98      	it	ls
 800d5ce:	3220      	addls	r2, #32
 800d5d0:	42a2      	cmp	r2, r4
 800d5d2:	d0f0      	beq.n	800d5b6 <__match+0x6>
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e7f3      	b.n	800d5c0 <__match+0x10>

0800d5d8 <__hexnan>:
 800d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	680b      	ldr	r3, [r1, #0]
 800d5de:	6801      	ldr	r1, [r0, #0]
 800d5e0:	115e      	asrs	r6, r3, #5
 800d5e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5e6:	f013 031f 	ands.w	r3, r3, #31
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	bf18      	it	ne
 800d5ee:	3604      	addne	r6, #4
 800d5f0:	2500      	movs	r5, #0
 800d5f2:	1f37      	subs	r7, r6, #4
 800d5f4:	4682      	mov	sl, r0
 800d5f6:	4690      	mov	r8, r2
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5fe:	46b9      	mov	r9, r7
 800d600:	463c      	mov	r4, r7
 800d602:	9502      	str	r5, [sp, #8]
 800d604:	46ab      	mov	fp, r5
 800d606:	784a      	ldrb	r2, [r1, #1]
 800d608:	1c4b      	adds	r3, r1, #1
 800d60a:	9303      	str	r3, [sp, #12]
 800d60c:	b342      	cbz	r2, 800d660 <__hexnan+0x88>
 800d60e:	4610      	mov	r0, r2
 800d610:	9105      	str	r1, [sp, #20]
 800d612:	9204      	str	r2, [sp, #16]
 800d614:	f7ff fd76 	bl	800d104 <__hexdig_fun>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d14f      	bne.n	800d6bc <__hexnan+0xe4>
 800d61c:	9a04      	ldr	r2, [sp, #16]
 800d61e:	9905      	ldr	r1, [sp, #20]
 800d620:	2a20      	cmp	r2, #32
 800d622:	d818      	bhi.n	800d656 <__hexnan+0x7e>
 800d624:	9b02      	ldr	r3, [sp, #8]
 800d626:	459b      	cmp	fp, r3
 800d628:	dd13      	ble.n	800d652 <__hexnan+0x7a>
 800d62a:	454c      	cmp	r4, r9
 800d62c:	d206      	bcs.n	800d63c <__hexnan+0x64>
 800d62e:	2d07      	cmp	r5, #7
 800d630:	dc04      	bgt.n	800d63c <__hexnan+0x64>
 800d632:	462a      	mov	r2, r5
 800d634:	4649      	mov	r1, r9
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff ffa8 	bl	800d58c <L_shift>
 800d63c:	4544      	cmp	r4, r8
 800d63e:	d950      	bls.n	800d6e2 <__hexnan+0x10a>
 800d640:	2300      	movs	r3, #0
 800d642:	f1a4 0904 	sub.w	r9, r4, #4
 800d646:	f844 3c04 	str.w	r3, [r4, #-4]
 800d64a:	f8cd b008 	str.w	fp, [sp, #8]
 800d64e:	464c      	mov	r4, r9
 800d650:	461d      	mov	r5, r3
 800d652:	9903      	ldr	r1, [sp, #12]
 800d654:	e7d7      	b.n	800d606 <__hexnan+0x2e>
 800d656:	2a29      	cmp	r2, #41	; 0x29
 800d658:	d155      	bne.n	800d706 <__hexnan+0x12e>
 800d65a:	3102      	adds	r1, #2
 800d65c:	f8ca 1000 	str.w	r1, [sl]
 800d660:	f1bb 0f00 	cmp.w	fp, #0
 800d664:	d04f      	beq.n	800d706 <__hexnan+0x12e>
 800d666:	454c      	cmp	r4, r9
 800d668:	d206      	bcs.n	800d678 <__hexnan+0xa0>
 800d66a:	2d07      	cmp	r5, #7
 800d66c:	dc04      	bgt.n	800d678 <__hexnan+0xa0>
 800d66e:	462a      	mov	r2, r5
 800d670:	4649      	mov	r1, r9
 800d672:	4620      	mov	r0, r4
 800d674:	f7ff ff8a 	bl	800d58c <L_shift>
 800d678:	4544      	cmp	r4, r8
 800d67a:	d934      	bls.n	800d6e6 <__hexnan+0x10e>
 800d67c:	f1a8 0204 	sub.w	r2, r8, #4
 800d680:	4623      	mov	r3, r4
 800d682:	f853 1b04 	ldr.w	r1, [r3], #4
 800d686:	f842 1f04 	str.w	r1, [r2, #4]!
 800d68a:	429f      	cmp	r7, r3
 800d68c:	d2f9      	bcs.n	800d682 <__hexnan+0xaa>
 800d68e:	1b3b      	subs	r3, r7, r4
 800d690:	f023 0303 	bic.w	r3, r3, #3
 800d694:	3304      	adds	r3, #4
 800d696:	3e03      	subs	r6, #3
 800d698:	3401      	adds	r4, #1
 800d69a:	42a6      	cmp	r6, r4
 800d69c:	bf38      	it	cc
 800d69e:	2304      	movcc	r3, #4
 800d6a0:	4443      	add	r3, r8
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f843 2b04 	str.w	r2, [r3], #4
 800d6a8:	429f      	cmp	r7, r3
 800d6aa:	d2fb      	bcs.n	800d6a4 <__hexnan+0xcc>
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	b91b      	cbnz	r3, 800d6b8 <__hexnan+0xe0>
 800d6b0:	4547      	cmp	r7, r8
 800d6b2:	d126      	bne.n	800d702 <__hexnan+0x12a>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	603b      	str	r3, [r7, #0]
 800d6b8:	2005      	movs	r0, #5
 800d6ba:	e025      	b.n	800d708 <__hexnan+0x130>
 800d6bc:	3501      	adds	r5, #1
 800d6be:	2d08      	cmp	r5, #8
 800d6c0:	f10b 0b01 	add.w	fp, fp, #1
 800d6c4:	dd06      	ble.n	800d6d4 <__hexnan+0xfc>
 800d6c6:	4544      	cmp	r4, r8
 800d6c8:	d9c3      	bls.n	800d652 <__hexnan+0x7a>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6d0:	2501      	movs	r5, #1
 800d6d2:	3c04      	subs	r4, #4
 800d6d4:	6822      	ldr	r2, [r4, #0]
 800d6d6:	f000 000f 	and.w	r0, r0, #15
 800d6da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6de:	6020      	str	r0, [r4, #0]
 800d6e0:	e7b7      	b.n	800d652 <__hexnan+0x7a>
 800d6e2:	2508      	movs	r5, #8
 800d6e4:	e7b5      	b.n	800d652 <__hexnan+0x7a>
 800d6e6:	9b01      	ldr	r3, [sp, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d0df      	beq.n	800d6ac <__hexnan+0xd4>
 800d6ec:	f1c3 0320 	rsb	r3, r3, #32
 800d6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f4:	40da      	lsrs	r2, r3
 800d6f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800d700:	e7d4      	b.n	800d6ac <__hexnan+0xd4>
 800d702:	3f04      	subs	r7, #4
 800d704:	e7d2      	b.n	800d6ac <__hexnan+0xd4>
 800d706:	2004      	movs	r0, #4
 800d708:	b007      	add	sp, #28
 800d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d70e <__ascii_mbtowc>:
 800d70e:	b082      	sub	sp, #8
 800d710:	b901      	cbnz	r1, 800d714 <__ascii_mbtowc+0x6>
 800d712:	a901      	add	r1, sp, #4
 800d714:	b142      	cbz	r2, 800d728 <__ascii_mbtowc+0x1a>
 800d716:	b14b      	cbz	r3, 800d72c <__ascii_mbtowc+0x1e>
 800d718:	7813      	ldrb	r3, [r2, #0]
 800d71a:	600b      	str	r3, [r1, #0]
 800d71c:	7812      	ldrb	r2, [r2, #0]
 800d71e:	1e10      	subs	r0, r2, #0
 800d720:	bf18      	it	ne
 800d722:	2001      	movne	r0, #1
 800d724:	b002      	add	sp, #8
 800d726:	4770      	bx	lr
 800d728:	4610      	mov	r0, r2
 800d72a:	e7fb      	b.n	800d724 <__ascii_mbtowc+0x16>
 800d72c:	f06f 0001 	mvn.w	r0, #1
 800d730:	e7f8      	b.n	800d724 <__ascii_mbtowc+0x16>

0800d732 <_realloc_r>:
 800d732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d736:	4680      	mov	r8, r0
 800d738:	4614      	mov	r4, r2
 800d73a:	460e      	mov	r6, r1
 800d73c:	b921      	cbnz	r1, 800d748 <_realloc_r+0x16>
 800d73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d742:	4611      	mov	r1, r2
 800d744:	f7fd be3e 	b.w	800b3c4 <_malloc_r>
 800d748:	b92a      	cbnz	r2, 800d756 <_realloc_r+0x24>
 800d74a:	f7fd fdc7 	bl	800b2dc <_free_r>
 800d74e:	4625      	mov	r5, r4
 800d750:	4628      	mov	r0, r5
 800d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d756:	f000 f842 	bl	800d7de <_malloc_usable_size_r>
 800d75a:	4284      	cmp	r4, r0
 800d75c:	4607      	mov	r7, r0
 800d75e:	d802      	bhi.n	800d766 <_realloc_r+0x34>
 800d760:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d764:	d812      	bhi.n	800d78c <_realloc_r+0x5a>
 800d766:	4621      	mov	r1, r4
 800d768:	4640      	mov	r0, r8
 800d76a:	f7fd fe2b 	bl	800b3c4 <_malloc_r>
 800d76e:	4605      	mov	r5, r0
 800d770:	2800      	cmp	r0, #0
 800d772:	d0ed      	beq.n	800d750 <_realloc_r+0x1e>
 800d774:	42bc      	cmp	r4, r7
 800d776:	4622      	mov	r2, r4
 800d778:	4631      	mov	r1, r6
 800d77a:	bf28      	it	cs
 800d77c:	463a      	movcs	r2, r7
 800d77e:	f7fc ff1e 	bl	800a5be <memcpy>
 800d782:	4631      	mov	r1, r6
 800d784:	4640      	mov	r0, r8
 800d786:	f7fd fda9 	bl	800b2dc <_free_r>
 800d78a:	e7e1      	b.n	800d750 <_realloc_r+0x1e>
 800d78c:	4635      	mov	r5, r6
 800d78e:	e7df      	b.n	800d750 <_realloc_r+0x1e>

0800d790 <__ascii_wctomb>:
 800d790:	b149      	cbz	r1, 800d7a6 <__ascii_wctomb+0x16>
 800d792:	2aff      	cmp	r2, #255	; 0xff
 800d794:	bf85      	ittet	hi
 800d796:	238a      	movhi	r3, #138	; 0x8a
 800d798:	6003      	strhi	r3, [r0, #0]
 800d79a:	700a      	strbls	r2, [r1, #0]
 800d79c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d7a0:	bf98      	it	ls
 800d7a2:	2001      	movls	r0, #1
 800d7a4:	4770      	bx	lr
 800d7a6:	4608      	mov	r0, r1
 800d7a8:	4770      	bx	lr
	...

0800d7ac <fiprintf>:
 800d7ac:	b40e      	push	{r1, r2, r3}
 800d7ae:	b503      	push	{r0, r1, lr}
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	ab03      	add	r3, sp, #12
 800d7b4:	4805      	ldr	r0, [pc, #20]	; (800d7cc <fiprintf+0x20>)
 800d7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ba:	6800      	ldr	r0, [r0, #0]
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	f000 f83f 	bl	800d840 <_vfiprintf_r>
 800d7c2:	b002      	add	sp, #8
 800d7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7c8:	b003      	add	sp, #12
 800d7ca:	4770      	bx	lr
 800d7cc:	20000080 	.word	0x20000080

0800d7d0 <abort>:
 800d7d0:	b508      	push	{r3, lr}
 800d7d2:	2006      	movs	r0, #6
 800d7d4:	f000 fa0c 	bl	800dbf0 <raise>
 800d7d8:	2001      	movs	r0, #1
 800d7da:	f7f4 fe87 	bl	80024ec <_exit>

0800d7de <_malloc_usable_size_r>:
 800d7de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7e2:	1f18      	subs	r0, r3, #4
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	bfbc      	itt	lt
 800d7e8:	580b      	ldrlt	r3, [r1, r0]
 800d7ea:	18c0      	addlt	r0, r0, r3
 800d7ec:	4770      	bx	lr

0800d7ee <__sfputc_r>:
 800d7ee:	6893      	ldr	r3, [r2, #8]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	b410      	push	{r4}
 800d7f6:	6093      	str	r3, [r2, #8]
 800d7f8:	da08      	bge.n	800d80c <__sfputc_r+0x1e>
 800d7fa:	6994      	ldr	r4, [r2, #24]
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	db01      	blt.n	800d804 <__sfputc_r+0x16>
 800d800:	290a      	cmp	r1, #10
 800d802:	d103      	bne.n	800d80c <__sfputc_r+0x1e>
 800d804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d808:	f000 b934 	b.w	800da74 <__swbuf_r>
 800d80c:	6813      	ldr	r3, [r2, #0]
 800d80e:	1c58      	adds	r0, r3, #1
 800d810:	6010      	str	r0, [r2, #0]
 800d812:	7019      	strb	r1, [r3, #0]
 800d814:	4608      	mov	r0, r1
 800d816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <__sfputs_r>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	4606      	mov	r6, r0
 800d820:	460f      	mov	r7, r1
 800d822:	4614      	mov	r4, r2
 800d824:	18d5      	adds	r5, r2, r3
 800d826:	42ac      	cmp	r4, r5
 800d828:	d101      	bne.n	800d82e <__sfputs_r+0x12>
 800d82a:	2000      	movs	r0, #0
 800d82c:	e007      	b.n	800d83e <__sfputs_r+0x22>
 800d82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d832:	463a      	mov	r2, r7
 800d834:	4630      	mov	r0, r6
 800d836:	f7ff ffda 	bl	800d7ee <__sfputc_r>
 800d83a:	1c43      	adds	r3, r0, #1
 800d83c:	d1f3      	bne.n	800d826 <__sfputs_r+0xa>
 800d83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d840 <_vfiprintf_r>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	460d      	mov	r5, r1
 800d846:	b09d      	sub	sp, #116	; 0x74
 800d848:	4614      	mov	r4, r2
 800d84a:	4698      	mov	r8, r3
 800d84c:	4606      	mov	r6, r0
 800d84e:	b118      	cbz	r0, 800d858 <_vfiprintf_r+0x18>
 800d850:	6a03      	ldr	r3, [r0, #32]
 800d852:	b90b      	cbnz	r3, 800d858 <_vfiprintf_r+0x18>
 800d854:	f7fc fd10 	bl	800a278 <__sinit>
 800d858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d85a:	07d9      	lsls	r1, r3, #31
 800d85c:	d405      	bmi.n	800d86a <_vfiprintf_r+0x2a>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	059a      	lsls	r2, r3, #22
 800d862:	d402      	bmi.n	800d86a <_vfiprintf_r+0x2a>
 800d864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d866:	f7fc fea8 	bl	800a5ba <__retarget_lock_acquire_recursive>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	071b      	lsls	r3, r3, #28
 800d86e:	d501      	bpl.n	800d874 <_vfiprintf_r+0x34>
 800d870:	692b      	ldr	r3, [r5, #16]
 800d872:	b99b      	cbnz	r3, 800d89c <_vfiprintf_r+0x5c>
 800d874:	4629      	mov	r1, r5
 800d876:	4630      	mov	r0, r6
 800d878:	f000 f93a 	bl	800daf0 <__swsetup_r>
 800d87c:	b170      	cbz	r0, 800d89c <_vfiprintf_r+0x5c>
 800d87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d880:	07dc      	lsls	r4, r3, #31
 800d882:	d504      	bpl.n	800d88e <_vfiprintf_r+0x4e>
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	b01d      	add	sp, #116	; 0x74
 800d88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	0598      	lsls	r0, r3, #22
 800d892:	d4f7      	bmi.n	800d884 <_vfiprintf_r+0x44>
 800d894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d896:	f7fc fe91 	bl	800a5bc <__retarget_lock_release_recursive>
 800d89a:	e7f3      	b.n	800d884 <_vfiprintf_r+0x44>
 800d89c:	2300      	movs	r3, #0
 800d89e:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8aa:	2330      	movs	r3, #48	; 0x30
 800d8ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da60 <_vfiprintf_r+0x220>
 800d8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8b4:	f04f 0901 	mov.w	r9, #1
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c0:	b10a      	cbz	r2, 800d8c6 <_vfiprintf_r+0x86>
 800d8c2:	2a25      	cmp	r2, #37	; 0x25
 800d8c4:	d1f9      	bne.n	800d8ba <_vfiprintf_r+0x7a>
 800d8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8ca:	d00b      	beq.n	800d8e4 <_vfiprintf_r+0xa4>
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ffa2 	bl	800d81c <__sfputs_r>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f000 80a9 	beq.w	800da30 <_vfiprintf_r+0x1f0>
 800d8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e0:	445a      	add	r2, fp
 800d8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 80a1 	beq.w	800da30 <_vfiprintf_r+0x1f0>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f8:	f10a 0a01 	add.w	sl, sl, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	9307      	str	r3, [sp, #28]
 800d900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d904:	931a      	str	r3, [sp, #104]	; 0x68
 800d906:	4654      	mov	r4, sl
 800d908:	2205      	movs	r2, #5
 800d90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90e:	4854      	ldr	r0, [pc, #336]	; (800da60 <_vfiprintf_r+0x220>)
 800d910:	f7f2 fc66 	bl	80001e0 <memchr>
 800d914:	9a04      	ldr	r2, [sp, #16]
 800d916:	b9d8      	cbnz	r0, 800d950 <_vfiprintf_r+0x110>
 800d918:	06d1      	lsls	r1, r2, #27
 800d91a:	bf44      	itt	mi
 800d91c:	2320      	movmi	r3, #32
 800d91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d922:	0713      	lsls	r3, r2, #28
 800d924:	bf44      	itt	mi
 800d926:	232b      	movmi	r3, #43	; 0x2b
 800d928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d92c:	f89a 3000 	ldrb.w	r3, [sl]
 800d930:	2b2a      	cmp	r3, #42	; 0x2a
 800d932:	d015      	beq.n	800d960 <_vfiprintf_r+0x120>
 800d934:	9a07      	ldr	r2, [sp, #28]
 800d936:	4654      	mov	r4, sl
 800d938:	2000      	movs	r0, #0
 800d93a:	f04f 0c0a 	mov.w	ip, #10
 800d93e:	4621      	mov	r1, r4
 800d940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d944:	3b30      	subs	r3, #48	; 0x30
 800d946:	2b09      	cmp	r3, #9
 800d948:	d94d      	bls.n	800d9e6 <_vfiprintf_r+0x1a6>
 800d94a:	b1b0      	cbz	r0, 800d97a <_vfiprintf_r+0x13a>
 800d94c:	9207      	str	r2, [sp, #28]
 800d94e:	e014      	b.n	800d97a <_vfiprintf_r+0x13a>
 800d950:	eba0 0308 	sub.w	r3, r0, r8
 800d954:	fa09 f303 	lsl.w	r3, r9, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	46a2      	mov	sl, r4
 800d95e:	e7d2      	b.n	800d906 <_vfiprintf_r+0xc6>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	1d19      	adds	r1, r3, #4
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	9103      	str	r1, [sp, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bfbb      	ittet	lt
 800d96c:	425b      	neglt	r3, r3
 800d96e:	f042 0202 	orrlt.w	r2, r2, #2
 800d972:	9307      	strge	r3, [sp, #28]
 800d974:	9307      	strlt	r3, [sp, #28]
 800d976:	bfb8      	it	lt
 800d978:	9204      	strlt	r2, [sp, #16]
 800d97a:	7823      	ldrb	r3, [r4, #0]
 800d97c:	2b2e      	cmp	r3, #46	; 0x2e
 800d97e:	d10c      	bne.n	800d99a <_vfiprintf_r+0x15a>
 800d980:	7863      	ldrb	r3, [r4, #1]
 800d982:	2b2a      	cmp	r3, #42	; 0x2a
 800d984:	d134      	bne.n	800d9f0 <_vfiprintf_r+0x1b0>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d1a      	adds	r2, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9203      	str	r2, [sp, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	bfb8      	it	lt
 800d992:	f04f 33ff 	movlt.w	r3, #4294967295
 800d996:	3402      	adds	r4, #2
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da70 <_vfiprintf_r+0x230>
 800d99e:	7821      	ldrb	r1, [r4, #0]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	f7f2 fc1c 	bl	80001e0 <memchr>
 800d9a8:	b138      	cbz	r0, 800d9ba <_vfiprintf_r+0x17a>
 800d9aa:	9b04      	ldr	r3, [sp, #16]
 800d9ac:	eba0 000a 	sub.w	r0, r0, sl
 800d9b0:	2240      	movs	r2, #64	; 0x40
 800d9b2:	4082      	lsls	r2, r0
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	3401      	adds	r4, #1
 800d9b8:	9304      	str	r3, [sp, #16]
 800d9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9be:	4829      	ldr	r0, [pc, #164]	; (800da64 <_vfiprintf_r+0x224>)
 800d9c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9c4:	2206      	movs	r2, #6
 800d9c6:	f7f2 fc0b 	bl	80001e0 <memchr>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d03f      	beq.n	800da4e <_vfiprintf_r+0x20e>
 800d9ce:	4b26      	ldr	r3, [pc, #152]	; (800da68 <_vfiprintf_r+0x228>)
 800d9d0:	bb1b      	cbnz	r3, 800da1a <_vfiprintf_r+0x1da>
 800d9d2:	9b03      	ldr	r3, [sp, #12]
 800d9d4:	3307      	adds	r3, #7
 800d9d6:	f023 0307 	bic.w	r3, r3, #7
 800d9da:	3308      	adds	r3, #8
 800d9dc:	9303      	str	r3, [sp, #12]
 800d9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e0:	443b      	add	r3, r7
 800d9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e4:	e768      	b.n	800d8b8 <_vfiprintf_r+0x78>
 800d9e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	2001      	movs	r0, #1
 800d9ee:	e7a6      	b.n	800d93e <_vfiprintf_r+0xfe>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	3401      	adds	r4, #1
 800d9f4:	9305      	str	r3, [sp, #20]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	f04f 0c0a 	mov.w	ip, #10
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da02:	3a30      	subs	r2, #48	; 0x30
 800da04:	2a09      	cmp	r2, #9
 800da06:	d903      	bls.n	800da10 <_vfiprintf_r+0x1d0>
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d0c6      	beq.n	800d99a <_vfiprintf_r+0x15a>
 800da0c:	9105      	str	r1, [sp, #20]
 800da0e:	e7c4      	b.n	800d99a <_vfiprintf_r+0x15a>
 800da10:	fb0c 2101 	mla	r1, ip, r1, r2
 800da14:	4604      	mov	r4, r0
 800da16:	2301      	movs	r3, #1
 800da18:	e7f0      	b.n	800d9fc <_vfiprintf_r+0x1bc>
 800da1a:	ab03      	add	r3, sp, #12
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	462a      	mov	r2, r5
 800da20:	4b12      	ldr	r3, [pc, #72]	; (800da6c <_vfiprintf_r+0x22c>)
 800da22:	a904      	add	r1, sp, #16
 800da24:	4630      	mov	r0, r6
 800da26:	f7fb fdc5 	bl	80095b4 <_printf_float>
 800da2a:	4607      	mov	r7, r0
 800da2c:	1c78      	adds	r0, r7, #1
 800da2e:	d1d6      	bne.n	800d9de <_vfiprintf_r+0x19e>
 800da30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da32:	07d9      	lsls	r1, r3, #31
 800da34:	d405      	bmi.n	800da42 <_vfiprintf_r+0x202>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	059a      	lsls	r2, r3, #22
 800da3a:	d402      	bmi.n	800da42 <_vfiprintf_r+0x202>
 800da3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da3e:	f7fc fdbd 	bl	800a5bc <__retarget_lock_release_recursive>
 800da42:	89ab      	ldrh	r3, [r5, #12]
 800da44:	065b      	lsls	r3, r3, #25
 800da46:	f53f af1d 	bmi.w	800d884 <_vfiprintf_r+0x44>
 800da4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da4c:	e71c      	b.n	800d888 <_vfiprintf_r+0x48>
 800da4e:	ab03      	add	r3, sp, #12
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	462a      	mov	r2, r5
 800da54:	4b05      	ldr	r3, [pc, #20]	; (800da6c <_vfiprintf_r+0x22c>)
 800da56:	a904      	add	r1, sp, #16
 800da58:	4630      	mov	r0, r6
 800da5a:	f7fc f84f 	bl	8009afc <_printf_i>
 800da5e:	e7e4      	b.n	800da2a <_vfiprintf_r+0x1ea>
 800da60:	0800e2f9 	.word	0x0800e2f9
 800da64:	0800e303 	.word	0x0800e303
 800da68:	080095b5 	.word	0x080095b5
 800da6c:	0800d81d 	.word	0x0800d81d
 800da70:	0800e2ff 	.word	0x0800e2ff

0800da74 <__swbuf_r>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	460e      	mov	r6, r1
 800da78:	4614      	mov	r4, r2
 800da7a:	4605      	mov	r5, r0
 800da7c:	b118      	cbz	r0, 800da86 <__swbuf_r+0x12>
 800da7e:	6a03      	ldr	r3, [r0, #32]
 800da80:	b90b      	cbnz	r3, 800da86 <__swbuf_r+0x12>
 800da82:	f7fc fbf9 	bl	800a278 <__sinit>
 800da86:	69a3      	ldr	r3, [r4, #24]
 800da88:	60a3      	str	r3, [r4, #8]
 800da8a:	89a3      	ldrh	r3, [r4, #12]
 800da8c:	071a      	lsls	r2, r3, #28
 800da8e:	d525      	bpl.n	800dadc <__swbuf_r+0x68>
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	b31b      	cbz	r3, 800dadc <__swbuf_r+0x68>
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	6922      	ldr	r2, [r4, #16]
 800da98:	1a98      	subs	r0, r3, r2
 800da9a:	6963      	ldr	r3, [r4, #20]
 800da9c:	b2f6      	uxtb	r6, r6
 800da9e:	4283      	cmp	r3, r0
 800daa0:	4637      	mov	r7, r6
 800daa2:	dc04      	bgt.n	800daae <__swbuf_r+0x3a>
 800daa4:	4621      	mov	r1, r4
 800daa6:	4628      	mov	r0, r5
 800daa8:	f7ff fa3a 	bl	800cf20 <_fflush_r>
 800daac:	b9e0      	cbnz	r0, 800dae8 <__swbuf_r+0x74>
 800daae:	68a3      	ldr	r3, [r4, #8]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	60a3      	str	r3, [r4, #8]
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	1c5a      	adds	r2, r3, #1
 800dab8:	6022      	str	r2, [r4, #0]
 800daba:	701e      	strb	r6, [r3, #0]
 800dabc:	6962      	ldr	r2, [r4, #20]
 800dabe:	1c43      	adds	r3, r0, #1
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d004      	beq.n	800dace <__swbuf_r+0x5a>
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	07db      	lsls	r3, r3, #31
 800dac8:	d506      	bpl.n	800dad8 <__swbuf_r+0x64>
 800daca:	2e0a      	cmp	r6, #10
 800dacc:	d104      	bne.n	800dad8 <__swbuf_r+0x64>
 800dace:	4621      	mov	r1, r4
 800dad0:	4628      	mov	r0, r5
 800dad2:	f7ff fa25 	bl	800cf20 <_fflush_r>
 800dad6:	b938      	cbnz	r0, 800dae8 <__swbuf_r+0x74>
 800dad8:	4638      	mov	r0, r7
 800dada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dadc:	4621      	mov	r1, r4
 800dade:	4628      	mov	r0, r5
 800dae0:	f000 f806 	bl	800daf0 <__swsetup_r>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d0d5      	beq.n	800da94 <__swbuf_r+0x20>
 800dae8:	f04f 37ff 	mov.w	r7, #4294967295
 800daec:	e7f4      	b.n	800dad8 <__swbuf_r+0x64>
	...

0800daf0 <__swsetup_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	4b2a      	ldr	r3, [pc, #168]	; (800db9c <__swsetup_r+0xac>)
 800daf4:	4605      	mov	r5, r0
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	460c      	mov	r4, r1
 800dafa:	b118      	cbz	r0, 800db04 <__swsetup_r+0x14>
 800dafc:	6a03      	ldr	r3, [r0, #32]
 800dafe:	b90b      	cbnz	r3, 800db04 <__swsetup_r+0x14>
 800db00:	f7fc fbba 	bl	800a278 <__sinit>
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db0a:	0718      	lsls	r0, r3, #28
 800db0c:	d422      	bmi.n	800db54 <__swsetup_r+0x64>
 800db0e:	06d9      	lsls	r1, r3, #27
 800db10:	d407      	bmi.n	800db22 <__swsetup_r+0x32>
 800db12:	2309      	movs	r3, #9
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db1a:	81a3      	strh	r3, [r4, #12]
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	e034      	b.n	800db8c <__swsetup_r+0x9c>
 800db22:	0758      	lsls	r0, r3, #29
 800db24:	d512      	bpl.n	800db4c <__swsetup_r+0x5c>
 800db26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db28:	b141      	cbz	r1, 800db3c <__swsetup_r+0x4c>
 800db2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db2e:	4299      	cmp	r1, r3
 800db30:	d002      	beq.n	800db38 <__swsetup_r+0x48>
 800db32:	4628      	mov	r0, r5
 800db34:	f7fd fbd2 	bl	800b2dc <_free_r>
 800db38:	2300      	movs	r3, #0
 800db3a:	6363      	str	r3, [r4, #52]	; 0x34
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	2300      	movs	r3, #0
 800db46:	6063      	str	r3, [r4, #4]
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	89a3      	ldrh	r3, [r4, #12]
 800db4e:	f043 0308 	orr.w	r3, r3, #8
 800db52:	81a3      	strh	r3, [r4, #12]
 800db54:	6923      	ldr	r3, [r4, #16]
 800db56:	b94b      	cbnz	r3, 800db6c <__swsetup_r+0x7c>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db62:	d003      	beq.n	800db6c <__swsetup_r+0x7c>
 800db64:	4621      	mov	r1, r4
 800db66:	4628      	mov	r0, r5
 800db68:	f000 f884 	bl	800dc74 <__smakebuf_r>
 800db6c:	89a0      	ldrh	r0, [r4, #12]
 800db6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db72:	f010 0301 	ands.w	r3, r0, #1
 800db76:	d00a      	beq.n	800db8e <__swsetup_r+0x9e>
 800db78:	2300      	movs	r3, #0
 800db7a:	60a3      	str	r3, [r4, #8]
 800db7c:	6963      	ldr	r3, [r4, #20]
 800db7e:	425b      	negs	r3, r3
 800db80:	61a3      	str	r3, [r4, #24]
 800db82:	6923      	ldr	r3, [r4, #16]
 800db84:	b943      	cbnz	r3, 800db98 <__swsetup_r+0xa8>
 800db86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db8a:	d1c4      	bne.n	800db16 <__swsetup_r+0x26>
 800db8c:	bd38      	pop	{r3, r4, r5, pc}
 800db8e:	0781      	lsls	r1, r0, #30
 800db90:	bf58      	it	pl
 800db92:	6963      	ldrpl	r3, [r4, #20]
 800db94:	60a3      	str	r3, [r4, #8]
 800db96:	e7f4      	b.n	800db82 <__swsetup_r+0x92>
 800db98:	2000      	movs	r0, #0
 800db9a:	e7f7      	b.n	800db8c <__swsetup_r+0x9c>
 800db9c:	20000080 	.word	0x20000080

0800dba0 <_raise_r>:
 800dba0:	291f      	cmp	r1, #31
 800dba2:	b538      	push	{r3, r4, r5, lr}
 800dba4:	4604      	mov	r4, r0
 800dba6:	460d      	mov	r5, r1
 800dba8:	d904      	bls.n	800dbb4 <_raise_r+0x14>
 800dbaa:	2316      	movs	r3, #22
 800dbac:	6003      	str	r3, [r0, #0]
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dbb6:	b112      	cbz	r2, 800dbbe <_raise_r+0x1e>
 800dbb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbbc:	b94b      	cbnz	r3, 800dbd2 <_raise_r+0x32>
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 f830 	bl	800dc24 <_getpid_r>
 800dbc4:	462a      	mov	r2, r5
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	4620      	mov	r0, r4
 800dbca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbce:	f000 b817 	b.w	800dc00 <_kill_r>
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d00a      	beq.n	800dbec <_raise_r+0x4c>
 800dbd6:	1c59      	adds	r1, r3, #1
 800dbd8:	d103      	bne.n	800dbe2 <_raise_r+0x42>
 800dbda:	2316      	movs	r3, #22
 800dbdc:	6003      	str	r3, [r0, #0]
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7e7      	b.n	800dbb2 <_raise_r+0x12>
 800dbe2:	2400      	movs	r4, #0
 800dbe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbe8:	4628      	mov	r0, r5
 800dbea:	4798      	blx	r3
 800dbec:	2000      	movs	r0, #0
 800dbee:	e7e0      	b.n	800dbb2 <_raise_r+0x12>

0800dbf0 <raise>:
 800dbf0:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <raise+0xc>)
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	f7ff bfd3 	b.w	800dba0 <_raise_r>
 800dbfa:	bf00      	nop
 800dbfc:	20000080 	.word	0x20000080

0800dc00 <_kill_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <_kill_r+0x20>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	602b      	str	r3, [r5, #0]
 800dc0e:	f7f4 fc5d 	bl	80024cc <_kill>
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	d102      	bne.n	800dc1c <_kill_r+0x1c>
 800dc16:	682b      	ldr	r3, [r5, #0]
 800dc18:	b103      	cbz	r3, 800dc1c <_kill_r+0x1c>
 800dc1a:	6023      	str	r3, [r4, #0]
 800dc1c:	bd38      	pop	{r3, r4, r5, pc}
 800dc1e:	bf00      	nop
 800dc20:	200018c8 	.word	0x200018c8

0800dc24 <_getpid_r>:
 800dc24:	f7f4 bc4a 	b.w	80024bc <_getpid>

0800dc28 <__swhatbuf_r>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc30:	2900      	cmp	r1, #0
 800dc32:	b096      	sub	sp, #88	; 0x58
 800dc34:	4615      	mov	r5, r2
 800dc36:	461e      	mov	r6, r3
 800dc38:	da0d      	bge.n	800dc56 <__swhatbuf_r+0x2e>
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc40:	f04f 0100 	mov.w	r1, #0
 800dc44:	bf0c      	ite	eq
 800dc46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc4a:	2340      	movne	r3, #64	; 0x40
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	6031      	str	r1, [r6, #0]
 800dc50:	602b      	str	r3, [r5, #0]
 800dc52:	b016      	add	sp, #88	; 0x58
 800dc54:	bd70      	pop	{r4, r5, r6, pc}
 800dc56:	466a      	mov	r2, sp
 800dc58:	f000 f848 	bl	800dcec <_fstat_r>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	dbec      	blt.n	800dc3a <__swhatbuf_r+0x12>
 800dc60:	9901      	ldr	r1, [sp, #4]
 800dc62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc6a:	4259      	negs	r1, r3
 800dc6c:	4159      	adcs	r1, r3
 800dc6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc72:	e7eb      	b.n	800dc4c <__swhatbuf_r+0x24>

0800dc74 <__smakebuf_r>:
 800dc74:	898b      	ldrh	r3, [r1, #12]
 800dc76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc78:	079d      	lsls	r5, r3, #30
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	d507      	bpl.n	800dc90 <__smakebuf_r+0x1c>
 800dc80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	6123      	str	r3, [r4, #16]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	6163      	str	r3, [r4, #20]
 800dc8c:	b002      	add	sp, #8
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	ab01      	add	r3, sp, #4
 800dc92:	466a      	mov	r2, sp
 800dc94:	f7ff ffc8 	bl	800dc28 <__swhatbuf_r>
 800dc98:	9900      	ldr	r1, [sp, #0]
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7fd fb91 	bl	800b3c4 <_malloc_r>
 800dca2:	b948      	cbnz	r0, 800dcb8 <__smakebuf_r+0x44>
 800dca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dca8:	059a      	lsls	r2, r3, #22
 800dcaa:	d4ef      	bmi.n	800dc8c <__smakebuf_r+0x18>
 800dcac:	f023 0303 	bic.w	r3, r3, #3
 800dcb0:	f043 0302 	orr.w	r3, r3, #2
 800dcb4:	81a3      	strh	r3, [r4, #12]
 800dcb6:	e7e3      	b.n	800dc80 <__smakebuf_r+0xc>
 800dcb8:	89a3      	ldrh	r3, [r4, #12]
 800dcba:	6020      	str	r0, [r4, #0]
 800dcbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcc0:	81a3      	strh	r3, [r4, #12]
 800dcc2:	9b00      	ldr	r3, [sp, #0]
 800dcc4:	6163      	str	r3, [r4, #20]
 800dcc6:	9b01      	ldr	r3, [sp, #4]
 800dcc8:	6120      	str	r0, [r4, #16]
 800dcca:	b15b      	cbz	r3, 800dce4 <__smakebuf_r+0x70>
 800dccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f000 f81d 	bl	800dd10 <_isatty_r>
 800dcd6:	b128      	cbz	r0, 800dce4 <__smakebuf_r+0x70>
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	f023 0303 	bic.w	r3, r3, #3
 800dcde:	f043 0301 	orr.w	r3, r3, #1
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	431d      	orrs	r5, r3
 800dce8:	81a5      	strh	r5, [r4, #12]
 800dcea:	e7cf      	b.n	800dc8c <__smakebuf_r+0x18>

0800dcec <_fstat_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4d07      	ldr	r5, [pc, #28]	; (800dd0c <_fstat_r+0x20>)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	602b      	str	r3, [r5, #0]
 800dcfa:	f7f4 fc46 	bl	800258a <_fstat>
 800dcfe:	1c43      	adds	r3, r0, #1
 800dd00:	d102      	bne.n	800dd08 <_fstat_r+0x1c>
 800dd02:	682b      	ldr	r3, [r5, #0]
 800dd04:	b103      	cbz	r3, 800dd08 <_fstat_r+0x1c>
 800dd06:	6023      	str	r3, [r4, #0]
 800dd08:	bd38      	pop	{r3, r4, r5, pc}
 800dd0a:	bf00      	nop
 800dd0c:	200018c8 	.word	0x200018c8

0800dd10 <_isatty_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4d06      	ldr	r5, [pc, #24]	; (800dd2c <_isatty_r+0x1c>)
 800dd14:	2300      	movs	r3, #0
 800dd16:	4604      	mov	r4, r0
 800dd18:	4608      	mov	r0, r1
 800dd1a:	602b      	str	r3, [r5, #0]
 800dd1c:	f7f4 fc45 	bl	80025aa <_isatty>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d102      	bne.n	800dd2a <_isatty_r+0x1a>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b103      	cbz	r3, 800dd2a <_isatty_r+0x1a>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	200018c8 	.word	0x200018c8

0800dd30 <_init>:
 800dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd32:	bf00      	nop
 800dd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd36:	bc08      	pop	{r3}
 800dd38:	469e      	mov	lr, r3
 800dd3a:	4770      	bx	lr

0800dd3c <_fini>:
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3e:	bf00      	nop
 800dd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd42:	bc08      	pop	{r3}
 800dd44:	469e      	mov	lr, r3
 800dd46:	4770      	bx	lr
