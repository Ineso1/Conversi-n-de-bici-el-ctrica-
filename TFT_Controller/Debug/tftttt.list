
tftttt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fcc  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008920  08008920  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08008920  08008920  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008920  08008920  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000011c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010715  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022d0  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec8  00000000  00000000  00032a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ac5  00000000  00000000  00033938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a17  00000000  00000000  000543fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae3c  00000000  00000000  00067e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000b88  00000000  00000000  00132c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e10  00000000  00000000  001337d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  001375e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800793c 	.word	0x0800793c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	0800793c 	.word	0x0800793c

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b47      	ldr	r3, [pc, #284]	; (8000308 <MX_GPIO_Init+0x134>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a46      	ldr	r2, [pc, #280]	; (8000308 <MX_GPIO_Init+0x134>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b44      	ldr	r3, [pc, #272]	; (8000308 <MX_GPIO_Init+0x134>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b41      	ldr	r3, [pc, #260]	; (8000308 <MX_GPIO_Init+0x134>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a40      	ldr	r2, [pc, #256]	; (8000308 <MX_GPIO_Init+0x134>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b3e      	ldr	r3, [pc, #248]	; (8000308 <MX_GPIO_Init+0x134>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b3b      	ldr	r3, [pc, #236]	; (8000308 <MX_GPIO_Init+0x134>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a3a      	ldr	r2, [pc, #232]	; (8000308 <MX_GPIO_Init+0x134>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b38      	ldr	r3, [pc, #224]	; (8000308 <MX_GPIO_Init+0x134>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b35      	ldr	r3, [pc, #212]	; (8000308 <MX_GPIO_Init+0x134>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a34      	ldr	r2, [pc, #208]	; (8000308 <MX_GPIO_Init+0x134>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b32      	ldr	r3, [pc, #200]	; (8000308 <MX_GPIO_Init+0x134>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2182      	movs	r1, #130	; 0x82
 800024e:	482f      	ldr	r0, [pc, #188]	; (800030c <MX_GPIO_Init+0x138>)
 8000250:	f004 ff02 	bl	8005058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RS_Pin|LD2_Pin|LCD_D7_Pin
 8000254:	2200      	movs	r2, #0
 8000256:	f240 7132 	movw	r1, #1842	; 0x732
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f004 fefb 	bl	8005058 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8000262:	2200      	movs	r2, #0
 8000264:	f240 4139 	movw	r1, #1081	; 0x439
 8000268:	4829      	ldr	r0, [pc, #164]	; (8000310 <MX_GPIO_Init+0x13c>)
 800026a:	f004 fef5 	bl	8005058 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800026e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000274:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	4619      	mov	r1, r3
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <MX_GPIO_Init+0x138>)
 8000286:	f004 fd5d 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 800028a:	2382      	movs	r3, #130	; 0x82
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	481a      	ldr	r0, [pc, #104]	; (800030c <MX_GPIO_Init+0x138>)
 80002a2:	f004 fd4f 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 80002a6:	2301      	movs	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	4619      	mov	r1, r3
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f004 fd42 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RS_Pin|LD2_Pin|LCD_D7_Pin
 80002c0:	f240 7332 	movw	r3, #1842	; 0x732
 80002c4:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	4619      	mov	r1, r3
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f004 fd32 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80002e0:	f240 4339 	movw	r3, #1081	; 0x439
 80002e4:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	2301      	movs	r3, #1
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	2300      	movs	r3, #0
 80002f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_GPIO_Init+0x13c>)
 80002fa:	f004 fd23 	bl	8004d44 <HAL_GPIO_Init>

}
 80002fe:	bf00      	nop
 8000300:	3728      	adds	r7, #40	; 0x28
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000
 800030c:	48000800 	.word	0x48000800
 8000310:	48000400 	.word	0x48000400

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f004 fba3 	bl	8004a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f84b 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f7ff ff57 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000326:	f004 fb01 	bl	800492c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800032a:	f004 fa93 	bl	8004854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800032e:	481e      	ldr	r0, [pc, #120]	; (80003a8 <main+0x94>)
 8000330:	f006 fbaa 	bl	8006a88 <HAL_TIM_Base_Start>

  ID = readID();
 8000334:	f001 fc70 	bl	8001c18 <readID>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <main+0x98>)
 800033e:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000340:	2064      	movs	r0, #100	; 0x64
 8000342:	f004 fbf5 	bl	8004b30 <HAL_Delay>
  tft_init(ID);
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <main+0x98>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f001 f8be 	bl	80014cc <tft_init>

  setRotation(0);
 8000350:	2000      	movs	r0, #0
 8000352:	f002 fb4d 	bl	80029f0 <setRotation>
  fillScreen(BLACK);
 8000356:	2000      	movs	r0, #0
 8000358:	f003 f8fe 	bl	8003558 <fillScreen>

  testFillScreen();
 800035c:	f003 fed4 	bl	8004108 <testFillScreen>
  testLines(CYAN);
 8000360:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000364:	f003 fee5 	bl	8004132 <testLines>
  testFastLines(RED, BLUE);
 8000368:	211f      	movs	r1, #31
 800036a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800036e:	f003 ffde 	bl	800432e <testFastLines>
  testFilledCircles(10, MAGENTA);
 8000372:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8000376:	200a      	movs	r0, #10
 8000378:	f004 f815 	bl	80043a6 <testFilledCircles>
  testCircles(10, WHITE);
 800037c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000380:	200a      	movs	r0, #10
 8000382:	f004 f84a 	bl	800441a <testCircles>

  fillScreen(BLACK);
 8000386:	2000      	movs	r0, #0
 8000388:	f003 f8e6 	bl	8003558 <fillScreen>
  setRotation(0);
 800038c:	2000      	movs	r0, #0
 800038e:	f002 fb2f 	bl	80029f0 <setRotation>
  printnewtstr(100, RED, &mono12x7bold, 2, "HOLA");
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <main+0x9c>)
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2302      	movs	r3, #2
 8000398:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <main+0xa0>)
 800039a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800039e:	2064      	movs	r0, #100	; 0x64
 80003a0:	f004 fa0a 	bl	80047b8 <printnewtstr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x90>
 80003a6:	bf00      	nop
 80003a8:	2000005c 	.word	0x2000005c
 80003ac:	20000038 	.word	0x20000038
 80003b0:	08007954 	.word	0x08007954
 80003b4:	0800831c 	.word	0x0800831c

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b0a6      	sub	sp, #152	; 0x98
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f007 fa8b 	bl	80078e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2258      	movs	r2, #88	; 0x58
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f007 fa7d 	bl	80078e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	2302      	movs	r3, #2
 80003ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f0:	2310      	movs	r3, #16
 80003f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000404:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000416:	4618      	mov	r0, r3
 8000418:	f004 fe36 	bl	8005088 <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000422:	f000 f82b 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	230f      	movs	r3, #15
 8000428:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	2302      	movs	r3, #2
 800042c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000436:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f005 fe74 	bl	8006130 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800044e:	f000 f815 	bl	800047c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <SystemClock_Config+0xc0>)
 8000454:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800045a:	2300      	movs	r3, #0
 800045c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f006 f89b 	bl	800659c <HAL_RCCEx_PeriphCLKConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800046c:	f000 f806 	bl	800047c <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3798      	adds	r7, #152	; 0x98
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	00100002 	.word	0x00100002

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x44>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_MspInit+0x44>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x44>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <HAL_MspInit+0x44>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <HAL_MspInit+0x44>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HAL_MspInit+0x44>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004be:	2007      	movs	r0, #7
 80004c0:	f004 fc0c 	bl	8004cdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler+0x4>

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f004 fae8 	bl	8004af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000554:	887b      	ldrh	r3, [r7, #2]
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f004 fd7c 	bl	8005058 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f004 fd6c 	bl	8005058 <HAL_GPIO_WritePin>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000594:	887b      	ldrh	r3, [r7, #2]
 8000596:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059c:	2301      	movs	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f004 fbcc 	bl	8004d44 <HAL_GPIO_Init>
}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f004 fbb4 	bl	8004d44 <HAL_GPIO_Init>
}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <width+0x14>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <height>:

uint16_t height(void)
{ return _height; }
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <height+0x14>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000006 	.word	0x20000006

08000614 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 800061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000622:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000626:	b21a      	sxth	r2, r3
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	b21b      	sxth	r3, r3
 800062e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21a      	sxth	r2, r3
 8000638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	b21b      	sxth	r3, r3
 8000646:	b29b      	uxth	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 800065e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000662:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000666:	b21a      	sxth	r2, r3
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	115b      	asrs	r3, r3, #5
 800066c:	b21b      	sxth	r3, r3
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	b21b      	sxth	r3, r3
 8000674:	4313      	orrs	r3, r2
 8000676:	b21a      	sxth	r2, r3
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	105b      	asrs	r3, r3, #1
 800067c:	b21b      	sxth	r3, r3
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	b21b      	sxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b21b      	sxth	r3, r3
 8000688:	b29b      	uxth	r3, r3
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	121b      	asrs	r3, r3, #8
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f023 0307 	bic.w	r3, r3, #7
 80006aa:	b2db      	uxtb	r3, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	10db      	asrs	r3, r3, #3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f023 0303 	bic.w	r3, r3, #3
 80006cc:	b2db      	uxtb	r3, r3
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4603      	mov	r3, r0
 80006e2:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	460b      	mov	r3, r1
 8000702:	71bb      	strb	r3, [r7, #6]
 8000704:	4613      	mov	r3, r2
 8000706:	717b      	strb	r3, [r7, #5]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21b      	sxth	r3, r3
 800070e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000712:	f023 0307 	bic.w	r3, r3, #7
 8000716:	b21a      	sxth	r2, r3
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b21b      	sxth	r3, r3
 800071e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21a      	sxth	r2, r3
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af02      	add	r7, sp, #8
 8000748:	4603      	mov	r3, r0
 800074a:	460a      	mov	r2, r1
 800074c:	80fb      	strh	r3, [r7, #6]
 800074e:	4613      	mov	r3, r2
 8000750:	80bb      	strh	r3, [r7, #4]
 8000752:	f107 020e 	add.w	r2, r7, #14
 8000756:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800075a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	f001 fb98 	bl	8001e98 <readGRAM>
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	460a      	mov	r2, r1
 800077c:	80fb      	strh	r3, [r7, #6]
 800077e:	4613      	mov	r3, r2
 8000780:	80bb      	strh	r3, [r7, #4]
 8000782:	88ba      	ldrh	r2, [r7, #4]
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f93f 	bl	8000a0c <writecmddata>
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	6039      	str	r1, [r7, #0]
 80007a0:	80fb      	strh	r3, [r7, #6]
 80007a2:	4613      	mov	r3, r2
 80007a4:	717b      	strb	r3, [r7, #5]
 80007a6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa3a 	bl	8000c28 <WriteCmdParamN>
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f7ff fede 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <setReadDir+0x58>)
 80007d0:	f7ff feda 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f7ff fed4 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 80007e0:	2108      	movs	r1, #8
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <setReadDir+0x5c>)
 80007e4:	f7ff fed0 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 80007e8:	2120      	movs	r1, #32
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <setReadDir+0x5c>)
 80007ec:	f7ff fecc 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 80007f0:	2110      	movs	r1, #16
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <setReadDir+0x5c>)
 80007f4:	f7ff fec8 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <setReadDir+0x5c>)
 80007fe:	f7ff fec3 	bl	8000588 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f7ff febd 	bl	8000588 <PIN_INPUT>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	48000800 	.word	0x48000800
 8000818:	48000400 	.word	0x48000400

0800081c <setWriteDir>:

void setWriteDir (void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f7ff fec4 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	4811      	ldr	r0, [pc, #68]	; (8000874 <setWriteDir+0x58>)
 8000830:	f7ff fec0 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f7ff feba 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000840:	2108      	movs	r1, #8
 8000842:	480d      	ldr	r0, [pc, #52]	; (8000878 <setWriteDir+0x5c>)
 8000844:	f7ff feb6 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000848:	2120      	movs	r1, #32
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <setWriteDir+0x5c>)
 800084c:	f7ff feb2 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000850:	2110      	movs	r1, #16
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <setWriteDir+0x5c>)
 8000854:	f7ff feae 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <setWriteDir+0x5c>)
 800085e:	f7ff fea9 	bl	80005b4 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f7ff fea3 	bl	80005b4 <PIN_OUTPUT>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	48000800 	.word	0x48000800
 8000878:	48000400 	.word	0x48000400

0800087c <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff04 	bl	8000696 <color565_to_r>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff0f 	bl	80006b8 <color565_to_g>
 800089a:	4603      	mov	r3, r0
 800089c:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff1a 	bl	80006da <color565_to_b>
 80008a6:	4603      	mov	r3, r0
 80008a8:	737b      	strb	r3, [r7, #13]
    write8(r);
 80008aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008ae:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 80008b2:	619a      	str	r2, [r3, #24]
 80008b4:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <write24+0x188>)
 80008b6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80008ba:	619a      	str	r2, [r3, #24]
 80008bc:	4b52      	ldr	r3, [pc, #328]	; (8000a08 <write24+0x18c>)
 80008be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	105b      	asrs	r3, r3, #1
 80008c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	105b      	asrs	r3, r3, #1
 80008d8:	4313      	orrs	r3, r2
 80008da:	f003 0208 	and.w	r2, r3, #8
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	431a      	orrs	r2, r3
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	111b      	asrs	r3, r3, #4
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <write24+0x188>)
 80008f4:	619a      	str	r2, [r3, #24]
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <write24+0x18c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	2102      	movs	r1, #2
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f7ff fe21 	bl	8000548 <PIN_LOW>
 8000906:	2102      	movs	r1, #2
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f7ff fe2c 	bl	8000568 <PIN_HIGH>
 8000910:	2102      	movs	r1, #2
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f7ff fe27 	bl	8000568 <PIN_HIGH>
    write8(g);
 800091a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091e:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000922:	619a      	str	r2, [r3, #24]
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <write24+0x188>)
 8000926:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800092a:	619a      	str	r2, [r3, #24]
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <write24+0x18c>)
 800092e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000932:	619a      	str	r2, [r3, #24]
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	105b      	asrs	r3, r3, #1
 8000938:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800093c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	7bba      	ldrb	r2, [r7, #14]
 8000944:	7bbb      	ldrb	r3, [r7, #14]
 8000946:	105b      	asrs	r3, r3, #1
 8000948:	4313      	orrs	r3, r2
 800094a:	f003 0208 	and.w	r2, r3, #8
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	431a      	orrs	r2, r3
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	111b      	asrs	r3, r3, #4
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	431a      	orrs	r2, r3
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <write24+0x188>)
 8000964:	619a      	str	r2, [r3, #24]
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <write24+0x18c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	2102      	movs	r1, #2
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f7ff fde9 	bl	8000548 <PIN_LOW>
 8000976:	2102      	movs	r1, #2
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f7ff fdf4 	bl	8000568 <PIN_HIGH>
 8000980:	2102      	movs	r1, #2
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f7ff fdef 	bl	8000568 <PIN_HIGH>
    write8(b);
 800098a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098e:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <write24+0x188>)
 8000996:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <write24+0x18c>)
 800099e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009a2:	619a      	str	r2, [r3, #24]
 80009a4:	7b7b      	ldrb	r3, [r7, #13]
 80009a6:	105b      	asrs	r3, r3, #1
 80009a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	7b7a      	ldrb	r2, [r7, #13]
 80009b4:	7b7b      	ldrb	r3, [r7, #13]
 80009b6:	105b      	asrs	r3, r3, #1
 80009b8:	4313      	orrs	r3, r2
 80009ba:	f003 0208 	and.w	r2, r3, #8
 80009be:	7b7b      	ldrb	r3, [r7, #13]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c6:	431a      	orrs	r2, r3
 80009c8:	7b7b      	ldrb	r3, [r7, #13]
 80009ca:	111b      	asrs	r3, r3, #4
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	431a      	orrs	r2, r3
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <write24+0x188>)
 80009d4:	619a      	str	r2, [r3, #24]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <write24+0x18c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
 80009dc:	2102      	movs	r1, #2
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f7ff fdb1 	bl	8000548 <PIN_LOW>
 80009e6:	2102      	movs	r1, #2
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f7ff fdbc 	bl	8000568 <PIN_HIGH>
 80009f0:	2102      	movs	r1, #2
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f7ff fdb7 	bl	8000568 <PIN_HIGH>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	48000400 	.word	0x48000400
 8000a08:	48000800 	.word	0x48000800

08000a0c <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	80fb      	strh	r3, [r7, #6]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4880      	ldr	r0, [pc, #512]	; (8000c20 <writecmddata+0x214>)
 8000a20:	f7ff fd92 	bl	8000548 <PIN_LOW>
    WriteCmd(cmd);
 8000a24:	2110      	movs	r1, #16
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f7ff fd8d 	bl	8000548 <PIN_LOW>
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	73bb      	strb	r3, [r7, #14]
 8000a3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a3e:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	4b76      	ldr	r3, [pc, #472]	; (8000c20 <writecmddata+0x214>)
 8000a46:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000a4a:	619a      	str	r2, [r3, #24]
 8000a4c:	4b75      	ldr	r3, [pc, #468]	; (8000c24 <writecmddata+0x218>)
 8000a4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a52:	619a      	str	r2, [r3, #24]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	105b      	asrs	r3, r3, #1
 8000a58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	7bfa      	ldrb	r2, [r7, #15]
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	105b      	asrs	r3, r3, #1
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	f003 0208 	and.w	r2, r3, #8
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	431a      	orrs	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	111b      	asrs	r3, r3, #4
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	431a      	orrs	r2, r3
 8000a82:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <writecmddata+0x214>)
 8000a84:	619a      	str	r2, [r3, #24]
 8000a86:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <writecmddata+0x218>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f7ff fd59 	bl	8000548 <PIN_LOW>
 8000a96:	2102      	movs	r1, #2
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f7ff fd64 	bl	8000568 <PIN_HIGH>
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f7ff fd5f 	bl	8000568 <PIN_HIGH>
 8000aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000aae:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000ab2:	619a      	str	r2, [r3, #24]
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <writecmddata+0x214>)
 8000ab6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000aba:	619a      	str	r2, [r3, #24]
 8000abc:	4b59      	ldr	r3, [pc, #356]	; (8000c24 <writecmddata+0x218>)
 8000abe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ac2:	619a      	str	r2, [r3, #24]
 8000ac4:	7bbb      	ldrb	r3, [r7, #14]
 8000ac6:	105b      	asrs	r3, r3, #1
 8000ac8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	7bba      	ldrb	r2, [r7, #14]
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	105b      	asrs	r3, r3, #1
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	f003 0208 	and.w	r2, r3, #8
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	111b      	asrs	r3, r3, #4
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	431a      	orrs	r2, r3
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <writecmddata+0x214>)
 8000af4:	619a      	str	r2, [r3, #24]
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <writecmddata+0x218>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
 8000afc:	2102      	movs	r1, #2
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f7ff fd21 	bl	8000548 <PIN_LOW>
 8000b06:	2102      	movs	r1, #2
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f7ff fd2c 	bl	8000568 <PIN_HIGH>
 8000b10:	2102      	movs	r1, #2
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f7ff fd27 	bl	8000568 <PIN_HIGH>
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f7ff fd22 	bl	8000568 <PIN_HIGH>
    WriteData(dat);
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	737b      	strb	r3, [r7, #13]
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	733b      	strb	r3, [r7, #12]
 8000b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b34:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000b38:	619a      	str	r2, [r3, #24]
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <writecmddata+0x214>)
 8000b3c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000b40:	619a      	str	r2, [r3, #24]
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <writecmddata+0x218>)
 8000b44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b48:	619a      	str	r2, [r3, #24]
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	105b      	asrs	r3, r3, #1
 8000b4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	7b7a      	ldrb	r2, [r7, #13]
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	105b      	asrs	r3, r3, #1
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f003 0208 	and.w	r2, r3, #8
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	7b7b      	ldrb	r3, [r7, #13]
 8000b70:	111b      	asrs	r3, r3, #4
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	431a      	orrs	r2, r3
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <writecmddata+0x214>)
 8000b7a:	619a      	str	r2, [r3, #24]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <writecmddata+0x218>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	2102      	movs	r1, #2
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f7ff fcde 	bl	8000548 <PIN_LOW>
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f7ff fce9 	bl	8000568 <PIN_HIGH>
 8000b96:	2102      	movs	r1, #2
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f7ff fce4 	bl	8000568 <PIN_HIGH>
 8000ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba4:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000ba8:	619a      	str	r2, [r3, #24]
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <writecmddata+0x214>)
 8000bac:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000bb0:	619a      	str	r2, [r3, #24]
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <writecmddata+0x218>)
 8000bb4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bb8:	619a      	str	r2, [r3, #24]
 8000bba:	7b3b      	ldrb	r3, [r7, #12]
 8000bbc:	105b      	asrs	r3, r3, #1
 8000bbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	7b3a      	ldrb	r2, [r7, #12]
 8000bca:	7b3b      	ldrb	r3, [r7, #12]
 8000bcc:	105b      	asrs	r3, r3, #1
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	f003 0208 	and.w	r2, r3, #8
 8000bd4:	7b3b      	ldrb	r3, [r7, #12]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	7b3b      	ldrb	r3, [r7, #12]
 8000be0:	111b      	asrs	r3, r3, #4
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	431a      	orrs	r2, r3
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <writecmddata+0x214>)
 8000bea:	619a      	str	r2, [r3, #24]
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <writecmddata+0x218>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f7ff fca6 	bl	8000548 <PIN_LOW>
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f7ff fcb1 	bl	8000568 <PIN_HIGH>
 8000c06:	2102      	movs	r1, #2
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f7ff fcac 	bl	8000568 <PIN_HIGH>
    CS_IDLE;
 8000c10:	2101      	movs	r1, #1
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <writecmddata+0x214>)
 8000c14:	f7ff fca8 	bl	8000568 <PIN_HIGH>
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	48000400 	.word	0x48000400
 8000c24:	48000800 	.word	0x48000800

08000c28 <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	603a      	str	r2, [r7, #0]
 8000c32:	80fb      	strh	r3, [r7, #6]
 8000c34:	460b      	mov	r3, r1
 8000c36:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8000c38:	2101      	movs	r1, #1
 8000c3a:	48af      	ldr	r0, [pc, #700]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000c3c:	f7ff fc84 	bl	8000548 <PIN_LOW>
    WriteCmd(cmd);
 8000c40:	2110      	movs	r1, #16
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f7ff fc7f 	bl	8000548 <PIN_LOW>
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	73bb      	strb	r3, [r7, #14]
 8000c56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c5a:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000c5e:	619a      	str	r2, [r3, #24]
 8000c60:	4ba5      	ldr	r3, [pc, #660]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000c62:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000c66:	619a      	str	r2, [r3, #24]
 8000c68:	4ba4      	ldr	r3, [pc, #656]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000c6a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	105b      	asrs	r3, r3, #1
 8000c74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	105b      	asrs	r3, r3, #1
 8000c84:	4313      	orrs	r3, r2
 8000c86:	f003 0208 	and.w	r2, r3, #8
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	431a      	orrs	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	111b      	asrs	r3, r3, #4
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	4b96      	ldr	r3, [pc, #600]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000ca0:	619a      	str	r2, [r3, #24]
 8000ca2:	4b96      	ldr	r3, [pc, #600]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	2102      	movs	r1, #2
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f7ff fc4b 	bl	8000548 <PIN_LOW>
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f7ff fc56 	bl	8000568 <PIN_HIGH>
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f7ff fc51 	bl	8000568 <PIN_HIGH>
 8000cc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cca:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	4b89      	ldr	r3, [pc, #548]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000cd2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000cd6:	619a      	str	r2, [r3, #24]
 8000cd8:	4b88      	ldr	r3, [pc, #544]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000cda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cde:	619a      	str	r2, [r3, #24]
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	105b      	asrs	r3, r3, #1
 8000ce4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	7bba      	ldrb	r2, [r7, #14]
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	105b      	asrs	r3, r3, #1
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	f003 0208 	and.w	r2, r3, #8
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	431a      	orrs	r2, r3
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	111b      	asrs	r3, r3, #4
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4b7a      	ldr	r3, [pc, #488]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000d10:	619a      	str	r2, [r3, #24]
 8000d12:	4b7a      	ldr	r3, [pc, #488]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	2102      	movs	r1, #2
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f7ff fc13 	bl	8000548 <PIN_LOW>
 8000d22:	2102      	movs	r1, #2
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f7ff fc1e 	bl	8000568 <PIN_HIGH>
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f7ff fc19 	bl	8000568 <PIN_HIGH>
 8000d36:	2110      	movs	r1, #16
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f7ff fc14 	bl	8000568 <PIN_HIGH>
    while (N-- > 0) {
 8000d40:	e0c9      	b.n	8000ed6 <WriteCmdParamN+0x2ae>
        uint8_t u8 = *block++;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	603a      	str	r2, [r7, #0]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8000d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d50:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000d54:	619a      	str	r2, [r3, #24]
 8000d56:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000d58:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000d5c:	619a      	str	r2, [r3, #24]
 8000d5e:	4b67      	ldr	r3, [pc, #412]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000d60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d64:	619a      	str	r2, [r3, #24]
 8000d66:	7b7b      	ldrb	r3, [r7, #13]
 8000d68:	105b      	asrs	r3, r3, #1
 8000d6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	7b7a      	ldrb	r2, [r7, #13]
 8000d76:	7b7b      	ldrb	r3, [r7, #13]
 8000d78:	105b      	asrs	r3, r3, #1
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f003 0208 	and.w	r2, r3, #8
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	111b      	asrs	r3, r3, #4
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	431a      	orrs	r2, r3
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000d96:	619a      	str	r2, [r3, #24]
 8000d98:	4b58      	ldr	r3, [pc, #352]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
 8000d9e:	2102      	movs	r1, #2
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f7ff fbd0 	bl	8000548 <PIN_LOW>
 8000da8:	2102      	movs	r1, #2
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f7ff fbdb 	bl	8000568 <PIN_HIGH>
 8000db2:	2102      	movs	r1, #2
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f7ff fbd6 	bl	8000568 <PIN_HIGH>
        if (N && is8347) {
 8000dbc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 8088 	beq.w	8000ed6 <WriteCmdParamN+0x2ae>
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <WriteCmdParamN+0x2d8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8083 	beq.w	8000ed6 <WriteCmdParamN+0x2ae>
            cmd++;
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f7ff fbb4 	bl	8000548 <PIN_LOW>
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	733b      	strb	r3, [r7, #12]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	72fb      	strb	r3, [r7, #11]
 8000dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000df0:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000df8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000e00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e04:	619a      	str	r2, [r3, #24]
 8000e06:	7b3b      	ldrb	r3, [r7, #12]
 8000e08:	105b      	asrs	r3, r3, #1
 8000e0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	7b3a      	ldrb	r2, [r7, #12]
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	105b      	asrs	r3, r3, #1
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	f003 0208 	and.w	r2, r3, #8
 8000e20:	7b3b      	ldrb	r3, [r7, #12]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	7b3b      	ldrb	r3, [r7, #12]
 8000e2c:	111b      	asrs	r3, r3, #4
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	431a      	orrs	r2, r3
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
 8000e3e:	2102      	movs	r1, #2
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f7ff fb80 	bl	8000548 <PIN_LOW>
 8000e48:	2102      	movs	r1, #2
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f7ff fb8b 	bl	8000568 <PIN_HIGH>
 8000e52:	2102      	movs	r1, #2
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f7ff fb86 	bl	8000568 <PIN_HIGH>
 8000e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e60:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8000e64:	619a      	str	r2, [r3, #24]
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000e68:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000e6c:	619a      	str	r2, [r3, #24]
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000e70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	7afb      	ldrb	r3, [r7, #11]
 8000e78:	105b      	asrs	r3, r3, #1
 8000e7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	7afa      	ldrb	r2, [r7, #11]
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	105b      	asrs	r3, r3, #1
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f003 0208 	and.w	r2, r3, #8
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	7afb      	ldrb	r3, [r7, #11]
 8000e9c:	111b      	asrs	r3, r3, #4
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000ea6:	619a      	str	r2, [r3, #24]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <WriteCmdParamN+0x2d4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
 8000eae:	2102      	movs	r1, #2
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f7ff fb48 	bl	8000548 <PIN_LOW>
 8000eb8:	2102      	movs	r1, #2
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f7ff fb53 	bl	8000568 <PIN_HIGH>
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f7ff fb4e 	bl	8000568 <PIN_HIGH>
 8000ecc:	2110      	movs	r1, #16
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f7ff fb49 	bl	8000568 <PIN_HIGH>
    while (N-- > 0) {
 8000ed6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	3a01      	subs	r2, #1
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	717a      	strb	r2, [r7, #5]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f73f af2d 	bgt.w	8000d42 <WriteCmdParamN+0x11a>
        }
    }
    CS_IDLE;
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <WriteCmdParamN+0x2d0>)
 8000eec:	f7ff fb3c 	bl	8000568 <PIN_HIGH>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48000800 	.word	0x48000800
 8000f00:	2000003b 	.word	0x2000003b

08000f04 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4623      	mov	r3, r4
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	4603      	mov	r3, r0
 8000f18:	71bb      	strb	r3, [r7, #6]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	717b      	strb	r3, [r7, #5]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	733b      	strb	r3, [r7, #12]
 8000f26:	797b      	ldrb	r3, [r7, #5]
 8000f28:	737b      	strb	r3, [r7, #13]
 8000f2a:	793b      	ldrb	r3, [r7, #4]
 8000f2c:	73bb      	strb	r3, [r7, #14]
 8000f2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f32:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe72 	bl	8000c28 <WriteCmdParamN>
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}

08000f4c <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8000f5c:	e046      	b.n	8000fec <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	627a      	str	r2, [r7, #36]	; 0x24
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8000f76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7c:	d108      	bne.n	8000f90 <init_table+0x44>
        {
            HAL_Delay(len);
 8000f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fdd4 	bl	8004b30 <HAL_Delay>
            len = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f8e:	e024      	b.n	8000fda <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000f96:	e010      	b.n	8000fba <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8000f9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000fa2:	7819      	ldrb	r1, [r3, #0]
 8000fa4:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8000fa8:	443b      	add	r3, r7
 8000faa:	460a      	mov	r2, r1
 8000fac:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8000fb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000fba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3e8      	bcc.n	8000f98 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8000fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8000fd0:	f107 0208 	add.w	r2, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe27 	bl	8000c28 <WriteCmdParamN>
        }
        size -= len + 2;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8000fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dcb4      	bgt.n	8000f5e <init_table+0x12>
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800100e:	e01d      	b.n	800104c <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1c9a      	adds	r2, r3, #2
 8001014:	60fa      	str	r2, [r7, #12]
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1c9a      	adds	r2, r3, #2
 800101e:	60fa      	str	r2, [r7, #12]
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001024:	897b      	ldrh	r3, [r7, #10]
 8001026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102a:	4293      	cmp	r3, r2
 800102c:	d104      	bne.n	8001038 <init_table16+0x3a>
            HAL_Delay(d);
 800102e:	893b      	ldrh	r3, [r7, #8]
 8001030:	4618      	mov	r0, r3
 8001032:	f003 fd7d 	bl	8004b30 <HAL_Delay>
 8001036:	e005      	b.n	8001044 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001038:	893a      	ldrh	r2, [r7, #8]
 800103a:	897b      	ldrh	r3, [r7, #10]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fce4 	bl	8000a0c <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	3b04      	subs	r3, #4
 8001048:	b29b      	uxth	r3, r3
 800104a:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 800104c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001050:	2b00      	cmp	r3, #0
 8001052:	dcdd      	bgt.n	8001010 <init_table16+0x12>
    }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <reset>:



void reset(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <reset+0x90>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 800106a:	f7ff fbd7 	bl	800081c <setWriteDir>
    CTL_INIT();
 800106e:	2101      	movs	r1, #1
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f7ff fa9e 	bl	80005b4 <PIN_OUTPUT>
 8001078:	2102      	movs	r1, #2
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f7ff fa99 	bl	80005b4 <PIN_OUTPUT>
 8001082:	2110      	movs	r1, #16
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f7ff fa94 	bl	80005b4 <PIN_OUTPUT>
 800108c:	2101      	movs	r1, #1
 800108e:	4819      	ldr	r0, [pc, #100]	; (80010f4 <reset+0x94>)
 8001090:	f7ff fa90 	bl	80005b4 <PIN_OUTPUT>
 8001094:	2102      	movs	r1, #2
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <reset+0x98>)
 8001098:	f7ff fa8c 	bl	80005b4 <PIN_OUTPUT>
    CS_IDLE;
 800109c:	2101      	movs	r1, #1
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <reset+0x94>)
 80010a0:	f7ff fa62 	bl	8000568 <PIN_HIGH>
    RD_IDLE;
 80010a4:	2101      	movs	r1, #1
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f7ff fa5d 	bl	8000568 <PIN_HIGH>
    WR_IDLE;
 80010ae:	2102      	movs	r1, #2
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f7ff fa58 	bl	8000568 <PIN_HIGH>
    RESET_IDLE;
 80010b8:	2102      	movs	r1, #2
 80010ba:	480f      	ldr	r0, [pc, #60]	; (80010f8 <reset+0x98>)
 80010bc:	f7ff fa54 	bl	8000568 <PIN_HIGH>
    HAL_Delay(50);
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f003 fd35 	bl	8004b30 <HAL_Delay>
    RESET_ACTIVE;
 80010c6:	2102      	movs	r1, #2
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <reset+0x98>)
 80010ca:	f7ff fa3d 	bl	8000548 <PIN_LOW>
    HAL_Delay(100);
 80010ce:	2064      	movs	r0, #100	; 0x64
 80010d0:	f003 fd2e 	bl	8004b30 <HAL_Delay>
    RESET_IDLE;
 80010d4:	2102      	movs	r1, #2
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <reset+0x98>)
 80010d8:	f7ff fa46 	bl	8000568 <PIN_HIGH>
    HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	; 0x64
 80010de:	f003 fd27 	bl	8004b30 <HAL_Delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 80010e2:	2100      	movs	r1, #0
 80010e4:	20b0      	movs	r0, #176	; 0xb0
 80010e6:	f7ff fb44 	bl	8000772 <WriteCmdData>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000003a 	.word	0x2000003a
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800

080010fc <read16bits>:

static uint16_t read16bits(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001102:	2101      	movs	r1, #1
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f7ff fa2e 	bl	8000568 <PIN_HIGH>
 800110c:	2101      	movs	r1, #1
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f7ff fa19 	bl	8000548 <PIN_LOW>
 8001116:	2101      	movs	r1, #1
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff fa14 	bl	8000548 <PIN_LOW>
 8001120:	2101      	movs	r1, #1
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f7ff fa0f 	bl	8000548 <PIN_LOW>
 800112a:	2101      	movs	r1, #1
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f7ff fa0a 	bl	8000548 <PIN_LOW>
 8001134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	0a5b      	lsrs	r3, r3, #9
 800113c:	b29b      	uxth	r3, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <read16bits+0x1d0>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	099b      	lsrs	r3, r3, #6
 800114a:	b29b      	uxth	r3, r3
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	b29b      	uxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	b29b      	uxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <read16bits+0x1d4>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <read16bits+0x1d4>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	085b      	lsrs	r3, r3, #1
 8001180:	b29b      	uxth	r3, r3
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	b29b      	uxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <read16bits+0x1d4>)
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	b29b      	uxth	r3, r3
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	b29b      	uxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <read16bits+0x1d4>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	2101      	movs	r1, #1
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f7ff f9cc 	bl	8000568 <PIN_HIGH>
 80011d0:	2101      	movs	r1, #1
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f7ff f9c7 	bl	8000568 <PIN_HIGH>
    READ_8(lo);
 80011da:	2101      	movs	r1, #1
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f7ff f9c2 	bl	8000568 <PIN_HIGH>
 80011e4:	2101      	movs	r1, #1
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ea:	f7ff f9ad 	bl	8000548 <PIN_LOW>
 80011ee:	2101      	movs	r1, #1
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f4:	f7ff f9a8 	bl	8000548 <PIN_LOW>
 80011f8:	2101      	movs	r1, #1
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f7ff f9a3 	bl	8000548 <PIN_LOW>
 8001202:	2101      	movs	r1, #1
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f7ff f99e 	bl	8000548 <PIN_LOW>
 800120c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	0a5b      	lsrs	r3, r3, #9
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <read16bits+0x1d0>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <read16bits+0x1d4>)
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <read16bits+0x1d4>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	085b      	lsrs	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <read16bits+0x1d4>)
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <read16bits+0x1d4>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	717b      	strb	r3, [r7, #5]
 800129e:	2101      	movs	r1, #1
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f7ff f960 	bl	8000568 <PIN_HIGH>
 80012a8:	2101      	movs	r1, #1
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f7ff f95b 	bl	8000568 <PIN_HIGH>
    return (ret << 8) | lo;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b29b      	uxth	r3, r3
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000400 	.word	0x48000400

080012d4 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	80fb      	strh	r3, [r7, #6]
 80012e0:	4613      	mov	r3, r2
 80012e2:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <readReg+0x168>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <readReg+0x1c>
        reset();
 80012ec:	f7ff feb8 	bl	8001060 <reset>
    CS_ACTIVE;
 80012f0:	2101      	movs	r1, #1
 80012f2:	4853      	ldr	r0, [pc, #332]	; (8001440 <readReg+0x16c>)
 80012f4:	f7ff f928 	bl	8000548 <PIN_LOW>
    WriteCmd(reg);
 80012f8:	2110      	movs	r1, #16
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f7ff f923 	bl	8000548 <PIN_LOW>
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	73bb      	strb	r3, [r7, #14]
 800130e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001312:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8001316:	619a      	str	r2, [r3, #24]
 8001318:	4b49      	ldr	r3, [pc, #292]	; (8001440 <readReg+0x16c>)
 800131a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800131e:	619a      	str	r2, [r3, #24]
 8001320:	4b48      	ldr	r3, [pc, #288]	; (8001444 <readReg+0x170>)
 8001322:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	105b      	asrs	r3, r3, #1
 800132c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	105b      	asrs	r3, r3, #1
 800133c:	4313      	orrs	r3, r2
 800133e:	f003 0208 	and.w	r2, r3, #8
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134a:	431a      	orrs	r2, r3
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	111b      	asrs	r3, r3, #4
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	431a      	orrs	r2, r3
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <readReg+0x16c>)
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <readReg+0x170>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
 8001360:	2102      	movs	r1, #2
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f7ff f8ef 	bl	8000548 <PIN_LOW>
 800136a:	2102      	movs	r1, #2
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f7ff f8fa 	bl	8000568 <PIN_HIGH>
 8001374:	2102      	movs	r1, #2
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f7ff f8f5 	bl	8000568 <PIN_HIGH>
 800137e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001382:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <readReg+0x16c>)
 800138a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800138e:	619a      	str	r2, [r3, #24]
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <readReg+0x170>)
 8001392:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	105b      	asrs	r3, r3, #1
 800139c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	7bba      	ldrb	r2, [r7, #14]
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	105b      	asrs	r3, r3, #1
 80013ac:	4313      	orrs	r3, r2
 80013ae:	f003 0208 	and.w	r2, r3, #8
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ba:	431a      	orrs	r2, r3
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	111b      	asrs	r3, r3, #4
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	431a      	orrs	r2, r3
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <readReg+0x16c>)
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <readReg+0x170>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
 80013d0:	2102      	movs	r1, #2
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f7ff f8b7 	bl	8000548 <PIN_LOW>
 80013da:	2102      	movs	r1, #2
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f7ff f8c2 	bl	8000568 <PIN_HIGH>
 80013e4:	2102      	movs	r1, #2
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f7ff f8bd 	bl	8000568 <PIN_HIGH>
 80013ee:	2110      	movs	r1, #16
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f7ff f8b8 	bl	8000568 <PIN_HIGH>
    setReadDir();
 80013f8:	f7ff f9e0 	bl	80007bc <setReadDir>
    HAL_Delay(1);    //1us should be adequate
 80013fc:	2001      	movs	r0, #1
 80013fe:	f003 fb97 	bl	8004b30 <HAL_Delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001402:	f7ff fe7b 	bl	80010fc <read16bits>
 8001406:	4603      	mov	r3, r0
 8001408:	81bb      	strh	r3, [r7, #12]
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3b01      	subs	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	717b      	strb	r3, [r7, #5]
 8001412:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001416:	2b00      	cmp	r3, #0
 8001418:	daf3      	bge.n	8001402 <readReg+0x12e>
    RD_IDLE;
 800141a:	2101      	movs	r1, #1
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f7ff f8a2 	bl	8000568 <PIN_HIGH>
    CS_IDLE;
 8001424:	2101      	movs	r1, #1
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <readReg+0x16c>)
 8001428:	f7ff f89e 	bl	8000568 <PIN_HIGH>
    setWriteDir();
 800142c:	f7ff f9f6 	bl	800081c <setWriteDir>
    return ret;
 8001430:	89bb      	ldrh	r3, [r7, #12]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000003a 	.word	0x2000003a
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800

08001448 <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff3c 	bl	80012d4 <readReg>
 800145c:	4603      	mov	r3, r0
 800145e:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff35 	bl	80012d4 <readReg>
 800146a:	4603      	mov	r3, r0
 800146c:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff21 	bl	80012d4 <readReg>
 8001492:	4603      	mov	r3, r0
 8001494:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff1a 	bl	80012d4 <readReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff13 	bl	80012d4 <readReg>
 80014ae:	4603      	mov	r3, r0
 80014b0:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 80014b2:	89fb      	ldrh	r3, [r7, #14]
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	89ba      	ldrh	r2, [r7, #12]
 80014b8:	0212      	lsls	r2, r2, #8
 80014ba:	4313      	orrs	r3, r2
 80014bc:	897a      	ldrh	r2, [r7, #10]
 80014be:	0a12      	lsrs	r2, r2, #8
 80014c0:	b292      	uxth	r2, r2
 80014c2:	4313      	orrs	r3, r2
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <tft_init>:


void tft_init(uint16_t ID)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 80014de:	4bd2      	ldr	r3, [pc, #840]	; (8001828 <tft_init+0x35c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 80014e4:	4ad1      	ldr	r2, [pc, #836]	; (800182c <tft_init+0x360>)
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	8013      	strh	r3, [r2, #0]
 80014ea:	4bd0      	ldr	r3, [pc, #832]	; (800182c <tft_init+0x360>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f24c 5205 	movw	r2, #50437	; 0xc505
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f000 8309 	beq.w	8001b0a <tft_init+0x63e>
 80014f8:	f24c 5205 	movw	r2, #50437	; 0xc505
 80014fc:	4293      	cmp	r3, r2
 80014fe:	f300 831c 	bgt.w	8001b3a <tft_init+0x66e>
 8001502:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001506:	4293      	cmp	r3, r2
 8001508:	f000 8308 	beq.w	8001b1c <tft_init+0x650>
 800150c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001510:	4293      	cmp	r3, r2
 8001512:	f300 8312 	bgt.w	8001b3a <tft_init+0x66e>
 8001516:	f24b 5205 	movw	r2, #46341	; 0xb505
 800151a:	4293      	cmp	r3, r2
 800151c:	f000 82f5 	beq.w	8001b0a <tft_init+0x63e>
 8001520:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001524:	4293      	cmp	r3, r2
 8001526:	f300 8308 	bgt.w	8001b3a <tft_init+0x66e>
 800152a:	f64a 4211 	movw	r2, #44049	; 0xac11
 800152e:	4293      	cmp	r3, r2
 8001530:	f000 8250 	beq.w	80019d4 <tft_init+0x508>
 8001534:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001538:	4293      	cmp	r3, r2
 800153a:	f300 82fe 	bgt.w	8001b3a <tft_init+0x66e>
 800153e:	f249 4288 	movw	r2, #38024	; 0x9488
 8001542:	4293      	cmp	r3, r2
 8001544:	f300 82f9 	bgt.w	8001b3a <tft_init+0x66e>
 8001548:	f249 4287 	movw	r2, #38023	; 0x9487
 800154c:	4293      	cmp	r3, r2
 800154e:	f280 82c5 	bge.w	8001adc <tft_init+0x610>
 8001552:	f249 4286 	movw	r2, #38022	; 0x9486
 8001556:	4293      	cmp	r3, r2
 8001558:	f000 8280 	beq.w	8001a5c <tft_init+0x590>
 800155c:	f249 4286 	movw	r2, #38022	; 0x9486
 8001560:	4293      	cmp	r3, r2
 8001562:	f300 82ea 	bgt.w	8001b3a <tft_init+0x66e>
 8001566:	f249 4281 	movw	r2, #38017	; 0x9481
 800156a:	4293      	cmp	r3, r2
 800156c:	f000 825f 	beq.w	8001a2e <tft_init+0x562>
 8001570:	f249 4281 	movw	r2, #38017	; 0x9481
 8001574:	4293      	cmp	r3, r2
 8001576:	f300 82e0 	bgt.w	8001b3a <tft_init+0x66e>
 800157a:	f249 3241 	movw	r2, #37697	; 0x9341
 800157e:	4293      	cmp	r3, r2
 8001580:	f300 82db 	bgt.w	8001b3a <tft_init+0x66e>
 8001584:	f249 3202 	movw	r2, #37634	; 0x9302
 8001588:	4293      	cmp	r3, r2
 800158a:	f280 80af 	bge.w	80016ec <tft_init+0x220>
 800158e:	f249 0290 	movw	r2, #37008	; 0x9090
 8001592:	4293      	cmp	r3, r2
 8001594:	f000 8192 	beq.w	80018bc <tft_init+0x3f0>
 8001598:	f249 0290 	movw	r2, #37008	; 0x9090
 800159c:	4293      	cmp	r3, r2
 800159e:	f300 82cc 	bgt.w	8001b3a <tft_init+0x66e>
 80015a2:	f248 3257 	movw	r2, #33623	; 0x8357
 80015a6:	4293      	cmp	r3, r2
 80015a8:	f000 8183 	beq.w	80018b2 <tft_init+0x3e6>
 80015ac:	f248 3257 	movw	r2, #33623	; 0x8357
 80015b0:	4293      	cmp	r3, r2
 80015b2:	f300 82c2 	bgt.w	8001b3a <tft_init+0x66e>
 80015b6:	f248 0231 	movw	r2, #32817	; 0x8031
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f000 8170 	beq.w	80018a0 <tft_init+0x3d4>
 80015c0:	f248 0231 	movw	r2, #32817	; 0x8031
 80015c4:	4293      	cmp	r3, r2
 80015c6:	f300 82b8 	bgt.w	8001b3a <tft_init+0x66e>
 80015ca:	f247 7296 	movw	r2, #30614	; 0x7796
 80015ce:	4293      	cmp	r3, r2
 80015d0:	f000 8259 	beq.w	8001a86 <tft_init+0x5ba>
 80015d4:	f247 7296 	movw	r2, #30614	; 0x7796
 80015d8:	4293      	cmp	r3, r2
 80015da:	f300 82ae 	bgt.w	8001b3a <tft_init+0x66e>
 80015de:	f247 7293 	movw	r2, #30611	; 0x7793
 80015e2:	4293      	cmp	r3, r2
 80015e4:	f000 829a 	beq.w	8001b1c <tft_init+0x650>
 80015e8:	f247 7293 	movw	r2, #30611	; 0x7793
 80015ec:	4293      	cmp	r3, r2
 80015ee:	f300 82a4 	bgt.w	8001b3a <tft_init+0x66e>
 80015f2:	f247 7289 	movw	r2, #30601	; 0x7789
 80015f6:	4293      	cmp	r3, r2
 80015f8:	f000 8149 	beq.w	800188e <tft_init+0x3c2>
 80015fc:	f247 7289 	movw	r2, #30601	; 0x7789
 8001600:	4293      	cmp	r3, r2
 8001602:	f300 829a 	bgt.w	8001b3a <tft_init+0x66e>
 8001606:	f646 0209 	movw	r2, #26633	; 0x6809
 800160a:	4293      	cmp	r3, r2
 800160c:	f000 8197 	beq.w	800193e <tft_init+0x472>
 8001610:	f646 0209 	movw	r2, #26633	; 0x6809
 8001614:	4293      	cmp	r3, r2
 8001616:	f300 8290 	bgt.w	8001b3a <tft_init+0x66e>
 800161a:	f245 4220 	movw	r2, #21536	; 0x5420
 800161e:	4293      	cmp	r3, r2
 8001620:	f000 81a2 	beq.w	8001968 <tft_init+0x49c>
 8001624:	f245 4220 	movw	r2, #21536	; 0x5420
 8001628:	4293      	cmp	r3, r2
 800162a:	f300 8286 	bgt.w	8001b3a <tft_init+0x66e>
 800162e:	f245 4208 	movw	r2, #21512	; 0x5408
 8001632:	4293      	cmp	r3, r2
 8001634:	f000 8173 	beq.w	800191e <tft_init+0x452>
 8001638:	f245 4208 	movw	r2, #21512	; 0x5408
 800163c:	4293      	cmp	r3, r2
 800163e:	f300 827c 	bgt.w	8001b3a <tft_init+0x66e>
 8001642:	f245 3210 	movw	r2, #21264	; 0x5310
 8001646:	4293      	cmp	r3, r2
 8001648:	f000 810c 	beq.w	8001864 <tft_init+0x398>
 800164c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001650:	4293      	cmp	r3, r2
 8001652:	f300 8272 	bgt.w	8001b3a <tft_init+0x66e>
 8001656:	f242 0253 	movw	r2, #8275	; 0x2053
 800165a:	4293      	cmp	r3, r2
 800165c:	f000 81b5 	beq.w	80019ca <tft_init+0x4fe>
 8001660:	f242 0253 	movw	r2, #8275	; 0x2053
 8001664:	4293      	cmp	r3, r2
 8001666:	f300 8268 	bgt.w	8001b3a <tft_init+0x66e>
 800166a:	f241 6202 	movw	r2, #5634	; 0x1602
 800166e:	4293      	cmp	r3, r2
 8001670:	f000 81a2 	beq.w	80019b8 <tft_init+0x4ec>
 8001674:	f241 6202 	movw	r2, #5634	; 0x1602
 8001678:	4293      	cmp	r3, r2
 800167a:	f300 825e 	bgt.w	8001b3a <tft_init+0x66e>
 800167e:	f241 5281 	movw	r2, #5505	; 0x1581
 8001682:	4293      	cmp	r3, r2
 8001684:	f000 81ce 	beq.w	8001a24 <tft_init+0x558>
 8001688:	f241 5281 	movw	r2, #5505	; 0x1581
 800168c:	4293      	cmp	r3, r2
 800168e:	f300 8254 	bgt.w	8001b3a <tft_init+0x66e>
 8001692:	f241 5226 	movw	r2, #5414	; 0x1526
 8001696:	4293      	cmp	r3, r2
 8001698:	f000 80db 	beq.w	8001852 <tft_init+0x386>
 800169c:	f241 5226 	movw	r2, #5414	; 0x1526
 80016a0:	4293      	cmp	r3, r2
 80016a2:	f300 824a 	bgt.w	8001b3a <tft_init+0x66e>
 80016a6:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80016aa:	f000 80c9 	beq.w	8001840 <tft_init+0x374>
 80016ae:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80016b2:	f300 8242 	bgt.w	8001b3a <tft_init+0x66e>
 80016b6:	f241 5211 	movw	r2, #5393	; 0x1511
 80016ba:	4293      	cmp	r3, r2
 80016bc:	f000 80a0 	beq.w	8001800 <tft_init+0x334>
 80016c0:	f241 5211 	movw	r2, #5393	; 0x1511
 80016c4:	4293      	cmp	r3, r2
 80016c6:	f300 8238 	bgt.w	8001b3a <tft_init+0x66e>
 80016ca:	f241 5205 	movw	r2, #5381	; 0x1505
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f000 812a 	beq.w	8001928 <tft_init+0x45c>
 80016d4:	f241 5205 	movw	r2, #5381	; 0x1505
 80016d8:	4293      	cmp	r3, r2
 80016da:	f300 822e 	bgt.w	8001b3a <tft_init+0x66e>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f000 8118 	beq.w	8001914 <tft_init+0x448>
 80016e4:	2b99      	cmp	r3, #153	; 0x99
 80016e6:	f000 8100 	beq.w	80018ea <tft_init+0x41e>
 80016ea:	e226      	b.n	8001b3a <tft_init+0x66e>
 80016ec:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 80016f0:	3b02      	subs	r3, #2
 80016f2:	2b3f      	cmp	r3, #63	; 0x3f
 80016f4:	f200 8221 	bhi.w	8001b3a <tft_init+0x66e>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <tft_init+0x234>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	080019df 	.word	0x080019df
 8001704:	08001b3b 	.word	0x08001b3b
 8001708:	08001b3b 	.word	0x08001b3b
 800170c:	08001b3b 	.word	0x08001b3b
 8001710:	08001b3b 	.word	0x08001b3b
 8001714:	08001b3b 	.word	0x08001b3b
 8001718:	08001b3b 	.word	0x08001b3b
 800171c:	08001b3b 	.word	0x08001b3b
 8001720:	08001b3b 	.word	0x08001b3b
 8001724:	08001b3b 	.word	0x08001b3b
 8001728:	08001b3b 	.word	0x08001b3b
 800172c:	08001b3b 	.word	0x08001b3b
 8001730:	08001b3b 	.word	0x08001b3b
 8001734:	08001b3b 	.word	0x08001b3b
 8001738:	08001b3b 	.word	0x08001b3b
 800173c:	08001b3b 	.word	0x08001b3b
 8001740:	08001b3b 	.word	0x08001b3b
 8001744:	08001b3b 	.word	0x08001b3b
 8001748:	08001b3b 	.word	0x08001b3b
 800174c:	08001b3b 	.word	0x08001b3b
 8001750:	08001b3b 	.word	0x08001b3b
 8001754:	08001b3b 	.word	0x08001b3b
 8001758:	08001b3b 	.word	0x08001b3b
 800175c:	08001b3b 	.word	0x08001b3b
 8001760:	08001b3b 	.word	0x08001b3b
 8001764:	08001b3b 	.word	0x08001b3b
 8001768:	08001b3b 	.word	0x08001b3b
 800176c:	08001b3b 	.word	0x08001b3b
 8001770:	08001b3b 	.word	0x08001b3b
 8001774:	08001b3b 	.word	0x08001b3b
 8001778:	08001929 	.word	0x08001929
 800177c:	08001b3b 	.word	0x08001b3b
 8001780:	08001b3b 	.word	0x08001b3b
 8001784:	08001b3b 	.word	0x08001b3b
 8001788:	08001b3b 	.word	0x08001b3b
 800178c:	08001949 	.word	0x08001949
 8001790:	08001969 	.word	0x08001969
 8001794:	08001991 	.word	0x08001991
 8001798:	08001949 	.word	0x08001949
 800179c:	080019f3 	.word	0x080019f3
 80017a0:	08001b3b 	.word	0x08001b3b
 80017a4:	08001b3b 	.word	0x08001b3b
 80017a8:	08001b3b 	.word	0x08001b3b
 80017ac:	08001b3b 	.word	0x08001b3b
 80017b0:	08001b3b 	.word	0x08001b3b
 80017b4:	08001b3b 	.word	0x08001b3b
 80017b8:	08001b3b 	.word	0x08001b3b
 80017bc:	08001953 	.word	0x08001953
 80017c0:	08001b3b 	.word	0x08001b3b
 80017c4:	08001b3b 	.word	0x08001b3b
 80017c8:	08001b3b 	.word	0x08001b3b
 80017cc:	08001953 	.word	0x08001953
 80017d0:	08001b3b 	.word	0x08001b3b
 80017d4:	08001b3b 	.word	0x08001b3b
 80017d8:	080019e9 	.word	0x080019e9
 80017dc:	08001b3b 	.word	0x08001b3b
 80017e0:	08001b3b 	.word	0x08001b3b
 80017e4:	08001b3b 	.word	0x08001b3b
 80017e8:	08001b3b 	.word	0x08001b3b
 80017ec:	08001b3b 	.word	0x08001b3b
 80017f0:	08001b3b 	.word	0x08001b3b
 80017f4:	08001b3b 	.word	0x08001b3b
 80017f8:	08001a09 	.word	0x08001a09
 80017fc:	08001a13 	.word	0x08001a13
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <tft_init+0x364>)
 8001802:	2203      	movs	r2, #3
 8001804:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <tft_init+0x368>)
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	2303      	movs	r3, #3
 800180c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <tft_init+0x36c>)
 8001810:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001818:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <tft_init+0x370>)
 800181c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001824:	801a      	strh	r2, [r3, #0]
        break;
 8001826:	e18e      	b.n	8001b46 <tft_init+0x67a>
 8001828:	20000042 	.word	0x20000042
 800182c:	20000046 	.word	0x20000046
 8001830:	20000044 	.word	0x20000044
 8001834:	08008340 	.word	0x08008340
 8001838:	080005fd 	.word	0x080005fd
 800183c:	080005e5 	.word	0x080005e5

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001840:	4b93      	ldr	r3, [pc, #588]	; (8001a90 <tft_init+0x5c4>)
 8001842:	f240 4213 	movw	r2, #1043	; 0x413
 8001846:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <tft_init+0x5c8>)
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	2306      	movs	r3, #6
 800184e:	837b      	strh	r3, [r7, #26]
        break;
 8001850:	e179      	b.n	8001b46 <tft_init+0x67a>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001852:	4b8f      	ldr	r3, [pc, #572]	; (8001a90 <tft_init+0x5c4>)
 8001854:	f240 4213 	movw	r2, #1043	; 0x413
 8001858:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800185a:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <tft_init+0x5cc>)
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	230c      	movs	r3, #12
 8001860:	837b      	strh	r3, [r7, #26]
        break;
 8001862:	e170      	b.n	8001b46 <tft_init+0x67a>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001864:	4b8a      	ldr	r3, [pc, #552]	; (8001a90 <tft_init+0x5c4>)
 8001866:	f640 6213 	movw	r2, #3603	; 0xe13
 800186a:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800186c:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <tft_init+0x5d0>)
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	2302      	movs	r3, #2
 8001872:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001874:	4b8a      	ldr	r3, [pc, #552]	; (8001aa0 <tft_init+0x5d4>)
 8001876:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800187e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <tft_init+0x5d8>)
 8001882:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800188a:	801a      	strh	r2, [r3, #0]
        break;
 800188c:	e15b      	b.n	8001b46 <tft_init+0x67a>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800188e:	4b80      	ldr	r3, [pc, #512]	; (8001a90 <tft_init+0x5c4>)
 8001890:	f240 4213 	movw	r2, #1043	; 0x413
 8001894:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8001896:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <tft_init+0x5dc>)
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	2341      	movs	r3, #65	; 0x41
 800189c:	837b      	strh	r3, [r7, #26]
        break;
 800189e:	e152      	b.n	8001b46 <tft_init+0x67a>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80018a0:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <tft_init+0x5c4>)
 80018a2:	f241 4213 	movw	r2, #5139	; 0x1413
 80018a6:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <tft_init+0x5e0>)
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	2312      	movs	r3, #18
 80018ae:	837b      	strh	r3, [r7, #26]
        break;
 80018b0:	e149      	b.n	8001b46 <tft_init+0x67a>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80018b2:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <tft_init+0x5c4>)
 80018b4:	f241 4203 	movw	r2, #5123	; 0x1403
 80018b8:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80018ba:	e003      	b.n	80018c4 <tft_init+0x3f8>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80018bc:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <tft_init+0x5c4>)
 80018be:	f241 4213 	movw	r2, #5139	; 0x1413
 80018c2:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80018c8:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <tft_init+0x5e4>)
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	2302      	movs	r3, #2
 80018ce:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80018d0:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <tft_init+0x5d4>)
 80018d2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018da:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80018dc:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <tft_init+0x5d8>)
 80018de:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018e6:	801a      	strh	r2, [r3, #0]
        break;
 80018e8:	e12d      	b.n	8001b46 <tft_init+0x67a>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80018ea:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <tft_init+0x5c4>)
 80018ec:	f241 4213 	movw	r2, #5139	; 0x1413
 80018f0:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80018f2:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <tft_init+0x5e8>)
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	231d      	movs	r3, #29
 80018f8:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80018fa:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <tft_init+0x5d4>)
 80018fc:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001904:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <tft_init+0x5d8>)
 8001908:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001910:	801a      	strh	r2, [r3, #0]
        break;
 8001912:	e118      	b.n	8001b46 <tft_init+0x67a>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8001914:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <tft_init+0x5c4>)
 8001916:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800191a:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 800191c:	e008      	b.n	8001930 <tft_init+0x464>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <tft_init+0x5c4>)
 8001920:	f241 0204 	movw	r2, #4100	; 0x1004
 8001924:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8001926:	e003      	b.n	8001930 <tft_init+0x464>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <tft_init+0x5c4>)
 800192a:	f241 0204 	movw	r2, #4100	; 0x1004
 800192e:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8001930:	2301      	movs	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8001934:	21d8      	movs	r1, #216	; 0xd8
 8001936:	4860      	ldr	r0, [pc, #384]	; (8001ab8 <tft_init+0x5ec>)
 8001938:	f7ff fb61 	bl	8000ffe <init_table16>
        break;
 800193c:	e103      	b.n	8001b46 <tft_init+0x67a>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <tft_init+0x5c4>)
 8001940:	f241 1202 	movw	r2, #4354	; 0x1102
 8001944:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001946:	e008      	b.n	800195a <tft_init+0x48e>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <tft_init+0x5c4>)
 800194a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800194e:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001950:	e003      	b.n	800195a <tft_init+0x48e>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001952:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <tft_init+0x5c4>)
 8001954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001958:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 800195e:	21cc      	movs	r1, #204	; 0xcc
 8001960:	4856      	ldr	r0, [pc, #344]	; (8001abc <tft_init+0x5f0>)
 8001962:	f7ff fb4c 	bl	8000ffe <init_table16>
        break;
 8001966:	e0ee      	b.n	8001b46 <tft_init+0x67a>

#if defined(SUPPORT_9326_5420)
	case 0x5420:
    case 0x9326:
        _lcd_capable = REV_SCREEN | READ_BGR;
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <tft_init+0x5c4>)
 800196a:	f241 0204 	movw	r2, #4100	; 0x1004
 800196e:	801a      	strh	r2, [r3, #0]
         0x0010, 0x0010,     // DIVI[1:0];RTNI[4:0]
         0x0011, 0x0600,     // NOWI[2:0];SDTI[2:0]
         0x0020, 0x0002,     // DIVE[1:0];RTNE[5:0]
         0x0007, 0x0173,     //  262K color and display ON
		 };
        init_table16(ILI9326_CPT28_regValues, sizeof(ILI9326_CPT28_regValues));
 8001970:	21bc      	movs	r1, #188	; 0xbc
 8001972:	4853      	ldr	r0, [pc, #332]	; (8001ac0 <tft_init+0x5f4>)
 8001974:	f7ff fb43 	bl	8000ffe <init_table16>
        p16 = (int16_t *) & height;
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <tft_init+0x5d4>)
 800197a:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001982:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <tft_init+0x5d8>)
 8001986:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	22f0      	movs	r2, #240	; 0xf0
 800198c:	801a      	strh	r2, [r3, #0]
        break;
 800198e:	e0da      	b.n	8001b46 <tft_init+0x67a>
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <tft_init+0x5c4>)
 8001992:	f240 4203 	movw	r2, #1027	; 0x403
 8001996:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <tft_init+0x5f8>)
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	231e      	movs	r3, #30
 800199e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <tft_init+0x5d4>)
 80019a2:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019aa:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80019ac:	4b3d      	ldr	r3, [pc, #244]	; (8001aa4 <tft_init+0x5d8>)
 80019ae:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	22f0      	movs	r2, #240	; 0xf0
 80019b4:	801a      	strh	r2, [r3, #0]
        break;
 80019b6:	e0c6      	b.n	8001b46 <tft_init+0x67a>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <tft_init+0x5c4>)
 80019ba:	f240 4203 	movw	r2, #1027	; 0x403
 80019be:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <tft_init+0x5fc>)
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	2306      	movs	r3, #6
 80019c6:	837b      	strh	r3, [r7, #26]
        break;
 80019c8:	e0bd      	b.n	8001b46 <tft_init+0x67a>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <tft_init+0x5c4>)
 80019cc:	f241 4217 	movw	r2, #5143	; 0x1417
 80019d0:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80019d2:	e012      	b.n	80019fa <tft_init+0x52e>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <tft_init+0x5c4>)
 80019d6:	f241 4213 	movw	r2, #5139	; 0x1413
 80019da:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80019dc:	e00d      	b.n	80019fa <tft_init+0x52e>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <tft_init+0x5c4>)
 80019e0:	f240 4203 	movw	r2, #1027	; 0x403
 80019e4:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80019e6:	e008      	b.n	80019fa <tft_init+0x52e>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <tft_init+0x5c4>)
 80019ea:	f240 4213 	movw	r2, #1043	; 0x413
 80019ee:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80019f0:	e003      	b.n	80019fa <tft_init+0x52e>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <tft_init+0x5c4>)
 80019f4:	f241 6203 	movw	r2, #5635	; 0x1603
 80019f8:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <tft_init+0x600>)
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	2303      	movs	r3, #3
 8001a04:	837b      	strh	r3, [r7, #26]
        break;
 8001a06:	e09e      	b.n	8001b46 <tft_init+0x67a>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <tft_init+0x5c4>)
 8001a0a:	f241 4213 	movw	r2, #5139	; 0x1413
 8001a0e:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8001a10:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <tft_init+0x5c4>)
 8001a14:	f240 4213 	movw	r2, #1043	; 0x413
 8001a18:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <tft_init+0x604>)
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	2365      	movs	r3, #101	; 0x65
 8001a20:	837b      	strh	r3, [r7, #26]
        break;
 8001a22:	e090      	b.n	8001b46 <tft_init+0x67a>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <tft_init+0x5c4>)
 8001a26:	f240 4213 	movw	r2, #1043	; 0x413
 8001a2a:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8001a2c:	e003      	b.n	8001a36 <tft_init+0x56a>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <tft_init+0x5c4>)
 8001a30:	f240 4207 	movw	r2, #1031	; 0x407
 8001a34:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <tft_init+0x608>)
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	2345      	movs	r3, #69	; 0x45
 8001a40:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <tft_init+0x5d4>)
 8001a44:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a4c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <tft_init+0x5d8>)
 8001a50:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a58:	801a      	strh	r2, [r3, #0]
        break;
 8001a5a:	e074      	b.n	8001b46 <tft_init+0x67a>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <tft_init+0x5c4>)
 8001a5e:	f240 4203 	movw	r2, #1027	; 0x403
 8001a62:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <tft_init+0x60c>)
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	233b      	movs	r3, #59	; 0x3b
 8001a6a:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <tft_init+0x5d4>)
 8001a6e:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a76:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <tft_init+0x5d8>)
 8001a7a:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a82:	801a      	strh	r2, [r3, #0]
        break;
 8001a84:	e05f      	b.n	8001b46 <tft_init+0x67a>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001a86:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <tft_init+0x5c4>)
 8001a88:	f240 4203 	movw	r2, #1027	; 0x403
 8001a8c:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 8001a8e:	e029      	b.n	8001ae4 <tft_init+0x618>
 8001a90:	20000044 	.word	0x20000044
 8001a94:	08008344 	.word	0x08008344
 8001a98:	0800834c 	.word	0x0800834c
 8001a9c:	08008358 	.word	0x08008358
 8001aa0:	080005fd 	.word	0x080005fd
 8001aa4:	080005e5 	.word	0x080005e5
 8001aa8:	0800835c 	.word	0x0800835c
 8001aac:	080083a0 	.word	0x080083a0
 8001ab0:	080083b4 	.word	0x080083b4
 8001ab4:	080083b8 	.word	0x080083b8
 8001ab8:	080083d8 	.word	0x080083d8
 8001abc:	080084b0 	.word	0x080084b0
 8001ac0:	0800857c 	.word	0x0800857c
 8001ac4:	08008638 	.word	0x08008638
 8001ac8:	08008658 	.word	0x08008658
 8001acc:	08008660 	.word	0x08008660
 8001ad0:	08008664 	.word	0x08008664
 8001ad4:	080086cc 	.word	0x080086cc
 8001ad8:	08008714 	.word	0x08008714
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <tft_init+0x720>)
 8001ade:	f240 4213 	movw	r2, #1043	; 0x413
 8001ae2:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 8001ae8:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <tft_init+0x724>)
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	232b      	movs	r3, #43	; 0x2b
 8001aee:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <tft_init+0x728>)
 8001af2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001afa:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <tft_init+0x72c>)
 8001afe:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b06:	801a      	strh	r2, [r3, #0]
        break;
 8001b08:	e01d      	b.n	8001b46 <tft_init+0x67a>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <tft_init+0x720>)
 8001b0c:	f241 0208 	movw	r2, #4104	; 0x1008
 8001b10:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8001b12:	21b0      	movs	r1, #176	; 0xb0
 8001b14:	4839      	ldr	r0, [pc, #228]	; (8001bfc <tft_init+0x730>)
 8001b16:	f7ff fa72 	bl	8000ffe <init_table16>
        break;
 8001b1a:	e014      	b.n	8001b46 <tft_init+0x67a>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <tft_init+0x720>)
 8001b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b22:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8001b24:	21c0      	movs	r1, #192	; 0xc0
 8001b26:	4836      	ldr	r0, [pc, #216]	; (8001c00 <tft_init+0x734>)
 8001b28:	f7ff fa69 	bl	8000ffe <init_table16>
        p16 = (int16_t *) & height;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <tft_init+0x728>)
 8001b2e:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b36:	801a      	strh	r2, [r3, #0]
        break;
 8001b38:	e005      	b.n	8001b46 <tft_init+0x67a>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <tft_init+0x72c>)
 8001b3c:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
        break;
 8001b44:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <tft_init+0x720>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <tft_init+0x738>)
 8001b5c:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00d      	beq.n	8001b80 <tft_init+0x6b4>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001b64:	2109      	movs	r1, #9
 8001b66:	4828      	ldr	r0, [pc, #160]	; (8001c08 <tft_init+0x73c>)
 8001b68:	f7ff f9f0 	bl	8000f4c <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001b6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b70:	4619      	mov	r1, r3
 8001b72:	69f8      	ldr	r0, [r7, #28]
 8001b74:	f7ff f9ea 	bl	8000f4c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001b78:	2106      	movs	r1, #6
 8001b7a:	4824      	ldr	r0, [pc, #144]	; (8001c0c <tft_init+0x740>)
 8001b7c:	f7ff f9e6 	bl	8000f4c <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 ff35 	bl	80029f0 <setRotation>
    invertDisplay(false);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f001 fd00 	bl	800358c <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <tft_init+0x744>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	f249 4288 	movw	r2, #38024	; 0x9488
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d125      	bne.n	8001be4 <tft_init+0x718>
		is555 = 0;
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <tft_init+0x748>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8001b9e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f001 f9ab 	bl	8002f00 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8001baa:	2100      	movs	r1, #0
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7fe fdc8 	bl	8000742 <readPixel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d112      	bne.n	8001be4 <tft_init+0x718>
			uint8_t pixfmt = 0x06;
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8001bc2:	f107 030f 	add.w	r3, r7, #15
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4619      	mov	r1, r3
 8001bca:	203a      	movs	r0, #58	; 0x3a
 8001bcc:	f7fe fde3 	bl	8000796 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <tft_init+0x720>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f023 0310 	bic.w	r3, r3, #16
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <tft_init+0x720>)
 8001bdc:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <tft_init+0x748>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000044 	.word	0x20000044
 8001bf0:	08008750 	.word	0x08008750
 8001bf4:	080005fd 	.word	0x080005fd
 8001bf8:	080005e5 	.word	0x080005e5
 8001bfc:	0800877c 	.word	0x0800877c
 8001c00:	0800882c 	.word	0x0800882c
 8001c04:	20000048 	.word	0x20000048
 8001c08:	080088ec 	.word	0x080088ec
 8001c0c:	080088f8 	.word	0x080088f8
 8001c10:	20000046 	.word	0x20000046
 8001c14:	2000003c 	.word	0x2000003c

08001c18 <readID>:




uint16_t readID(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fb57 	bl	80012d4 <readReg>
 8001c26:	4603      	mov	r3, r0
 8001c28:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
 8001c2c:	f245 4208 	movw	r2, #21512	; 0x5408
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d102      	bne.n	8001c3a <readID+0x22>
        return 0x5408;
 8001c34:	f245 4308 	movw	r3, #21512	; 0x5408
 8001c38:	e128      	b.n	8001e8c <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
 8001c3c:	f245 4220 	movw	r2, #21536	; 0x5420
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d102      	bne.n	8001c4a <readID+0x32>
        return 0x5420;
 8001c44:	f245 4320 	movw	r3, #21536	; 0x5420
 8001c48:	e120      	b.n	8001e8c <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	f648 1289 	movw	r2, #35209	; 0x8989
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d102      	bne.n	8001c5a <readID+0x42>
        return 0x1289;
 8001c54:	f241 2389 	movw	r3, #4745	; 0x1289
 8001c58:	e118      	b.n	8001e8c <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2067      	movs	r0, #103	; 0x67
 8001c5e:	f7ff fb39 	bl	80012d4 <readReg>
 8001c62:	4603      	mov	r3, r0
 8001c64:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8001c66:	89fb      	ldrh	r3, [r7, #14]
 8001c68:	f244 7247 	movw	r2, #18247	; 0x4747
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d102      	bne.n	8001c76 <readID+0x5e>
        return 0x8347;
 8001c70:	f248 3347 	movw	r3, #33607	; 0x8347
 8001c74:	e10a      	b.n	8001e8c <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8001c76:	20a1      	movs	r0, #161	; 0xa1
 8001c78:	f7ff fbe6 	bl	8001448 <readReg32>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8001c80:	89fb      	ldrh	r3, [r7, #14]
 8001c82:	f246 1201 	movw	r2, #24833	; 0x6101
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d102      	bne.n	8001c90 <readID+0x78>
        return 0x1963;
 8001c8a:	f641 1363 	movw	r3, #6499	; 0x1963
 8001c8e:	e0fd      	b.n	8001e8c <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d102      	bne.n	8001ca0 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8001c9a:	f241 5326 	movw	r3, #5414	; 0x1526
 8001c9e:	e0f5      	b.n	8001e8c <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8001ca0:	20bf      	movs	r0, #191	; 0xbf
 8001ca2:	f7ff fbec 	bl	800147e <readReg40>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	f248 3257 	movw	r2, #33623	; 0x8357
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d102      	bne.n	8001cba <readID+0xa2>
        return 0x8357;
 8001cb4:	f248 3357 	movw	r3, #33623	; 0x8357
 8001cb8:	e0e8      	b.n	8001e8c <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8001cba:	89fb      	ldrh	r3, [r7, #14]
 8001cbc:	f249 4281 	movw	r2, #38017	; 0x9481
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <readID+0xb2>
        return 0x9481;
 8001cc4:	f249 4381 	movw	r3, #38017	; 0x9481
 8001cc8:	e0e0      	b.n	8001e8c <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	f241 5211 	movw	r2, #5393	; 0x1511
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <readID+0xc2>
        return 0x1511;
 8001cd4:	f241 5311 	movw	r3, #5393	; 0x1511
 8001cd8:	e0d8      	b.n	8001e8c <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001ce0:	d102      	bne.n	8001ce8 <readID+0xd0>
        return 0x1520;
 8001ce2:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8001ce6:	e0d1      	b.n	8001e8c <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	f241 5226 	movw	r2, #5414	; 0x1526
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d102      	bne.n	8001cf8 <readID+0xe0>
        return 0x1526;
 8001cf2:	f241 5326 	movw	r3, #5414	; 0x1526
 8001cf6:	e0c9      	b.n	8001e8c <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8001cf8:	89fb      	ldrh	r3, [r7, #14]
 8001cfa:	f241 5281 	movw	r2, #5505	; 0x1581
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d102      	bne.n	8001d08 <readID+0xf0>
        return 0x1581;
 8001d02:	f241 5381 	movw	r3, #5505	; 0x1581
 8001d06:	e0c1      	b.n	8001e8c <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001d0e:	d102      	bne.n	8001d16 <readID+0xfe>
        return 0x6814;
 8001d10:	f646 0314 	movw	r3, #26644	; 0x6814
 8001d14:	e0ba      	b.n	8001e8c <readID+0x274>
    ret = readReg32(0xD4);
 8001d16:	20d4      	movs	r0, #212	; 0xd4
 8001d18:	f7ff fb96 	bl	8001448 <readReg32>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8001d20:	89fb      	ldrh	r3, [r7, #14]
 8001d22:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d102      	bne.n	8001d30 <readID+0x118>
        return 0x5310;
 8001d2a:	f245 3310 	movw	r3, #21264	; 0x5310
 8001d2e:	e0ad      	b.n	8001e8c <readID+0x274>
    ret = readReg32(0xD7);
 8001d30:	20d7      	movs	r0, #215	; 0xd7
 8001d32:	f7ff fb89 	bl	8001448 <readReg32>
 8001d36:	4603      	mov	r3, r0
 8001d38:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
 8001d3c:	f248 0231 	movw	r2, #32817	; 0x8031
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d102      	bne.n	8001d4a <readID+0x132>
        return 0x8031;
 8001d44:	f248 0331 	movw	r3, #32817	; 0x8031
 8001d48:	e0a0      	b.n	8001e8c <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8001d4a:	20ef      	movs	r0, #239	; 0xef
 8001d4c:	f7ff fb97 	bl	800147e <readReg40>
 8001d50:	4603      	mov	r3, r0
 8001d52:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	f249 3227 	movw	r2, #37671	; 0x9327
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d102      	bne.n	8001d64 <readID+0x14c>
        return 0x9327;
 8001d5e:	f249 3327 	movw	r3, #37671	; 0x9327
 8001d62:	e093      	b.n	8001e8c <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8001d64:	20fe      	movs	r0, #254	; 0xfe
 8001d66:	f7ff fb6f 	bl	8001448 <readReg32>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	f242 0253 	movw	r2, #8275	; 0x2053
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d102      	bne.n	8001d80 <readID+0x168>
        return 0x2053;
 8001d7a:	f242 0353 	movw	r3, #8275	; 0x2053
 8001d7e:	e085      	b.n	8001e8c <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f7ff fb61 	bl	8001448 <readReg32>
 8001d86:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	0c1b      	lsrs	r3, r3, #16
 8001d8c:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d122      	bne.n	8001dde <readID+0x1c6>
 8001d98:	89fb      	ldrh	r3, [r7, #14]
 8001d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9e:	d11e      	bne.n	8001dde <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8001da0:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <readID+0x27c>)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	4611      	mov	r1, r2
 8001da8:	8019      	strh	r1, [r3, #0]
 8001daa:	3302      	adds	r3, #2
 8001dac:	0c12      	lsrs	r2, r2, #16
 8001dae:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2203      	movs	r2, #3
 8001db4:	4619      	mov	r1, r3
 8001db6:	20b9      	movs	r0, #185	; 0xb9
 8001db8:	f7fe fced 	bl	8000796 <pushCommand>
        msb = readReg(0xD0,0);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	20d0      	movs	r0, #208	; 0xd0
 8001dc0:	f7ff fa88 	bl	80012d4 <readReg>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	2b99      	cmp	r3, #153	; 0x99
 8001dcc:	d101      	bne.n	8001dd2 <readID+0x1ba>
 8001dce:	2399      	movs	r3, #153	; 0x99
 8001dd0:	e05c      	b.n	8001e8c <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b90      	cmp	r3, #144	; 0x90
 8001dd6:	d102      	bne.n	8001dde <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8001dd8:	f249 0390 	movw	r3, #37008	; 0x9090
 8001ddc:	e056      	b.n	8001e8c <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	f241 5226 	movw	r2, #5414	; 0x1526
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d102      	bne.n	8001dee <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8001de8:	f241 5326 	movw	r3, #5414	; 0x1526
 8001dec:	e04e      	b.n	8001e8c <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d102      	bne.n	8001dfe <readID+0x1e6>
        return 0x7735;
 8001df8:	f247 7335 	movw	r3, #30517	; 0x7735
 8001dfc:	e046      	b.n	8001e8c <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	f248 5252 	movw	r2, #34130	; 0x8552
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d102      	bne.n	8001e0e <readID+0x1f6>
        return 0x7789;
 8001e08:	f247 7389 	movw	r3, #30601	; 0x7789
 8001e0c:	e03e      	b.n	8001e8c <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d102      	bne.n	8001e1e <readID+0x206>
        return 0xAC11;
 8001e18:	f64a 4311 	movw	r3, #44049	; 0xac11
 8001e1c:	e036      	b.n	8001e8c <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8001e1e:	20d3      	movs	r0, #211	; 0xd3
 8001e20:	f7ff fb12 	bl	8001448 <readReg32>
 8001e24:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8001e2c:	89fb      	ldrh	r3, [r7, #14]
 8001e2e:	f249 1263 	movw	r2, #37219	; 0x9163
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <readID+0x222>
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	e028      	b.n	8001e8c <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8001e3a:	20d3      	movs	r0, #211	; 0xd3
 8001e3c:	f7ff fb04 	bl	8001448 <readReg32>
 8001e40:	4603      	mov	r3, r0
 8001e42:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b93      	cmp	r3, #147	; 0x93
 8001e50:	d00b      	beq.n	8001e6a <readID+0x252>
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b94      	cmp	r3, #148	; 0x94
 8001e56:	d008      	beq.n	8001e6a <readID+0x252>
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b98      	cmp	r3, #152	; 0x98
 8001e5c:	d005      	beq.n	8001e6a <readID+0x252>
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b77      	cmp	r3, #119	; 0x77
 8001e62:	d002      	beq.n	8001e6a <readID+0x252>
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	2b16      	cmp	r3, #22
 8001e68:	d101      	bne.n	8001e6e <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	e00e      	b.n	8001e8c <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	2bd3      	cmp	r3, #211	; 0xd3
 8001e72:	d004      	beq.n	8001e7e <readID+0x266>
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	e004      	b.n	8001e8c <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8001e82:	2100      	movs	r1, #0
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fa25 	bl	80012d4 <readReg>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	0800795c 	.word	0x0800795c

08001e98 <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b08b      	sub	sp, #44	; 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	81fb      	strh	r3, [r7, #14]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	81bb      	strh	r3, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8001eae:	4bab      	ldr	r3, [pc, #684]	; (800215c <readGRAM+0x2c4>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001eb8:	fb12 f303 	smulbb	r3, r2, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	843b      	strh	r3, [r7, #32]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8001ec8:	4ba5      	ldr	r3, [pc, #660]	; (8002160 <readGRAM+0x2c8>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <readGRAM+0x48>
 8001ed0:	4ba4      	ldr	r3, [pc, #656]	; (8002164 <readGRAM+0x2cc>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <readGRAM+0x48>
        _MR = 0x2E;
 8001edc:	232e      	movs	r3, #46	; 0x2e
 8001ede:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8001ee0:	4ba1      	ldr	r3, [pc, #644]	; (8002168 <readGRAM+0x2d0>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	f241 6202 	movw	r2, #5634	; 0x1602
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <readGRAM+0x58>
 8001eec:	232e      	movs	r3, #46	; 0x2e
 8001eee:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001ef0:	89fa      	ldrh	r2, [r7, #14]
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b21c      	sxth	r4, r3
 8001efe:	89ba      	ldrh	r2, [r7, #12]
 8001f00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001f10:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001f14:	4622      	mov	r2, r4
 8001f16:	f001 f8d5 	bl	80030c4 <setAddrWindow>
    while (n > 0) {
 8001f1a:	f000 bd3f 	b.w	800299c <readGRAM+0xb04>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8001f1e:	4b91      	ldr	r3, [pc, #580]	; (8002164 <readGRAM+0x2cc>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d111      	bne.n	8001f4e <readGRAM+0xb6>
            WriteCmdData(_MC, x + col);
 8001f2a:	4b90      	ldr	r3, [pc, #576]	; (800216c <readGRAM+0x2d4>)
 8001f2c:	8818      	ldrh	r0, [r3, #0]
 8001f2e:	89fa      	ldrh	r2, [r7, #14]
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	4413      	add	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fc1b 	bl	8000772 <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8001f3c:	4b8c      	ldr	r3, [pc, #560]	; (8002170 <readGRAM+0x2d8>)
 8001f3e:	8818      	ldrh	r0, [r3, #0]
 8001f40:	89ba      	ldrh	r2, [r7, #12]
 8001f42:	8c3b      	ldrh	r3, [r7, #32]
 8001f44:	4413      	add	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fc12 	bl	8000772 <WriteCmdData>
        }
        CS_ACTIVE;
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4888      	ldr	r0, [pc, #544]	; (8002174 <readGRAM+0x2dc>)
 8001f52:	f7fe faf9 	bl	8000548 <PIN_LOW>
        WriteCmd(_MR);
 8001f56:	2110      	movs	r1, #16
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5c:	f7fe faf4 	bl	8000548 <PIN_LOW>
 8001f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	777b      	strb	r3, [r7, #29]
 8001f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f6a:	773b      	strb	r3, [r7, #28]
 8001f6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f70:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	4b7f      	ldr	r3, [pc, #508]	; (8002174 <readGRAM+0x2dc>)
 8001f78:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001f7c:	619a      	str	r2, [r3, #24]
 8001f7e:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <readGRAM+0x2e0>)
 8001f80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	7f7b      	ldrb	r3, [r7, #29]
 8001f88:	105b      	asrs	r3, r3, #1
 8001f8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	7f7a      	ldrb	r2, [r7, #29]
 8001f96:	7f7b      	ldrb	r3, [r7, #29]
 8001f98:	105b      	asrs	r3, r3, #1
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f003 0208 	and.w	r2, r3, #8
 8001fa0:	7f7b      	ldrb	r3, [r7, #29]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	7f7b      	ldrb	r3, [r7, #29]
 8001fac:	111b      	asrs	r3, r3, #4
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <readGRAM+0x2dc>)
 8001fb6:	619a      	str	r2, [r3, #24]
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <readGRAM+0x2e0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc4:	f7fe fac0 	bl	8000548 <PIN_LOW>
 8001fc8:	2102      	movs	r1, #2
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f7fe facb 	bl	8000568 <PIN_HIGH>
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f7fe fac6 	bl	8000568 <PIN_HIGH>
 8001fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fe0:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <readGRAM+0x2dc>)
 8001fe8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	4b62      	ldr	r3, [pc, #392]	; (8002178 <readGRAM+0x2e0>)
 8001ff0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ff4:	619a      	str	r2, [r3, #24]
 8001ff6:	7f3b      	ldrb	r3, [r7, #28]
 8001ff8:	105b      	asrs	r3, r3, #1
 8001ffa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	7f3a      	ldrb	r2, [r7, #28]
 8002006:	7f3b      	ldrb	r3, [r7, #28]
 8002008:	105b      	asrs	r3, r3, #1
 800200a:	4313      	orrs	r3, r2
 800200c:	f003 0208 	and.w	r2, r3, #8
 8002010:	7f3b      	ldrb	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	431a      	orrs	r2, r3
 800201a:	7f3b      	ldrb	r3, [r7, #28]
 800201c:	111b      	asrs	r3, r3, #4
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	431a      	orrs	r2, r3
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <readGRAM+0x2dc>)
 8002026:	619a      	str	r2, [r3, #24]
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <readGRAM+0x2e0>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	2102      	movs	r1, #2
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f7fe fa88 	bl	8000548 <PIN_LOW>
 8002038:	2102      	movs	r1, #2
 800203a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203e:	f7fe fa93 	bl	8000568 <PIN_HIGH>
 8002042:	2102      	movs	r1, #2
 8002044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002048:	f7fe fa8e 	bl	8000568 <PIN_HIGH>
 800204c:	2110      	movs	r1, #16
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f7fe fa89 	bl	8000568 <PIN_HIGH>
        setReadDir();
 8002056:	f7fe fbb1 	bl	80007bc <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <readGRAM+0x2cc>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 816a 	bne.w	800233c <readGRAM+0x4a4>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <readGRAM+0x2cc>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <readGRAM+0x1e8>
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <readGRAM+0x2d0>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f241 2289 	movw	r2, #4745	; 0x1289
 800207c:	4293      	cmp	r3, r2
 800207e:	d17d      	bne.n	800217c <readGRAM+0x2e4>
            READ_8(r);
 8002080:	2101      	movs	r1, #1
 8002082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002086:	f7fe fa6f 	bl	8000568 <PIN_HIGH>
 800208a:	2101      	movs	r1, #1
 800208c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002090:	f7fe fa5a 	bl	8000548 <PIN_LOW>
 8002094:	2101      	movs	r1, #1
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f7fe fa55 	bl	8000548 <PIN_LOW>
 800209e:	2101      	movs	r1, #1
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f7fe fa50 	bl	8000548 <PIN_LOW>
 80020a8:	2101      	movs	r1, #1
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f7fe fa4b 	bl	8000548 <PIN_LOW>
 80020b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	0a5b      	lsrs	r3, r3, #9
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <readGRAM+0x2e0>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <readGRAM+0x2dc>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <readGRAM+0x2dc>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	b2db      	uxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <readGRAM+0x2dc>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4313      	orrs	r3, r2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <readGRAM+0x2dc>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b2da      	uxtb	r2, r3
 8002130:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	75fb      	strb	r3, [r7, #23]
 8002144:	2101      	movs	r1, #1
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f7fe fa0d 	bl	8000568 <PIN_HIGH>
 800214e:	2101      	movs	r1, #1
 8002150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002154:	f7fe fa08 	bl	8000568 <PIN_HIGH>
 8002158:	e0f0      	b.n	800233c <readGRAM+0x4a4>
 800215a:	bf00      	nop
 800215c:	20000050 	.word	0x20000050
 8002160:	2000003b 	.word	0x2000003b
 8002164:	20000044 	.word	0x20000044
 8002168:	20000046 	.word	0x20000046
 800216c:	2000004c 	.word	0x2000004c
 8002170:	2000004e 	.word	0x2000004e
 8002174:	48000400 	.word	0x48000400
 8002178:	48000800 	.word	0x48000800
        } else {
            READ_16(dummy);
 800217c:	2101      	movs	r1, #1
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f7fe f9f1 	bl	8000568 <PIN_HIGH>
 8002186:	2101      	movs	r1, #1
 8002188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218c:	f7fe f9dc 	bl	8000548 <PIN_LOW>
 8002190:	2101      	movs	r1, #1
 8002192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002196:	f7fe f9d7 	bl	8000548 <PIN_LOW>
 800219a:	2101      	movs	r1, #1
 800219c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a0:	f7fe f9d2 	bl	8000548 <PIN_LOW>
 80021a4:	2101      	movs	r1, #1
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f7fe f9cd 	bl	8000548 <PIN_LOW>
 80021ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	0a5b      	lsrs	r3, r3, #9
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b99      	ldr	r3, [pc, #612]	; (8002424 <readGRAM+0x58c>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b90      	ldr	r3, [pc, #576]	; (8002428 <readGRAM+0x590>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <readGRAM+0x590>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <readGRAM+0x590>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b83      	ldr	r3, [pc, #524]	; (8002428 <readGRAM+0x590>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b2da      	uxtb	r2, r3
 800222c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	085b      	lsrs	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	76fb      	strb	r3, [r7, #27]
 8002240:	2101      	movs	r1, #1
 8002242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002246:	f7fe f98f 	bl	8000568 <PIN_HIGH>
 800224a:	2101      	movs	r1, #1
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002250:	f7fe f98a 	bl	8000568 <PIN_HIGH>
 8002254:	2101      	movs	r1, #1
 8002256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225a:	f7fe f985 	bl	8000568 <PIN_HIGH>
 800225e:	2101      	movs	r1, #1
 8002260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002264:	f7fe f970 	bl	8000548 <PIN_LOW>
 8002268:	2101      	movs	r1, #1
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f7fe f96b 	bl	8000548 <PIN_LOW>
 8002272:	2101      	movs	r1, #1
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f7fe f966 	bl	8000548 <PIN_LOW>
 800227c:	2101      	movs	r1, #1
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f7fe f961 	bl	8000548 <PIN_LOW>
 8002286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	0a5b      	lsrs	r3, r3, #9
 800228e:	b29b      	uxth	r3, r3
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <readGRAM+0x58c>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	b29b      	uxth	r3, r3
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <readGRAM+0x590>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <readGRAM+0x590>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4313      	orrs	r3, r2
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b52      	ldr	r3, [pc, #328]	; (8002428 <readGRAM+0x590>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <readGRAM+0x590>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b29a      	uxth	r2, r3
 8002304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	b29b      	uxth	r3, r3
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	b29b      	uxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	833b      	strh	r3, [r7, #24]
 8002318:	2101      	movs	r1, #1
 800231a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231e:	f7fe f923 	bl	8000568 <PIN_HIGH>
 8002322:	2101      	movs	r1, #1
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f7fe f91e 	bl	8000568 <PIN_HIGH>
 800232c:	7efb      	ldrb	r3, [r7, #27]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	b21b      	sxth	r3, r3
 800233a:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 800233c:	4b3b      	ldr	r3, [pc, #236]	; (800242c <readGRAM+0x594>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	f241 5211 	movw	r2, #5393	; 0x1511
 8002344:	4293      	cmp	r3, r2
 8002346:	f040 82ff 	bne.w	8002948 <readGRAM+0xab0>
 800234a:	2101      	movs	r1, #1
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f7fe f90a 	bl	8000568 <PIN_HIGH>
 8002354:	2101      	movs	r1, #1
 8002356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235a:	f7fe f8f5 	bl	8000548 <PIN_LOW>
 800235e:	2101      	movs	r1, #1
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f7fe f8f0 	bl	8000548 <PIN_LOW>
 8002368:	2101      	movs	r1, #1
 800236a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236e:	f7fe f8eb 	bl	8000548 <PIN_LOW>
 8002372:	2101      	movs	r1, #1
 8002374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002378:	f7fe f8e6 	bl	8000548 <PIN_LOW>
 800237c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	0a5b      	lsrs	r3, r3, #9
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <readGRAM+0x58c>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b2da      	uxtb	r2, r3
 800239e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <readGRAM+0x590>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <readGRAM+0x590>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <readGRAM+0x590>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <readGRAM+0x590>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002408:	b2db      	uxtb	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	75fb      	strb	r3, [r7, #23]
 800240e:	2101      	movs	r1, #1
 8002410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002414:	f7fe f8a8 	bl	8000568 <PIN_HIGH>
 8002418:	2101      	movs	r1, #1
 800241a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241e:	f7fe f8a3 	bl	8000568 <PIN_HIGH>
        while (n)
 8002422:	e291      	b.n	8002948 <readGRAM+0xab0>
 8002424:	48000800 	.word	0x48000800
 8002428:	48000400 	.word	0x48000400
 800242c:	20000046 	.word	0x20000046
        {
            if (_lcd_capable & READ_24BITS)
 8002430:	4bb1      	ldr	r3, [pc, #708]	; (80026f8 <readGRAM+0x860>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8163 	beq.w	8002704 <readGRAM+0x86c>
            {
                READ_8(r);
 800243e:	2101      	movs	r1, #1
 8002440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002444:	f7fe f890 	bl	8000568 <PIN_HIGH>
 8002448:	2101      	movs	r1, #1
 800244a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244e:	f7fe f87b 	bl	8000548 <PIN_LOW>
 8002452:	2101      	movs	r1, #1
 8002454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002458:	f7fe f876 	bl	8000548 <PIN_LOW>
 800245c:	2101      	movs	r1, #1
 800245e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002462:	f7fe f871 	bl	8000548 <PIN_LOW>
 8002466:	2101      	movs	r1, #1
 8002468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246c:	f7fe f86c 	bl	8000548 <PIN_LOW>
 8002470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <readGRAM+0x864>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b2da      	uxtb	r2, r3
 8002492:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b96      	ldr	r3, [pc, #600]	; (8002700 <readGRAM+0x868>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b92      	ldr	r3, [pc, #584]	; (8002700 <readGRAM+0x868>)
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b8d      	ldr	r3, [pc, #564]	; (8002700 <readGRAM+0x868>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <readGRAM+0x868>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	75fb      	strb	r3, [r7, #23]
 8002502:	2101      	movs	r1, #1
 8002504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002508:	f7fe f82e 	bl	8000568 <PIN_HIGH>
 800250c:	2101      	movs	r1, #1
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f7fe f829 	bl	8000568 <PIN_HIGH>
                READ_8(g);
 8002516:	2101      	movs	r1, #1
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f7fe f824 	bl	8000568 <PIN_HIGH>
 8002520:	2101      	movs	r1, #1
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f7fe f80f 	bl	8000548 <PIN_LOW>
 800252a:	2101      	movs	r1, #1
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f7fe f80a 	bl	8000548 <PIN_LOW>
 8002534:	2101      	movs	r1, #1
 8002536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253a:	f7fe f805 	bl	8000548 <PIN_LOW>
 800253e:	2101      	movs	r1, #1
 8002540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002544:	f7fe f800 	bl	8000548 <PIN_LOW>
 8002548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	0a5b      	lsrs	r3, r3, #9
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <readGRAM+0x864>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4313      	orrs	r3, r2
 8002568:	b2da      	uxtb	r2, r3
 800256a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b60      	ldr	r3, [pc, #384]	; (8002700 <readGRAM+0x868>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <readGRAM+0x868>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b57      	ldr	r3, [pc, #348]	; (8002700 <readGRAM+0x868>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b52      	ldr	r3, [pc, #328]	; (8002700 <readGRAM+0x868>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4313      	orrs	r3, r2
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	757b      	strb	r3, [r7, #21]
 80025da:	2101      	movs	r1, #1
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e0:	f7fd ffc2 	bl	8000568 <PIN_HIGH>
 80025e4:	2101      	movs	r1, #1
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ea:	f7fd ffbd 	bl	8000568 <PIN_HIGH>
                READ_8(b);
 80025ee:	2101      	movs	r1, #1
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f4:	f7fd ffb8 	bl	8000568 <PIN_HIGH>
 80025f8:	2101      	movs	r1, #1
 80025fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fe:	f7fd ffa3 	bl	8000548 <PIN_LOW>
 8002602:	2101      	movs	r1, #1
 8002604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002608:	f7fd ff9e 	bl	8000548 <PIN_LOW>
 800260c:	2101      	movs	r1, #1
 800260e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002612:	f7fd ff99 	bl	8000548 <PIN_LOW>
 8002616:	2101      	movs	r1, #1
 8002618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261c:	f7fd ff94 	bl	8000548 <PIN_LOW>
 8002620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	0a5b      	lsrs	r3, r3, #9
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <readGRAM+0x864>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b2da      	uxtb	r2, r3
 8002642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <readGRAM+0x868>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	b2db      	uxtb	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <readGRAM+0x868>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <readGRAM+0x868>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <readGRAM+0x868>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b2da      	uxtb	r2, r3
 800269e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	753b      	strb	r3, [r7, #20]
 80026b2:	2101      	movs	r1, #1
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b8:	f7fd ff56 	bl	8000568 <PIN_HIGH>
 80026bc:	2101      	movs	r1, #1
 80026be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c2:	f7fd ff51 	bl	8000568 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <readGRAM+0x860>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <readGRAM+0x84c>
                    ret = color565(b, g, r);
 80026d2:	7dfa      	ldrb	r2, [r7, #23]
 80026d4:	7d79      	ldrb	r1, [r7, #21]
 80026d6:	7d3b      	ldrb	r3, [r7, #20]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe f80c 	bl	80006f6 <color565>
 80026de:	4603      	mov	r3, r0
 80026e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026e2:	e116      	b.n	8002912 <readGRAM+0xa7a>
                else
                    ret = color565(r, g, b);
 80026e4:	7d3a      	ldrb	r2, [r7, #20]
 80026e6:	7d79      	ldrb	r1, [r7, #21]
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f803 	bl	80006f6 <color565>
 80026f0:	4603      	mov	r3, r0
 80026f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026f4:	e10d      	b.n	8002912 <readGRAM+0xa7a>
 80026f6:	bf00      	nop
 80026f8:	20000044 	.word	0x20000044
 80026fc:	48000800 	.word	0x48000800
 8002700:	48000400 	.word	0x48000400
            } else
            {
                READ_16(ret);
 8002704:	2101      	movs	r1, #1
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f7fd ff2d 	bl	8000568 <PIN_HIGH>
 800270e:	2101      	movs	r1, #1
 8002710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002714:	f7fd ff18 	bl	8000548 <PIN_LOW>
 8002718:	2101      	movs	r1, #1
 800271a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271e:	f7fd ff13 	bl	8000548 <PIN_LOW>
 8002722:	2101      	movs	r1, #1
 8002724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002728:	f7fd ff0e 	bl	8000548 <PIN_LOW>
 800272c:	2101      	movs	r1, #1
 800272e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002732:	f7fd ff09 	bl	8000548 <PIN_LOW>
 8002736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	0a5b      	lsrs	r3, r3, #9
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4ba6      	ldr	r3, [pc, #664]	; (80029e0 <readGRAM+0xb48>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b2da      	uxtb	r2, r3
 8002758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b9d      	ldr	r3, [pc, #628]	; (80029e4 <readGRAM+0xb4c>)
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b99      	ldr	r3, [pc, #612]	; (80029e4 <readGRAM+0xb4c>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4313      	orrs	r3, r2
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b95      	ldr	r3, [pc, #596]	; (80029e4 <readGRAM+0xb4c>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4313      	orrs	r3, r2
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b90      	ldr	r3, [pc, #576]	; (80029e4 <readGRAM+0xb4c>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	75bb      	strb	r3, [r7, #22]
 80027c8:	2101      	movs	r1, #1
 80027ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ce:	f7fd fecb 	bl	8000568 <PIN_HIGH>
 80027d2:	2101      	movs	r1, #1
 80027d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d8:	f7fd fec6 	bl	8000568 <PIN_HIGH>
 80027dc:	2101      	movs	r1, #1
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e2:	f7fd fec1 	bl	8000568 <PIN_HIGH>
 80027e6:	2101      	movs	r1, #1
 80027e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ec:	f7fd feac 	bl	8000548 <PIN_LOW>
 80027f0:	2101      	movs	r1, #1
 80027f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f6:	f7fd fea7 	bl	8000548 <PIN_LOW>
 80027fa:	2101      	movs	r1, #1
 80027fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002800:	f7fd fea2 	bl	8000548 <PIN_LOW>
 8002804:	2101      	movs	r1, #1
 8002806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280a:	f7fd fe9d 	bl	8000548 <PIN_LOW>
 800280e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	0a5b      	lsrs	r3, r3, #9
 8002816:	b29b      	uxth	r3, r3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <readGRAM+0xb48>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	b29b      	uxth	r3, r3
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	b29b      	uxth	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b29a      	uxth	r2, r3
 8002830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	b29b      	uxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <readGRAM+0xb4c>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	b29b      	uxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <readGRAM+0xb4c>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	b29b      	uxth	r3, r3
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	b29b      	uxth	r3, r3
 8002862:	4313      	orrs	r3, r2
 8002864:	b29a      	uxth	r2, r3
 8002866:	4b5f      	ldr	r3, [pc, #380]	; (80029e4 <readGRAM+0xb4c>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	b29b      	uxth	r3, r3
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	b29b      	uxth	r3, r3
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	b29b      	uxth	r3, r3
 8002876:	4313      	orrs	r3, r2
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b5a      	ldr	r3, [pc, #360]	; (80029e4 <readGRAM+0xb4c>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	b29b      	uxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b29a      	uxth	r2, r3
 800288c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	b29b      	uxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028a0:	2101      	movs	r1, #1
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a6:	f7fd fe5f 	bl	8000568 <PIN_HIGH>
 80028aa:	2101      	movs	r1, #1
 80028ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b0:	f7fd fe5a 	bl	8000568 <PIN_HIGH>
 80028b4:	7dbb      	ldrb	r3, [r7, #22]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80028be:	4313      	orrs	r3, r2
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 80028c4:	4b48      	ldr	r3, [pc, #288]	; (80029e8 <readGRAM+0xb50>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <readGRAM+0xa4c>
                    ret = (ret >> 8) | (ret << 8);
 80028d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80028e4:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <readGRAM+0xb50>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <readGRAM+0xa7a>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80028f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80028f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028fc:	0adb      	lsrs	r3, r3, #11
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b21b      	sxth	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b21a      	sxth	r2, r3
 8002906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002908:	02db      	lsls	r3, r3, #11
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b21b      	sxth	r3, r3
 8002910:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <readGRAM+0xb54>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <readGRAM+0xa8e>
 800291a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe99 	bl	8000654 <color555_to_565>
 8002922:	4603      	mov	r3, r0
 8002924:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	60ba      	str	r2, [r7, #8]
 800292c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800292e:	801a      	strh	r2, [r3, #0]
            n--;
 8002930:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <readGRAM+0xb50>)
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <readGRAM+0xabc>
        while (n)
 8002948:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ad6f 	bne.w	8002430 <readGRAM+0x598>
 8002952:	e000      	b.n	8002956 <readGRAM+0xabe>
                break;
 8002954:	bf00      	nop
        }
        if (++col >= w) {
 8002956:	8bfb      	ldrh	r3, [r7, #30]
 8002958:	3301      	adds	r3, #1
 800295a:	b29b      	uxth	r3, r3
 800295c:	83fb      	strh	r3, [r7, #30]
 800295e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002966:	429a      	cmp	r2, r3
 8002968:	db0d      	blt.n	8002986 <readGRAM+0xaee>
            col = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800296e:	8c3b      	ldrh	r3, [r7, #32]
 8002970:	3301      	adds	r3, #1
 8002972:	b29b      	uxth	r3, r3
 8002974:	843b      	strh	r3, [r7, #32]
 8002976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800297a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800297e:	429a      	cmp	r2, r3
 8002980:	db01      	blt.n	8002986 <readGRAM+0xaee>
                row = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8002986:	2101      	movs	r1, #1
 8002988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298c:	f7fd fdec 	bl	8000568 <PIN_HIGH>
        CS_IDLE;
 8002990:	2101      	movs	r1, #1
 8002992:	4814      	ldr	r0, [pc, #80]	; (80029e4 <readGRAM+0xb4c>)
 8002994:	f7fd fde8 	bl	8000568 <PIN_HIGH>
        setWriteDir();
 8002998:	f7fd ff40 	bl	800081c <setWriteDir>
    while (n > 0) {
 800299c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f73f aabc 	bgt.w	8001f1e <readGRAM+0x86>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <readGRAM+0xb50>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d110      	bne.n	80029d4 <readGRAM+0xb3c>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80029b2:	f7fd fe17 	bl	80005e4 <width>
 80029b6:	4603      	mov	r3, r0
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b21c      	sxth	r4, r3
 80029be:	f7fd fe1d 	bl	80005fc <height>
 80029c2:	4603      	mov	r3, r0
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4622      	mov	r2, r4
 80029cc:	2100      	movs	r1, #0
 80029ce:	2000      	movs	r0, #0
 80029d0:	f000 fb78 	bl	80030c4 <setAddrWindow>
    return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	372c      	adds	r7, #44	; 0x2c
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	48000800 	.word	0x48000800
 80029e4:	48000400 	.word	0x48000400
 80029e8:	20000044 	.word	0x20000044
 80029ec:	2000003c 	.word	0x2000003c

080029f0 <setRotation>:

void setRotation(uint8_t r)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80029fa:	4b9c      	ldr	r3, [pc, #624]	; (8002c6c <setRotation+0x27c>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b99      	ldr	r3, [pc, #612]	; (8002c70 <setRotation+0x280>)
 8002a0a:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8002a0c:	4b98      	ldr	r3, [pc, #608]	; (8002c70 <setRotation+0x280>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <setRotation+0x2e>
 8002a18:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a1c:	e000      	b.n	8002a20 <setRotation+0x30>
 8002a1e:	22f0      	movs	r2, #240	; 0xf0
 8002a20:	4b94      	ldr	r3, [pc, #592]	; (8002c74 <setRotation+0x284>)
 8002a22:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8002a24:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <setRotation+0x280>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <setRotation+0x44>
 8002a30:	22f0      	movs	r2, #240	; 0xf0
 8002a32:	e001      	b.n	8002a38 <setRotation+0x48>
 8002a34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a38:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <setRotation+0x288>)
 8002a3a:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <setRotation+0x280>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d817      	bhi.n	8002a74 <setRotation+0x84>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <setRotation+0x5c>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a63 	.word	0x08002a63
 8002a54:	08002a69 	.word	0x08002a69
 8002a58:	08002a6f 	.word	0x08002a6f
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002a5c:	2348      	movs	r3, #72	; 0x48
 8002a5e:	72fb      	strb	r3, [r7, #11]
       break;
 8002a60:	e008      	b.n	8002a74 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8002a62:	2328      	movs	r3, #40	; 0x28
 8002a64:	72fb      	strb	r3, [r7, #11]
       break;
 8002a66:	e005      	b.n	8002a74 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002a68:	2398      	movs	r3, #152	; 0x98
 8002a6a:	72fb      	strb	r3, [r7, #11]
       break;
 8002a6c:	e002      	b.n	8002a74 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8002a6e:	23f8      	movs	r3, #248	; 0xf8
 8002a70:	72fb      	strb	r3, [r7, #11]
       break;
 8002a72:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002a74:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <setRotation+0x28c>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <setRotation+0x9c>
       val ^= 0x80;
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002a86:	43db      	mvns	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8002a8c:	4b7b      	ldr	r3, [pc, #492]	; (8002c7c <setRotation+0x28c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <setRotation+0xb2>
       val ^= 0x40;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <setRotation+0x28c>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <setRotation+0xc8>
       val ^= 0x08;
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f083 0308 	eor.w	r3, r3, #8
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002ab8:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <setRotation+0x28c>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8119 	beq.w	8002cf8 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	; (8002c80 <setRotation+0x290>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f646 0214 	movw	r2, #26644	; 0x6814
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d128      	bne.n	8002b24 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	105b      	asrs	r3, r3, #1
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	105b      	asrs	r3, r3, #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002afc:	8a3b      	ldrh	r3, [r7, #16]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	89fb      	ldrh	r3, [r7, #14]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8002b10:	233b      	movs	r3, #59	; 0x3b
 8002b12:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2103      	movs	r1, #3
 8002b1c:	20b6      	movs	r0, #182	; 0xb6
 8002b1e:	f7fe f883 	bl	8000c28 <WriteCmdParamN>
           goto common_MC;
 8002b22:	e0c0      	b.n	8002ca6 <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <setRotation+0x290>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	f641 1263 	movw	r2, #6499	; 0x1963
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <setRotation+0x158>
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <setRotation+0x290>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f249 4281 	movw	r2, #38017	; 0x9481
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d005      	beq.n	8002b48 <setRotation+0x158>
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <setRotation+0x290>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f241 5211 	movw	r2, #5393	; 0x1511
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d139      	bne.n	8002bbc <setRotation+0x1cc>
           if (val & 0x80)
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da04      	bge.n	8002b5a <setRotation+0x16a>
               val |= 0x01;    //GS
 8002b50:	7afb      	ldrb	r3, [r7, #11]
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <setRotation+0x17e>
               val |= 0x02;    //SS
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8002b6e:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <setRotation+0x290>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f641 1263 	movw	r2, #6499	; 0x1963
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d104      	bne.n	8002b84 <setRotation+0x194>
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8002b84:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <setRotation+0x290>)
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	f249 4281 	movw	r2, #38017	; 0x9481
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d104      	bne.n	8002b9a <setRotation+0x1aa>
 8002b90:	7afb      	ldrb	r3, [r7, #11]
 8002b92:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <setRotation+0x290>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	f241 5211 	movw	r2, #5393	; 0x1511
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d160      	bne.n	8002c68 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	f023 0310 	bic.w	r3, r3, #16
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8002bba:	e055      	b.n	8002c68 <setRotation+0x278>
      }
       else if (is8347) {
 8002bbc:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <setRotation+0x294>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06f      	beq.n	8002ca4 <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <setRotation+0x298>)
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <setRotation+0x29c>)
 8002bcc:	2206      	movs	r2, #6
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <setRotation+0x2a0>)
 8002bd2:	2222      	movs	r2, #34	; 0x22
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <setRotation+0x2a4>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <setRotation+0x2a8>)
 8002bde:	2204      	movs	r2, #4
 8002be0:	801a      	strh	r2, [r3, #0]
 8002be2:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <setRotation+0x2ac>)
 8002be4:	2206      	movs	r2, #6
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <setRotation+0x2b0>)
 8002bea:	2208      	movs	r2, #8
 8002bec:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <setRotation+0x290>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	2b65      	cmp	r3, #101	; 0x65
 8002bf4:	d121      	bne.n	8002c3a <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8002c00:	7afb      	ldrb	r3, [r7, #11]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <setRotation+0x226>
 8002c0a:	7afb      	ldrb	r3, [r7, #11]
 8002c0c:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8002c10:	43db      	mvns	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <setRotation+0x23e>
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <setRotation+0x298>)
 8002c22:	2282      	movs	r2, #130	; 0x82
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <setRotation+0x29c>)
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	801a      	strh	r2, [r3, #0]
 8002c2c:	e005      	b.n	8002c3a <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <setRotation+0x298>)
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <setRotation+0x29c>)
 8002c36:	2282      	movs	r2, #130	; 0x82
 8002c38:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <setRotation+0x290>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f245 2252 	movw	r2, #21074	; 0x5252
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d145      	bne.n	8002cd2 <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 8002c46:	7afb      	ldrb	r3, [r7, #11]
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d03b      	beq.n	8002cd2 <setRotation+0x2e2>
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8002c60:	43db      	mvns	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002c66:	e034      	b.n	8002cd2 <setRotation+0x2e2>
           goto common_MC;
 8002c68:	bf00      	nop
 8002c6a:	e01c      	b.n	8002ca6 <setRotation+0x2b6>
 8002c6c:	20000048 	.word	0x20000048
 8002c70:	20000040 	.word	0x20000040
 8002c74:	20000004 	.word	0x20000004
 8002c78:	20000006 	.word	0x20000006
 8002c7c:	20000044 	.word	0x20000044
 8002c80:	20000046 	.word	0x20000046
 8002c84:	2000003b 	.word	0x2000003b
 8002c88:	2000004c 	.word	0x2000004c
 8002c8c:	2000004e 	.word	0x2000004e
 8002c90:	20000050 	.word	0x20000050
 8002c94:	20000052 	.word	0x20000052
 8002c98:	20000054 	.word	0x20000054
 8002c9c:	20000056 	.word	0x20000056
 8002ca0:	20000058 	.word	0x20000058
       }
     common_MC:
 8002ca4:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8002ca6:	4b8a      	ldr	r3, [pc, #552]	; (8002ed0 <setRotation+0x4e0>)
 8002ca8:	222a      	movs	r2, #42	; 0x2a
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <setRotation+0x4e4>)
 8002cae:	222b      	movs	r2, #43	; 0x2b
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <setRotation+0x4e8>)
 8002cb4:	222c      	movs	r2, #44	; 0x2c
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	4b88      	ldr	r3, [pc, #544]	; (8002edc <setRotation+0x4ec>)
 8002cba:	222a      	movs	r2, #42	; 0x2a
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <setRotation+0x4f0>)
 8002cc0:	222a      	movs	r2, #42	; 0x2a
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	4b87      	ldr	r3, [pc, #540]	; (8002ee4 <setRotation+0x4f4>)
 8002cc6:	222b      	movs	r2, #43	; 0x2b
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	4b87      	ldr	r3, [pc, #540]	; (8002ee8 <setRotation+0x4f8>)
 8002ccc:	222b      	movs	r2, #43	; 0x2b
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	e000      	b.n	8002cd4 <setRotation+0x2e4>
			goto common_BGR;
 8002cd2:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8002cd4:	4b85      	ldr	r3, [pc, #532]	; (8002eec <setRotation+0x4fc>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <setRotation+0x2f0>
 8002cdc:	2316      	movs	r3, #22
 8002cde:	e000      	b.n	8002ce2 <setRotation+0x2f2>
 8002ce0:	2336      	movs	r3, #54	; 0x36
 8002ce2:	f107 020b 	add.w	r2, r7, #11
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd ff9d 	bl	8000c28 <WriteCmdParamN>
       _lcd_madctl = val;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	; (8002ef0 <setRotation+0x500>)
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e0a5      	b.n	8002e44 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	; (8002ef4 <setRotation+0x504>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <setRotation+0x33c>
 8002d04:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	dc4f      	bgt.n	8002dac <setRotation+0x3bc>
 8002d0c:	f249 3226 	movw	r2, #37670	; 0x9326
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <setRotation+0x33c>
 8002d14:	f249 3226 	movw	r2, #37670	; 0x9326
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	dc47      	bgt.n	8002dac <setRotation+0x3bc>
 8002d1c:	f245 4220 	movw	r2, #21536	; 0x5420
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <setRotation+0x33c>
 8002d24:	f247 7293 	movw	r2, #30611	; 0x7793
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d13f      	bne.n	8002dac <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <setRotation+0x4e0>)
 8002d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	4b67      	ldr	r3, [pc, #412]	; (8002ed4 <setRotation+0x4e4>)
 8002d36:	f240 2201 	movw	r2, #513	; 0x201
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <setRotation+0x4e8>)
 8002d3e:	f240 2202 	movw	r2, #514	; 0x202
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	4b65      	ldr	r3, [pc, #404]	; (8002edc <setRotation+0x4ec>)
 8002d46:	f44f 7204 	mov.w	r2, #528	; 0x210
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <setRotation+0x4f0>)
 8002d4e:	f240 2211 	movw	r2, #529	; 0x211
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <setRotation+0x4f4>)
 8002d56:	f240 2212 	movw	r2, #530	; 0x212
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <setRotation+0x4f8>)
 8002d5e:	f240 2213 	movw	r2, #531	; 0x213
 8002d62:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d72:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8002d74:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002d78:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <setRotation+0x504>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	f249 3226 	movw	r2, #37670	; 0x9326
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d005      	beq.n	8002d92 <setRotation+0x3a2>
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <setRotation+0x504>)
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	f245 4220 	movw	r2, #21536	; 0x5420
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d102      	bne.n	8002d98 <setRotation+0x3a8>
 8002d92:	8abb      	ldrh	r3, [r7, #20]
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8002d98:	8a3a      	ldrh	r2, [r7, #16]
 8002d9a:	8abb      	ldrh	r3, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002da6:	f7fd fce4 	bl	8000772 <WriteCmdData>
           goto common_SS;
 8002daa:	e024      	b.n	8002df6 <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <setRotation+0x4e0>)
 8002dae:	2220      	movs	r2, #32
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <setRotation+0x4e4>)
 8002db4:	2221      	movs	r2, #33	; 0x21
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <setRotation+0x4e8>)
 8002dba:	2222      	movs	r2, #34	; 0x22
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <setRotation+0x4ec>)
 8002dc0:	2250      	movs	r2, #80	; 0x50
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <setRotation+0x4f0>)
 8002dc6:	2251      	movs	r2, #81	; 0x51
 8002dc8:	801a      	strh	r2, [r3, #0]
 8002dca:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <setRotation+0x4f4>)
 8002dcc:	2252      	movs	r2, #82	; 0x52
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <setRotation+0x4f8>)
 8002dd2:	2253      	movs	r2, #83	; 0x53
 8002dd4:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002de0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002de4:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8002de6:	8a3b      	ldrh	r3, [r7, #16]
 8002de8:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	2060      	movs	r0, #96	; 0x60
 8002df2:	f7fd fcbe 	bl	8000772 <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	4619      	mov	r1, r3
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7fd fcb3 	bl	8000772 <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	109b      	asrs	r3, r3, #2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8002e22:	8afb      	ldrh	r3, [r7, #22]
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8002e2a:	8afb      	ldrh	r3, [r7, #22]
 8002e2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <setRotation+0x500>)
 8002e34:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <setRotation+0x500>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f7fd fc98 	bl	8000772 <WriteCmdData>
           break;
 8002e42:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <setRotation+0x508>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <setRotation+0x4a8>
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <setRotation+0x50c>)
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11d      	bne.n	8002e98 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <setRotation+0x4e0>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	81bb      	strh	r3, [r7, #12]
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <setRotation+0x4e4>)
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <setRotation+0x4e0>)
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <setRotation+0x4e4>)
 8002e6c:	89bb      	ldrh	r3, [r7, #12]
 8002e6e:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <setRotation+0x4ec>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	81bb      	strh	r3, [r7, #12]
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <setRotation+0x4f4>)
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <setRotation+0x4ec>)
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <setRotation+0x4f4>)
 8002e80:	89bb      	ldrh	r3, [r7, #12]
 8002e82:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <setRotation+0x4f0>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	81bb      	strh	r3, [r7, #12]
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <setRotation+0x4f8>)
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <setRotation+0x4f0>)
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <setRotation+0x4f8>)
 8002e94:	89bb      	ldrh	r3, [r7, #12]
 8002e96:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8002e98:	f7fd fba4 	bl	80005e4 <width>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b21c      	sxth	r4, r3
 8002ea4:	f7fd fbaa 	bl	80005fc <height>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f000 f905 	bl	80030c4 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f000 fa23 	bl	800330c <vertScroll>
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000004c 	.word	0x2000004c
 8002ed4:	2000004e 	.word	0x2000004e
 8002ed8:	20000050 	.word	0x20000050
 8002edc:	20000052 	.word	0x20000052
 8002ee0:	20000054 	.word	0x20000054
 8002ee4:	20000056 	.word	0x20000056
 8002ee8:	20000058 	.word	0x20000058
 8002eec:	2000003b 	.word	0x2000003b
 8002ef0:	2000004a 	.word	0x2000004a
 8002ef4:	20000046 	.word	0x20000046
 8002ef8:	20000040 	.word	0x20000040
 8002efc:	20000044 	.word	0x20000044

08002f00 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	80bb      	strh	r3, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8002f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f2c0 80c5 	blt.w	80030a6 <drawPixel+0x1a6>
 8002f1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f2c0 80c0 	blt.w	80030a6 <drawPixel+0x1a6>
 8002f26:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002f2a:	f7fd fb5b 	bl	80005e4 <width>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	429c      	cmp	r4, r3
 8002f32:	f280 80b8 	bge.w	80030a6 <drawPixel+0x1a6>
 8002f36:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002f3a:	f7fd fb5f 	bl	80005fc <height>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	429c      	cmp	r4, r3
 8002f42:	f280 80b0 	bge.w	80030a6 <drawPixel+0x1a6>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8002f46:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <drawPixel+0x1b0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <drawPixel+0x5a>
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fb5f 	bl	8000614 <color565_to_555>
 8002f56:	4603      	mov	r3, r0
 8002f58:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 8002f5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f62:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002f66:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f6a:	f000 f8ab 	bl	80030c4 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <drawPixel+0x1b4>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 808f 	beq.w	8003096 <drawPixel+0x196>
 8002f78:	2101      	movs	r1, #1
 8002f7a:	484f      	ldr	r0, [pc, #316]	; (80030b8 <drawPixel+0x1b8>)
 8002f7c:	f7fd fae4 	bl	8000548 <PIN_LOW>
 8002f80:	2110      	movs	r1, #16
 8002f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f86:	f7fd fadf 	bl	8000548 <PIN_LOW>
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <drawPixel+0x1bc>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	4b49      	ldr	r3, [pc, #292]	; (80030bc <drawPixel+0x1bc>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	73bb      	strb	r3, [r7, #14]
 8002f9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f9e:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <drawPixel+0x1b8>)
 8002fa6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <drawPixel+0x1c0>)
 8002fae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fb2:	619a      	str	r2, [r3, #24]
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	105b      	asrs	r3, r3, #1
 8002fb8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	6193      	str	r3, [r2, #24]
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	105b      	asrs	r3, r3, #1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f003 0208 	and.w	r2, r3, #8
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	111b      	asrs	r3, r3, #4
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <drawPixel+0x1b8>)
 8002fe4:	619a      	str	r2, [r3, #24]
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <drawPixel+0x1c0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
 8002fec:	2102      	movs	r1, #2
 8002fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ff2:	f7fd faa9 	bl	8000548 <PIN_LOW>
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ffc:	f7fd fab4 	bl	8000568 <PIN_HIGH>
 8003000:	2102      	movs	r1, #2
 8003002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003006:	f7fd faaf 	bl	8000568 <PIN_HIGH>
 800300a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800300e:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8003012:	619a      	str	r2, [r3, #24]
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <drawPixel+0x1b8>)
 8003016:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800301a:	619a      	str	r2, [r3, #24]
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <drawPixel+0x1c0>)
 800301e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003022:	619a      	str	r2, [r3, #24]
 8003024:	7bbb      	ldrb	r3, [r7, #14]
 8003026:	105b      	asrs	r3, r3, #1
 8003028:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	6193      	str	r3, [r2, #24]
 8003032:	7bba      	ldrb	r2, [r7, #14]
 8003034:	7bbb      	ldrb	r3, [r7, #14]
 8003036:	105b      	asrs	r3, r3, #1
 8003038:	4313      	orrs	r3, r2
 800303a:	f003 0208 	and.w	r2, r3, #8
 800303e:	7bbb      	ldrb	r3, [r7, #14]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	431a      	orrs	r2, r3
 8003048:	7bbb      	ldrb	r3, [r7, #14]
 800304a:	111b      	asrs	r3, r3, #4
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	431a      	orrs	r2, r3
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <drawPixel+0x1b8>)
 8003054:	619a      	str	r2, [r3, #24]
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <drawPixel+0x1c0>)
 8003058:	2200      	movs	r2, #0
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	2102      	movs	r1, #2
 800305e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003062:	f7fd fa71 	bl	8000548 <PIN_LOW>
 8003066:	2102      	movs	r1, #2
 8003068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800306c:	f7fd fa7c 	bl	8000568 <PIN_HIGH>
 8003070:	2102      	movs	r1, #2
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003076:	f7fd fa77 	bl	8000568 <PIN_HIGH>
 800307a:	2110      	movs	r1, #16
 800307c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003080:	f7fd fa72 	bl	8000568 <PIN_HIGH>
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fbf8 	bl	800087c <write24>
 800308c:	2101      	movs	r1, #1
 800308e:	480a      	ldr	r0, [pc, #40]	; (80030b8 <drawPixel+0x1b8>)
 8003090:	f7fd fa6a 	bl	8000568 <PIN_HIGH>
 8003094:	e008      	b.n	80030a8 <drawPixel+0x1a8>
   WriteCmdData(_MW, color);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <drawPixel+0x1bc>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fb67 	bl	8000772 <WriteCmdData>
 80030a4:	e000      	b.n	80030a8 <drawPixel+0x1a8>
       return;
 80030a6:	bf00      	nop
}
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000003c 	.word	0x2000003c
 80030b4:	2000003d 	.word	0x2000003d
 80030b8:	48000400 	.word	0x48000400
 80030bc:	20000050 	.word	0x20000050
 80030c0:	48000800 	.word	0x48000800

080030c4 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	4604      	mov	r4, r0
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	80fb      	strh	r3, [r7, #6]
 80030d6:	4603      	mov	r3, r0
 80030d8:	80bb      	strh	r3, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	807b      	strh	r3, [r7, #2]
 80030de:	4613      	mov	r3, r2
 80030e0:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80030e2:	4b80      	ldr	r3, [pc, #512]	; (80032e4 <setAddrWindow+0x220>)
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	f249 3227 	movw	r2, #37671	; 0x9327
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d117      	bne.n	800311e <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80030ee:	4b7e      	ldr	r3, [pc, #504]	; (80032e8 <setAddrWindow+0x224>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d107      	bne.n	8003106 <setAddrWindow+0x42>
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	3320      	adds	r3, #32
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	80bb      	strh	r3, [r7, #4]
 80030fe:	883b      	ldrh	r3, [r7, #0]
 8003100:	3320      	adds	r3, #32
 8003102:	b29b      	uxth	r3, r3
 8003104:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003106:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <setAddrWindow+0x224>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d107      	bne.n	800311e <setAddrWindow+0x5a>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	3320      	adds	r3, #32
 8003112:	b29b      	uxth	r3, r3
 8003114:	80fb      	strh	r3, [r7, #6]
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	3320      	adds	r3, #32
 800311a:	b29b      	uxth	r3, r3
 800311c:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 800311e:	4b71      	ldr	r3, [pc, #452]	; (80032e4 <setAddrWindow+0x220>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f241 5226 	movw	r2, #5414	; 0x1526
 8003126:	4293      	cmp	r3, r2
 8003128:	d128      	bne.n	800317c <setAddrWindow+0xb8>
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <setAddrWindow+0x224>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d022      	beq.n	800317c <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	b29b      	uxth	r3, r3
 800313e:	81fb      	strh	r3, [r7, #14]
 8003140:	883a      	ldrh	r2, [r7, #0]
 8003142:	88bb      	ldrh	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 800314a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <setAddrWindow+0x9c>
 8003152:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003156:	b29b      	uxth	r3, r3
 8003158:	3301      	adds	r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	803b      	strh	r3, [r7, #0]
 800315e:	e00d      	b.n	800317c <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003160:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <setAddrWindow+0xb8>
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	89bb      	ldrh	r3, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	807b      	strh	r3, [r7, #2]
 8003172:	883a      	ldrh	r2, [r7, #0]
 8003174:	89bb      	ldrh	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	b29b      	uxth	r3, r3
 800317a:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 800317c:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <setAddrWindow+0x228>)
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d054      	beq.n	8003232 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003188:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <setAddrWindow+0x22c>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b2d8      	uxtb	r0, r3
 800318e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003192:	121b      	asrs	r3, r3, #8
 8003194:	b21b      	sxth	r3, r3
 8003196:	b2d9      	uxtb	r1, r3
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031a0:	121b      	asrs	r3, r3, #8
 80031a2:	b21b      	sxth	r3, r3
 80031a4:	b2dc      	uxtb	r4, r3
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	4623      	mov	r3, r4
 80031ae:	f7fd fea9 	bl	8000f04 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 80031b2:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <setAddrWindow+0x230>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b2d8      	uxtb	r0, r3
 80031b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80031bc:	121b      	asrs	r3, r3, #8
 80031be:	b21b      	sxth	r3, r3
 80031c0:	b2d9      	uxtb	r1, r3
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031ca:	121b      	asrs	r3, r3, #8
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	b2dc      	uxtb	r4, r3
 80031d0:	883b      	ldrh	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7fd fe94 	bl	8000f04 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <setAddrWindow+0x234>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d07b      	beq.n	80032dc <setAddrWindow+0x218>
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <setAddrWindow+0x220>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2b65      	cmp	r3, #101	; 0x65
 80031ea:	d177      	bne.n	80032dc <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 80031ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031f0:	121b      	asrs	r3, r3, #8
 80031f2:	b21b      	sxth	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	723b      	strb	r3, [r7, #8]
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <setAddrWindow+0x238>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	2102      	movs	r1, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd fd0d 	bl	8000c28 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 800320e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003212:	121b      	asrs	r3, r3, #8
 8003214:	b21b      	sxth	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	723b      	strb	r3, [r7, #8]
 800321a:	88bb      	ldrh	r3, [r7, #4]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8003220:	4b37      	ldr	r3, [pc, #220]	; (8003300 <setAddrWindow+0x23c>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	f107 0208 	add.w	r2, r7, #8
 8003228:	2102      	movs	r1, #2
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fcfc 	bl	8000c28 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003230:	e054      	b.n	80032dc <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8003232:	4b32      	ldr	r3, [pc, #200]	; (80032fc <setAddrWindow+0x238>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fa99 	bl	8000772 <WriteCmdData>
       WriteCmdData(_MP, y);
 8003240:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <setAddrWindow+0x23c>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	88ba      	ldrh	r2, [r7, #4]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fa92 	bl	8000772 <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 800324e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003252:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003256:	429a      	cmp	r2, r3
 8003258:	d105      	bne.n	8003266 <setAddrWindow+0x1a2>
 800325a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800325e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003262:	429a      	cmp	r2, r3
 8003264:	d03a      	beq.n	80032dc <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <setAddrWindow+0x228>)
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d018      	beq.n	80032a4 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <setAddrWindow+0x224>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 800327e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	b21a      	sxth	r2, r3
 8003286:	88bb      	ldrh	r3, [r7, #4]
 8003288:	4313      	orrs	r3, r2
 800328a:	80bb      	strh	r3, [r7, #4]
 800328c:	88bb      	ldrh	r3, [r7, #4]
 800328e:	803b      	strh	r3, [r7, #0]
 8003290:	e008      	b.n	80032a4 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003292:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b21a      	sxth	r2, r3
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	4313      	orrs	r3, r2
 800329e:	80fb      	strh	r3, [r7, #6]
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 80032a4:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <setAddrWindow+0x22c>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fa60 	bl	8000772 <WriteCmdData>
           WriteCmdData(_SP, y);
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <setAddrWindow+0x230>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	88ba      	ldrh	r2, [r7, #4]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fa59 	bl	8000772 <WriteCmdData>
           WriteCmdData(_EC, x1);
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <setAddrWindow+0x240>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	887a      	ldrh	r2, [r7, #2]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fa52 	bl	8000772 <WriteCmdData>
           WriteCmdData(_EP, y1);
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <setAddrWindow+0x244>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	883a      	ldrh	r2, [r7, #0]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fa4b 	bl	8000772 <WriteCmdData>
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	20000046 	.word	0x20000046
 80032e8:	20000040 	.word	0x20000040
 80032ec:	20000044 	.word	0x20000044
 80032f0:	20000052 	.word	0x20000052
 80032f4:	20000056 	.word	0x20000056
 80032f8:	2000003b 	.word	0x2000003b
 80032fc:	2000004c 	.word	0x2000004c
 8003300:	2000004e 	.word	0x2000004e
 8003304:	20000054 	.word	0x20000054
 8003308:	20000058 	.word	0x20000058

0800330c <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
 8003316:	460b      	mov	r3, r1
 8003318:	80bb      	strh	r3, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800331e:	4b89      	ldr	r3, [pc, #548]	; (8003544 <vertScroll+0x238>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f249 3227 	movw	r2, #37671	; 0x9327
 8003326:	4293      	cmp	r3, r2
 8003328:	d10b      	bne.n	8003342 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 800332a:	4b87      	ldr	r3, [pc, #540]	; (8003548 <vertScroll+0x23c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d003      	beq.n	800333a <vertScroll+0x2e>
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <vertScroll+0x23c>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d103      	bne.n	8003342 <vertScroll+0x36>
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	3320      	adds	r3, #32
 800333e:	b29b      	uxth	r3, r3
 8003340:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800334e:	b29b      	uxth	r3, r3
 8003350:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003356:	4b7b      	ldr	r3, [pc, #492]	; (8003544 <vertScroll+0x238>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	f249 3227 	movw	r2, #37671	; 0x9327
 800335e:	4293      	cmp	r3, r2
 8003360:	d103      	bne.n	800336a <vertScroll+0x5e>
 8003362:	8afb      	ldrh	r3, [r7, #22]
 8003364:	3320      	adds	r3, #32
 8003366:	b29b      	uxth	r3, r3
 8003368:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 800336a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800336e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003372:	425b      	negs	r3, r3
 8003374:	429a      	cmp	r2, r3
 8003376:	dd05      	ble.n	8003384 <vertScroll+0x78>
 8003378:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800337c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	db01      	blt.n	8003388 <vertScroll+0x7c>
 8003384:	2300      	movs	r3, #0
 8003386:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	4413      	add	r3, r2
 800338e:	b29b      	uxth	r3, r3
 8003390:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8003392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003396:	2b00      	cmp	r3, #0
 8003398:	da04      	bge.n	80033a4 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 800339a:	8aba      	ldrh	r2, [r7, #20]
 800339c:	88bb      	ldrh	r3, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	88bb      	ldrh	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80033b2:	4b66      	ldr	r3, [pc, #408]	; (800354c <vertScroll+0x240>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d071      	beq.n	80034a2 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 80033be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c2:	121b      	asrs	r3, r3, #8
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 80033d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033d4:	121b      	asrs	r3, r3, #8
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 80033dc:	88bb      	ldrh	r3, [r7, #4]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 80033e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033e6:	121b      	asrs	r3, r3, #8
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 80033ee:	8afb      	ldrh	r3, [r7, #22]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 80033f4:	4b56      	ldr	r3, [pc, #344]	; (8003550 <vertScroll+0x244>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <vertScroll+0xf4>
 80033fc:	230e      	movs	r3, #14
 80033fe:	e000      	b.n	8003402 <vertScroll+0xf6>
 8003400:	2333      	movs	r3, #51	; 0x33
 8003402:	f107 020c 	add.w	r2, r7, #12
 8003406:	2106      	movs	r1, #6
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fc0d 	bl	8000c28 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 800340e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003412:	121b      	asrs	r3, r3, #8
 8003414:	b21b      	sxth	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 800341a:	8abb      	ldrh	r3, [r7, #20]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003420:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <vertScroll+0x244>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <vertScroll+0x120>
 8003428:	2314      	movs	r3, #20
 800342a:	e000      	b.n	800342e <vertScroll+0x122>
 800342c:	2337      	movs	r3, #55	; 0x37
 800342e:	f107 020c 	add.w	r2, r7, #12
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fbf7 	bl	8000c28 <WriteCmdParamN>
		if (is8347) {
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <vertScroll+0x244>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01f      	beq.n	8003482 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003442:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <vertScroll+0x152>
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <vertScroll+0x238>)
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	f248 3247 	movw	r2, #33607	; 0x8347
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <vertScroll+0x14e>
 8003456:	2302      	movs	r3, #2
 8003458:	e002      	b.n	8003460 <vertScroll+0x154>
 800345a:	2308      	movs	r3, #8
 800345c:	e000      	b.n	8003460 <vertScroll+0x154>
 800345e:	2300      	movs	r3, #0
 8003460:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003462:	4b38      	ldr	r3, [pc, #224]	; (8003544 <vertScroll+0x238>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	f248 3247 	movw	r2, #33607	; 0x8347
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <vertScroll+0x166>
 800346e:	2318      	movs	r3, #24
 8003470:	e000      	b.n	8003474 <vertScroll+0x168>
 8003472:	2301      	movs	r3, #1
 8003474:	f107 020c 	add.w	r2, r7, #12
 8003478:	2101      	movs	r1, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fbd4 	bl	8000c28 <WriteCmdParamN>
 8003480:	e05d      	b.n	800353e <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003482:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d159      	bne.n	800353e <vertScroll+0x232>
 800348a:	4b30      	ldr	r3, [pc, #192]	; (800354c <vertScroll+0x240>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d053      	beq.n	800353e <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2013      	movs	r0, #19
 800349c:	f7fd fbc4 	bl	8000c28 <WriteCmdParamN>
 80034a0:	e04d      	b.n	800353e <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80034a2:	4b28      	ldr	r3, [pc, #160]	; (8003544 <vertScroll+0x238>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f24b 5209 	movw	r2, #46345	; 0xb509
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <vertScroll+0x1f2>
 80034ae:	f24b 5209 	movw	r2, #46345	; 0xb509
 80034b2:	4293      	cmp	r3, r2
 80034b4:	dc34      	bgt.n	8003520 <vertScroll+0x214>
 80034b6:	f249 3226 	movw	r2, #37670	; 0x9326
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <vertScroll+0x1f2>
 80034be:	f249 3226 	movw	r2, #37670	; 0x9326
 80034c2:	4293      	cmp	r3, r2
 80034c4:	dc2c      	bgt.n	8003520 <vertScroll+0x214>
 80034c6:	f247 7293 	movw	r2, #30611	; 0x7793
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d017      	beq.n	80034fe <vertScroll+0x1f2>
 80034ce:	f247 7293 	movw	r2, #30611	; 0x7793
 80034d2:	4293      	cmp	r3, r2
 80034d4:	dc24      	bgt.n	8003520 <vertScroll+0x214>
 80034d6:	f245 4220 	movw	r2, #21536	; 0x5420
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00f      	beq.n	80034fe <vertScroll+0x1f2>
 80034de:	f247 7283 	movw	r2, #30595	; 0x7783
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11c      	bne.n	8003520 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <vertScroll+0x248>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	2061      	movs	r0, #97	; 0x61
 80034ee:	f7fd f940 	bl	8000772 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 80034f2:	8abb      	ldrh	r3, [r7, #20]
 80034f4:	4619      	mov	r1, r3
 80034f6:	206a      	movs	r0, #106	; 0x6a
 80034f8:	f7fd f93b 	bl	8000772 <WriteCmdData>
        break;
 80034fc:	e01f      	b.n	800353e <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <vertScroll+0x248>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	f043 0302 	orr.w	r3, r3, #2
 8003506:	b29b      	uxth	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	f240 4001 	movw	r0, #1025	; 0x401
 800350e:	f7fd f930 	bl	8000772 <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003512:	8abb      	ldrh	r3, [r7, #20]
 8003514:	4619      	mov	r1, r3
 8003516:	f240 4004 	movw	r0, #1028	; 0x404
 800351a:	f7fd f92a 	bl	8000772 <WriteCmdData>
        break;
 800351e:	e00e      	b.n	800353e <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <vertScroll+0x248>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	b29b      	uxth	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	2061      	movs	r0, #97	; 0x61
 800352e:	f7fd f920 	bl	8000772 <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003532:	8abb      	ldrh	r3, [r7, #20]
 8003534:	4619      	mov	r1, r3
 8003536:	206a      	movs	r0, #106	; 0x6a
 8003538:	f7fd f91b 	bl	8000772 <WriteCmdData>
        break;
 800353c:	bf00      	nop
    }
}
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000046 	.word	0x20000046
 8003548:	20000040 	.word	0x20000040
 800354c:	20000044 	.word	0x20000044
 8003550:	2000003b 	.word	0x2000003b
 8003554:	20000048 	.word	0x20000048

08003558 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af02      	add	r7, sp, #8
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <fillScreen+0x2c>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b21a      	sxth	r2, r3
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <fillScreen+0x30>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b219      	sxth	r1, r3
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	460b      	mov	r3, r1
 8003574:	2100      	movs	r1, #0
 8003576:	2000      	movs	r0, #0
 8003578:	f000 fbee 	bl	8003d58 <fillRect>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000004 	.word	0x20000004
 8003588:	20000006 	.word	0x20000006

0800358c <invertDisplay>:

void invertDisplay(uint8_t i)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003596:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <invertDisplay+0x13c>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4053      	eors	r3, r2
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b45      	ldr	r3, [pc, #276]	; (80036cc <invertDisplay+0x140>)
 80035b6:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <invertDisplay+0x13c>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d035      	beq.n	8003630 <invertDisplay+0xa4>
        if (is8347) {
 80035c4:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <invertDisplay+0x144>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d024      	beq.n	8003616 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <invertDisplay+0x148>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f248 3247 	movw	r2, #33607	; 0x8347
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d005      	beq.n	80035e4 <invertDisplay+0x58>
 80035d8:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <invertDisplay+0x148>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	f245 2252 	movw	r2, #21074	; 0x5252
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d108      	bne.n	80035f6 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <invertDisplay+0x140>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <invertDisplay+0x64>
 80035ec:	2306      	movs	r3, #6
 80035ee:	e000      	b.n	80035f2 <invertDisplay+0x66>
 80035f0:	2302      	movs	r3, #2
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e007      	b.n	8003606 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80035f6:	4b35      	ldr	r3, [pc, #212]	; (80036cc <invertDisplay+0x140>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <invertDisplay+0x76>
 80035fe:	2308      	movs	r3, #8
 8003600:	e000      	b.n	8003604 <invertDisplay+0x78>
 8003602:	230a      	movs	r3, #10
 8003604:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8003606:	f107 030f 	add.w	r3, r7, #15
 800360a:	461a      	mov	r2, r3
 800360c:	2101      	movs	r1, #1
 800360e:	2001      	movs	r0, #1
 8003610:	f7fd fb0a 	bl	8000c28 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003614:	e055      	b.n	80036c2 <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <invertDisplay+0x140>)
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <invertDisplay+0x96>
 800361e:	2321      	movs	r3, #33	; 0x21
 8003620:	e000      	b.n	8003624 <invertDisplay+0x98>
 8003622:	2320      	movs	r3, #32
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fafd 	bl	8000c28 <WriteCmdParamN>
 800362e:	e048      	b.n	80036c2 <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <invertDisplay+0x148>)
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003638:	4293      	cmp	r3, r2
 800363a:	d030      	beq.n	800369e <invertDisplay+0x112>
 800363c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003640:	4293      	cmp	r3, r2
 8003642:	dc37      	bgt.n	80036b4 <invertDisplay+0x128>
 8003644:	f249 3226 	movw	r2, #37670	; 0x9326
 8003648:	4293      	cmp	r3, r2
 800364a:	d028      	beq.n	800369e <invertDisplay+0x112>
 800364c:	f249 3226 	movw	r2, #37670	; 0x9326
 8003650:	4293      	cmp	r3, r2
 8003652:	dc2f      	bgt.n	80036b4 <invertDisplay+0x128>
 8003654:	f249 2225 	movw	r2, #37413	; 0x9225
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <invertDisplay+0xf8>
 800365c:	f249 2225 	movw	r2, #37413	; 0x9225
 8003660:	4293      	cmp	r3, r2
 8003662:	dc27      	bgt.n	80036b4 <invertDisplay+0x128>
 8003664:	f247 7293 	movw	r2, #30611	; 0x7793
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <invertDisplay+0x112>
 800366c:	f247 7293 	movw	r2, #30611	; 0x7793
 8003670:	4293      	cmp	r3, r2
 8003672:	dc1f      	bgt.n	80036b4 <invertDisplay+0x128>
 8003674:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003678:	d004      	beq.n	8003684 <invertDisplay+0xf8>
 800367a:	f245 4220 	movw	r2, #21536	; 0x5420
 800367e:	4293      	cmp	r3, r2
 8003680:	d00d      	beq.n	800369e <invertDisplay+0x112>
 8003682:	e017      	b.n	80036b4 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <invertDisplay+0x140>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	b21b      	sxth	r3, r3
 800368c:	f043 0313 	orr.w	r3, r3, #19
 8003690:	b21b      	sxth	r3, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	4619      	mov	r1, r3
 8003696:	2007      	movs	r0, #7
 8003698:	f7fd f86b 	bl	8000772 <WriteCmdData>
        break;
 800369c:	e011      	b.n	80036c2 <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <invertDisplay+0x140>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	f240 4001 	movw	r0, #1025	; 0x401
 80036ae:	f7fd f860 	bl	8000772 <WriteCmdData>
        break;
 80036b2:	e006      	b.n	80036c2 <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <invertDisplay+0x140>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	2061      	movs	r0, #97	; 0x61
 80036bc:	f7fd f859 	bl	8000772 <WriteCmdData>
        break;
 80036c0:	bf00      	nop
    }
}
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000044 	.word	0x20000044
 80036cc:	20000048 	.word	0x20000048
 80036d0:	2000003b 	.word	0x2000003b
 80036d4:	20000046 	.word	0x20000046

080036d8 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af02      	add	r7, sp, #8
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	4603      	mov	r3, r0
 80036ec:	80bb      	strh	r3, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
 80036f2:	4613      	mov	r3, r2
 80036f4:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 80036f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80036fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80036fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003702:	883b      	ldrh	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	2201      	movs	r2, #1
 800370a:	f000 fb25 	bl	8003d58 <fillRect>
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bd90      	pop	{r4, r7, pc}

08003716 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003716:	b590      	push	{r4, r7, lr}
 8003718:	b085      	sub	sp, #20
 800371a:	af02      	add	r7, sp, #8
 800371c:	4604      	mov	r4, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	461a      	mov	r2, r3
 8003724:	4623      	mov	r3, r4
 8003726:	80fb      	strh	r3, [r7, #6]
 8003728:	4603      	mov	r3, r0
 800372a:	80bb      	strh	r3, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8003734:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003738:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800373c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003740:	883b      	ldrh	r3, [r7, #0]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2301      	movs	r3, #1
 8003746:	f000 fb07 	bl	8003d58 <fillRect>
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}

08003752 <writePixel>:

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	80fb      	strh	r3, [r7, #6]
 800375c:	460b      	mov	r3, r1
 800375e:	80bb      	strh	r3, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800376a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fbc6 	bl	8002f00 <drawPixel>
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4623      	mov	r3, r4
 800378c:	80fb      	strh	r3, [r7, #6]
 800378e:	4603      	mov	r3, r0
 8003790:	80bb      	strh	r3, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	807b      	strh	r3, [r7, #2]
 8003796:	4613      	mov	r3, r2
 8003798:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800379a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800379e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037ac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80037b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b4:	1acb      	subs	r3, r1, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bfb8      	it	lt
 80037ba:	425b      	neglt	r3, r3
 80037bc:	429a      	cmp	r2, r3
 80037be:	bfcc      	ite	gt
 80037c0:	2301      	movgt	r3, #1
 80037c2:	2300      	movle	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80037c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	833b      	strh	r3, [r7, #24]
 80037d4:	88bb      	ldrh	r3, [r7, #4]
 80037d6:	80fb      	strh	r3, [r7, #6]
 80037d8:	8b3b      	ldrh	r3, [r7, #24]
 80037da:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	82fb      	strh	r3, [r7, #22]
 80037e0:	883b      	ldrh	r3, [r7, #0]
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	8afb      	ldrh	r3, [r7, #22]
 80037e6:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80037e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	dd0b      	ble.n	800380c <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	82bb      	strh	r3, [r7, #20]
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	80fb      	strh	r3, [r7, #6]
 80037fc:	8abb      	ldrh	r3, [r7, #20]
 80037fe:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	827b      	strh	r3, [r7, #18]
 8003804:	883b      	ldrh	r3, [r7, #0]
 8003806:	80bb      	strh	r3, [r7, #4]
 8003808:	8a7b      	ldrh	r3, [r7, #18]
 800380a:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	b29b      	uxth	r3, r3
 8003814:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8003816:	f9b7 2000 	ldrsh.w	r2, [r7]
 800381a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfb8      	it	lt
 8003824:	425b      	neglt	r3, r3
 8003826:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8003828:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800382c:	0fda      	lsrs	r2, r3, #31
 800382e:	4413      	add	r3, r2
 8003830:	105b      	asrs	r3, r3, #1
 8003832:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8003834:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003838:	f9b7 3000 	ldrsh.w	r3, [r7]
 800383c:	429a      	cmp	r2, r3
 800383e:	da02      	bge.n	8003846 <writeLine+0xca>
        ystep = 1;
 8003840:	2301      	movs	r3, #1
 8003842:	83bb      	strh	r3, [r7, #28]
 8003844:	e031      	b.n	80038aa <writeLine+0x12e>
    } else {
        ystep = -1;
 8003846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800384a:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800384c:	e02d      	b.n	80038aa <writeLine+0x12e>
        if (steep) {
 800384e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <writeLine+0xec>
            writePixel(y0, x0, color);
 8003856:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003858:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800385c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff76 	bl	8003752 <writePixel>
 8003866:	e007      	b.n	8003878 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8003868:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800386a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800386e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff6d 	bl	8003752 <writePixel>
        }
        err -= dy;
 8003878:	8bfa      	ldrh	r2, [r7, #30]
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8003882:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003886:	2b00      	cmp	r3, #0
 8003888:	da09      	bge.n	800389e <writeLine+0x122>
            y0 += ystep;
 800388a:	88ba      	ldrh	r2, [r7, #4]
 800388c:	8bbb      	ldrh	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	b29b      	uxth	r3, r3
 8003892:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8003894:	8bfa      	ldrh	r2, [r7, #30]
 8003896:	8a3b      	ldrh	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	b29b      	uxth	r3, r3
 800389c:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800389e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	80fb      	strh	r3, [r7, #6]
 80038aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	ddcb      	ble.n	800384e <writeLine+0xd2>
        }
    }
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	3724      	adds	r7, #36	; 0x24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <drawLine>:


void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4623      	mov	r3, r4
 80038d0:	80fb      	strh	r3, [r7, #6]
 80038d2:	4603      	mov	r3, r0
 80038d4:	80bb      	strh	r3, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	807b      	strh	r3, [r7, #2]
 80038da:	4613      	mov	r3, r2
 80038dc:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80038de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11a      	bne.n	8003920 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80038ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80038ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	dd05      	ble.n	8003902 <drawLine+0x42>
 80038f6:	88bb      	ldrh	r3, [r7, #4]
 80038f8:	81bb      	strh	r3, [r7, #12]
 80038fa:	883b      	ldrh	r3, [r7, #0]
 80038fc:	80bb      	strh	r3, [r7, #4]
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003902:	883a      	ldrh	r2, [r7, #0]
 8003904:	88bb      	ldrh	r3, [r7, #4]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	3301      	adds	r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	b21a      	sxth	r2, r3
 8003910:	8c3b      	ldrh	r3, [r7, #32]
 8003912:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003916:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800391a:	f7ff fedd 	bl	80036d8 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800391e:	e02d      	b.n	800397c <drawLine+0xbc>
    } else if(y0 == y1){
 8003920:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003924:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003928:	429a      	cmp	r2, r3
 800392a:	d11a      	bne.n	8003962 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 800392c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003934:	429a      	cmp	r2, r3
 8003936:	dd05      	ble.n	8003944 <drawLine+0x84>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	81fb      	strh	r3, [r7, #14]
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	80fb      	strh	r3, [r7, #6]
 8003940:	89fb      	ldrh	r3, [r7, #14]
 8003942:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	3301      	adds	r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	b21a      	sxth	r2, r3
 8003952:	8c3b      	ldrh	r3, [r7, #32]
 8003954:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003958:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800395c:	f7ff fedb 	bl	8003716 <drawFastHLine>
}
 8003960:	e00c      	b.n	800397c <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 8003962:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003966:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800396a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800396e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003972:	8c3b      	ldrh	r3, [r7, #32]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4623      	mov	r3, r4
 8003978:	f7ff ff00 	bl	800377c <writeLine>
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}

08003984 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4623      	mov	r3, r4
 8003994:	80fb      	strh	r3, [r7, #6]
 8003996:	4603      	mov	r3, r0
 8003998:	80bb      	strh	r3, [r7, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	807b      	strh	r3, [r7, #2]
 800399e:	4613      	mov	r3, r2
 80039a0:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80039a2:	887b      	ldrh	r3, [r7, #2]
 80039a4:	f1c3 0301 	rsb	r3, r3, #1
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80039ac:	2301      	movs	r3, #1
 80039ae:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	461a      	mov	r2, r3
 80039b4:	03d2      	lsls	r2, r2, #15
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 80039c6:	88ba      	ldrh	r2, [r7, #4]
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	4413      	add	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b219      	sxth	r1, r3
 80039d0:	883a      	ldrh	r2, [r7, #0]
 80039d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff febb 	bl	8003752 <writePixel>
    writePixel(x0  , y0-r, color);
 80039dc:	88ba      	ldrh	r2, [r7, #4]
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b219      	sxth	r1, r3
 80039e6:	883a      	ldrh	r2, [r7, #0]
 80039e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff feb0 	bl	8003752 <writePixel>
    writePixel(x0+r, y0  , color);
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	4413      	add	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	883a      	ldrh	r2, [r7, #0]
 80039fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fea5 	bl	8003752 <writePixel>
    writePixel(x0-r, y0  , color);
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	883a      	ldrh	r2, [r7, #0]
 8003a14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fe9a 	bl	8003752 <writePixel>

    while (x<y) {
 8003a1e:	e091      	b.n	8003b44 <drawCircle+0x1c0>
        if (f >= 0) {
 8003a20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0e      	blt.n	8003a46 <drawCircle+0xc2>
            y--;
 8003a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003a34:	8a7b      	ldrh	r3, [r7, #18]
 8003a36:	3302      	adds	r3, #2
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003a3c:	8afa      	ldrh	r2, [r7, #22]
 8003a3e:	8a7b      	ldrh	r3, [r7, #18]
 8003a40:	4413      	add	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003a46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003a52:	8abb      	ldrh	r3, [r7, #20]
 8003a54:	3302      	adds	r3, #2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003a5a:	8afa      	ldrh	r2, [r7, #22]
 8003a5c:	8abb      	ldrh	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	8a3b      	ldrh	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b218      	sxth	r0, r3
 8003a6e:	88ba      	ldrh	r2, [r7, #4]
 8003a70:	89fb      	ldrh	r3, [r7, #14]
 8003a72:	4413      	add	r3, r2
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	883a      	ldrh	r2, [r7, #0]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7ff fe69 	bl	8003752 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	8a3b      	ldrh	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	b218      	sxth	r0, r3
 8003a8a:	88ba      	ldrh	r2, [r7, #4]
 8003a8c:	89fb      	ldrh	r3, [r7, #14]
 8003a8e:	4413      	add	r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b21b      	sxth	r3, r3
 8003a94:	883a      	ldrh	r2, [r7, #0]
 8003a96:	4619      	mov	r1, r3
 8003a98:	f7ff fe5b 	bl	8003752 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	8a3b      	ldrh	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b218      	sxth	r0, r3
 8003aa6:	88ba      	ldrh	r2, [r7, #4]
 8003aa8:	89fb      	ldrh	r3, [r7, #14]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21b      	sxth	r3, r3
 8003ab0:	883a      	ldrh	r2, [r7, #0]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7ff fe4d 	bl	8003752 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	8a3b      	ldrh	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b218      	sxth	r0, r3
 8003ac2:	88ba      	ldrh	r2, [r7, #4]
 8003ac4:	89fb      	ldrh	r3, [r7, #14]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b21b      	sxth	r3, r3
 8003acc:	883a      	ldrh	r2, [r7, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f7ff fe3f 	bl	8003752 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	89fb      	ldrh	r3, [r7, #14]
 8003ad8:	4413      	add	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b218      	sxth	r0, r3
 8003ade:	88ba      	ldrh	r2, [r7, #4]
 8003ae0:	8a3b      	ldrh	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	b21b      	sxth	r3, r3
 8003ae8:	883a      	ldrh	r2, [r7, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f7ff fe31 	bl	8003752 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	89fb      	ldrh	r3, [r7, #14]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b218      	sxth	r0, r3
 8003afa:	88ba      	ldrh	r2, [r7, #4]
 8003afc:	8a3b      	ldrh	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	883a      	ldrh	r2, [r7, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7ff fe23 	bl	8003752 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	89fb      	ldrh	r3, [r7, #14]
 8003b10:	4413      	add	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b218      	sxth	r0, r3
 8003b16:	88ba      	ldrh	r2, [r7, #4]
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	883a      	ldrh	r2, [r7, #0]
 8003b22:	4619      	mov	r1, r3
 8003b24:	f7ff fe15 	bl	8003752 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	89fb      	ldrh	r3, [r7, #14]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b218      	sxth	r0, r3
 8003b32:	88ba      	ldrh	r2, [r7, #4]
 8003b34:	8a3b      	ldrh	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	b21b      	sxth	r3, r3
 8003b3c:	883a      	ldrh	r2, [r7, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7ff fe07 	bl	8003752 <writePixel>
    while (x<y) {
 8003b44:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f6ff af67 	blt.w	8003a20 <drawCircle+0x9c>
    }
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd90      	pop	{r4, r7, pc}

08003b5c <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	80fb      	strh	r3, [r7, #6]
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80bb      	strh	r3, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	807b      	strh	r3, [r7, #2]
 8003b76:	4613      	mov	r3, r2
 8003b78:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8003b7a:	88ba      	ldrh	r2, [r7, #4]
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b219      	sxth	r1, r3
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	b21a      	sxth	r2, r3
 8003b90:	883b      	ldrh	r3, [r7, #0]
 8003b92:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b96:	f7ff fd9f 	bl	80036d8 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8003b9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ba2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003ba6:	883b      	ldrh	r3, [r7, #0]
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2303      	movs	r3, #3
 8003bb0:	f000 f804 	bl	8003bbc <fillCircleHelper>
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd90      	pop	{r4, r7, pc}

08003bbc <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	80fb      	strh	r3, [r7, #6]
 8003bce:	4603      	mov	r3, r0
 8003bd0:	80bb      	strh	r3, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	f1c3 0301 	rsb	r3, r3, #1
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	461a      	mov	r2, r3
 8003bec:	03d2      	lsls	r2, r2, #15
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8003bfe:	8a3b      	ldrh	r3, [r7, #16]
 8003c00:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8003c02:	89fb      	ldrh	r3, [r7, #14]
 8003c04:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8003c06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8003c12:	e095      	b.n	8003d40 <fillCircleHelper+0x184>
        if (f >= 0) {
 8003c14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db0e      	blt.n	8003c3a <fillCircleHelper+0x7e>
            y--;
 8003c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003c28:	8a7b      	ldrh	r3, [r7, #18]
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8003c30:	8afa      	ldrh	r2, [r7, #22]
 8003c32:	8a7b      	ldrh	r3, [r7, #18]
 8003c34:	4413      	add	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003c3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003c46:	8abb      	ldrh	r3, [r7, #20]
 8003c48:	3302      	adds	r3, #2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8003c4e:	8afa      	ldrh	r2, [r7, #22]
 8003c50:	8abb      	ldrh	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8003c58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	db31      	blt.n	8003cc8 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <fillCircleHelper+0xda>
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	8a3b      	ldrh	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b218      	sxth	r0, r3
 8003c78:	88ba      	ldrh	r2, [r7, #4]
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b219      	sxth	r1, r3
 8003c82:	89fb      	ldrh	r3, [r7, #14]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c8a:	4413      	add	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b21a      	sxth	r2, r3
 8003c90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c92:	f7ff fd21 	bl	80036d8 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8003c96:	787b      	ldrb	r3, [r7, #1]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <fillCircleHelper+0x10c>
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	8a3b      	ldrh	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b218      	sxth	r0, r3
 8003caa:	88ba      	ldrh	r2, [r7, #4]
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	b219      	sxth	r1, r3
 8003cb4:	89fb      	ldrh	r3, [r7, #14]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	b21a      	sxth	r2, r3
 8003cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003cc4:	f7ff fd08 	bl	80036d8 <drawFastVLine>
        }
        if(y != py) {
 8003cc8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003ccc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d033      	beq.n	8003d3c <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d013      	beq.n	8003d06 <fillCircleHelper+0x14a>
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b218      	sxth	r0, r3
 8003ce8:	88ba      	ldrh	r2, [r7, #4]
 8003cea:	89bb      	ldrh	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b219      	sxth	r1, r3
 8003cf2:	89bb      	ldrh	r3, [r7, #12]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d02:	f7ff fce9 	bl	80036d8 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8003d06:	787b      	ldrb	r3, [r7, #1]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <fillCircleHelper+0x17c>
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b218      	sxth	r0, r3
 8003d1a:	88ba      	ldrh	r2, [r7, #4]
 8003d1c:	89bb      	ldrh	r3, [r7, #12]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b219      	sxth	r1, r3
 8003d24:	89bb      	ldrh	r3, [r7, #12]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d2c:	4413      	add	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d34:	f7ff fcd0 	bl	80036d8 <drawFastVLine>
            py = y;
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8003d3c:	8a3b      	ldrh	r3, [r7, #16]
 8003d3e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8003d40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	f6ff af63 	blt.w	8003c14 <fillCircleHelper+0x58>
    }
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd90      	pop	{r4, r7, pc}

08003d58 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	80fb      	strh	r3, [r7, #6]
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80bb      	strh	r3, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	807b      	strh	r3, [r7, #2]
 8003d72:	4613      	mov	r3, r2
 8003d74:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8003d76:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <fillRect+0x230>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <fillRect+0x32>
 8003d7e:	8c3b      	ldrh	r3, [r7, #32]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fc47 	bl	8000614 <color565_to_555>
 8003d86:	4603      	mov	r3, r0
 8003d88:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8003d8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da08      	bge.n	8003da4 <fillRect+0x4c>
        w = -w;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	425b      	negs	r3, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	807b      	strh	r3, [r7, #2]
        x -= w;
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	887b      	ldrh	r3, [r7, #2]
 8003da8:	4413      	add	r3, r2
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8003dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da01      	bge.n	8003dba <fillRect+0x62>
        x = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8003dba:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003dbe:	f7fc fc11 	bl	80005e4 <width>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	429c      	cmp	r4, r3
 8003dc6:	dd03      	ble.n	8003dd0 <fillRect+0x78>
        end = width();
 8003dc8:	f7fc fc0c 	bl	80005e4 <width>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8003dd0:	89fa      	ldrh	r2, [r7, #14]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8003dda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da08      	bge.n	8003df4 <fillRect+0x9c>
        h = -h;
 8003de2:	883b      	ldrh	r3, [r7, #0]
 8003de4:	425b      	negs	r3, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	803b      	strh	r3, [r7, #0]
        y -= h;
 8003dea:	88ba      	ldrh	r2, [r7, #4]
 8003dec:	883b      	ldrh	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003df4:	88ba      	ldrh	r2, [r7, #4]
 8003df6:	883b      	ldrh	r3, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8003dfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da01      	bge.n	8003e0a <fillRect+0xb2>
        y = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8003e0a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003e0e:	f7fc fbf5 	bl	80005fc <height>
 8003e12:	4603      	mov	r3, r0
 8003e14:	429c      	cmp	r4, r3
 8003e16:	dd03      	ble.n	8003e20 <fillRect+0xc8>
        end = height();
 8003e18:	f7fc fbf0 	bl	80005fc <height>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8003e20:	89fa      	ldrh	r2, [r7, #14]
 8003e22:	88bb      	ldrh	r3, [r7, #4]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	4413      	add	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b21c      	sxth	r4, r3
 8003e38:	88ba      	ldrh	r2, [r7, #4]
 8003e3a:	883b      	ldrh	r3, [r7, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e4e:	4622      	mov	r2, r4
 8003e50:	f7ff f938 	bl	80030c4 <setAddrWindow>
    CS_ACTIVE;
 8003e54:	2101      	movs	r1, #1
 8003e56:	484d      	ldr	r0, [pc, #308]	; (8003f8c <fillRect+0x234>)
 8003e58:	f7fc fb76 	bl	8000548 <PIN_LOW>
    WriteCmd(_MW);
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e62:	f7fc fb71 	bl	8000548 <PIN_LOW>
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <fillRect+0x238>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	737b      	strb	r3, [r7, #13]
 8003e70:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <fillRect+0x238>)
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	733b      	strb	r3, [r7, #12]
 8003e76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e7a:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8003e7e:	619a      	str	r2, [r3, #24]
 8003e80:	4b42      	ldr	r3, [pc, #264]	; (8003f8c <fillRect+0x234>)
 8003e82:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003e86:	619a      	str	r2, [r3, #24]
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <fillRect+0x23c>)
 8003e8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e8e:	619a      	str	r2, [r3, #24]
 8003e90:	7b7b      	ldrb	r3, [r7, #13]
 8003e92:	105b      	asrs	r3, r3, #1
 8003e94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	6193      	str	r3, [r2, #24]
 8003e9e:	7b7a      	ldrb	r2, [r7, #13]
 8003ea0:	7b7b      	ldrb	r3, [r7, #13]
 8003ea2:	105b      	asrs	r3, r3, #1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f003 0208 	and.w	r2, r3, #8
 8003eaa:	7b7b      	ldrb	r3, [r7, #13]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	7b7b      	ldrb	r3, [r7, #13]
 8003eb6:	111b      	asrs	r3, r3, #4
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <fillRect+0x234>)
 8003ec0:	619a      	str	r2, [r3, #24]
 8003ec2:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <fillRect+0x23c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
 8003ec8:	2102      	movs	r1, #2
 8003eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ece:	f7fc fb3b 	bl	8000548 <PIN_LOW>
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed8:	f7fc fb46 	bl	8000568 <PIN_HIGH>
 8003edc:	2102      	movs	r1, #2
 8003ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee2:	f7fc fb41 	bl	8000568 <PIN_HIGH>
 8003ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eea:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8003eee:	619a      	str	r2, [r3, #24]
 8003ef0:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <fillRect+0x234>)
 8003ef2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <fillRect+0x23c>)
 8003efa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003efe:	619a      	str	r2, [r3, #24]
 8003f00:	7b3b      	ldrb	r3, [r7, #12]
 8003f02:	105b      	asrs	r3, r3, #1
 8003f04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	6193      	str	r3, [r2, #24]
 8003f0e:	7b3a      	ldrb	r2, [r7, #12]
 8003f10:	7b3b      	ldrb	r3, [r7, #12]
 8003f12:	105b      	asrs	r3, r3, #1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f003 0208 	and.w	r2, r3, #8
 8003f1a:	7b3b      	ldrb	r3, [r7, #12]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	431a      	orrs	r2, r3
 8003f24:	7b3b      	ldrb	r3, [r7, #12]
 8003f26:	111b      	asrs	r3, r3, #4
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <fillRect+0x234>)
 8003f30:	619a      	str	r2, [r3, #24]
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <fillRect+0x23c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
 8003f38:	2102      	movs	r1, #2
 8003f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3e:	f7fc fb03 	bl	8000548 <PIN_LOW>
 8003f42:	2102      	movs	r1, #2
 8003f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f48:	f7fc fb0e 	bl	8000568 <PIN_HIGH>
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f52:	f7fc fb09 	bl	8000568 <PIN_HIGH>
 8003f56:	2110      	movs	r1, #16
 8003f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5c:	f7fc fb04 	bl	8000568 <PIN_HIGH>
    if (h > w) {
 8003f60:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	dd05      	ble.n	8003f78 <fillRect+0x220>
        end = h;
 8003f6c:	883b      	ldrh	r3, [r7, #0]
 8003f6e:	81fb      	strh	r3, [r7, #14]
        h = w;
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	803b      	strh	r3, [r7, #0]
        w = end;
 8003f74:	89fb      	ldrh	r3, [r7, #14]
 8003f76:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003f78:	8c3b      	ldrh	r3, [r7, #32]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	72fb      	strb	r3, [r7, #11]
 8003f80:	8c3b      	ldrh	r3, [r7, #32]
 8003f82:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8003f84:	e082      	b.n	800408c <fillRect+0x334>
 8003f86:	bf00      	nop
 8003f88:	2000003c 	.word	0x2000003c
 8003f8c:	48000400 	.word	0x48000400
 8003f90:	20000050 	.word	0x20000050
 8003f94:	48000800 	.word	0x48000800
        end = w;
 8003f98:	887b      	ldrh	r3, [r7, #2]
 8003f9a:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8003f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa0:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8003fa4:	619a      	str	r2, [r3, #24]
 8003fa6:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <fillRect+0x39c>)
 8003fa8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003fac:	619a      	str	r2, [r3, #24]
 8003fae:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <fillRect+0x3a0>)
 8003fb0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003fb4:	619a      	str	r2, [r3, #24]
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	105b      	asrs	r3, r3, #1
 8003fba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	7afa      	ldrb	r2, [r7, #11]
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	105b      	asrs	r3, r3, #1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f003 0208 	and.w	r2, r3, #8
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	7afb      	ldrb	r3, [r7, #11]
 8003fdc:	111b      	asrs	r3, r3, #4
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	4b43      	ldr	r3, [pc, #268]	; (80040f4 <fillRect+0x39c>)
 8003fe6:	619a      	str	r2, [r3, #24]
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <fillRect+0x3a0>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	619a      	str	r2, [r3, #24]
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff4:	f7fc faa8 	bl	8000548 <PIN_LOW>
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ffe:	f7fc fab3 	bl	8000568 <PIN_HIGH>
 8004002:	2102      	movs	r1, #2
 8004004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004008:	f7fc faae 	bl	8000568 <PIN_HIGH>
            write8(lo);
 800400c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004010:	f04f 4203 	mov.w	r2, #2197815296	; 0x83000000
 8004014:	619a      	str	r2, [r3, #24]
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <fillRect+0x39c>)
 8004018:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <fillRect+0x3a0>)
 8004020:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004024:	619a      	str	r2, [r3, #24]
 8004026:	7abb      	ldrb	r3, [r7, #10]
 8004028:	105b      	asrs	r3, r3, #1
 800402a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	6193      	str	r3, [r2, #24]
 8004034:	7aba      	ldrb	r2, [r7, #10]
 8004036:	7abb      	ldrb	r3, [r7, #10]
 8004038:	105b      	asrs	r3, r3, #1
 800403a:	4313      	orrs	r3, r2
 800403c:	f003 0208 	and.w	r2, r3, #8
 8004040:	7abb      	ldrb	r3, [r7, #10]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	431a      	orrs	r2, r3
 800404a:	7abb      	ldrb	r3, [r7, #10]
 800404c:	111b      	asrs	r3, r3, #4
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	431a      	orrs	r2, r3
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <fillRect+0x39c>)
 8004056:	619a      	str	r2, [r3, #24]
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <fillRect+0x3a0>)
 800405a:	2200      	movs	r2, #0
 800405c:	619a      	str	r2, [r3, #24]
 800405e:	2102      	movs	r1, #2
 8004060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004064:	f7fc fa70 	bl	8000548 <PIN_LOW>
 8004068:	2102      	movs	r1, #2
 800406a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800406e:	f7fc fa7b 	bl	8000568 <PIN_HIGH>
 8004072:	2102      	movs	r1, #2
 8004074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004078:	f7fc fa76 	bl	8000568 <PIN_HIGH>
        } while (--end != 0);
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	3b01      	subs	r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	81fb      	strh	r3, [r7, #14]
 8004084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d187      	bne.n	8003f9c <fillRect+0x244>
    while (h-- > 0) {
 800408c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004090:	b29a      	uxth	r2, r3
 8004092:	3a01      	subs	r2, #1
 8004094:	b292      	uxth	r2, r2
 8004096:	803a      	strh	r2, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f73f af7d 	bgt.w	8003f98 <fillRect+0x240>
#endif
    }
    CS_IDLE;
 800409e:	2101      	movs	r1, #1
 80040a0:	4814      	ldr	r0, [pc, #80]	; (80040f4 <fillRect+0x39c>)
 80040a2:	f7fc fa61 	bl	8000568 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <fillRect+0x3a4>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <fillRect+0x372>
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <fillRect+0x3a8>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	f241 5226 	movw	r2, #5414	; 0x1526
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d116      	bne.n	80040ec <fillRect+0x394>
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <fillRect+0x3ac>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d010      	beq.n	80040ec <fillRect+0x394>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80040ca:	f7fc fa8b 	bl	80005e4 <width>
 80040ce:	4603      	mov	r3, r0
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	b21c      	sxth	r4, r3
 80040d6:	f7fc fa91 	bl	80005fc <height>
 80040da:	4603      	mov	r3, r0
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b21b      	sxth	r3, r3
 80040e2:	4622      	mov	r2, r4
 80040e4:	2100      	movs	r1, #0
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7fe ffec 	bl	80030c4 <setAddrWindow>
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}
 80040f4:	48000400 	.word	0x48000400
 80040f8:	48000800 	.word	0x48000800
 80040fc:	20000044 	.word	0x20000044
 8004100:	20000046 	.word	0x20000046
 8004104:	20000040 	.word	0x20000040

08004108 <testFillScreen>:


/********************************* TESTS  *********************************************/

void testFillScreen()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 800410c:	2000      	movs	r0, #0
 800410e:	f7ff fa23 	bl	8003558 <fillScreen>
    fillScreen(RED);
 8004112:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004116:	f7ff fa1f 	bl	8003558 <fillScreen>
    fillScreen(GREEN);
 800411a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800411e:	f7ff fa1b 	bl	8003558 <fillScreen>
    fillScreen(BLUE);
 8004122:	201f      	movs	r0, #31
 8004124:	f7ff fa18 	bl	8003558 <fillScreen>
    fillScreen(BLACK);
 8004128:	2000      	movs	r0, #0
 800412a:	f7ff fa15 	bl	8003558 <fillScreen>
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}

08004132 <testLines>:

void testLines(uint16_t color)
{
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b08b      	sub	sp, #44	; 0x2c
 8004136:	af02      	add	r7, sp, #8
 8004138:	4603      	mov	r3, r0
 800413a:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = width(),
 800413c:	f7fc fa52 	bl	80005e4 <width>
 8004140:	4603      	mov	r3, r0
 8004142:	617b      	str	r3, [r7, #20]
                  h = height();
 8004144:	f7fc fa5a 	bl	80005fc <height>
 8004148:	4603      	mov	r3, r0
 800414a:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800414c:	2000      	movs	r0, #0
 800414e:	f7ff fa03 	bl	8003558 <fillScreen>

    x1 = y1 = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3b01      	subs	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e00f      	b.n	8004186 <testLines+0x54>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	b218      	sxth	r0, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	b219      	sxth	r1, r3
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	b21a      	sxth	r2, r3
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	b21c      	sxth	r4, r3
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4623      	mov	r3, r4
 800417c:	f7ff fba0 	bl	80038c0 <drawLine>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	3306      	adds	r3, #6
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	429a      	cmp	r2, r3
 800418c:	dbeb      	blt.n	8004166 <testLines+0x34>
    x2    = w - 1;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3b01      	subs	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	e00f      	b.n	80041ba <testLines+0x88>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	b218      	sxth	r0, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	b219      	sxth	r1, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	b21a      	sxth	r2, r3
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	b21c      	sxth	r4, r3
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4623      	mov	r3, r4
 80041b0:	f7ff fb86 	bl	80038c0 <drawLine>
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	3306      	adds	r3, #6
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	429a      	cmp	r2, r3
 80041c0:	dbeb      	blt.n	800419a <testLines+0x68>

    fillScreen(BLACK);
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7ff f9c8 	bl	8003558 <fillScreen>

    x1    = w - 1;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e00f      	b.n	80041fe <testLines+0xcc>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	b218      	sxth	r0, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	b219      	sxth	r1, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	b21a      	sxth	r2, r3
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	b21c      	sxth	r4, r3
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	4623      	mov	r3, r4
 80041f4:	f7ff fb64 	bl	80038c0 <drawLine>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3306      	adds	r3, #6
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	429a      	cmp	r2, r3
 8004204:	dbeb      	blt.n	80041de <testLines+0xac>
    x2    = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e00f      	b.n	8004230 <testLines+0xfe>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	b218      	sxth	r0, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	b219      	sxth	r1, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	b21a      	sxth	r2, r3
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	b21c      	sxth	r4, r3
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	4623      	mov	r3, r4
 8004226:	f7ff fb4b 	bl	80038c0 <drawLine>
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3306      	adds	r3, #6
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	429a      	cmp	r2, r3
 8004236:	dbeb      	blt.n	8004210 <testLines+0xde>

    fillScreen(BLACK);
 8004238:	2000      	movs	r0, #0
 800423a:	f7ff f98d 	bl	8003558 <fillScreen>

    x1    = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	3b01      	subs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e00f      	b.n	8004272 <testLines+0x140>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	b218      	sxth	r0, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	b219      	sxth	r1, r3
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	b21a      	sxth	r2, r3
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	b21c      	sxth	r4, r3
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4623      	mov	r3, r4
 8004268:	f7ff fb2a 	bl	80038c0 <drawLine>
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	3306      	adds	r3, #6
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	429a      	cmp	r2, r3
 8004278:	dbeb      	blt.n	8004252 <testLines+0x120>
    x2    = w - 1;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	3b01      	subs	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8004280:	2300      	movs	r3, #0
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e00f      	b.n	80042a6 <testLines+0x174>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	b218      	sxth	r0, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b219      	sxth	r1, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	b21a      	sxth	r2, r3
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	b21c      	sxth	r4, r3
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4623      	mov	r3, r4
 800429c:	f7ff fb10 	bl	80038c0 <drawLine>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	3306      	adds	r3, #6
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	dbeb      	blt.n	8004286 <testLines+0x154>

    fillScreen(BLACK);
 80042ae:	2000      	movs	r0, #0
 80042b0:	f7ff f952 	bl	8003558 <fillScreen>

    x1    = w - 1;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	3b01      	subs	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	e00f      	b.n	80042ea <testLines+0x1b8>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	b218      	sxth	r0, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	b219      	sxth	r1, r3
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	b21a      	sxth	r2, r3
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	b21c      	sxth	r4, r3
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4623      	mov	r3, r4
 80042e0:	f7ff faee 	bl	80038c0 <drawLine>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3306      	adds	r3, #6
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbeb      	blt.n	80042ca <testLines+0x198>
    x2    = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	e00f      	b.n	800431c <testLines+0x1ea>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	b218      	sxth	r0, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	b219      	sxth	r1, r3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	b21a      	sxth	r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	b21c      	sxth	r4, r3
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4623      	mov	r3, r4
 8004312:	f7ff fad5 	bl	80038c0 <drawLine>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3306      	adds	r3, #6
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	dbeb      	blt.n	80042fc <testLines+0x1ca>

}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3724      	adds	r7, #36	; 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd90      	pop	{r4, r7, pc}

0800432e <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	4603      	mov	r3, r0
 8004336:	460a      	mov	r2, r1
 8004338:	80fb      	strh	r3, [r7, #6]
 800433a:	4613      	mov	r3, r2
 800433c:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = width(), h = height();
 800433e:	f7fc f951 	bl	80005e4 <width>
 8004342:	4603      	mov	r3, r0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	f7fc f959 	bl	80005fc <height>
 800434a:	4603      	mov	r3, r0
 800434c:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 800434e:	2000      	movs	r0, #0
 8004350:	f7ff f902 	bl	8003558 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	e00a      	b.n	8004370 <testFastLines+0x42>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	b219      	sxth	r1, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b21a      	sxth	r2, r3
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2000      	movs	r0, #0
 8004366:	f7ff f9d6 	bl	8003716 <drawFastHLine>
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3305      	adds	r3, #5
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	429a      	cmp	r2, r3
 8004376:	dbf0      	blt.n	800435a <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e00a      	b.n	8004394 <testFastLines+0x66>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	b218      	sxth	r0, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	b21a      	sxth	r2, r3
 8004386:	88bb      	ldrh	r3, [r7, #4]
 8004388:	2100      	movs	r1, #0
 800438a:	f7ff f9a5 	bl	80036d8 <drawFastVLine>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3305      	adds	r3, #5
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	dbf0      	blt.n	800437e <testFastLines+0x50>
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <testFilledCircles>:
        drawRect(cx - i2, cy - i2, i, i, color2);
    }
}

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b088      	sub	sp, #32
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	460a      	mov	r2, r1
 80043b0:	71fb      	strb	r3, [r7, #7]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80bb      	strh	r3, [r7, #4]
    int x, y, w = width(), h = height(), r2 = radius * 2;
 80043b6:	f7fc f915 	bl	80005e4 <width>
 80043ba:	4603      	mov	r3, r0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	f7fc f91d 	bl	80005fc <height>
 80043c2:	4603      	mov	r3, r0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7ff f8c3 	bl	8003558 <fillScreen>
    for (x = radius; x < w; x += r2) {
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	e017      	b.n	8004408 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e00c      	b.n	80043f8 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	b218      	sxth	r0, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	b219      	sxth	r1, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	b21a      	sxth	r2, r3
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	f7ff fbb6 	bl	8003b5c <fillCircle>
        for (y = radius; y < h; y += r2) {
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	dbee      	blt.n	80043de <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	dbe3      	blt.n	80043d8 <testFilledCircles+0x32>
        }
    }

}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	460a      	mov	r2, r1
 8004424:	71fb      	strb	r3, [r7, #7]
 8004426:	4613      	mov	r3, r2
 8004428:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	617b      	str	r3, [r7, #20]
                        w = width()  + radius,
 8004430:	f7fc f8d8 	bl	80005e4 <width>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	4413      	add	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
                        h = height() + radius;
 800443e:	f7fc f8dd 	bl	80005fc <height>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	4413      	add	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e017      	b.n	8004482 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e00c      	b.n	8004472 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	b218      	sxth	r0, r3
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	b219      	sxth	r1, r3
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	b21a      	sxth	r2, r3
 8004464:	88bb      	ldrh	r3, [r7, #4]
 8004466:	f7ff fa8d 	bl	8003984 <drawCircle>
        for (y = 0; y < h; y += r2) {
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4413      	add	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	429a      	cmp	r2, r3
 8004478:	dbee      	blt.n	8004458 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	dbe3      	blt.n	8004452 <testCircles+0x38>
        }
    }

}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <drawChar>:
}



void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b08b      	sub	sp, #44	; 0x2c
 8004498:	af02      	add	r7, sp, #8
 800449a:	4604      	mov	r4, r0
 800449c:	4608      	mov	r0, r1
 800449e:	4611      	mov	r1, r2
 80044a0:	461a      	mov	r2, r3
 80044a2:	4623      	mov	r3, r4
 80044a4:	80fb      	strh	r3, [r7, #6]
 80044a6:	4603      	mov	r3, r0
 80044a8:	80bb      	strh	r3, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70fb      	strb	r3, [r7, #3]
 80044ae:	4613      	mov	r3, r2
 80044b0:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80044b2:	4b57      	ldr	r3, [pc, #348]	; (8004610 <drawChar+0x17c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <drawChar+0x17c>)
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	3204      	adds	r2, #4
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80044d0:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <drawChar+0x17c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3302      	adds	r3, #2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3303      	adds	r3, #3
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3305      	adds	r3, #5
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3306      	adds	r3, #6
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	76fb      	strb	r3, [r7, #27]
 8004502:	2300      	movs	r3, #0
 8004504:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	833b      	strh	r3, [r7, #24]
 800450a:	2300      	movs	r3, #0
 800450c:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 800450e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004512:	2b01      	cmp	r3, #1
 8004514:	d905      	bls.n	8004522 <drawChar+0x8e>
            xo16 = xo;
 8004516:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800451a:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 800451c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004520:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 8004522:	2300      	movs	r3, #0
 8004524:	773b      	strb	r3, [r7, #28]
 8004526:	e06a      	b.n	80045fe <drawChar+0x16a>
            for(xx=0; xx<w; xx++) {
 8004528:	2300      	movs	r3, #0
 800452a:	777b      	strb	r3, [r7, #29]
 800452c:	e060      	b.n	80045f0 <drawChar+0x15c>
                if(!(bit++ & 7)) {
 800452e:	7ebb      	ldrb	r3, [r7, #26]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	76ba      	strb	r2, [r7, #26]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <drawChar+0xb8>
                    bits = pgm_read_byte(&bitmap[bo++]);
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	83fa      	strh	r2, [r7, #30]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 800454c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004550:	2b00      	cmp	r3, #0
 8004552:	da47      	bge.n	80045e4 <drawChar+0x150>
                    if(size == 1) {
 8004554:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004558:	2b01      	cmp	r3, #1
 800455a:	d11a      	bne.n	8004592 <drawChar+0xfe>
                        writePixel(x+xo+xx, y+yo+yy, color);
 800455c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004560:	b29a      	uxth	r2, r3
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	4413      	add	r3, r2
 8004566:	b29a      	uxth	r2, r3
 8004568:	7f7b      	ldrb	r3, [r7, #29]
 800456a:	b29b      	uxth	r3, r3
 800456c:	4413      	add	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	b218      	sxth	r0, r3
 8004572:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004576:	b29a      	uxth	r2, r3
 8004578:	88bb      	ldrh	r3, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	b29a      	uxth	r2, r3
 800457e:	7f3b      	ldrb	r3, [r7, #28]
 8004580:	b29b      	uxth	r3, r3
 8004582:	4413      	add	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	b21b      	sxth	r3, r3
 8004588:	883a      	ldrh	r2, [r7, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	f7ff f8e1 	bl	8003752 <writePixel>
 8004590:	e028      	b.n	80045e4 <drawChar+0x150>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8004592:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004596:	7f7b      	ldrb	r3, [r7, #29]
 8004598:	4413      	add	r3, r2
 800459a:	b29a      	uxth	r2, r3
 800459c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	fb12 f303 	smulbb	r3, r2, r3
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	4413      	add	r3, r2
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	b218      	sxth	r0, r3
 80045b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045b4:	7f3b      	ldrb	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045be:	b29b      	uxth	r3, r3
 80045c0:	fb12 f303 	smulbb	r3, r2, r3
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	88bb      	ldrh	r3, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	b219      	sxth	r1, r3
 80045ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045d8:	b21c      	sxth	r4, r3
 80045da:	883b      	ldrh	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4623      	mov	r3, r4
 80045e0:	f7ff fbba 	bl	8003d58 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 80045e4:	7efb      	ldrb	r3, [r7, #27]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 80045ea:	7f7b      	ldrb	r3, [r7, #29]
 80045ec:	3301      	adds	r3, #1
 80045ee:	777b      	strb	r3, [r7, #29]
 80045f0:	7f7a      	ldrb	r2, [r7, #29]
 80045f2:	7afb      	ldrb	r3, [r7, #11]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d39a      	bcc.n	800452e <drawChar+0x9a>
        for(yy=0; yy<h; yy++) {
 80045f8:	7f3b      	ldrb	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	773b      	strb	r3, [r7, #28]
 80045fe:	7f3a      	ldrb	r2, [r7, #28]
 8004600:	7abb      	ldrb	r3, [r7, #10]
 8004602:	429a      	cmp	r2, r3
 8004604:	d390      	bcc.n	8004528 <drawChar+0x94>
            }
        }

    } // End classic vs custom font
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	3724      	adds	r7, #36	; 0x24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}
 8004610:	20000034 	.word	0x20000034

08004614 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8004614:	b5b0      	push	{r4, r5, r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	2b0a      	cmp	r3, #10
 8004622:	d112      	bne.n	800464a <write+0x36>
            cursor_x  = 0;
 8004624:	4b47      	ldr	r3, [pc, #284]	; (8004744 <write+0x130>)
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <write+0x134>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330a      	adds	r3, #10
 8004630:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <write+0x138>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	fb12 f303 	smulbb	r3, r2, r3
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b44      	ldr	r3, [pc, #272]	; (8004750 <write+0x13c>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4413      	add	r3, r2
 8004642:	b2da      	uxtb	r2, r3
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <write+0x13c>)
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e077      	b.n	800473a <write+0x126>
        } else if(c != '\r') {
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b0d      	cmp	r3, #13
 800464e:	d074      	beq.n	800473a <write+0x126>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 8004650:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <write+0x134>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 800465a:	79fa      	ldrb	r2, [r7, #7]
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	429a      	cmp	r2, r3
 8004660:	d36b      	bcc.n	800473a <write+0x126>
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <write+0x134>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3309      	adds	r3, #9
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	79fa      	ldrb	r2, [r7, #7]
 800466c:	429a      	cmp	r2, r3
 800466e:	d864      	bhi.n	800473a <write+0x126>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	00db      	lsls	r3, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004678:	4a33      	ldr	r2, [pc, #204]	; (8004748 <write+0x134>)
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	3204      	adds	r2, #4
 800467e:	8812      	ldrh	r2, [r2, #0]
                  &gfxFont->glyph))[c - first]);
 8004680:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004682:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	3302      	adds	r3, #2
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3303      	adds	r3, #3
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d041      	beq.n	800471e <write+0x10a>
 800469a:	7bbb      	ldrb	r3, [r7, #14]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d03e      	beq.n	800471e <write+0x10a>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	3305      	adds	r3, #5
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 80046aa:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <write+0x140>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <write+0xe4>
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <write+0x130>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <write+0x138>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	4413      	add	r3, r2
 80046c6:	fb00 f303 	mul.w	r3, r0, r3
 80046ca:	440b      	add	r3, r1
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <write+0x144>)
 80046ce:	8812      	ldrh	r2, [r2, #0]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	dd11      	ble.n	80046f8 <write+0xe4>
                        cursor_x  = 0;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <write+0x130>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <write+0x134>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330a      	adds	r3, #10
 80046e0:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <write+0x138>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	fb12 f303 	smulbb	r3, r2, r3
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <write+0x13c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4413      	add	r3, r2
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b16      	ldr	r3, [pc, #88]	; (8004750 <write+0x13c>)
 80046f6:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <write+0x130>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b218      	sxth	r0, r3
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <write+0x13c>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b219      	sxth	r1, r3
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <write+0x148>)
 8004706:	881d      	ldrh	r5, [r3, #0]
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <write+0x14c>)
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	4a0f      	ldr	r2, [pc, #60]	; (800474c <write+0x138>)
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	79fc      	ldrb	r4, [r7, #7]
 8004712:	9201      	str	r2, [sp, #4]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	462b      	mov	r3, r5
 8004718:	4622      	mov	r2, r4
 800471a:	f7ff febb 	bl	8004494 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3304      	adds	r3, #4
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <write+0x138>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	fb12 f303 	smulbb	r3, r2, r3
 800472c:	b2da      	uxtb	r2, r3
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <write+0x130>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4413      	add	r3, r2
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4b03      	ldr	r3, [pc, #12]	; (8004744 <write+0x130>)
 8004738:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 800473a:	2301      	movs	r3, #1
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bdb0      	pop	{r4, r5, r7, pc}
 8004744:	2000003f 	.word	0x2000003f
 8004748:	20000034 	.word	0x20000034
 800474c:	20000008 	.word	0x20000008
 8004750:	2000003e 	.word	0x2000003e
 8004754:	2000000e 	.word	0x2000000e
 8004758:	20000004 	.word	0x20000004
 800475c:	2000000a 	.word	0x2000000a
 8004760:	2000000c 	.word	0x2000000c

08004764 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <setFont+0x4c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d110      	bne.n	800479c <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <setFont+0x50>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	3306      	adds	r3, #6
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <setFont+0x50>)
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e009      	b.n	800479c <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <setFont+0x4c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <setFont+0x50>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	3b06      	subs	r3, #6
 8004796:	b2da      	uxtb	r2, r3
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <setFont+0x50>)
 800479a:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <setFont+0x4c>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6013      	str	r3, [r2, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000034 	.word	0x20000034
 80047b4:	2000003e 	.word	0x2000003e

080047b8 <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	461a      	mov	r2, r3
 80047c4:	460b      	mov	r3, r1
 80047c6:	817b      	strh	r3, [r7, #10]
 80047c8:	4613      	mov	r3, r2
 80047ca:	727b      	strb	r3, [r7, #9]
	setFont(f);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ffc9 	bl	8004764 <setFont>
	textcolor = txtcolor;
 80047d2:	4a11      	ldr	r2, [pc, #68]	; (8004818 <printnewtstr+0x60>)
 80047d4:	897b      	ldrh	r3, [r7, #10]
 80047d6:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 80047d8:	7a7b      	ldrb	r3, [r7, #9]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <printnewtstr+0x2a>
 80047de:	7a7b      	ldrb	r3, [r7, #9]
 80047e0:	e000      	b.n	80047e4 <printnewtstr+0x2c>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <printnewtstr+0x64>)
 80047e6:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	2000      	movs	r0, #0
 80047f0:	f000 f816 	bl	8004820 <setCursor>
	while (*str) write (*str++);
 80047f4:	e006      	b.n	8004804 <printnewtstr+0x4c>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	61ba      	str	r2, [r7, #24]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff08 	bl	8004614 <write>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f4      	bne.n	80047f6 <printnewtstr+0x3e>
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	2000000a 	.word	0x2000000a
 800481c:	20000008 	.word	0x20000008

08004820 <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	460a      	mov	r2, r1
 800482a:	80fb      	strh	r3, [r7, #6]
 800482c:	4613      	mov	r3, r2
 800482e:	80bb      	strh	r3, [r7, #4]
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <setCursor+0x2c>)
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	88bb      	ldrh	r3, [r7, #4]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <setCursor+0x30>)
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	2000003f 	.word	0x2000003f
 8004850:	2000003e 	.word	0x2000003e

08004854 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800485a:	f107 0310 	add.w	r3, r7, #16
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	609a      	str	r2, [r3, #8]
 8004866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <MX_TIM2_Init+0x98>)
 8004874:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004878:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800487a:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <MX_TIM2_Init+0x98>)
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <MX_TIM2_Init+0x98>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <MX_TIM2_Init+0x98>)
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800488e:	4b17      	ldr	r3, [pc, #92]	; (80048ec <MX_TIM2_Init+0x98>)
 8004890:	2200      	movs	r2, #0
 8004892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <MX_TIM2_Init+0x98>)
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800489a:	4814      	ldr	r0, [pc, #80]	; (80048ec <MX_TIM2_Init+0x98>)
 800489c:	f002 f89c 	bl	80069d8 <HAL_TIM_Base_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80048a6:	f7fb fde9 	bl	800047c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048b0:	f107 0310 	add.w	r3, r7, #16
 80048b4:	4619      	mov	r1, r3
 80048b6:	480d      	ldr	r0, [pc, #52]	; (80048ec <MX_TIM2_Init+0x98>)
 80048b8:	f002 f94e 	bl	8006b58 <HAL_TIM_ConfigClockSource>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80048c2:	f7fb fddb 	bl	800047c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4806      	ldr	r0, [pc, #24]	; (80048ec <MX_TIM2_Init+0x98>)
 80048d4:	f002 fb42 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80048de:	f7fb fdcd 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80048e2:	bf00      	nop
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	2000005c 	.word	0x2000005c

080048f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d10b      	bne.n	800491a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_TIM_Base_MspInit+0x38>)
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <HAL_TIM_Base_MspInit+0x38>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	61d3      	str	r3, [r2, #28]
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_TIM_Base_MspInit+0x38>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <MX_USART2_UART_Init+0x5c>)
 8004934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004938:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800493c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <MX_USART2_UART_Init+0x58>)
 800494c:	2200      	movs	r2, #0
 800494e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004952:	220c      	movs	r2, #12
 8004954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004958:	2200      	movs	r2, #0
 800495a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <MX_USART2_UART_Init+0x58>)
 800495e:	2200      	movs	r2, #0
 8004960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004964:	2200      	movs	r2, #0
 8004966:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_USART2_UART_Init+0x58>)
 800496a:	2200      	movs	r2, #0
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_USART2_UART_Init+0x58>)
 8004970:	f002 fb80 	bl	8007074 <HAL_UART_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800497a:	f7fb fd7f 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200000a8 	.word	0x200000a8
 8004988:	40004400 	.word	0x40004400

0800498c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <HAL_UART_MspInit+0x7c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d128      	bne.n	8004a00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049ae:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <HAL_UART_MspInit+0x80>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <HAL_UART_MspInit+0x80>)
 80049b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b8:	61d3      	str	r3, [r2, #28]
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <HAL_UART_MspInit+0x80>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_UART_MspInit+0x80>)
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <HAL_UART_MspInit+0x80>)
 80049cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d0:	6153      	str	r3, [r2, #20]
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_UART_MspInit+0x80>)
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049de:	230c      	movs	r3, #12
 80049e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e2:	2302      	movs	r3, #2
 80049e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ea:	2300      	movs	r3, #0
 80049ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049ee:	2307      	movs	r3, #7
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049fc:	f000 f9a2 	bl	8004d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a00:	bf00      	nop
 8004a02:	3728      	adds	r7, #40	; 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40004400 	.word	0x40004400
 8004a0c:	40021000 	.word	0x40021000

08004a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a14:	f7fb fd86 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a18:	480c      	ldr	r0, [pc, #48]	; (8004a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8004a1a:	490d      	ldr	r1, [pc, #52]	; (8004a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <LoopForever+0xe>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a20:	e002      	b.n	8004a28 <LoopCopyDataInit>

08004a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a26:	3304      	adds	r3, #4

08004a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a2c:	d3f9      	bcc.n	8004a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a30:	4c0a      	ldr	r4, [pc, #40]	; (8004a5c <LoopForever+0x16>)
  movs r3, #0
 8004a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a34:	e001      	b.n	8004a3a <LoopFillZerobss>

08004a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a38:	3204      	adds	r2, #4

08004a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a3c:	d3fb      	bcc.n	8004a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a3e:	f002 ff59 	bl	80078f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a42:	f7fb fc67 	bl	8000314 <main>

08004a46 <LoopForever>:

LoopForever:
    b LoopForever
 8004a46:	e7fe      	b.n	8004a46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a50:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8004a54:	08008928 	.word	0x08008928
  ldr r2, =_sbss
 8004a58:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8004a5c:	20000134 	.word	0x20000134

08004a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a60:	e7fe      	b.n	8004a60 <ADC1_2_IRQHandler>
	...

08004a64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_Init+0x28>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <HAL_Init+0x28>)
 8004a6e:	f043 0310 	orr.w	r3, r3, #16
 8004a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a74:	2003      	movs	r0, #3
 8004a76:	f000 f931 	bl	8004cdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f000 f808 	bl	8004a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a80:	f7fb fd02 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40022000 	.word	0x40022000

08004a90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_InitTick+0x54>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_InitTick+0x58>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f93b 	bl	8004d2a <HAL_SYSTICK_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00e      	b.n	8004adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d80a      	bhi.n	8004ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	f000 f911 	bl	8004cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <HAL_InitTick+0x5c>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	20000014 	.word	0x20000014
 8004aec:	20000010 	.word	0x20000010

08004af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_IncTick+0x20>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_IncTick+0x24>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000014 	.word	0x20000014
 8004b14:	20000130 	.word	0x20000130

08004b18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_GetTick+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000130 	.word	0x20000130

08004b30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff ffee 	bl	8004b18 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d005      	beq.n	8004b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_Delay+0x44>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b56:	bf00      	nop
 8004b58:	f7ff ffde 	bl	8004b18 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f7      	bhi.n	8004b58 <HAL_Delay+0x28>
  {
  }
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000014 	.word	0x20000014

08004b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <__NVIC_SetPriorityGrouping+0x44>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004baa:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <__NVIC_SetPriorityGrouping+0x44>)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	60d3      	str	r3, [r2, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	0a1b      	lsrs	r3, r3, #8
 8004bca:	f003 0307 	and.w	r3, r3, #7
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf28      	it	cs
 8004c4e:	2304      	movcs	r3, #4
 8004c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d902      	bls.n	8004c60 <NVIC_EncodePriority+0x30>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3b03      	subs	r3, #3
 8004c5e:	e000      	b.n	8004c62 <NVIC_EncodePriority+0x32>
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	401a      	ands	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43d9      	mvns	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	4313      	orrs	r3, r2
         );
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca8:	d301      	bcc.n	8004cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cae:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <SysTick_Config+0x40>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cb6:	210f      	movs	r1, #15
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	f7ff ff8e 	bl	8004bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <SysTick_Config+0x40>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <SysTick_Config+0x40>)
 8004cc8:	2207      	movs	r2, #7
 8004cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	e000e010 	.word	0xe000e010

08004cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff47 	bl	8004b78 <__NVIC_SetPriorityGrouping>
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d04:	f7ff ff5c 	bl	8004bc0 <__NVIC_GetPriorityGrouping>
 8004d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff ff8e 	bl	8004c30 <NVIC_EncodePriority>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff5d 	bl	8004bdc <__NVIC_SetPriority>
}
 8004d22:	bf00      	nop
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ffb0 	bl	8004c98 <SysTick_Config>
 8004d38:	4603      	mov	r3, r0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d52:	e160      	b.n	8005016 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8152 	beq.w	8005010 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d005      	beq.n	8004d84 <HAL_GPIO_Init+0x40>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d130      	bne.n	8004de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dba:	2201      	movs	r2, #1
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0201 	and.w	r2, r3, #1
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d017      	beq.n	8004e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d123      	bne.n	8004e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	08da      	lsrs	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3208      	adds	r2, #8
 8004e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	220f      	movs	r2, #15
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	08da      	lsrs	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3208      	adds	r2, #8
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	2203      	movs	r2, #3
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0203 	and.w	r2, r3, #3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80ac 	beq.w	8005010 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb8:	4b5e      	ldr	r3, [pc, #376]	; (8005034 <HAL_GPIO_Init+0x2f0>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	4a5d      	ldr	r2, [pc, #372]	; (8005034 <HAL_GPIO_Init+0x2f0>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6193      	str	r3, [r2, #24]
 8004ec4:	4b5b      	ldr	r3, [pc, #364]	; (8005034 <HAL_GPIO_Init+0x2f0>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ed0:	4a59      	ldr	r2, [pc, #356]	; (8005038 <HAL_GPIO_Init+0x2f4>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004efa:	d025      	beq.n	8004f48 <HAL_GPIO_Init+0x204>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a4f      	ldr	r2, [pc, #316]	; (800503c <HAL_GPIO_Init+0x2f8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d01f      	beq.n	8004f44 <HAL_GPIO_Init+0x200>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a4e      	ldr	r2, [pc, #312]	; (8005040 <HAL_GPIO_Init+0x2fc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d019      	beq.n	8004f40 <HAL_GPIO_Init+0x1fc>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a4d      	ldr	r2, [pc, #308]	; (8005044 <HAL_GPIO_Init+0x300>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_GPIO_Init+0x1f8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a4c      	ldr	r2, [pc, #304]	; (8005048 <HAL_GPIO_Init+0x304>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00d      	beq.n	8004f38 <HAL_GPIO_Init+0x1f4>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a4b      	ldr	r2, [pc, #300]	; (800504c <HAL_GPIO_Init+0x308>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <HAL_GPIO_Init+0x1f0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <HAL_GPIO_Init+0x30c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_GPIO_Init+0x1ec>
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	e00c      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f30:	2307      	movs	r3, #7
 8004f32:	e00a      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f34:	2305      	movs	r3, #5
 8004f36:	e008      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	e006      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e004      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e002      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	f002 0203 	and.w	r2, r2, #3
 8004f50:	0092      	lsls	r2, r2, #2
 8004f52:	4093      	lsls	r3, r2
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f5a:	4937      	ldr	r1, [pc, #220]	; (8005038 <HAL_GPIO_Init+0x2f4>)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	3302      	adds	r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f68:	4b3a      	ldr	r3, [pc, #232]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f8c:	4a31      	ldr	r2, [pc, #196]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004fb6:	4a27      	ldr	r2, [pc, #156]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <HAL_GPIO_Init+0x310>)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3301      	adds	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f ae97 	bne.w	8004d54 <HAL_GPIO_Init+0x10>
  }
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40021000 	.word	0x40021000
 8005038:	40010000 	.word	0x40010000
 800503c:	48000400 	.word	0x48000400
 8005040:	48000800 	.word	0x48000800
 8005044:	48000c00 	.word	0x48000c00
 8005048:	48001000 	.word	0x48001000
 800504c:	48001400 	.word	0x48001400
 8005050:	48001800 	.word	0x48001800
 8005054:	40010400 	.word	0x40010400

08005058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
 8005064:	4613      	mov	r3, r2
 8005066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005068:	787b      	ldrb	r3, [r7, #1]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005074:	e002      	b.n	800507c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800508e:	af00      	add	r7, sp, #0
 8005090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005098:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800509a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800509e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f001 b83a 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 816f 	beq.w	80053a2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80050c4:	4bb5      	ldr	r3, [pc, #724]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d00c      	beq.n	80050ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050d0:	4bb2      	ldr	r3, [pc, #712]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d15c      	bne.n	8005196 <HAL_RCC_OscConfig+0x10e>
 80050dc:	4baf      	ldr	r3, [pc, #700]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d155      	bne.n	8005196 <HAL_RCC_OscConfig+0x10e>
 80050ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_RCC_OscConfig+0x94>
 8005116:	4ba1      	ldr	r3, [pc, #644]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e015      	b.n	8005148 <HAL_RCC_OscConfig+0xc0>
 800511c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005120:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005134:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005138:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005144:	4b95      	ldr	r3, [pc, #596]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800514c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005150:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005154:	fa92 f2a2 	rbit	r2, r2
 8005158:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800515c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005160:	fab2 f282 	clz	r2, r2
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	f042 0220 	orr.w	r2, r2, #32
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	f002 021f 	and.w	r2, r2, #31
 8005170:	2101      	movs	r1, #1
 8005172:	fa01 f202 	lsl.w	r2, r1, r2
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8111 	beq.w	80053a0 <HAL_RCC_OscConfig+0x318>
 800517e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005182:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 8108 	bne.w	80053a0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f000 bfc6 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800519a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x12e>
 80051a8:	4b7c      	ldr	r3, [pc, #496]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a7b      	ldr	r2, [pc, #492]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e036      	b.n	8005224 <HAL_RCC_OscConfig+0x19c>
 80051b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x158>
 80051c6:	4b75      	ldr	r3, [pc, #468]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a74      	ldr	r2, [pc, #464]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b72      	ldr	r3, [pc, #456]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a71      	ldr	r2, [pc, #452]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e021      	b.n	8005224 <HAL_RCC_OscConfig+0x19c>
 80051e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0x184>
 80051f2:	4b6a      	ldr	r3, [pc, #424]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a69      	ldr	r2, [pc, #420]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80051f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4b67      	ldr	r3, [pc, #412]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a66      	ldr	r2, [pc, #408]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0x19c>
 800520c:	4b63      	ldr	r3, [pc, #396]	; (800539c <HAL_RCC_OscConfig+0x314>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a62      	ldr	r2, [pc, #392]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b60      	ldr	r3, [pc, #384]	; (800539c <HAL_RCC_OscConfig+0x314>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5f      	ldr	r2, [pc, #380]	; (800539c <HAL_RCC_OscConfig+0x314>)
 800521e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005222:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d059      	beq.n	80052e8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7ff fc70 	bl	8004b18 <HAL_GetTick>
 8005238:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523c:	e00a      	b.n	8005254 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800523e:	f7ff fc6b 	bl	8004b18 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d902      	bls.n	8005254 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	f000 bf67 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
 8005254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005258:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005260:	fa93 f3a3 	rbit	r3, r3
 8005264:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005268:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526c:	fab3 f383 	clz	r3, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d102      	bne.n	8005286 <HAL_RCC_OscConfig+0x1fe>
 8005280:	4b46      	ldr	r3, [pc, #280]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	e015      	b.n	80052b2 <HAL_RCC_OscConfig+0x22a>
 8005286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800528a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005292:	fa93 f3a3 	rbit	r3, r3
 8005296:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800529a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800529e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80052a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80052ae:	4b3b      	ldr	r3, [pc, #236]	; (800539c <HAL_RCC_OscConfig+0x314>)
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052b6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80052ba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80052be:	fa92 f2a2 	rbit	r2, r2
 80052c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80052c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80052ca:	fab2 f282 	clz	r2, r2
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	f042 0220 	orr.w	r2, r2, #32
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	f002 021f 	and.w	r2, r2, #31
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f202 	lsl.w	r2, r1, r2
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0ab      	beq.n	800523e <HAL_RCC_OscConfig+0x1b6>
 80052e6:	e05c      	b.n	80053a2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7ff fc16 	bl	8004b18 <HAL_GetTick>
 80052ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f2:	f7ff fc11 	bl	8004b18 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d902      	bls.n	8005308 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	f000 bf0d 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
 8005308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800530c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800531c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d102      	bne.n	800533a <HAL_RCC_OscConfig+0x2b2>
 8005334:	4b19      	ldr	r3, [pc, #100]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	e015      	b.n	8005366 <HAL_RCC_OscConfig+0x2de>
 800533a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800533e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005346:	fa93 f3a3 	rbit	r3, r3
 800534a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800534e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005352:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005356:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_RCC_OscConfig+0x314>)
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800536a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800536e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005372:	fa92 f2a2 	rbit	r2, r2
 8005376:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800537a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800537e:	fab2 f282 	clz	r2, r2
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f002 021f 	and.w	r2, r2, #31
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ab      	bne.n	80052f2 <HAL_RCC_OscConfig+0x26a>
 800539a:	e002      	b.n	80053a2 <HAL_RCC_OscConfig+0x31a>
 800539c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 817f 	beq.w	80056b6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80053b8:	4ba7      	ldr	r3, [pc, #668]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00c      	beq.n	80053de <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053c4:	4ba4      	ldr	r3, [pc, #656]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d173      	bne.n	80054b8 <HAL_RCC_OscConfig+0x430>
 80053d0:	4ba1      	ldr	r3, [pc, #644]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d16c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x430>
 80053de:	2302      	movs	r3, #2
 80053e0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80053f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f4:	fab3 f383 	clz	r3, r3
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d102      	bne.n	800540e <HAL_RCC_OscConfig+0x386>
 8005408:	4b93      	ldr	r3, [pc, #588]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	e013      	b.n	8005436 <HAL_RCC_OscConfig+0x3ae>
 800540e:	2302      	movs	r3, #2
 8005410:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005418:	fa93 f3a3 	rbit	r3, r3
 800541c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005420:	2302      	movs	r3, #2
 8005422:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005426:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005432:	4b89      	ldr	r3, [pc, #548]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2202      	movs	r2, #2
 8005438:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800543c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005440:	fa92 f2a2 	rbit	r2, r2
 8005444:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005448:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800544c:	fab2 f282 	clz	r2, r2
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	f042 0220 	orr.w	r2, r2, #32
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	f002 021f 	and.w	r2, r2, #31
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f202 	lsl.w	r2, r1, r2
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCC_OscConfig+0x3f6>
 8005468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800546c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d002      	beq.n	800547e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f000 be52 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547e:	4b76      	ldr	r3, [pc, #472]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800548a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	21f8      	movs	r1, #248	; 0xf8
 8005494:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800549c:	fa91 f1a1 	rbit	r1, r1
 80054a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80054a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80054a8:	fab1 f181 	clz	r1, r1
 80054ac:	b2c9      	uxtb	r1, r1
 80054ae:	408b      	lsls	r3, r1
 80054b0:	4969      	ldr	r1, [pc, #420]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	e0fe      	b.n	80056b6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8088 	beq.w	80055da <HAL_RCC_OscConfig+0x552>
 80054ca:	2301      	movs	r3, #1
 80054cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80054d4:	fa93 f3a3 	rbit	r3, r3
 80054d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80054dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	461a      	mov	r2, r3
 80054f2:	2301      	movs	r3, #1
 80054f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7ff fb0f 	bl	8004b18 <HAL_GetTick>
 80054fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005500:	f7ff fb0a 	bl	8004b18 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d902      	bls.n	8005516 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	f000 be06 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
 8005516:	2302      	movs	r3, #2
 8005518:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005528:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d102      	bne.n	8005546 <HAL_RCC_OscConfig+0x4be>
 8005540:	4b45      	ldr	r3, [pc, #276]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	e013      	b.n	800556e <HAL_RCC_OscConfig+0x4e6>
 8005546:	2302      	movs	r3, #2
 8005548:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005558:	2302      	movs	r3, #2
 800555a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800555e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800556a:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2202      	movs	r2, #2
 8005570:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005574:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005578:	fa92 f2a2 	rbit	r2, r2
 800557c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005580:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005584:	fab2 f282 	clz	r2, r2
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	f042 0220 	orr.w	r2, r2, #32
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	f002 021f 	and.w	r2, r2, #31
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f202 	lsl.w	r2, r1, r2
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0af      	beq.n	8005500 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a0:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	21f8      	movs	r1, #248	; 0xf8
 80055b6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ba:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80055be:	fa91 f1a1 	rbit	r1, r1
 80055c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80055c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80055ca:	fab1 f181 	clz	r1, r1
 80055ce:	b2c9      	uxtb	r1, r1
 80055d0:	408b      	lsls	r3, r1
 80055d2:	4921      	ldr	r1, [pc, #132]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]
 80055d8:	e06d      	b.n	80056b6 <HAL_RCC_OscConfig+0x62e>
 80055da:	2301      	movs	r3, #1
 80055dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80055e4:	fa93 f3a3 	rbit	r3, r3
 80055e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80055ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f0:	fab3 f383 	clz	r3, r3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005606:	f7ff fa87 	bl	8004b18 <HAL_GetTick>
 800560a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005610:	f7ff fa82 	bl	8004b18 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d902      	bls.n	8005626 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	f000 bd7e 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
 8005626:	2302      	movs	r3, #2
 8005628:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005630:	fa93 f3a3 	rbit	r3, r3
 8005634:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005638:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <HAL_RCC_OscConfig+0x5d4>
 8005650:	4b01      	ldr	r3, [pc, #4]	; (8005658 <HAL_RCC_OscConfig+0x5d0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e016      	b.n	8005684 <HAL_RCC_OscConfig+0x5fc>
 8005656:	bf00      	nop
 8005658:	40021000 	.word	0x40021000
 800565c:	2302      	movs	r3, #2
 800565e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800566e:	2302      	movs	r3, #2
 8005670:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005674:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005678:	fa93 f3a3 	rbit	r3, r3
 800567c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005680:	4bbf      	ldr	r3, [pc, #764]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2202      	movs	r2, #2
 8005686:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800568a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800568e:	fa92 f2a2 	rbit	r2, r2
 8005692:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005696:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800569a:	fab2 f282 	clz	r2, r2
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	f042 0220 	orr.w	r2, r2, #32
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	f002 021f 	and.w	r2, r2, #31
 80056aa:	2101      	movs	r1, #1
 80056ac:	fa01 f202 	lsl.w	r2, r1, r2
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ac      	bne.n	8005610 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8113 	beq.w	80058f2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d07c      	beq.n	80057d6 <HAL_RCC_OscConfig+0x74e>
 80056dc:	2301      	movs	r3, #1
 80056de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e6:	fa93 f3a3 	rbit	r3, r3
 80056ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80056ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f2:	fab3 f383 	clz	r3, r3
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	4ba2      	ldr	r3, [pc, #648]	; (8005984 <HAL_RCC_OscConfig+0x8fc>)
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	461a      	mov	r2, r3
 8005702:	2301      	movs	r3, #1
 8005704:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005706:	f7ff fa07 	bl	8004b18 <HAL_GetTick>
 800570a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	e00a      	b.n	8005726 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005710:	f7ff fa02 	bl	8004b18 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d902      	bls.n	8005726 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	f000 bcfe 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
 8005726:	2302      	movs	r3, #2
 8005728:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005730:	fa93 f2a3 	rbit	r2, r3
 8005734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005738:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005746:	2202      	movs	r2, #2
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800574e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005766:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800576a:	2202      	movs	r2, #2
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005772:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005780:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005784:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005786:	4b7e      	ldr	r3, [pc, #504]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 8005788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005792:	2102      	movs	r1, #2
 8005794:	6019      	str	r1, [r3, #0]
 8005796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800579a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	fa93 f1a3 	rbit	r1, r3
 80057a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057ac:	6019      	str	r1, [r3, #0]
  return result;
 80057ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	fab3 f383 	clz	r3, r3
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d09d      	beq.n	8005710 <HAL_RCC_OscConfig+0x688>
 80057d4:	e08d      	b.n	80058f2 <HAL_RCC_OscConfig+0x86a>
 80057d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	fa93 f2a3 	rbit	r2, r3
 80057f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80057f8:	601a      	str	r2, [r3, #0]
  return result;
 80057fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005802:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005804:	fab3 f383 	clz	r3, r3
 8005808:	b2db      	uxtb	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	4b5d      	ldr	r3, [pc, #372]	; (8005984 <HAL_RCC_OscConfig+0x8fc>)
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	461a      	mov	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005818:	f7ff f97e 	bl	8004b18 <HAL_GetTick>
 800581c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005822:	f7ff f979 	bl	8004b18 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d902      	bls.n	8005838 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	f000 bc75 	b.w	8006122 <HAL_RCC_OscConfig+0x109a>
 8005838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800583c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005840:	2202      	movs	r2, #2
 8005842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005848:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	fa93 f2a3 	rbit	r2, r3
 8005852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005856:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005864:	2202      	movs	r2, #2
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800586c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	fa93 f2a3 	rbit	r2, r3
 8005876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005884:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005888:	2202      	movs	r2, #2
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005890:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	fa93 f2a3 	rbit	r2, r3
 800589a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800589e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b36      	ldr	r3, [pc, #216]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 80058a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058b0:	2102      	movs	r1, #2
 80058b2:	6019      	str	r1, [r3, #0]
 80058b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	fa93 f1a3 	rbit	r1, r3
 80058c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058ca:	6019      	str	r1, [r3, #0]
  return result;
 80058cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	fab3 f383 	clz	r3, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d197      	bne.n	8005822 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 81a5 	beq.w	8005c52 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005908:	2300      	movs	r3, #0
 800590a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590e:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d116      	bne.n	8005948 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591a:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005924:	61d3      	str	r3, [r2, #28]
 8005926:	4b16      	ldr	r3, [pc, #88]	; (8005980 <HAL_RCC_OscConfig+0x8f8>)
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800592e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800593c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005940:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <HAL_RCC_OscConfig+0x900>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d121      	bne.n	8005998 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <HAL_RCC_OscConfig+0x900>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <HAL_RCC_OscConfig+0x900>)
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005960:	f7ff f8da 	bl	8004b18 <HAL_GetTick>
 8005964:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005968:	e010      	b.n	800598c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7ff f8d5 	bl	8004b18 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b64      	cmp	r3, #100	; 0x64
 8005978:	d908      	bls.n	800598c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e3d1      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
 8005984:	10908120 	.word	0x10908120
 8005988:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598c:	4b8d      	ldr	r3, [pc, #564]	; (8005bc4 <HAL_RCC_OscConfig+0xb3c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0e8      	beq.n	800596a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800599c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d106      	bne.n	80059b6 <HAL_RCC_OscConfig+0x92e>
 80059a8:	4b87      	ldr	r3, [pc, #540]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	4a86      	ldr	r2, [pc, #536]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6213      	str	r3, [r2, #32]
 80059b4:	e035      	b.n	8005a22 <HAL_RCC_OscConfig+0x99a>
 80059b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10c      	bne.n	80059e0 <HAL_RCC_OscConfig+0x958>
 80059c6:	4b80      	ldr	r3, [pc, #512]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	4a7f      	ldr	r2, [pc, #508]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	6213      	str	r3, [r2, #32]
 80059d2:	4b7d      	ldr	r3, [pc, #500]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4a7c      	ldr	r2, [pc, #496]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059d8:	f023 0304 	bic.w	r3, r3, #4
 80059dc:	6213      	str	r3, [r2, #32]
 80059de:	e020      	b.n	8005a22 <HAL_RCC_OscConfig+0x99a>
 80059e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b05      	cmp	r3, #5
 80059ee:	d10c      	bne.n	8005a0a <HAL_RCC_OscConfig+0x982>
 80059f0:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	4a74      	ldr	r2, [pc, #464]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059f6:	f043 0304 	orr.w	r3, r3, #4
 80059fa:	6213      	str	r3, [r2, #32]
 80059fc:	4b72      	ldr	r3, [pc, #456]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a71      	ldr	r2, [pc, #452]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6213      	str	r3, [r2, #32]
 8005a08:	e00b      	b.n	8005a22 <HAL_RCC_OscConfig+0x99a>
 8005a0a:	4b6f      	ldr	r3, [pc, #444]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4a6e      	ldr	r2, [pc, #440]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	6213      	str	r3, [r2, #32]
 8005a16:	4b6c      	ldr	r3, [pc, #432]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	4a6b      	ldr	r2, [pc, #428]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005a1c:	f023 0304 	bic.w	r3, r3, #4
 8005a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8081 	beq.w	8005b36 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a34:	f7ff f870 	bl	8004b18 <HAL_GetTick>
 8005a38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3c:	e00b      	b.n	8005a56 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f7ff f86b 	bl	8004b18 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e365      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
 8005a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a5e:	2202      	movs	r2, #2
 8005a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	fa93 f2a3 	rbit	r2, r3
 8005a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a7e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005a82:	2202      	movs	r2, #2
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	fa93 f2a3 	rbit	r2, r3
 8005a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005a9c:	601a      	str	r2, [r3, #0]
  return result;
 8005a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005aa2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005aa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa8:	fab3 f383 	clz	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f043 0302 	orr.w	r3, r3, #2
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d102      	bne.n	8005ac2 <HAL_RCC_OscConfig+0xa3a>
 8005abc:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	e013      	b.n	8005aea <HAL_RCC_OscConfig+0xa62>
 8005ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005aca:	2202      	movs	r2, #2
 8005acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fa93 f2a3 	rbit	r2, r3
 8005adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ae0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005aee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005af2:	2102      	movs	r1, #2
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005afa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	fa92 f1a2 	rbit	r1, r2
 8005b04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b08:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005b0c:	6011      	str	r1, [r2, #0]
  return result;
 8005b0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b12:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	fab2 f282 	clz	r2, r2
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	f002 021f 	and.w	r2, r2, #31
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d084      	beq.n	8005a3e <HAL_RCC_OscConfig+0x9b6>
 8005b34:	e083      	b.n	8005c3e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b36:	f7fe ffef 	bl	8004b18 <HAL_GetTick>
 8005b3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fe ffea 	bl	8004b18 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e2e4      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
 8005b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b5c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005b60:	2202      	movs	r2, #2
 8005b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b68:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	fa93 f2a3 	rbit	r2, r3
 8005b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b80:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005b84:	2202      	movs	r2, #2
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b8c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	fa93 f2a3 	rbit	r2, r3
 8005b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005b9e:	601a      	str	r2, [r3, #0]
  return result;
 8005ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ba4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005ba8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCC_OscConfig+0xb44>
 8005bbe:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <HAL_RCC_OscConfig+0xb40>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	e017      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb6c>
 8005bc4:	40007000 	.word	0x40007000
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bdc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	fa93 f2a3 	rbit	r2, r3
 8005be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bea:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	4bb3      	ldr	r3, [pc, #716]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005bf8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	6011      	str	r1, [r2, #0]
 8005c00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c04:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	fa92 f1a2 	rbit	r1, r2
 8005c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c12:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005c16:	6011      	str	r1, [r2, #0]
  return result;
 8005c18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c1c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	fab2 f282 	clz	r2, r2
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	f002 021f 	and.w	r2, r2, #31
 8005c32:	2101      	movs	r1, #1
 8005c34:	fa01 f202 	lsl.w	r2, r1, r2
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d180      	bne.n	8005b40 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c3e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d105      	bne.n	8005c52 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c46:	4b9e      	ldr	r3, [pc, #632]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	4a9d      	ldr	r2, [pc, #628]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c50:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 825e 	beq.w	8006120 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c64:	4b96      	ldr	r3, [pc, #600]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	f000 821f 	beq.w	80060b0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	f040 8170 	bne.w	8005f64 <HAL_RCC_OscConfig+0xedc>
 8005c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c88:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c96:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	fa93 f2a3 	rbit	r2, r3
 8005ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ca4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005ca8:	601a      	str	r2, [r3, #0]
  return result;
 8005caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005cb2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb4:	fab3 f383 	clz	r3, r3
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fe ff25 	bl	8004b18 <HAL_GetTick>
 8005cce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd2:	e009      	b.n	8005ce8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fe ff20 	bl	8004b18 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e21c      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
 8005ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cfa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	fa93 f2a3 	rbit	r2, r3
 8005d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d0c:	601a      	str	r2, [r3, #0]
  return result;
 8005d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d12:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCC_OscConfig+0xcaa>
 8005d2c:	4b64      	ldr	r3, [pc, #400]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	e027      	b.n	8005d82 <HAL_RCC_OscConfig+0xcfa>
 8005d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d36:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d44:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	fa93 f2a3 	rbit	r2, r3
 8005d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d5c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d6a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	fa93 f2a3 	rbit	r2, r3
 8005d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d78:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	4b50      	ldr	r3, [pc, #320]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005d86:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d8e:	6011      	str	r1, [r2, #0]
 8005d90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005d94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	fa92 f1a2 	rbit	r1, r2
 8005d9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005da2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005da6:	6011      	str	r1, [r2, #0]
  return result;
 8005da8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005dac:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	fab2 f282 	clz	r2, r2
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	f042 0220 	orr.w	r2, r2, #32
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	f002 021f 	and.w	r2, r2, #31
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d182      	bne.n	8005cd4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dce:	4b3c      	ldr	r3, [pc, #240]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	f023 020f 	bic.w	r2, r3, #15
 8005dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	4937      	ldr	r1, [pc, #220]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005de8:	4b35      	ldr	r3, [pc, #212]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005df4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a19      	ldr	r1, [r3, #32]
 8005dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	492d      	ldr	r1, [pc, #180]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	604b      	str	r3, [r1, #4]
 8005e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e14:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e22:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	fa93 f2a3 	rbit	r2, r3
 8005e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e34:	601a      	str	r2, [r3, #0]
  return result;
 8005e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e3a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e3e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e40:	fab3 f383 	clz	r3, r3
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	461a      	mov	r2, r3
 8005e52:	2301      	movs	r3, #1
 8005e54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fe fe5f 	bl	8004b18 <HAL_GetTick>
 8005e5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e5e:	e009      	b.n	8005e74 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fe fe5a 	bl	8004b18 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e156      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
 8005e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e78:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e86:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	fa93 f2a3 	rbit	r2, r3
 8005e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e98:	601a      	str	r2, [r3, #0]
  return result;
 8005e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005ea2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ea4:	fab3 f383 	clz	r3, r3
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d105      	bne.n	8005ec4 <HAL_RCC_OscConfig+0xe3c>
 8005eb8:	4b01      	ldr	r3, [pc, #4]	; (8005ec0 <HAL_RCC_OscConfig+0xe38>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	e02a      	b.n	8005f14 <HAL_RCC_OscConfig+0xe8c>
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ec8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ed6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	fa93 f2a3 	rbit	r2, r3
 8005ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ee4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005efc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	fa93 f2a3 	rbit	r2, r3
 8005f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f0a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	4b86      	ldr	r3, [pc, #536]	; (800612c <HAL_RCC_OscConfig+0x10a4>)
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f20:	6011      	str	r1, [r2, #0]
 8005f22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	fa92 f1a2 	rbit	r1, r2
 8005f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f34:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005f38:	6011      	str	r1, [r2, #0]
  return result;
 8005f3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f3e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	fab2 f282 	clz	r2, r2
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	f042 0220 	orr.w	r2, r2, #32
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	f002 021f 	and.w	r2, r2, #31
 8005f54:	2101      	movs	r1, #1
 8005f56:	fa01 f202 	lsl.w	r2, r1, r2
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f43f af7f 	beq.w	8005e60 <HAL_RCC_OscConfig+0xdd8>
 8005f62:	e0dd      	b.n	8006120 <HAL_RCC_OscConfig+0x1098>
 8005f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	fa93 f2a3 	rbit	r2, r3
 8005f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f88:	601a      	str	r2, [r3, #0]
  return result;
 8005f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f8e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f92:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005faa:	f7fe fdb5 	bl	8004b18 <HAL_GetTick>
 8005fae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb2:	e009      	b.n	8005fc8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fe fdb0 	bl	8004b18 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e0ac      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
 8005fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fcc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	fa93 f2a3 	rbit	r2, r3
 8005fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fe8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005fec:	601a      	str	r2, [r3, #0]
  return result;
 8005fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ff2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005ff6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ff8:	fab3 f383 	clz	r3, r3
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d102      	bne.n	8006012 <HAL_RCC_OscConfig+0xf8a>
 800600c:	4b47      	ldr	r3, [pc, #284]	; (800612c <HAL_RCC_OscConfig+0x10a4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	e027      	b.n	8006062 <HAL_RCC_OscConfig+0xfda>
 8006012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006016:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800601a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800601e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006024:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	fa93 f2a3 	rbit	r2, r3
 800602e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006032:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800603c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800604a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	fa93 f2a3 	rbit	r2, r3
 8006054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006058:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	4b33      	ldr	r3, [pc, #204]	; (800612c <HAL_RCC_OscConfig+0x10a4>)
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006066:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800606a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800606e:	6011      	str	r1, [r2, #0]
 8006070:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006074:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	fa92 f1a2 	rbit	r1, r2
 800607e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006082:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006086:	6011      	str	r1, [r2, #0]
  return result;
 8006088:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800608c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	fab2 f282 	clz	r2, r2
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	f042 0220 	orr.w	r2, r2, #32
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	f002 021f 	and.w	r2, r2, #31
 80060a2:	2101      	movs	r1, #1
 80060a4:	fa01 f202 	lsl.w	r2, r1, r2
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d182      	bne.n	8005fb4 <HAL_RCC_OscConfig+0xf2c>
 80060ae:	e037      	b.n	8006120 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e02e      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_RCC_OscConfig+0x10a4>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80060cc:	4b17      	ldr	r3, [pc, #92]	; (800612c <HAL_RCC_OscConfig+0x10a4>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80060d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80060d8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80060dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d117      	bne.n	800611c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80060ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80060f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80060f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006100:	429a      	cmp	r2, r3
 8006102:	d10b      	bne.n	800611c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006110:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006118:	429a      	cmp	r2, r3
 800611a:	d001      	beq.n	8006120 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000

08006130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b09e      	sub	sp, #120	; 0x78
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e162      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006148:	4b90      	ldr	r3, [pc, #576]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d910      	bls.n	8006178 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006156:	4b8d      	ldr	r3, [pc, #564]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 0207 	bic.w	r2, r3, #7
 800615e:	498b      	ldr	r1, [pc, #556]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4313      	orrs	r3, r2
 8006164:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	4b89      	ldr	r3, [pc, #548]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e14a      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d008      	beq.n	8006196 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006184:	4b82      	ldr	r3, [pc, #520]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	497f      	ldr	r1, [pc, #508]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80dc 	beq.w	800635c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d13c      	bne.n	8006226 <HAL_RCC_ClockConfig+0xf6>
 80061ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061b4:	fa93 f3a3 	rbit	r3, r3
 80061b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061bc:	fab3 f383 	clz	r3, r3
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d102      	bne.n	80061d6 <HAL_RCC_ClockConfig+0xa6>
 80061d0:	4b6f      	ldr	r3, [pc, #444]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	e00f      	b.n	80061f6 <HAL_RCC_ClockConfig+0xc6>
 80061d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061de:	fa93 f3a3 	rbit	r3, r3
 80061e2:	667b      	str	r3, [r7, #100]	; 0x64
 80061e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061e8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f2:	4b67      	ldr	r3, [pc, #412]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80061fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061fe:	fa92 f2a2 	rbit	r2, r2
 8006202:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006206:	fab2 f282 	clz	r2, r2
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	f042 0220 	orr.w	r2, r2, #32
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	f002 021f 	and.w	r2, r2, #31
 8006216:	2101      	movs	r1, #1
 8006218:	fa01 f202 	lsl.w	r2, r1, r2
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d17b      	bne.n	800631a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0f3      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d13c      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x178>
 800622e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006232:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006236:	fa93 f3a3 	rbit	r3, r3
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623e:	fab3 f383 	clz	r3, r3
 8006242:	b2db      	uxtb	r3, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	b2db      	uxtb	r3, r3
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d102      	bne.n	8006258 <HAL_RCC_ClockConfig+0x128>
 8006252:	4b4f      	ldr	r3, [pc, #316]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	e00f      	b.n	8006278 <HAL_RCC_ClockConfig+0x148>
 8006258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006260:	fa93 f3a3 	rbit	r3, r3
 8006264:	647b      	str	r3, [r7, #68]	; 0x44
 8006266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800626a:	643b      	str	r3, [r7, #64]	; 0x40
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	fa93 f3a3 	rbit	r3, r3
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006274:	4b46      	ldr	r3, [pc, #280]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800627c:	63ba      	str	r2, [r7, #56]	; 0x38
 800627e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006280:	fa92 f2a2 	rbit	r2, r2
 8006284:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006288:	fab2 f282 	clz	r2, r2
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	f042 0220 	orr.w	r2, r2, #32
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	f002 021f 	and.w	r2, r2, #31
 8006298:	2101      	movs	r1, #1
 800629a:	fa01 f202 	lsl.w	r2, r1, r2
 800629e:	4013      	ands	r3, r2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d13a      	bne.n	800631a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0b2      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
 80062a8:	2302      	movs	r3, #2
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	fa93 f3a3 	rbit	r3, r3
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b6:	fab3 f383 	clz	r3, r3
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d102      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x1a0>
 80062ca:	4b31      	ldr	r3, [pc, #196]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	e00d      	b.n	80062ec <HAL_RCC_ClockConfig+0x1bc>
 80062d0:	2302      	movs	r3, #2
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
 80062dc:	2302      	movs	r3, #2
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	fa93 f3a3 	rbit	r3, r3
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	4b29      	ldr	r3, [pc, #164]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	2202      	movs	r2, #2
 80062ee:	61ba      	str	r2, [r7, #24]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	fa92 f2a2 	rbit	r2, r2
 80062f6:	617a      	str	r2, [r7, #20]
  return result;
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	fab2 f282 	clz	r2, r2
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	f042 0220 	orr.w	r2, r2, #32
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	f002 021f 	and.w	r2, r2, #31
 800630a:	2101      	movs	r1, #1
 800630c:	fa01 f202 	lsl.w	r2, r1, r2
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e079      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800631a:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f023 0203 	bic.w	r2, r3, #3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	491a      	ldr	r1, [pc, #104]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 8006328:	4313      	orrs	r3, r2
 800632a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800632c:	f7fe fbf4 	bl	8004b18 <HAL_GetTick>
 8006330:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006332:	e00a      	b.n	800634a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006334:	f7fe fbf0 	bl	8004b18 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e061      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <HAL_RCC_ClockConfig+0x260>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f003 020c 	and.w	r2, r3, #12
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	429a      	cmp	r2, r3
 800635a:	d1eb      	bne.n	8006334 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d214      	bcs.n	8006394 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636a:	4b08      	ldr	r3, [pc, #32]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 0207 	bic.w	r2, r3, #7
 8006372:	4906      	ldr	r1, [pc, #24]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800637a:	4b04      	ldr	r3, [pc, #16]	; (800638c <HAL_RCC_ClockConfig+0x25c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d005      	beq.n	8006394 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e040      	b.n	800640e <HAL_RCC_ClockConfig+0x2de>
 800638c:	40022000 	.word	0x40022000
 8006390:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <HAL_RCC_ClockConfig+0x2e8>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	491a      	ldr	r1, [pc, #104]	; (8006418 <HAL_RCC_ClockConfig+0x2e8>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <HAL_RCC_ClockConfig+0x2e8>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4912      	ldr	r1, [pc, #72]	; (8006418 <HAL_RCC_ClockConfig+0x2e8>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063d2:	f000 f829 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063d6:	4601      	mov	r1, r0
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <HAL_RCC_ClockConfig+0x2e8>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e0:	22f0      	movs	r2, #240	; 0xf0
 80063e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	fa92 f2a2 	rbit	r2, r2
 80063ea:	60fa      	str	r2, [r7, #12]
  return result;
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	fab2 f282 	clz	r2, r2
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	40d3      	lsrs	r3, r2
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <HAL_RCC_ClockConfig+0x2ec>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
 80063fa:	fa21 f303 	lsr.w	r3, r1, r3
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <HAL_RCC_ClockConfig+0x2f0>)
 8006400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <HAL_RCC_ClockConfig+0x2f4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fb42 	bl	8004a90 <HAL_InitTick>
  
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3778      	adds	r7, #120	; 0x78
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	08008328 	.word	0x08008328
 8006420:	20000000 	.word	0x20000000
 8006424:	20000010 	.word	0x20000010

08006428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	b480      	push	{r7}
 800642a:	b08b      	sub	sp, #44	; 0x2c
 800642c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006442:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 030c 	and.w	r3, r3, #12
 800644e:	2b04      	cmp	r3, #4
 8006450:	d002      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x30>
 8006452:	2b08      	cmp	r3, #8
 8006454:	d003      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x36>
 8006456:	e03f      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800645a:	623b      	str	r3, [r7, #32]
      break;
 800645c:	e03f      	b.n	80064de <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006464:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006468:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	fa92 f2a2 	rbit	r2, r2
 8006470:	607a      	str	r2, [r7, #4]
  return result;
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	fab2 f282 	clz	r2, r2
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	40d3      	lsrs	r3, r2
 800647c:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800647e:	5cd3      	ldrb	r3, [r2, r3]
 8006480:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	220f      	movs	r2, #15
 800648c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	fa92 f2a2 	rbit	r2, r2
 8006494:	60fa      	str	r2, [r7, #12]
  return result;
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	fab2 f282 	clz	r2, r2
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	40d3      	lsrs	r3, r2
 80064a0:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80064a2:	5cd3      	ldrb	r3, [r2, r3]
 80064a4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064b0:	4a0f      	ldr	r2, [pc, #60]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
 80064c0:	e007      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064c2:	4a0b      	ldr	r2, [pc, #44]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	623b      	str	r3, [r7, #32]
      break;
 80064d6:	e002      	b.n	80064de <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80064da:	623b      	str	r3, [r7, #32]
      break;
 80064dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064de:	6a3b      	ldr	r3, [r7, #32]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	372c      	adds	r7, #44	; 0x2c
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40021000 	.word	0x40021000
 80064f0:	007a1200 	.word	0x007a1200
 80064f4:	08008900 	.word	0x08008900
 80064f8:	08008910 	.word	0x08008910

080064fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <HAL_RCC_GetHCLKFreq+0x14>)
 8006502:	681b      	ldr	r3, [r3, #0]
}
 8006504:	4618      	mov	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000000 	.word	0x20000000

08006514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800651a:	f7ff ffef 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 800651e:	4601      	mov	r1, r0
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006528:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800652c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	fa92 f2a2 	rbit	r2, r2
 8006534:	603a      	str	r2, [r7, #0]
  return result;
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	fab2 f282 	clz	r2, r2
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	40d3      	lsrs	r3, r2
 8006540:	4a04      	ldr	r2, [pc, #16]	; (8006554 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006542:	5cd3      	ldrb	r3, [r2, r3]
 8006544:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40021000 	.word	0x40021000
 8006554:	08008338 	.word	0x08008338

08006558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800655e:	f7ff ffcd 	bl	80064fc <HAL_RCC_GetHCLKFreq>
 8006562:	4601      	mov	r1, r0
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800656c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006570:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	fa92 f2a2 	rbit	r2, r2
 8006578:	603a      	str	r2, [r7, #0]
  return result;
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	fab2 f282 	clz	r2, r2
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	40d3      	lsrs	r3, r2
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006586:	5cd3      	ldrb	r3, [r2, r3]
 8006588:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40021000 	.word	0x40021000
 8006598:	08008338 	.word	0x08008338

0800659c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b092      	sub	sp, #72	; 0x48
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80d4 	beq.w	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c0:	4b4e      	ldr	r3, [pc, #312]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10e      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065cc:	4b4b      	ldr	r3, [pc, #300]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	4a4a      	ldr	r2, [pc, #296]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d6:	61d3      	str	r3, [r2, #28]
 80065d8:	4b48      	ldr	r3, [pc, #288]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ea:	4b45      	ldr	r3, [pc, #276]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d118      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065f6:	4b42      	ldr	r3, [pc, #264]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a41      	ldr	r2, [pc, #260]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006600:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006602:	f7fe fa89 	bl	8004b18 <HAL_GetTick>
 8006606:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660a:	f7fe fa85 	bl	8004b18 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b64      	cmp	r3, #100	; 0x64
 8006616:	d901      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e1d6      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	4b38      	ldr	r3, [pc, #224]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f0      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006628:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8084 	beq.w	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006644:	429a      	cmp	r2, r3
 8006646:	d07c      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006648:	4b2c      	ldr	r3, [pc, #176]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	fa93 f3a3 	rbit	r3, r3
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006662:	fab3 f383 	clz	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	4b26      	ldr	r3, [pc, #152]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	461a      	mov	r2, r3
 8006672:	2301      	movs	r3, #1
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	fa93 f3a3 	rbit	r3, r3
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006686:	fab3 f383 	clz	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	461a      	mov	r2, r3
 8006696:	2300      	movs	r3, #0
 8006698:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800669a:	4a18      	ldr	r2, [pc, #96]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d04b      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066aa:	f7fe fa35 	bl	8004b18 <HAL_GetTick>
 80066ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fe fa31 	bl	8004b18 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e180      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066c8:	2302      	movs	r3, #2
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	fa93 f3a3 	rbit	r3, r3
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
 80066d4:	2302      	movs	r3, #2
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	fa93 f3a3 	rbit	r3, r3
 80066de:	61fb      	str	r3, [r7, #28]
  return result;
 80066e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d108      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80066f6:	4b01      	ldr	r3, [pc, #4]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	e00d      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80066fc:	40021000 	.word	0x40021000
 8006700:	40007000 	.word	0x40007000
 8006704:	10908100 	.word	0x10908100
 8006708:	2302      	movs	r3, #2
 800670a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	4b9a      	ldr	r3, [pc, #616]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	2202      	movs	r2, #2
 800671a:	613a      	str	r2, [r7, #16]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	fa92 f2a2 	rbit	r2, r2
 8006722:	60fa      	str	r2, [r7, #12]
  return result;
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	fab2 f282 	clz	r2, r2
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	f002 021f 	and.w	r2, r2, #31
 8006736:	2101      	movs	r1, #1
 8006738:	fa01 f202 	lsl.w	r2, r1, r2
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0b7      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006742:	4b8f      	ldr	r3, [pc, #572]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	498c      	ldr	r1, [pc, #560]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006750:	4313      	orrs	r3, r2
 8006752:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006754:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006758:	2b01      	cmp	r3, #1
 800675a:	d105      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800675c:	4b88      	ldr	r3, [pc, #544]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	4a87      	ldr	r2, [pc, #540]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006766:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006774:	4b82      	ldr	r3, [pc, #520]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	f023 0203 	bic.w	r2, r3, #3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	497f      	ldr	r1, [pc, #508]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006782:	4313      	orrs	r3, r2
 8006784:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006792:	4b7b      	ldr	r3, [pc, #492]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4978      	ldr	r1, [pc, #480]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067b0:	4b73      	ldr	r3, [pc, #460]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	4970      	ldr	r1, [pc, #448]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ce:	4b6c      	ldr	r3, [pc, #432]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f023 0210 	bic.w	r2, r3, #16
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	4969      	ldr	r1, [pc, #420]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80067ec:	4b64      	ldr	r3, [pc, #400]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f8:	4961      	ldr	r1, [pc, #388]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800680a:	4b5d      	ldr	r3, [pc, #372]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f023 0220 	bic.w	r2, r3, #32
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	495a      	ldr	r1, [pc, #360]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006818:	4313      	orrs	r3, r2
 800681a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006828:	4b55      	ldr	r3, [pc, #340]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	4952      	ldr	r1, [pc, #328]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006836:	4313      	orrs	r3, r2
 8006838:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006846:	4b4e      	ldr	r3, [pc, #312]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	494b      	ldr	r1, [pc, #300]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006854:	4313      	orrs	r3, r2
 8006856:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006864:	4b46      	ldr	r3, [pc, #280]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	4943      	ldr	r1, [pc, #268]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006872:	4313      	orrs	r3, r2
 8006874:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006882:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	493c      	ldr	r1, [pc, #240]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006890:	4313      	orrs	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068a0:	4b37      	ldr	r3, [pc, #220]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	4934      	ldr	r1, [pc, #208]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80068be:	4b30      	ldr	r3, [pc, #192]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	492d      	ldr	r1, [pc, #180]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80068dc:	4b28      	ldr	r3, [pc, #160]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	4925      	ldr	r1, [pc, #148]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80068fa:	4b21      	ldr	r3, [pc, #132]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	491e      	ldr	r1, [pc, #120]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006908:	4313      	orrs	r3, r2
 800690a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	4916      	ldr	r1, [pc, #88]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006926:	4313      	orrs	r3, r2
 8006928:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	490f      	ldr	r1, [pc, #60]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006944:	4313      	orrs	r3, r2
 8006946:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006954:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	4907      	ldr	r1, [pc, #28]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00c      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	e002      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800697e:	bf00      	nop
 8006980:	40021000 	.word	0x40021000
 8006984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006986:	4913      	ldr	r1, [pc, #76]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006988:	4313      	orrs	r3, r2
 800698a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a4:	490b      	ldr	r1, [pc, #44]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80069b6:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c2:	4904      	ldr	r1, [pc, #16]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3748      	adds	r7, #72	; 0x48
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40021000 	.word	0x40021000

080069d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e049      	b.n	8006a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fd ff76 	bl	80048f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f000 f968 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d001      	beq.n	8006aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e047      	b.n	8006b30 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <HAL_TIM_Base_Start+0xb4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01d      	beq.n	8006aee <HAL_TIM_Base_Start+0x66>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aba:	d018      	beq.n	8006aee <HAL_TIM_Base_Start+0x66>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <HAL_TIM_Base_Start+0xb8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_TIM_Base_Start+0x66>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1e      	ldr	r2, [pc, #120]	; (8006b44 <HAL_TIM_Base_Start+0xbc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_TIM_Base_Start+0x66>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1c      	ldr	r2, [pc, #112]	; (8006b48 <HAL_TIM_Base_Start+0xc0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_TIM_Base_Start+0x66>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1b      	ldr	r2, [pc, #108]	; (8006b4c <HAL_TIM_Base_Start+0xc4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIM_Base_Start+0x66>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a19      	ldr	r2, [pc, #100]	; (8006b50 <HAL_TIM_Base_Start+0xc8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d115      	bne.n	8006b1a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <HAL_TIM_Base_Start+0xcc>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b06      	cmp	r3, #6
 8006afe:	d015      	beq.n	8006b2c <HAL_TIM_Base_Start+0xa4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b06:	d011      	beq.n	8006b2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	e008      	b.n	8006b2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0201 	orr.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e000      	b.n	8006b2e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40013400 	.word	0x40013400
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40015000 	.word	0x40015000
 8006b54:	00010007 	.word	0x00010007

08006b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_TIM_ConfigClockSource+0x1c>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e0b6      	b.n	8006ce2 <HAL_TIM_ConfigClockSource+0x18a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb0:	d03e      	beq.n	8006c30 <HAL_TIM_ConfigClockSource+0xd8>
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb6:	f200 8087 	bhi.w	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbe:	f000 8086 	beq.w	8006cce <HAL_TIM_ConfigClockSource+0x176>
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc6:	d87f      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006bc8:	2b70      	cmp	r3, #112	; 0x70
 8006bca:	d01a      	beq.n	8006c02 <HAL_TIM_ConfigClockSource+0xaa>
 8006bcc:	2b70      	cmp	r3, #112	; 0x70
 8006bce:	d87b      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006bd0:	2b60      	cmp	r3, #96	; 0x60
 8006bd2:	d050      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x11e>
 8006bd4:	2b60      	cmp	r3, #96	; 0x60
 8006bd6:	d877      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006bd8:	2b50      	cmp	r3, #80	; 0x50
 8006bda:	d03c      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0xfe>
 8006bdc:	2b50      	cmp	r3, #80	; 0x50
 8006bde:	d873      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d058      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0x13e>
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d86f      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006be8:	2b30      	cmp	r3, #48	; 0x30
 8006bea:	d064      	beq.n	8006cb6 <HAL_TIM_ConfigClockSource+0x15e>
 8006bec:	2b30      	cmp	r3, #48	; 0x30
 8006bee:	d86b      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d060      	beq.n	8006cb6 <HAL_TIM_ConfigClockSource+0x15e>
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d867      	bhi.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d05c      	beq.n	8006cb6 <HAL_TIM_ConfigClockSource+0x15e>
 8006bfc:	2b10      	cmp	r3, #16
 8006bfe:	d05a      	beq.n	8006cb6 <HAL_TIM_ConfigClockSource+0x15e>
 8006c00:	e062      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c12:	f000 f983 	bl	8006f1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	609a      	str	r2, [r3, #8]
      break;
 8006c2e:	e04f      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c40:	f000 f96c 	bl	8006f1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c52:	609a      	str	r2, [r3, #8]
      break;
 8006c54:	e03c      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c62:	461a      	mov	r2, r3
 8006c64:	f000 f8e0 	bl	8006e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2150      	movs	r1, #80	; 0x50
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f939 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 8006c74:	e02c      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c82:	461a      	mov	r2, r3
 8006c84:	f000 f8ff 	bl	8006e86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2160      	movs	r1, #96	; 0x60
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f929 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 8006c94:	e01c      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f000 f8c0 	bl	8006e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2140      	movs	r1, #64	; 0x40
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 f919 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 8006cb4:	e00c      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f000 f910 	bl	8006ee6 <TIM_ITRx_SetConfig>
      break;
 8006cc6:	e003      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ccc:	e000      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a42      	ldr	r2, [pc, #264]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d00f      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3f      	ldr	r2, [pc, #252]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a3e      	ldr	r2, [pc, #248]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d108      	bne.n	8006d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a31      	ldr	r2, [pc, #196]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d01b      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2e      	ldr	r2, [pc, #184]	; (8006e0c <TIM_Base_SetConfig+0x120>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d017      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2d      	ldr	r2, [pc, #180]	; (8006e10 <TIM_Base_SetConfig+0x124>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <TIM_Base_SetConfig+0x134>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <TIM_Base_SetConfig+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a25      	ldr	r2, [pc, #148]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d108      	bne.n	8006d98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a12      	ldr	r2, [pc, #72]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <TIM_Base_SetConfig+0x100>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <TIM_Base_SetConfig+0x128>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00f      	beq.n	8006dec <TIM_Base_SetConfig+0x100>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <TIM_Base_SetConfig+0x130>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00b      	beq.n	8006dec <TIM_Base_SetConfig+0x100>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <TIM_Base_SetConfig+0x134>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d007      	beq.n	8006dec <TIM_Base_SetConfig+0x100>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <TIM_Base_SetConfig+0x138>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_Base_SetConfig+0x100>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <TIM_Base_SetConfig+0x12c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d103      	bne.n	8006df4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	615a      	str	r2, [r3, #20]
}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40013400 	.word	0x40013400
 8006e18:	40015000 	.word	0x40015000
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800

08006e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f023 030a 	bic.w	r3, r3, #10
 8006e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b087      	sub	sp, #28
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f023 0210 	bic.w	r2, r3, #16
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f043 0307 	orr.w	r3, r3, #7
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	021a      	lsls	r2, r3, #8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e06d      	b.n	8007050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a30      	ldr	r2, [pc, #192]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d108      	bne.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d01d      	beq.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff0:	d018      	beq.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1a      	ldr	r2, [pc, #104]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00e      	beq.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a15      	ldr	r2, [pc, #84]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d009      	beq.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d004      	beq.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a11      	ldr	r2, [pc, #68]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d10c      	bne.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800702a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40013400 	.word	0x40013400
 8007064:	40015000 	.word	0x40015000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40014000 	.word	0x40014000

08007074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e040      	b.n	8007108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fd fc78 	bl	800498c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f82c 	bl	8007110 <UART_SetConfig>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e022      	b.n	8007108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f9f4 	bl	80074b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa7b 	bl	80075fc <UART_CheckIdleState>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4b92      	ldr	r3, [pc, #584]	; (8007384 <UART_SetConfig+0x274>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	6979      	ldr	r1, [r7, #20]
 8007144:	430b      	orrs	r3, r1
 8007146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	430a      	orrs	r2, r1
 8007180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a80      	ldr	r2, [pc, #512]	; (8007388 <UART_SetConfig+0x278>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d120      	bne.n	80071ce <UART_SetConfig+0xbe>
 800718c:	4b7f      	ldr	r3, [pc, #508]	; (800738c <UART_SetConfig+0x27c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	2b03      	cmp	r3, #3
 8007196:	d817      	bhi.n	80071c8 <UART_SetConfig+0xb8>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <UART_SetConfig+0x90>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071bd 	.word	0x080071bd
 80071a8:	080071c3 	.word	0x080071c3
 80071ac:	080071b7 	.word	0x080071b7
 80071b0:	2301      	movs	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e0b5      	b.n	8007322 <UART_SetConfig+0x212>
 80071b6:	2302      	movs	r3, #2
 80071b8:	77fb      	strb	r3, [r7, #31]
 80071ba:	e0b2      	b.n	8007322 <UART_SetConfig+0x212>
 80071bc:	2304      	movs	r3, #4
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e0af      	b.n	8007322 <UART_SetConfig+0x212>
 80071c2:	2308      	movs	r3, #8
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e0ac      	b.n	8007322 <UART_SetConfig+0x212>
 80071c8:	2310      	movs	r3, #16
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e0a9      	b.n	8007322 <UART_SetConfig+0x212>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a6f      	ldr	r2, [pc, #444]	; (8007390 <UART_SetConfig+0x280>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d124      	bne.n	8007222 <UART_SetConfig+0x112>
 80071d8:	4b6c      	ldr	r3, [pc, #432]	; (800738c <UART_SetConfig+0x27c>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071e4:	d011      	beq.n	800720a <UART_SetConfig+0xfa>
 80071e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ea:	d817      	bhi.n	800721c <UART_SetConfig+0x10c>
 80071ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f0:	d011      	beq.n	8007216 <UART_SetConfig+0x106>
 80071f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f6:	d811      	bhi.n	800721c <UART_SetConfig+0x10c>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <UART_SetConfig+0xf4>
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007200:	d006      	beq.n	8007210 <UART_SetConfig+0x100>
 8007202:	e00b      	b.n	800721c <UART_SetConfig+0x10c>
 8007204:	2300      	movs	r3, #0
 8007206:	77fb      	strb	r3, [r7, #31]
 8007208:	e08b      	b.n	8007322 <UART_SetConfig+0x212>
 800720a:	2302      	movs	r3, #2
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e088      	b.n	8007322 <UART_SetConfig+0x212>
 8007210:	2304      	movs	r3, #4
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e085      	b.n	8007322 <UART_SetConfig+0x212>
 8007216:	2308      	movs	r3, #8
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e082      	b.n	8007322 <UART_SetConfig+0x212>
 800721c:	2310      	movs	r3, #16
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e07f      	b.n	8007322 <UART_SetConfig+0x212>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a5b      	ldr	r2, [pc, #364]	; (8007394 <UART_SetConfig+0x284>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d124      	bne.n	8007276 <UART_SetConfig+0x166>
 800722c:	4b57      	ldr	r3, [pc, #348]	; (800738c <UART_SetConfig+0x27c>)
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007234:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007238:	d011      	beq.n	800725e <UART_SetConfig+0x14e>
 800723a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800723e:	d817      	bhi.n	8007270 <UART_SetConfig+0x160>
 8007240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007244:	d011      	beq.n	800726a <UART_SetConfig+0x15a>
 8007246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800724a:	d811      	bhi.n	8007270 <UART_SetConfig+0x160>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <UART_SetConfig+0x148>
 8007250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007254:	d006      	beq.n	8007264 <UART_SetConfig+0x154>
 8007256:	e00b      	b.n	8007270 <UART_SetConfig+0x160>
 8007258:	2300      	movs	r3, #0
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e061      	b.n	8007322 <UART_SetConfig+0x212>
 800725e:	2302      	movs	r3, #2
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e05e      	b.n	8007322 <UART_SetConfig+0x212>
 8007264:	2304      	movs	r3, #4
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e05b      	b.n	8007322 <UART_SetConfig+0x212>
 800726a:	2308      	movs	r3, #8
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e058      	b.n	8007322 <UART_SetConfig+0x212>
 8007270:	2310      	movs	r3, #16
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e055      	b.n	8007322 <UART_SetConfig+0x212>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a47      	ldr	r2, [pc, #284]	; (8007398 <UART_SetConfig+0x288>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d124      	bne.n	80072ca <UART_SetConfig+0x1ba>
 8007280:	4b42      	ldr	r3, [pc, #264]	; (800738c <UART_SetConfig+0x27c>)
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800728c:	d011      	beq.n	80072b2 <UART_SetConfig+0x1a2>
 800728e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007292:	d817      	bhi.n	80072c4 <UART_SetConfig+0x1b4>
 8007294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007298:	d011      	beq.n	80072be <UART_SetConfig+0x1ae>
 800729a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800729e:	d811      	bhi.n	80072c4 <UART_SetConfig+0x1b4>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <UART_SetConfig+0x19c>
 80072a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a8:	d006      	beq.n	80072b8 <UART_SetConfig+0x1a8>
 80072aa:	e00b      	b.n	80072c4 <UART_SetConfig+0x1b4>
 80072ac:	2300      	movs	r3, #0
 80072ae:	77fb      	strb	r3, [r7, #31]
 80072b0:	e037      	b.n	8007322 <UART_SetConfig+0x212>
 80072b2:	2302      	movs	r3, #2
 80072b4:	77fb      	strb	r3, [r7, #31]
 80072b6:	e034      	b.n	8007322 <UART_SetConfig+0x212>
 80072b8:	2304      	movs	r3, #4
 80072ba:	77fb      	strb	r3, [r7, #31]
 80072bc:	e031      	b.n	8007322 <UART_SetConfig+0x212>
 80072be:	2308      	movs	r3, #8
 80072c0:	77fb      	strb	r3, [r7, #31]
 80072c2:	e02e      	b.n	8007322 <UART_SetConfig+0x212>
 80072c4:	2310      	movs	r3, #16
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e02b      	b.n	8007322 <UART_SetConfig+0x212>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a33      	ldr	r2, [pc, #204]	; (800739c <UART_SetConfig+0x28c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d124      	bne.n	800731e <UART_SetConfig+0x20e>
 80072d4:	4b2d      	ldr	r3, [pc, #180]	; (800738c <UART_SetConfig+0x27c>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80072dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072e0:	d011      	beq.n	8007306 <UART_SetConfig+0x1f6>
 80072e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072e6:	d817      	bhi.n	8007318 <UART_SetConfig+0x208>
 80072e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ec:	d011      	beq.n	8007312 <UART_SetConfig+0x202>
 80072ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072f2:	d811      	bhi.n	8007318 <UART_SetConfig+0x208>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <UART_SetConfig+0x1f0>
 80072f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072fc:	d006      	beq.n	800730c <UART_SetConfig+0x1fc>
 80072fe:	e00b      	b.n	8007318 <UART_SetConfig+0x208>
 8007300:	2300      	movs	r3, #0
 8007302:	77fb      	strb	r3, [r7, #31]
 8007304:	e00d      	b.n	8007322 <UART_SetConfig+0x212>
 8007306:	2302      	movs	r3, #2
 8007308:	77fb      	strb	r3, [r7, #31]
 800730a:	e00a      	b.n	8007322 <UART_SetConfig+0x212>
 800730c:	2304      	movs	r3, #4
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e007      	b.n	8007322 <UART_SetConfig+0x212>
 8007312:	2308      	movs	r3, #8
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e004      	b.n	8007322 <UART_SetConfig+0x212>
 8007318:	2310      	movs	r3, #16
 800731a:	77fb      	strb	r3, [r7, #31]
 800731c:	e001      	b.n	8007322 <UART_SetConfig+0x212>
 800731e:	2310      	movs	r3, #16
 8007320:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732a:	d16b      	bne.n	8007404 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800732c:	7ffb      	ldrb	r3, [r7, #31]
 800732e:	2b08      	cmp	r3, #8
 8007330:	d838      	bhi.n	80073a4 <UART_SetConfig+0x294>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <UART_SetConfig+0x228>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007365 	.word	0x08007365
 8007340:	0800736d 	.word	0x0800736d
 8007344:	080073a5 	.word	0x080073a5
 8007348:	08007373 	.word	0x08007373
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073a5 	.word	0x080073a5
 8007354:	080073a5 	.word	0x080073a5
 8007358:	0800737b 	.word	0x0800737b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800735c:	f7ff f8da 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8007360:	61b8      	str	r0, [r7, #24]
        break;
 8007362:	e024      	b.n	80073ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007364:	f7ff f8f8 	bl	8006558 <HAL_RCC_GetPCLK2Freq>
 8007368:	61b8      	str	r0, [r7, #24]
        break;
 800736a:	e020      	b.n	80073ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <UART_SetConfig+0x290>)
 800736e:	61bb      	str	r3, [r7, #24]
        break;
 8007370:	e01d      	b.n	80073ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007372:	f7ff f859 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 8007376:	61b8      	str	r0, [r7, #24]
        break;
 8007378:	e019      	b.n	80073ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737e:	61bb      	str	r3, [r7, #24]
        break;
 8007380:	e015      	b.n	80073ae <UART_SetConfig+0x29e>
 8007382:	bf00      	nop
 8007384:	efff69f3 	.word	0xefff69f3
 8007388:	40013800 	.word	0x40013800
 800738c:	40021000 	.word	0x40021000
 8007390:	40004400 	.word	0x40004400
 8007394:	40004800 	.word	0x40004800
 8007398:	40004c00 	.word	0x40004c00
 800739c:	40005000 	.word	0x40005000
 80073a0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	77bb      	strb	r3, [r7, #30]
        break;
 80073ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d073      	beq.n	800749c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	005a      	lsls	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b0f      	cmp	r3, #15
 80073ce:	d916      	bls.n	80073fe <UART_SetConfig+0x2ee>
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d212      	bcs.n	80073fe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f023 030f 	bic.w	r3, r3, #15
 80073e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	89fb      	ldrh	r3, [r7, #14]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	89fa      	ldrh	r2, [r7, #14]
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	e04e      	b.n	800749c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	77bb      	strb	r3, [r7, #30]
 8007402:	e04b      	b.n	800749c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007404:	7ffb      	ldrb	r3, [r7, #31]
 8007406:	2b08      	cmp	r3, #8
 8007408:	d827      	bhi.n	800745a <UART_SetConfig+0x34a>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <UART_SetConfig+0x300>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007435 	.word	0x08007435
 8007414:	0800743d 	.word	0x0800743d
 8007418:	08007445 	.word	0x08007445
 800741c:	0800745b 	.word	0x0800745b
 8007420:	0800744b 	.word	0x0800744b
 8007424:	0800745b 	.word	0x0800745b
 8007428:	0800745b 	.word	0x0800745b
 800742c:	0800745b 	.word	0x0800745b
 8007430:	08007453 	.word	0x08007453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007434:	f7ff f86e 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8007438:	61b8      	str	r0, [r7, #24]
        break;
 800743a:	e013      	b.n	8007464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800743c:	f7ff f88c 	bl	8006558 <HAL_RCC_GetPCLK2Freq>
 8007440:	61b8      	str	r0, [r7, #24]
        break;
 8007442:	e00f      	b.n	8007464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <UART_SetConfig+0x3a4>)
 8007446:	61bb      	str	r3, [r7, #24]
        break;
 8007448:	e00c      	b.n	8007464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800744a:	f7fe ffed 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 800744e:	61b8      	str	r0, [r7, #24]
        break;
 8007450:	e008      	b.n	8007464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007456:	61bb      	str	r3, [r7, #24]
        break;
 8007458:	e004      	b.n	8007464 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	77bb      	strb	r3, [r7, #30]
        break;
 8007462:	bf00      	nop
    }

    if (pclk != 0U)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d018      	beq.n	800749c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	085a      	lsrs	r2, r3, #1
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	441a      	add	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	fbb2 f3f3 	udiv	r3, r2, r3
 800747c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	2b0f      	cmp	r3, #15
 8007482:	d909      	bls.n	8007498 <UART_SetConfig+0x388>
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748a:	d205      	bcs.n	8007498 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	b29a      	uxth	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e001      	b.n	800749c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	007a1200 	.word	0x007a1200

080074b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01a      	beq.n	80075ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075b6:	d10a      	bne.n	80075ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b098      	sub	sp, #96	; 0x60
 8007600:	af02      	add	r7, sp, #8
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800760c:	f7fd fa84 	bl	8004b18 <HAL_GetTick>
 8007610:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b08      	cmp	r3, #8
 800761e:	d12e      	bne.n	800767e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007628:	2200      	movs	r2, #0
 800762a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f88c 	bl	800774c <UART_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d021      	beq.n	800767e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764e:	653b      	str	r3, [r7, #80]	; 0x50
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007658:	647b      	str	r3, [r7, #68]	; 0x44
 800765a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800765e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e062      	b.n	8007744 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b04      	cmp	r3, #4
 800768a:	d149      	bne.n	8007720 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007694:	2200      	movs	r2, #0
 8007696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f856 	bl	800774c <UART_WaitOnFlagUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d03c      	beq.n	8007720 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	623b      	str	r3, [r7, #32]
   return(result);
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30
 80076c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e6      	bne.n	80076a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f8:	61fa      	str	r2, [r7, #28]
 80076fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	617b      	str	r3, [r7, #20]
   return(result);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e5      	bne.n	80076d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e011      	b.n	8007744 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3758      	adds	r7, #88	; 0x58
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775c:	e049      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d045      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007766:	f7fd f9d7 	bl	8004b18 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <UART_WaitOnFlagUntilTimeout+0x30>
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e048      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d031      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b08      	cmp	r3, #8
 800779a:	d110      	bne.n	80077be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2208      	movs	r2, #8
 80077a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f838 	bl	800781a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2208      	movs	r2, #8
 80077ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e029      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077cc:	d111      	bne.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f81e 	bl	800781a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e00f      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4013      	ands	r3, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	bf0c      	ite	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	2300      	movne	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	429a      	cmp	r2, r3
 800780e:	d0a6      	beq.n	800775e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781a:	b480      	push	{r7}
 800781c:	b095      	sub	sp, #84	; 0x54
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007840:	643b      	str	r3, [r7, #64]	; 0x40
 8007842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	61fb      	str	r3, [r7, #28]
   return(result);
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	64bb      	str	r3, [r7, #72]	; 0x48
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e5      	bne.n	8007854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788c:	2b01      	cmp	r3, #1
 800788e:	d118      	bne.n	80078c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60bb      	str	r3, [r7, #8]
   return(result);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f023 0310 	bic.w	r3, r3, #16
 80078a4:	647b      	str	r3, [r7, #68]	; 0x44
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	613b      	str	r3, [r7, #16]
   return(result);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078d6:	bf00      	nop
 80078d8:	3754      	adds	r7, #84	; 0x54
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <memset>:
 80078e2:	4402      	add	r2, r0
 80078e4:	4603      	mov	r3, r0
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d100      	bne.n	80078ec <memset+0xa>
 80078ea:	4770      	bx	lr
 80078ec:	f803 1b01 	strb.w	r1, [r3], #1
 80078f0:	e7f9      	b.n	80078e6 <memset+0x4>
	...

080078f4 <__libc_init_array>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d0d      	ldr	r5, [pc, #52]	; (800792c <__libc_init_array+0x38>)
 80078f8:	4c0d      	ldr	r4, [pc, #52]	; (8007930 <__libc_init_array+0x3c>)
 80078fa:	1b64      	subs	r4, r4, r5
 80078fc:	10a4      	asrs	r4, r4, #2
 80078fe:	2600      	movs	r6, #0
 8007900:	42a6      	cmp	r6, r4
 8007902:	d109      	bne.n	8007918 <__libc_init_array+0x24>
 8007904:	4d0b      	ldr	r5, [pc, #44]	; (8007934 <__libc_init_array+0x40>)
 8007906:	4c0c      	ldr	r4, [pc, #48]	; (8007938 <__libc_init_array+0x44>)
 8007908:	f000 f818 	bl	800793c <_init>
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	2600      	movs	r6, #0
 8007912:	42a6      	cmp	r6, r4
 8007914:	d105      	bne.n	8007922 <__libc_init_array+0x2e>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	f855 3b04 	ldr.w	r3, [r5], #4
 800791c:	4798      	blx	r3
 800791e:	3601      	adds	r6, #1
 8007920:	e7ee      	b.n	8007900 <__libc_init_array+0xc>
 8007922:	f855 3b04 	ldr.w	r3, [r5], #4
 8007926:	4798      	blx	r3
 8007928:	3601      	adds	r6, #1
 800792a:	e7f2      	b.n	8007912 <__libc_init_array+0x1e>
 800792c:	08008920 	.word	0x08008920
 8007930:	08008920 	.word	0x08008920
 8007934:	08008920 	.word	0x08008920
 8007938:	08008924 	.word	0x08008924

0800793c <_init>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	bf00      	nop
 8007940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007942:	bc08      	pop	{r3}
 8007944:	469e      	mov	lr, r3
 8007946:	4770      	bx	lr

08007948 <_fini>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr
