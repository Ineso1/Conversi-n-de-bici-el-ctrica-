
BLDC_RTOS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009abc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d44  08009d44  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08009d44  08009d44  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d44  08009d44  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000016ac  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000170c  2000170c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e4e6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004893  00000000  00000000  0003e5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001950  00000000  00000000  00042e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000138f  00000000  00000000  000447a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000260c2  00000000  00000000  00045b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022279  00000000  00000000  0006bbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e19d7  00000000  00000000  0008de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b4c  00000000  00000000  0016f844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00176390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c44 	.word	0x08009c44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08009c44 	.word	0x08009c44

080001e0 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80001e6:	2300      	movs	r3, #0
 80001e8:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80001f2:	2300      	movs	r3, #0
 80001f4:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80001fa:	2300      	movs	r3, #0
 80001fc:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80001fe:	2300      	movs	r3, #0
 8000200:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000202:	2300      	movs	r3, #0
 8000204:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000206:	2300      	movs	r3, #0
 8000208:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800020a:	2300      	movs	r3, #0
 800020c:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800020e:	2300      	movs	r3, #0
 8000210:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000212:	2300      	movs	r3, #0
 8000214:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000216:	2300      	movs	r3, #0
 8000218:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800021a:	2308      	movs	r3, #8
 800021c:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800021e:	2300      	movs	r3, #0
 8000220:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000226:	2300      	movs	r3, #0
 8000228:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000232:	2300      	movs	r3, #0
 8000234:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000236:	2300      	movs	r3, #0
 8000238:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800023a:	2300      	movs	r3, #0
 800023c:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 800023e:	2300      	movs	r3, #0
 8000240:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000242:	2300      	movs	r3, #0
 8000244:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800024a:	2300      	movs	r3, #0
 800024c:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 800024e:	2300      	movs	r3, #0
 8000250:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000252:	2300      	movs	r3, #0
 8000254:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000256:	2300      	movs	r3, #0
 8000258:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800025a:	2308      	movs	r3, #8
 800025c:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 800025e:	2300      	movs	r3, #0
 8000260:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000262:	2300      	movs	r3, #0
 8000264:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000266:	f000 f939 	bl	80004dc <MCP2515_Initialize>
 800026a:	4603      	mov	r3, r0
 800026c:	f083 0301 	eor.w	r3, r3, #1
 8000270:	b2db      	uxtb	r3, r3
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <CANSPI_Initialize+0x9a>
  {
    return false;
 8000276:	2300      	movs	r3, #0
 8000278:	e05e      	b.n	8000338 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 800027a:	f000 f951 	bl	8000520 <MCP2515_SetConfigMode>
 800027e:	4603      	mov	r3, r0
 8000280:	f083 0301 	eor.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <CANSPI_Initialize+0xae>
  {
    return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e054      	b.n	8000338 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	461a      	mov	r2, r3
 8000292:	2123      	movs	r1, #35	; 0x23
 8000294:	2020      	movs	r0, #32
 8000296:	f000 f9c5 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800029a:	463b      	mov	r3, r7
 800029c:	461a      	mov	r2, r3
 800029e:	2127      	movs	r1, #39	; 0x27
 80002a0:	2024      	movs	r0, #36	; 0x24
 80002a2:	f000 f9bf 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	461a      	mov	r2, r3
 80002ac:	2103      	movs	r1, #3
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 f9b8 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	461a      	mov	r2, r3
 80002ba:	2107      	movs	r1, #7
 80002bc:	2004      	movs	r0, #4
 80002be:	f000 f9b1 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	461a      	mov	r2, r3
 80002c8:	210b      	movs	r1, #11
 80002ca:	2008      	movs	r0, #8
 80002cc:	f000 f9aa 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	461a      	mov	r2, r3
 80002d6:	2113      	movs	r1, #19
 80002d8:	2010      	movs	r0, #16
 80002da:	f000 f9a3 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	461a      	mov	r2, r3
 80002e4:	2117      	movs	r1, #23
 80002e6:	2014      	movs	r0, #20
 80002e8:	f000 f99c 	bl	8000624 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	461a      	mov	r2, r3
 80002f2:	211b      	movs	r1, #27
 80002f4:	2018      	movs	r0, #24
 80002f6:	f000 f995 	bl	8000624 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80002fa:	2104      	movs	r1, #4
 80002fc:	2060      	movs	r0, #96	; 0x60
 80002fe:	f000 f96d 	bl	80005dc <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000302:	2101      	movs	r1, #1
 8000304:	2070      	movs	r0, #112	; 0x70
 8000306:	f000 f969 	bl	80005dc <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800030a:	2100      	movs	r1, #0
 800030c:	202a      	movs	r0, #42	; 0x2a
 800030e:	f000 f965 	bl	80005dc <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000312:	21e5      	movs	r1, #229	; 0xe5
 8000314:	2029      	movs	r0, #41	; 0x29
 8000316:	f000 f961 	bl	80005dc <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800031a:	2183      	movs	r1, #131	; 0x83
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f000 f95d 	bl	80005dc <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000322:	f000 f91b 	bl	800055c <MCP2515_SetNormalMode>
 8000326:	4603      	mov	r3, r0
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <CANSPI_Initialize+0x156>
    return false;
 8000332:	2300      	movs	r3, #0
 8000334:	e000      	b.n	8000338 <CANSPI_Initialize+0x158>
  
  return true;
 8000336:	2301      	movs	r3, #1
}
 8000338:	4618      	mov	r0, r3
 800033a:	3720      	adds	r7, #32
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <CANSPI_Transmit+0xe8>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000352:	4b35      	ldr	r3, [pc, #212]	; (8000428 <CANSPI_Transmit+0xe8>)
 8000354:	2200      	movs	r2, #0
 8000356:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000358:	4b33      	ldr	r3, [pc, #204]	; (8000428 <CANSPI_Transmit+0xe8>)
 800035a:	2200      	movs	r2, #0
 800035c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800035e:	4b32      	ldr	r3, [pc, #200]	; (8000428 <CANSPI_Transmit+0xe8>)
 8000360:	2200      	movs	r2, #0
 8000362:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000364:	f000 f9cc 	bl	8000700 <MCP2515_ReadStatus>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	4b2f      	ldr	r3, [pc, #188]	; (800042c <CANSPI_Transmit+0xec>)
 800036e:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000370:	4b2e      	ldr	r3, [pc, #184]	; (800042c <CANSPI_Transmit+0xec>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d115      	bne.n	80003aa <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6858      	ldr	r0, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4a28      	ldr	r2, [pc, #160]	; (8000428 <CANSPI_Transmit+0xe8>)
 8000388:	4619      	mov	r1, r3
 800038a:	f000 f851 	bl	8000430 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7a1a      	ldrb	r2, [r3, #8]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3309      	adds	r3, #9
 8000396:	4924      	ldr	r1, [pc, #144]	; (8000428 <CANSPI_Transmit+0xe8>)
 8000398:	2040      	movs	r0, #64	; 0x40
 800039a:	f000 f96d 	bl	8000678 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800039e:	2081      	movs	r0, #129	; 0x81
 80003a0:	f000 f994 	bl	80006cc <MCP2515_RequestToSend>
    
    returnValue = 1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e038      	b.n	800041c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <CANSPI_Transmit+0xec>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	f003 0310 	and.w	r3, r3, #16
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d115      	bne.n	80003e4 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6858      	ldr	r0, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	4a19      	ldr	r2, [pc, #100]	; (8000428 <CANSPI_Transmit+0xe8>)
 80003c2:	4619      	mov	r1, r3
 80003c4:	f000 f834 	bl	8000430 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	7a1a      	ldrb	r2, [r3, #8]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3309      	adds	r3, #9
 80003d0:	4915      	ldr	r1, [pc, #84]	; (8000428 <CANSPI_Transmit+0xe8>)
 80003d2:	2042      	movs	r0, #66	; 0x42
 80003d4:	f000 f950 	bl	8000678 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80003d8:	2082      	movs	r0, #130	; 0x82
 80003da:	f000 f977 	bl	80006cc <MCP2515_RequestToSend>
    
    returnValue = 1;
 80003de:	2301      	movs	r3, #1
 80003e0:	73fb      	strb	r3, [r7, #15]
 80003e2:	e01b      	b.n	800041c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <CANSPI_Transmit+0xec>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d114      	bne.n	800041c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6858      	ldr	r0, [r3, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <CANSPI_Transmit+0xe8>)
 80003fc:	4619      	mov	r1, r3
 80003fe:	f000 f817 	bl	8000430 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	7a1a      	ldrb	r2, [r3, #8]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3309      	adds	r3, #9
 800040a:	4907      	ldr	r1, [pc, #28]	; (8000428 <CANSPI_Transmit+0xe8>)
 800040c:	2044      	movs	r0, #68	; 0x44
 800040e:	f000 f933 	bl	8000678 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000412:	2084      	movs	r0, #132	; 0x84
 8000414:	f000 f95a 	bl	80006cc <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000418:	2301      	movs	r3, #1
 800041a:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 800041c:	7bfb      	ldrb	r3, [r7, #15]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200011b0 	.word	0x200011b0
 800042c:	200011ac 	.word	0x200011ac

08000430 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000430:	b480      	push	{r7}
 8000432:	b087      	sub	sp, #28
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	460b      	mov	r3, r1
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d12e      	bne.n	80004a6 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	b2da      	uxtb	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	0a1b      	lsrs	r3, r3, #8
 8000454:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	b2da      	uxtb	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	0a1b      	lsrs	r3, r3, #8
 8000462:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f003 0303 	and.w	r3, r3, #3
 800046c:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	f023 031f 	bic.w	r3, r3, #31
 800047c:	b2da      	uxtb	r2, r3
 800047e:	7dfb      	ldrb	r3, [r7, #23]
 8000480:	4413      	add	r3, r2
 8000482:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	3308      	adds	r3, #8
 8000488:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800048a:	7dfb      	ldrb	r3, [r7, #23]
 800048c:	f023 0314 	bic.w	r3, r3, #20
 8000490:	b2da      	uxtb	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	0a1b      	lsrs	r3, r3, #8
 800049a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80004a4:	e013      	b.n	80004ce <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	015b      	lsls	r3, r3, #5
 80004b6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	0a1b      	lsrs	r3, r3, #8
 80004c4:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	701a      	strb	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	371c      	adds	r7, #28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80004e2:	2201      	movs	r2, #1
 80004e4:	2102      	movs	r1, #2
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <MCP2515_Initialize+0x3c>)
 80004e8:	f003 fcec 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80004ec:	230a      	movs	r3, #10
 80004ee:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <MCP2515_Initialize+0x40>)
 80004f2:	f005 ff6c 	bl	80063ce <HAL_SPI_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d101      	bne.n	8000500 <MCP2515_Initialize+0x24>
      return true;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e006      	b.n	800050e <MCP2515_Initialize+0x32>
    
    loop--;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	3b01      	subs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f1      	bne.n	80004f0 <MCP2515_Initialize+0x14>
      
  return false;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	48000400 	.word	0x48000400
 800051c:	20001410 	.word	0x20001410

08000520 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	200f      	movs	r0, #15
 800052a:	f000 f857 	bl	80005dc <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800052e:	230a      	movs	r3, #10
 8000530:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000532:	200e      	movs	r0, #14
 8000534:	f000 f830 	bl	8000598 <MCP2515_ReadByte>
 8000538:	4603      	mov	r3, r0
 800053a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800053e:	2b80      	cmp	r3, #128	; 0x80
 8000540:	d101      	bne.n	8000546 <MCP2515_SetConfigMode+0x26>
      return true;
 8000542:	2301      	movs	r3, #1
 8000544:	e006      	b.n	8000554 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b01      	subs	r3, #1
 800054a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1ef      	bne.n	8000532 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000562:	2100      	movs	r1, #0
 8000564:	200f      	movs	r0, #15
 8000566:	f000 f839 	bl	80005dc <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800056a:	230a      	movs	r3, #10
 800056c:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800056e:	200e      	movs	r0, #14
 8000570:	f000 f812 	bl	8000598 <MCP2515_ReadByte>
 8000574:	4603      	mov	r3, r0
 8000576:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d101      	bne.n	8000582 <MCP2515_SetNormalMode+0x26>
      return true;
 800057e:	2301      	movs	r3, #1
 8000580:	e006      	b.n	8000590 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	3b01      	subs	r3, #1
 8000586:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1ef      	bne.n	800056e <MCP2515_SetNormalMode+0x12>
  
  return false;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MCP2515_ReadByte+0x40>)
 80005a8:	f003 fc8c 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f8c3 	bl	8000738 <SPI_Tx>
  SPI_Tx(address);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f8bf 	bl	8000738 <SPI_Tx>
  retVal = SPI_Rx();
 80005ba:	f000 f8e3 	bl	8000784 <SPI_Rx>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80005c2:	2201      	movs	r2, #1
 80005c4:	2102      	movs	r1, #2
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MCP2515_ReadByte+0x40>)
 80005c8:	f003 fc7c 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  return retVal;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	48000400 	.word	0x48000400

080005dc <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	460a      	mov	r2, r1
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80005ec:	2200      	movs	r2, #0
 80005ee:	2102      	movs	r1, #2
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <MCP2515_WriteByte+0x44>)
 80005f2:	f003 fc67 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 f89e 	bl	8000738 <SPI_Tx>
  SPI_Tx(address);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f89a 	bl	8000738 <SPI_Tx>
  SPI_Tx(data);  
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f896 	bl	8000738 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <MCP2515_WriteByte+0x44>)
 8000612:	f003 fc57 	bl	8003ec4 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400

08000624 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	603a      	str	r2, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	460b      	mov	r3, r1
 8000632:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	480e      	ldr	r0, [pc, #56]	; (8000674 <MCP2515_WriteByteSequence+0x50>)
 800063a:	f003 fc43 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 800063e:	2002      	movs	r0, #2
 8000640:	f000 f87a 	bl	8000738 <SPI_Tx>
  SPI_Tx(startAddress);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f876 	bl	8000738 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	3301      	adds	r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	6838      	ldr	r0, [r7, #0]
 800065c:	f000 f87e 	bl	800075c <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <MCP2515_WriteByteSequence+0x50>)
 8000666:	f003 fc2d 	bl	8003ec4 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	48000400 	.word	0x48000400

08000678 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	4613      	mov	r3, r2
 8000688:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MCP2515_LoadTxSequence+0x50>)
 8000690:	f003 fc18 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f84e 	bl	8000738 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800069c:	2104      	movs	r1, #4
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f000 f85c 	bl	800075c <SPI_TxBuffer>
  SPI_Tx(dlc);
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f846 	bl	8000738 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	4619      	mov	r1, r3
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f853 	bl	800075c <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80006b6:	2201      	movs	r2, #1
 80006b8:	2102      	movs	r1, #2
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <MCP2515_LoadTxSequence+0x50>)
 80006bc:	f003 fc02 	bl	8003ec4 <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	48000400 	.word	0x48000400

080006cc <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80006d6:	2200      	movs	r2, #0
 80006d8:	2102      	movs	r1, #2
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <MCP2515_RequestToSend+0x30>)
 80006dc:	f003 fbf2 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f828 	bl	8000738 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <MCP2515_RequestToSend+0x30>)
 80006ee:	f003 fbe9 	bl	8003ec4 <HAL_GPIO_WritePin>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	48000400 	.word	0x48000400

08000700 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	480a      	ldr	r0, [pc, #40]	; (8000734 <MCP2515_ReadStatus+0x34>)
 800070c:	f003 fbda 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000710:	20a0      	movs	r0, #160	; 0xa0
 8000712:	f000 f811 	bl	8000738 <SPI_Tx>
  retVal = SPI_Rx();
 8000716:	f000 f835 	bl	8000784 <SPI_Rx>
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800071e:	2201      	movs	r2, #1
 8000720:	2102      	movs	r1, #2
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MCP2515_ReadStatus+0x34>)
 8000724:	f003 fbce 	bl	8003ec4 <HAL_GPIO_WritePin>
  
  return retVal;
 8000728:	79fb      	ldrb	r3, [r7, #7]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400

08000738 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000742:	1df9      	adds	r1, r7, #7
 8000744:	230a      	movs	r3, #10
 8000746:	2201      	movs	r2, #1
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <SPI_Tx+0x20>)
 800074a:	f005 f972 	bl	8005a32 <HAL_SPI_Transmit>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20001410 	.word	0x20001410

0800075c <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	b29a      	uxth	r2, r3
 800076c:	230a      	movs	r3, #10
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <SPI_TxBuffer+0x24>)
 8000772:	f005 f95e 	bl	8005a32 <HAL_SPI_Transmit>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20001410 	.word	0x20001410

08000784 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	230a      	movs	r3, #10
 800078e:	2201      	movs	r2, #1
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <SPI_Rx+0x1c>)
 8000792:	f005 fac3 	bl	8005d1c <HAL_SPI_Receive>
  return retVal;
 8000796:	79fb      	ldrb	r3, [r7, #7]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20001410 	.word	0x20001410

080007a4 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc4;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007bc:	4a33      	ldr	r2, [pc, #204]	; (800088c <MX_ADC2_Init+0xe8>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_ADC2_Init+0xe4>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_ADC2_Init+0xe4>)
 8000802:	2204      	movs	r2, #4
 8000804:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_ADC2_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_ADC2_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000812:	481d      	ldr	r0, [pc, #116]	; (8000888 <MX_ADC2_Init+0xe4>)
 8000814:	f001 fcd0 	bl	80021b8 <HAL_ADC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800081e:	f000 fe7b 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000822:	2303      	movs	r3, #3
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000826:	2301      	movs	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_ADC2_Init+0xe4>)
 8000840:	f002 fae6 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800084a:	f000 fe65 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800084e:	2302      	movs	r3, #2
 8000850:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_ADC2_Init+0xe4>)
 8000858:	f002 fada 	bl	8002e10 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8000862:	f000 fe59 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000866:	2303      	movs	r3, #3
 8000868:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_ADC2_Init+0xe4>)
 8000870:	f002 face 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 800087a:	f000 fe4d 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200011f8 	.word	0x200011f8
 800088c:	50000100 	.word	0x50000100

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008a8:	4a33      	ldr	r2, [pc, #204]	; (8000978 <MX_ADC4_Init+0xe8>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 3;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008e0:	2203      	movs	r2, #3
 80008e2:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_ADC4_Init+0xe4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <MX_ADC4_Init+0xe4>)
 8000900:	f001 fc5a 	bl	80021b8 <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 800090a:	f000 fe05 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800090e:	2303      	movs	r3, #3
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000912:	2301      	movs	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_ADC4_Init+0xe4>)
 800092c:	f002 fa70 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000936:	f000 fdef 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800093a:	2302      	movs	r3, #2
 800093c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_ADC4_Init+0xe4>)
 8000944:	f002 fa64 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC4_Init+0xc2>
  {
    Error_Handler();
 800094e:	f000 fde3 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000952:	2303      	movs	r3, #3
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_ADC4_Init+0xe4>)
 800095c:	f002 fa58 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC4_Init+0xda>
  {
    Error_Handler();
 8000966:	f000 fdd7 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20001248 	.word	0x20001248
 8000978:	50000500 	.word	0x50000500

0800097c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <HAL_ADC_MspInit+0x17c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d155      	bne.n	8000a4a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800099e:	4b57      	ldr	r3, [pc, #348]	; (8000afc <HAL_ADC_MspInit+0x180>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_ADC_MspInit+0x180>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b54      	ldr	r3, [pc, #336]	; (8000afc <HAL_ADC_MspInit+0x180>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b51      	ldr	r3, [pc, #324]	; (8000afc <HAL_ADC_MspInit+0x180>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a50      	ldr	r2, [pc, #320]	; (8000afc <HAL_ADC_MspInit+0x180>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <HAL_ADC_MspInit+0x180>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = Throttle_Pin;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Throttle_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f003 f8cc 	bl	8003b80 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80009e8:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <HAL_ADC_MspInit+0x188>)
 80009ec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ee:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f4:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a00:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a06:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a08:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a10:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a12:	2220      	movs	r2, #32
 8000a14:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a1c:	4838      	ldr	r0, [pc, #224]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a1e:	f002 ff89 	bl	8003934 <HAL_DMA_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000a28:	f000 fd76 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a34      	ldr	r2, [pc, #208]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38
 8000a32:	4a33      	ldr	r2, [pc, #204]	; (8000b00 <HAL_ADC_MspInit+0x184>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	2012      	movs	r0, #18
 8000a3e:	f002 ff4f 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a42:	2012      	movs	r0, #18
 8000a44:	f002 ff68 	bl	8003918 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000a48:	e051      	b.n	8000aee <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC4)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_ADC_MspInit+0x18c>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d14c      	bne.n	8000aee <HAL_ADC_MspInit+0x172>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <HAL_ADC_MspInit+0x180>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <HAL_ADC_MspInit+0x180>)
 8000a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a5e:	6153      	str	r3, [r2, #20]
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_ADC_MspInit+0x180>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_ADC_MspInit+0x180>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_ADC_MspInit+0x180>)
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a76:	6153      	str	r3, [r2, #20]
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_ADC_MspInit+0x180>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_Pin|Voltage_Pin;
 8000a84:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	481c      	ldr	r0, [pc, #112]	; (8000b0c <HAL_ADC_MspInit+0x190>)
 8000a9a:	f003 f871 	bl	8003b80 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <HAL_ADC_MspInit+0x198>)
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ac8:	2220      	movs	r2, #32
 8000aca:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ad4:	f002 ff2e 	bl	8003934 <HAL_DMA_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_ADC_MspInit+0x166>
      Error_Handler();
 8000ade:	f000 fd1b 	bl	8001518 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_ADC_MspInit+0x194>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	50000100 	.word	0x50000100
 8000afc:	40021000 	.word	0x40021000
 8000b00:	20001298 	.word	0x20001298
 8000b04:	40020408 	.word	0x40020408
 8000b08:	50000500 	.word	0x50000500
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	200011b4 	.word	0x200011b4
 8000b14:	4002041c 	.word	0x4002041c

08000b18 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <MX_CAN_Init+0x64>)
 8000b20:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b24:	2210      	movs	r2, #16
 8000b26:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_CAN_Init+0x60>)
 8000b66:	f002 fd07 	bl	8003578 <HAL_CAN_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000b70:	f000 fcd2 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200012dc 	.word	0x200012dc
 8000b7c:	40006400 	.word	0x40006400

08000b80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <HAL_CAN_MspInit+0x80>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d129      	bne.n	8000bf6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_CAN_MspInit+0x84>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_CAN_MspInit+0x84>)
 8000ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_CAN_MspInit+0x84>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_CAN_MspInit+0x84>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_CAN_MspInit+0x84>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_CAN_MspInit+0x84>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000be4:	2309      	movs	r3, #9
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f002 ffc5 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40006400 	.word	0x40006400
 8000c04:	40021000 	.word	0x40021000

08000c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_DMA_Init+0x70>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <MX_DMA_Init+0x70>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_DMA_Init+0x70>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_DMA_Init+0x70>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_DMA_Init+0x70>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_DMA_Init+0x70>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2105      	movs	r1, #5
 8000c42:	2011      	movs	r0, #17
 8000c44:	f002 fe4c 	bl	80038e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c48:	2011      	movs	r0, #17
 8000c4a:	f002 fe65 	bl	8003918 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2105      	movs	r1, #5
 8000c52:	2038      	movs	r0, #56	; 0x38
 8000c54:	f002 fe44 	bl	80038e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000c58:	2038      	movs	r0, #56	; 0x38
 8000c5a:	f002 fe5d 	bl	8003918 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2039      	movs	r0, #57	; 0x39
 8000c64:	f002 fe3c 	bl	80038e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000c68:	2039      	movs	r0, #57	; 0x39
 8000c6a:	f002 fe55 	bl	8003918 <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <vApplicationGetIdleTaskMemory+0x30>)
 8000c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000007c 	.word	0x2000007c
 8000cac:	2000011c 	.word	0x2000011c

08000cb0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	b09c      	sub	sp, #112	; 0x70
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
     init_bldc();
 8000cb6:	f000 f91d 	bl	8000ef4 <init_bldc>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_FREERTOS_Init+0xa8>)
 8000cbc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f007 fc8b 	bl	80085f0 <osThreadCreate>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <MX_FREERTOS_Init+0xac>)
 8000cde:	6013      	str	r3, [r2, #0]

  /* definition and creation of pwmHandle */
  osThreadDef(pwmHandle, StartPwmHandle, osPriorityIdle, 0, 128);
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_FREERTOS_Init+0xb0>)
 8000ce2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmHandleHandle = osThreadCreate(osThread(pwmHandle), NULL);
 8000cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f007 fc78 	bl	80085f0 <osThreadCreate>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <MX_FREERTOS_Init+0xb4>)
 8000d04:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcHandle */
  osThreadDef(adcHandle, StartAdcHandle, osPriorityAboveNormal, 0, 128);
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_FREERTOS_Init+0xb8>)
 8000d08:	f107 041c 	add.w	r4, r7, #28
 8000d0c:	461d      	mov	r5, r3
 8000d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcHandleHandle = osThreadCreate(osThread(adcHandle), NULL);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f007 fc65 	bl	80085f0 <osThreadCreate>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <MX_FREERTOS_Init+0xbc>)
 8000d2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of canHandler */
  osThreadDef(canHandler, StartCanHandler, osPriorityHigh, 0, 128);
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_FREERTOS_Init+0xc0>)
 8000d2e:	463c      	mov	r4, r7
 8000d30:	461d      	mov	r5, r3
 8000d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canHandlerHandle = osThreadCreate(osThread(canHandler), NULL);
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f007 fc54 	bl	80085f0 <osThreadCreate>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <MX_FREERTOS_Init+0xc4>)
 8000d4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

}
 8000d4e:	bf00      	nop
 8000d50:	3770      	adds	r7, #112	; 0x70
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bdb0      	pop	{r4, r5, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	08009c68 	.word	0x08009c68
 8000d5c:	2000130c 	.word	0x2000130c
 8000d60:	08009c90 	.word	0x08009c90
 8000d64:	20001384 	.word	0x20001384
 8000d68:	08009cb8 	.word	0x08009cb8
 8000d6c:	20001350 	.word	0x20001350
 8000d70:	08009ce0 	.word	0x08009ce0
 8000d74:	20001354 	.word	0x20001354

08000d78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t nextState[] = {5, 3, 1, 6, 4, 2};
 8000d80:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <StartDefaultTask+0x64>)
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d8a:	6018      	str	r0, [r3, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	8019      	strh	r1, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	for(unsigned int j = 0; j<2; j++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e01b      	b.n	8000dce <StartDefaultTask+0x56>
    unsigned int hall = get_halls();
 8000d96:	f000 f927 	bl	8000fe8 <get_halls>
 8000d9a:	6138      	str	r0, [r7, #16]
    write_pd_table(hall, HALL_IDENTIFY_DUTY_CYCLE);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <StartDefaultTask+0x68>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	6938      	ldr	r0, [r7, #16]
 8000da4:	f000 f9b2 	bl	800110c <write_pd_table>
    osDelay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f007 fc6d 	bl	8008688 <osDelay>
    write_pd_table(nextState[hall - 1], HALL_IDENTIFY_DUTY_CYCLE);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	3318      	adds	r3, #24
 8000db4:	443b      	add	r3, r7
 8000db6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <StartDefaultTask+0x68>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	f000 f9a2 	bl	800110c <write_pd_table>
	for(unsigned int j = 0; j<2; j++){
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d9e0      	bls.n	8000d96 <StartDefaultTask+0x1e>
	}
    osDelay(100);
 8000dd4:	2064      	movs	r0, #100	; 0x64
 8000dd6:	f007 fc57 	bl	8008688 <osDelay>
	for(unsigned int j = 0; j<2; j++){
 8000dda:	e7d9      	b.n	8000d90 <StartDefaultTask+0x18>
 8000ddc:	08009cfc 	.word	0x08009cfc
 8000de0:	20001348 	.word	0x20001348

08000de4 <StartPwmHandle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPwmHandle */
void StartPwmHandle(void const * argument)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPwmHandle */
	uint8_t nextState[] = {5, 3, 1, 6, 4, 2};
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <StartPwmHandle+0x68>)
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df6:	6018      	str	r0, [r3, #0]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	8019      	strh	r1, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f003 f877 	bl	8003ef4 <HAL_GPIO_TogglePin>
	for(unsigned int j = 0; j < 160; j++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e01b      	b.n	8000e44 <StartPwmHandle+0x60>
	{
	 unsigned int hall = get_halls();
 8000e0c:	f000 f8ec 	bl	8000fe8 <get_halls>
 8000e10:	6138      	str	r0, [r7, #16]
     write_pd_table(hall, throttle_pwm);
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <StartPwmHandle+0x6c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	6938      	ldr	r0, [r7, #16]
 8000e1a:	f000 f977 	bl	800110c <write_pd_table>
     osDelay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f007 fc32 	bl	8008688 <osDelay>
     write_pd_table(nextState[hall - 1], HALL_IDENTIFY_DUTY_CYCLE);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	3318      	adds	r3, #24
 8000e2a:	443b      	add	r3, r7
 8000e2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <StartPwmHandle+0x70>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f000 f967 	bl	800110c <write_pd_table>
	for(unsigned int j = 0; j < 160; j++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b9f      	cmp	r3, #159	; 0x9f
 8000e48:	d9e0      	bls.n	8000e0c <StartPwmHandle+0x28>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e4a:	e7d7      	b.n	8000dfc <StartPwmHandle+0x18>
 8000e4c:	08009cfc 	.word	0x08009cfc
 8000e50:	2000140c 	.word	0x2000140c
 8000e54:	20001348 	.word	0x20001348

08000e58 <StartAdcHandle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcHandle */
void StartAdcHandle(void const * argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcHandle */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    read_throttle();
 8000e60:	f000 f9e0 	bl	8001224 <read_throttle>
    read_current();
 8000e64:	f000 fa12 	bl	800128c <read_current>
    unsigned int halls = get_halls();
 8000e68:	f000 f8be 	bl	8000fe8 <get_halls>
 8000e6c:	60f8      	str	r0, [r7, #12]
	write_pd_table(halls, throttle_pwm);
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <StartAdcHandle+0x2c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 f949 	bl	800110c <write_pd_table>
    osDelay(7);
 8000e7a:	2007      	movs	r0, #7
 8000e7c:	f007 fc04 	bl	8008688 <osDelay>
  {
 8000e80:	e7ee      	b.n	8000e60 <StartAdcHandle+0x8>
 8000e82:	bf00      	nop
 8000e84:	2000140c 	.word	0x2000140c

08000e88 <StartCanHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanHandler */
void StartCanHandler(void const * argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanHandler */
  /* Infinite loop */
  for(;;)
  {
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <StartCanHandler+0x60>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
		  txMessage.frame.id = 0x0A;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <StartCanHandler+0x60>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	605a      	str	r2, [r3, #4]
		  txMessage.frame.dlc = 8;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <StartCanHandler+0x60>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	721a      	strb	r2, [r3, #8]
		  txMessage.frame.data0 = throttle_pwm;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <StartCanHandler+0x64>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <StartCanHandler+0x60>)
 8000eaa:	725a      	strb	r2, [r3, #9]
		  txMessage.frame.data1 = current_ma;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <StartCanHandler+0x68>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <StartCanHandler+0x60>)
 8000eb4:	729a      	strb	r2, [r3, #10]
		  txMessage.frame.data2 = 0;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <StartCanHandler+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	72da      	strb	r2, [r3, #11]
		  txMessage.frame.data3 = 0;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <StartCanHandler+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	731a      	strb	r2, [r3, #12]
		  txMessage.frame.data4 = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <StartCanHandler+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	735a      	strb	r2, [r3, #13]
		  txMessage.frame.data5 = 0;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <StartCanHandler+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	739a      	strb	r2, [r3, #14]
		  txMessage.frame.data6 = 0;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <StartCanHandler+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	73da      	strb	r2, [r3, #15]
		  txMessage.frame.data7 = 0;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <StartCanHandler+0x60>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
    CANSPI_Transmit(&txMessage);
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <StartCanHandler+0x60>)
 8000edc:	f7ff fa30 	bl	8000340 <CANSPI_Transmit>
    osDelay(50);
 8000ee0:	2032      	movs	r0, #50	; 0x32
 8000ee2:	f007 fbd1 	bl	8008688 <osDelay>
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000ee6:	e7d3      	b.n	8000e90 <StartCanHandler+0x8>
 8000ee8:	20001358 	.word	0x20001358
 8000eec:	2000140c 	.word	0x2000140c
 8000ef0:	20001318 	.word	0x20001318

08000ef4 <init_bldc>:
  /* USER CODE END StartCanHandler */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void init_bldc(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    // Proportions
	CURRENT_SCALING = 3.3 / 0.001 / 20 / 4096 * 1000;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <init_bldc+0xb8>)
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	601a      	str	r2, [r3, #0]
	VOLTAGE_SCALING = 3.3 / 4096 * (47 + 2.2) / 2.2 * 1000;
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <init_bldc+0xbc>)
 8000f00:	2212      	movs	r2, #18
 8000f02:	601a      	str	r2, [r3, #0]

    // Parameter
	HALL_OVERSAMPLE = 8;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <init_bldc+0xc0>)
 8000f06:	2208      	movs	r2, #8
 8000f08:	601a      	str	r2, [r3, #0]
	HALL_IDENTIFY_DUTY_CYCLE = 40;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <init_bldc+0xc4>)
 8000f0c:	2228      	movs	r2, #40	; 0x28
 8000f0e:	601a      	str	r2, [r3, #0]
	F_PWM = 16000;
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <init_bldc+0xc8>)
 8000f12:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000f16:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_MAX = 255;
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <init_bldc+0xcc>)
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	601a      	str	r2, [r3, #0]

    // Current cutoff
	FULL_SCALE_CURRENT_MA = 30000;
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <init_bldc+0xd0>)
 8000f20:	f247 5230 	movw	r2, #30000	; 0x7530
 8000f24:	601a      	str	r2, [r3, #0]

    // Throttle limits
	THROTTLE_LOW = 210;
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <init_bldc+0xd4>)
 8000f28:	22d2      	movs	r2, #210	; 0xd2
 8000f2a:	601a      	str	r2, [r3, #0]
	THROTTLE_HIGH = 1740;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <init_bldc+0xd8>)
 8000f2e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8000f32:	601a      	str	r2, [r3, #0]


	adc_channel_count = sizeof(adc_dma_result)/sizeof(adc_dma_result[0]);
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <init_bldc+0xdc>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
	adc_conv_complete_flag = 0;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <init_bldc+0xe0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]


	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <init_bldc+0xe4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 255);
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <init_bldc+0xe4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	22ff      	movs	r2, #255	; 0xff
 8000f4e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <init_bldc+0xe8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 255);
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <init_bldc+0xe8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	22ff      	movs	r2, #255	; 0xff
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <init_bldc+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 255);
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <init_bldc+0xec>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	22ff      	movs	r2, #255	; 0xff
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f70:	2100      	movs	r1, #0
 8000f72:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <init_bldc+0xe4>)
 8000f74:	f005 fd20 	bl	80069b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <init_bldc+0xe4>)
 8000f7c:	f005 fd1c 	bl	80069b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	4816      	ldr	r0, [pc, #88]	; (8000fdc <init_bldc+0xe8>)
 8000f84:	f005 fd18 	bl	80069b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <init_bldc+0xe8>)
 8000f8c:	f005 fd14 	bl	80069b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f90:	2108      	movs	r1, #8
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <init_bldc+0xec>)
 8000f94:	f005 fd10 	bl	80069b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <init_bldc+0xec>)
 8000f9c:	f005 fd0c 	bl	80069b8 <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc2);
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <init_bldc+0xf0>)
 8000fa2:	f001 fb03 	bl	80025ac <HAL_ADC_Start>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20001344 	.word	0x20001344
 8000fb0:	20001314 	.word	0x20001314
 8000fb4:	20001408 	.word	0x20001408
 8000fb8:	20001348 	.word	0x20001348
 8000fbc:	20001370 	.word	0x20001370
 8000fc0:	2000139c 	.word	0x2000139c
 8000fc4:	2000136c 	.word	0x2000136c
 8000fc8:	2000131c 	.word	0x2000131c
 8000fcc:	20001340 	.word	0x20001340
 8000fd0:	20001378 	.word	0x20001378
 8000fd4:	2000137c 	.word	0x2000137c
 8000fd8:	200015f0 	.word	0x200015f0
 8000fdc:	20001558 	.word	0x20001558
 8000fe0:	200014c0 	.word	0x200014c0
 8000fe4:	200011f8 	.word	0x200011f8

08000fe8 <get_halls>:

unsigned int get_halls(void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
	unsigned int hallCounts[] = {0, 0, 0};
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]

	// Read all the Hall pins repeatedly and tally the results
	for (unsigned int i = 0; i < HALL_OVERSAMPLE; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e01e      	b.n	800103e <get_halls+0x56>
		hallCounts[0] += HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin);
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4824      	ldr	r0, [pc, #144]	; (8001094 <get_halls+0xac>)
 8001004:	f002 ff46 	bl	8003e94 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	607b      	str	r3, [r7, #4]
		hallCounts[1] += HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin);
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	481f      	ldr	r0, [pc, #124]	; (8001094 <get_halls+0xac>)
 8001018:	f002 ff3c 	bl	8003e94 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4413      	add	r3, r2
 8001024:	60bb      	str	r3, [r7, #8]
		hallCounts[2] += HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin);
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <get_halls+0xac>)
 800102a:	f002 ff33 	bl	8003e94 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
	for (unsigned int i = 0; i < HALL_OVERSAMPLE; i++) {
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <get_halls+0xb0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3db      	bcc.n	8001000 <get_halls+0x18>
	}

	unsigned int hall = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]

	// If votes >= threshold, set the corresponding bit to 1
	if (hallCounts[0] > HALL_OVERSAMPLE / 2)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <get_halls+0xb0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	429a      	cmp	r2, r3
 8001056:	d903      	bls.n	8001060 <get_halls+0x78>
		hall |= (1 << 0);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	if (hallCounts[1] > HALL_OVERSAMPLE / 2)
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <get_halls+0xb0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	085b      	lsrs	r3, r3, #1
 8001068:	429a      	cmp	r2, r3
 800106a:	d903      	bls.n	8001074 <get_halls+0x8c>
		hall |= (1 << 1);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]
	if (hallCounts[2] > HALL_OVERSAMPLE / 2)
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <get_halls+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	429a      	cmp	r2, r3
 800107e:	d903      	bls.n	8001088 <get_halls+0xa0>
		hall |= (1 << 2);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	613b      	str	r3, [r7, #16]
	char message[50];
	snprintf(message, sizeof(message), "Hall Value: %u\r\n", hall);
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
	*/

	return hall;
 8001088:	693b      	ldr	r3, [r7, #16]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	48000800 	.word	0x48000800
 8001098:	20001408 	.word	0x20001408

0800109c <writePhases>:
    }
    throttle_pwm = 0;

}

void writePhases(uint16_t ah, uint16_t bh, uint16_t ch, uint16_t al, uint16_t bl, uint16_t cl){
 800109c:	b490      	push	{r4, r7}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4623      	mov	r3, r4
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	4603      	mov	r3, r0
 80010b0:	80bb      	strh	r3, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	807b      	strh	r3, [r7, #2]
 80010b6:	4613      	mov	r3, r2
 80010b8:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ah);
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <writePhases+0x64>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 255 - al);
 80010c2:	883b      	ldrh	r3, [r7, #0]
 80010c4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <writePhases+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, bh);
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <writePhases+0x68>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	88ba      	ldrh	r2, [r7, #4]
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 255 - bl);
 80010d6:	8a3b      	ldrh	r3, [r7, #16]
 80010d8:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <writePhases+0x68>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, ch);
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <writePhases+0x6c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 255 - cl);
 80010ea:	8abb      	ldrh	r3, [r7, #20]
 80010ec:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <writePhases+0x6c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc90      	pop	{r4, r7}
 80010fe:	4770      	bx	lr
 8001100:	200015f0 	.word	0x200015f0
 8001104:	20001558 	.word	0x20001558
 8001108:	200014c0 	.word	0x200014c0

0800110c <write_pd_table>:

void write_pd_table(unsigned int halls, unsigned int duty){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]

	if(duty >= 257){
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800111c:	d901      	bls.n	8001122 <write_pd_table+0x16>
		duty = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
	}
	if(duty < 27){
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b1a      	cmp	r3, #26
 8001126:	d806      	bhi.n	8001136 <write_pd_table+0x2a>
		throttle_pwm = 0;
 8001128:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <write_pd_table+0x114>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
		duty = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
		halls = 8;
 8001132:	2308      	movs	r3, #8
 8001134:	607b      	str	r3, [r7, #4]
	}

	unsigned int complement = 255 - duty - 6;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 800113c:	60fb      	str	r3, [r7, #12]


	switch(halls){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3b01      	subs	r3, #1
 8001142:	2b05      	cmp	r3, #5
 8001144:	d85c      	bhi.n	8001200 <write_pd_table+0xf4>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <write_pd_table+0x40>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	08001165 	.word	0x08001165
 8001150:	0800117f 	.word	0x0800117f
 8001154:	08001199 	.word	0x08001199
 8001158:	080011b3 	.word	0x080011b3
 800115c:	080011cd 	.word	0x080011cd
 8001160:	080011e7 	.word	0x080011e7
        case 1: // Case 001
           writePhases(duty, 0, 0, complement, 0, 255);  //writePhases(0, 0, duty, 255, 0, 0);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b298      	uxth	r0, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	b29b      	uxth	r3, r3
 800116c:	22ff      	movs	r2, #255	; 0xff
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	9200      	str	r2, [sp, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	f7ff ff90 	bl	800109c <writePhases>
           break;
 800117c:	e04b      	b.n	8001216 <write_pd_table+0x10a>
        case 2: // Case 010
           writePhases(0, 0, duty, 0, 255, complement);  //writePhases(0, duty, 0, 0, 0, 255);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	b29b      	uxth	r3, r3
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2300      	movs	r3, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ff83 	bl	800109c <writePhases>
           break;
 8001196:	e03e      	b.n	8001216 <write_pd_table+0x10a>
        case 3: // Case 011
           writePhases(duty, 0, 0, complement, 255, 0);  //writePhases(0, duty, 0, 255, 0, 0);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b298      	uxth	r0, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	9201      	str	r2, [sp, #4]
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	9200      	str	r2, [sp, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	f7ff ff76 	bl	800109c <writePhases>
           break;
 80011b0:	e031      	b.n	8001216 <write_pd_table+0x10a>
        case 4: // Case 100
           writePhases(0, duty, 0, 255, complement, 0);  //writePhases(duty, 0, 0, 0, 255, 0);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	2200      	movs	r2, #0
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	23ff      	movs	r3, #255	; 0xff
 80011c2:	2200      	movs	r2, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff69 	bl	800109c <writePhases>
           break;
 80011ca:	e024      	b.n	8001216 <write_pd_table+0x10a>
        case 5: // Case 101
           writePhases(0, duty, 0, 0, complement, 255);  //writePhases(0, 0, duty, 0, 255, 0);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b299      	uxth	r1, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	22ff      	movs	r2, #255	; 0xff
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2300      	movs	r3, #0
 80011dc:	2200      	movs	r2, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff5c 	bl	800109c <writePhases>
           break;
 80011e4:	e017      	b.n	8001216 <write_pd_table+0x10a>
        case 6: // Case 110
           writePhases(0, 0, duty, 255, 0, complement);  //writePhases(duty, 0, 0, 0, 0, 255);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	23ff      	movs	r3, #255	; 0xff
 80011f6:	2100      	movs	r1, #0
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff4f 	bl	800109c <writePhases>
           break;
 80011fe:	e00a      	b.n	8001216 <write_pd_table+0x10a>
        default: // Case 000 or error
           writePhases(0, 0, 0, 255, 255, 255);
 8001200:	23ff      	movs	r3, #255	; 0xff
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ff44 	bl	800109c <writePhases>
	}

}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000140c 	.word	0x2000140c

08001224 <read_throttle>:

void read_throttle(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	unsigned int throttle_adc = HAL_ADC_GetValue(&hadc2);
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <read_throttle+0x58>)
 800122c:	f001 fad4 	bl	80027d8 <HAL_ADC_GetValue>
 8001230:	6078      	str	r0, [r7, #4]

	throttle_adc = (throttle_adc - THROTTLE_LOW) * 255;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <read_throttle+0x5c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	1ad2      	subs	r2, r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	607b      	str	r3, [r7, #4]
	if(throttle_adc < 0){
		throttle_adc *= -1;
	}

	throttle_adc = throttle_adc / (THROTTLE_HIGH - THROTTLE_LOW);
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <read_throttle+0x60>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <read_throttle+0x5c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	607b      	str	r3, [r7, #4]
	throttle_pwm = throttle_adc;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <read_throttle+0x64>)
 8001258:	6013      	str	r3, [r2, #0]
	snprintf(message, sizeof(message), "Throttle Value: %u\r\n", throttle_adc);
	HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
	*/


	    if (throttle_adc >= 255) // Bound the output between 0 and 255
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2bfe      	cmp	r3, #254	; 0xfe
 800125e:	d902      	bls.n	8001266 <read_throttle+0x42>
	    	throttle_pwm = 255;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <read_throttle+0x64>)
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	601a      	str	r2, [r3, #0]

	    if (throttle_adc <= 0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <read_throttle+0x4e>
	    	throttle_pwm = 0;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <read_throttle+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200011f8 	.word	0x200011f8
 8001280:	2000131c 	.word	0x2000131c
 8001284:	20001340 	.word	0x20001340
 8001288:	2000140c 	.word	0x2000140c

0800128c <read_current>:
	int voltage_adc = HAL_ADC_GetValue(&hadc4);
	voltage_mv = voltage_adc * CURRENT_SCALING;
	/*Scale and limits*/
}

void read_current(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	int current_adc = HAL_ADC_GetValue(&hadc4);
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <read_current+0x28>)
 8001294:	f001 faa0 	bl	80027d8 <HAL_ADC_GetValue>
 8001298:	4603      	mov	r3, r0
 800129a:	607b      	str	r3, [r7, #4]
	current_ma = current_adc * VOLTAGE_SCALING;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <read_current+0x2c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <read_current+0x30>)
 80012a8:	6013      	str	r3, [r2, #0]
	/*Scale and limits*/
	/*Function to protect over current*/
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20001248 	.word	0x20001248
 80012b8:	20001314 	.word	0x20001314
 80012bc:	20001318 	.word	0x20001318

080012c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <MX_GPIO_Init+0x104>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <MX_GPIO_Init+0x104>)
 80012dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <MX_GPIO_Init+0x104>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <MX_GPIO_Init+0x104>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <MX_GPIO_Init+0x104>)
 80012f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f8:	6153      	str	r3, [r2, #20]
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <MX_GPIO_Init+0x104>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_GPIO_Init+0x104>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <MX_GPIO_Init+0x104>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_GPIO_Init+0x104>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_GPIO_Init+0x104>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <MX_GPIO_Init+0x104>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_GPIO_Init+0x104>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2120      	movs	r1, #32
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f002 fdc1 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	4820      	ldr	r0, [pc, #128]	; (80013c8 <MX_GPIO_Init+0x108>)
 8001348:	f002 fdbc 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001352:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	481a      	ldr	r0, [pc, #104]	; (80013cc <MX_GPIO_Init+0x10c>)
 8001364:	f002 fc0c 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001368:	2320      	movs	r3, #32
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f002 fbfd 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001386:	2302      	movs	r3, #2
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	480a      	ldr	r0, [pc, #40]	; (80013c8 <MX_GPIO_Init+0x108>)
 800139e:	f002 fbef 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_C_Pin|HALL_B_Pin;
 80013a2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_GPIO_Init+0x10c>)
 80013b8:	f002 fbe2 	bl	8003b80 <HAL_GPIO_Init>

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48000800 	.word	0x48000800

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fe9c 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f820 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f7ff ff70 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e0:	f7ff fc12 	bl	8000c08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013e4:	f000 fdce 	bl	8001f84 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80013e8:	f7ff f9dc 	bl	80007a4 <MX_ADC2_Init>
  MX_ADC4_Init();
 80013ec:	f7ff fa50 	bl	8000890 <MX_ADC4_Init>
  MX_TIM2_Init();
 80013f0:	f000 fa48 	bl	8001884 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f4:	f000 fac8 	bl	8001988 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013f8:	f000 fb4a 	bl	8001a90 <MX_TIM4_Init>
  MX_CAN_Init();
 80013fc:	f7ff fb8c 	bl	8000b18 <MX_CAN_Init>
  MX_TIM15_Init();
 8001400:	f000 fc00 	bl	8001c04 <MX_TIM15_Init>
  MX_SPI2_Init();
 8001404:	f000 f88e 	bl	8001524 <MX_SPI2_Init>
  MX_TIM6_Init();
 8001408:	f000 fbc6 	bl	8001b98 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 800140c:	f7fe fee8 	bl	80001e0 <CANSPI_Initialize>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001410:	f7ff fc4e 	bl	8000cb0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001414:	f007 f8e5 	bl	80085e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x48>
	...

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0a6      	sub	sp, #152	; 0x98
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f008 fb2e 	bl	8009a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2258      	movs	r2, #88	; 0x58
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fb20 	bl	8009a8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	2310      	movs	r3, #16
 8001456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001468:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800146c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001476:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fd54 	bl	8003f28 <HAL_RCC_OscConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001486:	f000 f847 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148a:	230f      	movs	r3, #15
 800148c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148e:	2302      	movs	r3, #2
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014a4:	2102      	movs	r1, #2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fd92 	bl	8004fd0 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014b2:	f000 f831 	bl	8001518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <SystemClock_Config+0xd4>)
 80014b8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80014c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 ffe1 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80014e4:	f000 f818 	bl	8001518 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3798      	adds	r7, #152	; 0x98
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	00700182 	.word	0x00700182

080014f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001506:	f000 fe19 	bl	800213c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012c00 	.word	0x40012c00

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_SPI2_Init+0x74>)
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_SPI2_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_SPI2_Init+0x74>)
 8001530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_SPI2_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_SPI2_Init+0x74>)
 800153e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001542:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_SPI2_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_SPI2_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_SPI2_Init+0x74>)
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_SPI2_Init+0x74>)
 800155a:	2208      	movs	r2, #8
 800155c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_SPI2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_SPI2_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_SPI2_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_SPI2_Init+0x74>)
 8001572:	2207      	movs	r2, #7
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_SPI2_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_SPI2_Init+0x74>)
 800157e:	2208      	movs	r2, #8
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_SPI2_Init+0x74>)
 8001584:	f004 f9aa 	bl	80058dc <HAL_SPI_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800158e:	f7ff ffc3 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20001410 	.word	0x20001410
 800159c:	40003800 	.word	0x40003800

080015a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_SPI_MspInit+0xb8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d146      	bne.n	8001650 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a1f      	ldr	r2, [pc, #124]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6153      	str	r3, [r2, #20]
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_SPI_MspInit+0xbc>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_SPI_MspInit+0xbc>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PA10     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800160a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161c:	2305      	movs	r3, #5
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <HAL_SPI_MspInit+0xc0>)
 8001628:	f002 faaa 	bl	8003b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800162c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163e:	2305      	movs	r3, #5
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f002 fa98 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40003800 	.word	0x40003800
 800165c:	40021000 	.word	0x40021000
 8001660:	48000400 	.word	0x48000400

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_MspInit+0x4c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_MspInit+0x4c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_MspInit+0x4c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_MspInit+0x4c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_MspInit+0x4c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	210f      	movs	r1, #15
 800169e:	f06f 0001 	mvn.w	r0, #1
 80016a2:	f002 f91d 	bl	80038e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <HAL_InitTick+0xcc>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <HAL_InitTick+0xcc>)
 80016ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_InitTick+0xcc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016dc:	f107 020c 	add.w	r2, r7, #12
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fea8 	bl	800543c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016ec:	f003 fe84 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 80016f0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	4a23      	ldr	r2, [pc, #140]	; (8001784 <HAL_InitTick+0xd0>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	3b01      	subs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_InitTick+0xd4>)
 8001702:	4a22      	ldr	r2, [pc, #136]	; (800178c <HAL_InitTick+0xd8>)
 8001704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_InitTick+0xd4>)
 8001708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800170c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_InitTick+0xd4>)
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_InitTick+0xd4>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_InitTick+0xd4>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_InitTick+0xd4>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001726:	4818      	ldr	r0, [pc, #96]	; (8001788 <HAL_InitTick+0xd4>)
 8001728:	f005 f81c 	bl	8006764 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11b      	bne.n	8001772 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800173a:	4813      	ldr	r0, [pc, #76]	; (8001788 <HAL_InitTick+0xd4>)
 800173c:	f005 f86a 	bl	8006814 <HAL_TIM_Base_Start_IT>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800174a:	2b00      	cmp	r3, #0
 800174c:	d111      	bne.n	8001772 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800174e:	2019      	movs	r0, #25
 8001750:	f002 f8e2 	bl	8003918 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	d808      	bhi.n	800176c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800175a:	2200      	movs	r2, #0
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	2019      	movs	r0, #25
 8001760:	f002 f8be 	bl	80038e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_InitTick+0xdc>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e002      	b.n	8001772 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001776:	4618      	mov	r0, r3
 8001778:	3730      	adds	r7, #48	; 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	431bde83 	.word	0x431bde83
 8001788:	20001474 	.word	0x20001474
 800178c:	40012c00 	.word	0x40012c00
 8001790:	20000004 	.word	0x20000004

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Channel7_IRQHandler+0x10>)
 80017c6:	f002 f8fc 	bl	80039c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000163c 	.word	0x2000163c

080017d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <ADC1_2_IRQHandler+0x10>)
 80017da:	f001 f80b 	bl	80027f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200011f8 	.word	0x200011f8

080017e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80017ee:	f005 f9ef 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000150c 	.word	0x2000150c

080017fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001802:	f005 f9e5 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001474 	.word	0x20001474

08001810 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM2_IRQHandler+0x10>)
 8001816:	f005 f9db 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200015f0 	.word	0x200015f0

08001824 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM3_IRQHandler+0x10>)
 800182a:	f005 f9d1 	bl	8006bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20001558 	.word	0x20001558

08001838 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <DMA2_Channel1_IRQHandler+0x10>)
 800183e:	f002 f8c0 	bl	80039c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20001298 	.word	0x20001298

0800184c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <DMA2_Channel2_IRQHandler+0x10>)
 8001852:	f002 f8b6 	bl	80039c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200011b4 	.word	0x200011b4

08001860 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b6:	4b33      	ldr	r3, [pc, #204]	; (8001984 <MX_TIM2_Init+0x100>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <MX_TIM2_Init+0x100>)
 80018c0:	2206      	movs	r2, #6
 80018c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <MX_TIM2_Init+0x100>)
 80018c6:	2220      	movs	r2, #32
 80018c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <MX_TIM2_Init+0x100>)
 80018cc:	22ff      	movs	r2, #255	; 0xff
 80018ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <MX_TIM2_Init+0x100>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <MX_TIM2_Init+0x100>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018dc:	4829      	ldr	r0, [pc, #164]	; (8001984 <MX_TIM2_Init+0x100>)
 80018de:	f004 ff41 	bl	8006764 <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018e8:	f7ff fe16 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4822      	ldr	r0, [pc, #136]	; (8001984 <MX_TIM2_Init+0x100>)
 80018fa:	f005 fb9d 	bl	8007038 <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001904:	f7ff fe08 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001908:	481e      	ldr	r0, [pc, #120]	; (8001984 <MX_TIM2_Init+0x100>)
 800190a:	f004 fff3 	bl	80068f4 <HAL_TIM_PWM_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001914:	f7ff fe00 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4817      	ldr	r0, [pc, #92]	; (8001984 <MX_TIM2_Init+0x100>)
 8001928:	f006 f8dc 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001932:	f7ff fdf1 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001936:	2360      	movs	r3, #96	; 0x60
 8001938:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_TIM2_Init+0x100>)
 800194e:	f005 fa5f 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001958:	f7ff fdde 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800195c:	2302      	movs	r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	2204      	movs	r2, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM2_Init+0x100>)
 8001968:	f005 fa52 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001972:	f7ff fdd1 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM2_Init+0x100>)
 8001978:	f000 fa68 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 800197c:	bf00      	nop
 800197e:	3738      	adds	r7, #56	; 0x38
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200015f0 	.word	0x200015f0

08001988 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08e      	sub	sp, #56	; 0x38
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019bc:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <MX_TIM3_Init+0x104>)
 80019be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 80019c0:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019c2:	2206      	movs	r2, #6
 80019c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019c8:	2220      	movs	r2, #32
 80019ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019de:	482a      	ldr	r0, [pc, #168]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019e0:	f004 fec0 	bl	8006764 <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ea:	f7ff fd95 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <MX_TIM3_Init+0x100>)
 80019fc:	f005 fb1c 	bl	8007038 <HAL_TIM_ConfigClockSource>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a06:	f7ff fd87 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a0a:	481f      	ldr	r0, [pc, #124]	; (8001a88 <MX_TIM3_Init+0x100>)
 8001a0c:	f004 ff72 	bl	80068f4 <HAL_TIM_PWM_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a16:	f7ff fd7f 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4817      	ldr	r0, [pc, #92]	; (8001a88 <MX_TIM3_Init+0x100>)
 8001a2a:	f006 f85b 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a34:	f7ff fd70 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a38:	2360      	movs	r3, #96	; 0x60
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <MX_TIM3_Init+0x100>)
 8001a50:	f005 f9de 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a5a:	f7ff fd5d 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a62:	463b      	mov	r3, r7
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM3_Init+0x100>)
 8001a6a:	f005 f9d1 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001a74:	f7ff fd50 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM3_Init+0x100>)
 8001a7a:	f000 f9e7 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 8001a7e:	bf00      	nop
 8001a80:	3738      	adds	r7, #56	; 0x38
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001558 	.word	0x20001558
 8001a8c:	40000400 	.word	0x40000400

08001a90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <MX_TIM4_Init+0x104>)
 8001ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001aca:	2206      	movs	r2, #6
 8001acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001ad6:	22ff      	movs	r2, #255	; 0xff
 8001ad8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ae6:	482a      	ldr	r0, [pc, #168]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001ae8:	f004 fe3c 	bl	8006764 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001af2:	f7ff fd11 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4823      	ldr	r0, [pc, #140]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001b04:	f005 fa98 	bl	8007038 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b0e:	f7ff fd03 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b12:	481f      	ldr	r0, [pc, #124]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001b14:	f004 feee 	bl	80068f4 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b1e:	f7ff fcfb 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4817      	ldr	r0, [pc, #92]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001b32:	f005 ffd7 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b3c:	f7ff fcec 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	2204      	movs	r2, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001b58:	f005 f95a 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b62:	f7ff fcd9 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001b72:	f005 f94d 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001b7c:	f7ff fccc 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <MX_TIM4_Init+0x100>)
 8001b82:	f000 f963 	bl	8001e4c <HAL_TIM_MspPostInit>

}
 8001b86:	bf00      	nop
 8001b88:	3738      	adds	r7, #56	; 0x38
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200014c0 	.word	0x200014c0
 8001b94:	40000800 	.word	0x40000800

08001b98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <MX_TIM6_Init+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001bca:	f004 fdcb 	bl	8006764 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bd4:	f7ff fca0 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_TIM6_Init+0x64>)
 8001be6:	f005 ff7d 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f7ff fc92 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200015a4 	.word	0x200015a4
 8001c00:	40001000 	.word	0x40001000

08001c04 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09a      	sub	sp, #104	; 0x68
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	615a      	str	r2, [r3, #20]
 8001c36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	222c      	movs	r2, #44	; 0x2c
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f007 ff24 	bl	8009a8c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c46:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <MX_TIM15_Init+0x13c>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c70:	4832      	ldr	r0, [pc, #200]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c72:	f004 fd77 	bl	8006764 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001c7c:	f7ff fc4c 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482b      	ldr	r0, [pc, #172]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c8e:	f005 f9d3 	bl	8007038 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001c98:	f7ff fc3e 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001c9c:	4827      	ldr	r0, [pc, #156]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001c9e:	f004 fe29 	bl	80068f4 <HAL_TIM_PWM_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001ca8:	f7ff fc36 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4820      	ldr	r0, [pc, #128]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001cbc:	f005 ff12 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001cc6:	f7ff fc27 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cca:	2360      	movs	r3, #96	; 0x60
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cea:	2204      	movs	r2, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4813      	ldr	r0, [pc, #76]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001cf0:	f005 f88e 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001cfa:	f7ff fc0d 	bl	8001518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_TIM15_Init+0x138>)
 8001d26:	f005 ff69 	bl	8007bfc <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001d30:	f7ff fbf2 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3768      	adds	r7, #104	; 0x68
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000150c 	.word	0x2000150c
 8001d40:	40014000 	.word	0x40014000

08001d44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d114      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	201c      	movs	r0, #28
 8001d74:	f001 fdb4 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d78:	201c      	movs	r0, #28
 8001d7a:	f001 fdcd 	bl	8003918 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001d7e:	e056      	b.n	8001e2e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2d      	ldr	r2, [pc, #180]	; (8001e3c <HAL_TIM_Base_MspInit+0xf8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d114      	bne.n	8001db4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	201d      	movs	r0, #29
 8001da8:	f001 fd9a 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dac:	201d      	movs	r0, #29
 8001dae:	f001 fdb3 	bl	8003918 <HAL_NVIC_EnableIRQ>
}
 8001db2:	e03c      	b.n	8001e2e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <HAL_TIM_Base_MspInit+0xfc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
}
 8001dd6:	e02a      	b.n	8001e2e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM6)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <HAL_TIM_Base_MspInit+0x100>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10c      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
}
 8001dfa:	e018      	b.n	8001e2e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM15)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_TIM_Base_MspInit+0x104>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d113      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6193      	str	r3, [r2, #24]
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	2018      	movs	r0, #24
 8001e24:	f001 fd5c 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e28:	2018      	movs	r0, #24
 8001e2a:	f001 fd75 	bl	8003918 <HAL_NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40001000 	.word	0x40001000
 8001e48:	40014000 	.word	0x40014000

08001e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d11d      	bne.n	8001eaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H_A_Pin|L_A_Pin;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e96:	2301      	movs	r3, #1
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f001 fe6c 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ea8:	e060      	b.n	8001f6c <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_TIM_MspPostInit+0x12c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d139      	bne.n	8001f28 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebe:	6153      	str	r3, [r2, #20]
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed6:	6153      	str	r3, [r2, #20]
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = L_B_Pin;
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(L_B_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f02:	f001 fe3d 	bl	8003b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = H_B_Pin;
 8001f06:	2310      	movs	r3, #16
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(H_B_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4816      	ldr	r0, [pc, #88]	; (8001f7c <HAL_TIM_MspPostInit+0x130>)
 8001f22:	f001 fe2d 	bl	8003b80 <HAL_GPIO_Init>
}
 8001f26:	e021      	b.n	8001f6c <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM4)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_TIM_MspPostInit+0x134>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11c      	bne.n	8001f6c <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6153      	str	r3, [r2, #20]
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_TIM_MspPostInit+0x128>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_C_Pin|H_C_Pin;
 8001f4a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_TIM_MspPostInit+0x130>)
 8001f68:	f001 fe0a 	bl	8003b80 <HAL_GPIO_Init>
}
 8001f6c:	bf00      	nop
 8001f6e:	3730      	adds	r7, #48	; 0x30
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40000800 	.word	0x40000800

08001f84 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001f8a:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <MX_USART2_UART_Init+0x5c>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001f90:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_USART2_UART_Init+0x58>)
 8001fc8:	f005 febc 	bl	8007d44 <HAL_UART_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fd2:	f7ff faa1 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20001680 	.word	0x20001680
 8001fe0:	40004400 	.word	0x40004400

08001fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <HAL_UART_MspInit+0xc8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d14e      	bne.n	80020a4 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_UART_MspInit+0xcc>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <HAL_UART_MspInit+0xcc>)
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_UART_MspInit+0xcc>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_UART_MspInit+0xcc>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_UART_MspInit+0xcc>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6153      	str	r3, [r2, #20]
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_UART_MspInit+0xcc>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002036:	230c      	movs	r3, #12
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002046:	2307      	movs	r3, #7
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002054:	f001 fd94 	bl	8003b80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0xd4>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 8002060:	2210      	movs	r2, #16
 8002062:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 800207e:	2220      	movs	r2, #32
 8002080:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 800208a:	f001 fc53 	bl	8003934 <HAL_DMA_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002094:	f7ff fa40 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 800209c:	671a      	str	r2, [r3, #112]	; 0x70
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_UART_MspInit+0xd0>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	2000163c 	.word	0x2000163c
 80020b8:	40020080 	.word	0x40020080

080020bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c0:	f7ff fbce 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <LoopForever+0xe>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <LoopForever+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ea:	f007 fd2d 	bl	8009b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ee:	f7ff f96f 	bl	80013d0 <main>

080020f2 <LoopForever>:

LoopForever:
    b LoopForever
 80020f2:	e7fe      	b.n	80020f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002100:	08009d4c 	.word	0x08009d4c
  ldr r2, =_sbss
 8002104:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002108:	2000170c 	.word	0x2000170c

0800210c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC3_IRQHandler>
	...

08002110 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_Init+0x28>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_Init+0x28>)
 800211a:	f043 0310 	orr.w	r3, r3, #16
 800211e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002120:	2003      	movs	r0, #3
 8002122:	f001 fbd2 	bl	80038ca <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002126:	200f      	movs	r0, #15
 8002128:	f7ff fac4 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fa9a 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40022000 	.word	0x40022000

0800213c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008
 8002160:	20001708 	.word	0x20001708

08002164 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;  
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20001708 	.word	0x20001708

0800217c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b09a      	sub	sp, #104	; 0x68
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e1e3      	b.n	80025a0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d176      	bne.n	80022d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d152      	bne.n	8002298 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe fbb5 	bl	800097c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d13b      	bne.n	8002298 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f001 f943 	bl	80034ac <ADC_Disable>
 8002226:	4603      	mov	r3, r0
 8002228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12f      	bne.n	8002298 <HAL_ADC_Init+0xe0>
 8002238:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800223c:	2b00      	cmp	r3, #0
 800223e:	d12b      	bne.n	8002298 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	f043 0202 	orr.w	r2, r3, #2
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002262:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002272:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002274:	4b92      	ldr	r3, [pc, #584]	; (80024c0 <HAL_ADC_Init+0x308>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_ADC_Init+0x30c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9a      	lsrs	r2, r3, #18
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228a:	e002      	b.n	8002292 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	3b01      	subs	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f9      	bne.n	800228c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b4:	d110      	bne.n	80022d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f023 0312 	bic.w	r3, r3, #18
 80022be:	f043 0210 	orr.w	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 8150 	bne.w	8002586 <HAL_ADC_Init+0x3ce>
 80022e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 814b 	bne.w	8002586 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 8143 	bne.w	8002586 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002308:	f043 0202 	orr.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002318:	d004      	beq.n	8002324 <HAL_ADC_Init+0x16c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6a      	ldr	r2, [pc, #424]	; (80024c8 <HAL_ADC_Init+0x310>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_ADC_Init+0x170>
 8002324:	4b69      	ldr	r3, [pc, #420]	; (80024cc <HAL_ADC_Init+0x314>)
 8002326:	e000      	b.n	800232a <HAL_ADC_Init+0x172>
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <HAL_ADC_Init+0x318>)
 800232a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002334:	d102      	bne.n	800233c <HAL_ADC_Init+0x184>
 8002336:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <HAL_ADC_Init+0x310>)
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e01a      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a61      	ldr	r2, [pc, #388]	; (80024c8 <HAL_ADC_Init+0x310>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d103      	bne.n	800234e <HAL_ADC_Init+0x196>
 8002346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e011      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_ADC_Init+0x31c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_ADC_Init+0x1a6>
 8002358:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_ADC_Init+0x320>)
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e009      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_ADC_Init+0x320>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d102      	bne.n	800236e <HAL_ADC_Init+0x1b6>
 8002368:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <HAL_ADC_Init+0x31c>)
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e001      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d108      	bne.n	8002392 <HAL_ADC_Init+0x1da>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x1da>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_ADC_Init+0x1dc>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d11c      	bne.n	80023d2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002398:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_Init+0x202>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Init+0x202>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_ADC_Init+0x204>
 80023ba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80023c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7e5b      	ldrb	r3, [r3, #25]
 80023d6:	035b      	lsls	r3, r3, #13
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023dc:	2a01      	cmp	r2, #1
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_Init+0x22e>
 80023e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e4:	e000      	b.n	80023e8 <HAL_ADC_Init+0x230>
 80023e6:	2200      	movs	r2, #0
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023f8:	4313      	orrs	r3, r2
 80023fa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d11b      	bne.n	800243e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7e5b      	ldrb	r3, [r3, #25]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	3b01      	subs	r3, #1
 8002414:	045a      	lsls	r2, r3, #17
 8002416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002418:	4313      	orrs	r3, r2
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	663b      	str	r3, [r7, #96]	; 0x60
 8002420:	e00d      	b.n	800243e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	2b01      	cmp	r3, #1
 8002444:	d054      	beq.n	80024f0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <HAL_ADC_Init+0x31c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_ADC_Init+0x2a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_ADC_Init+0x320>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d140      	bne.n	80024dc <HAL_ADC_Init+0x324>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002462:	d02a      	beq.n	80024ba <HAL_ADC_Init+0x302>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246c:	d022      	beq.n	80024b4 <HAL_ADC_Init+0x2fc>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002476:	d01a      	beq.n	80024ae <HAL_ADC_Init+0x2f6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002480:	d012      	beq.n	80024a8 <HAL_ADC_Init+0x2f0>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800248a:	d00a      	beq.n	80024a2 <HAL_ADC_Init+0x2ea>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002494:	d002      	beq.n	800249c <HAL_ADC_Init+0x2e4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	e023      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 800249c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024a0:	e020      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 80024a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024a6:	e01d      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 80024a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024ac:	e01a      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	e017      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 80024b4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80024b8:	e014      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 80024ba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80024be:	e011      	b.n	80024e4 <HAL_ADC_Init+0x32c>
 80024c0:	20000000 	.word	0x20000000
 80024c4:	431bde83 	.word	0x431bde83
 80024c8:	50000100 	.word	0x50000100
 80024cc:	50000300 	.word	0x50000300
 80024d0:	50000700 	.word	0x50000700
 80024d4:	50000400 	.word	0x50000400
 80024d8:	50000500 	.word	0x50000500
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024e8:	4313      	orrs	r3, r2
 80024ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ec:	4313      	orrs	r3, r2
 80024ee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d114      	bne.n	8002528 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800250c:	f023 0302 	bic.w	r3, r3, #2
 8002510:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7e1b      	ldrb	r3, [r3, #24]
 8002516:	039a      	lsls	r2, r3, #14
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4313      	orrs	r3, r2
 8002522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002524:	4313      	orrs	r3, r2
 8002526:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_ADC_Init+0x3f0>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002538:	430b      	orrs	r3, r1
 800253a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10c      	bne.n	800255e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f023 010f 	bic.w	r1, r3, #15
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020f 	bic.w	r2, r2, #15
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f023 0303 	bic.w	r3, r3, #3
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
 8002584:	e00a      	b.n	800259c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f023 0312 	bic.w	r3, r3, #18
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800259c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3768      	adds	r7, #104	; 0x68
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	fff0c007 	.word	0xfff0c007

080025ac <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 80f9 	bne.w	80027ba <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_Start+0x2a>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0f4      	b.n	80027c0 <HAL_ADC_Start+0x214>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 ff00 	bl	80033e4 <ADC_Enable>
 80025e4:	4603      	mov	r3, r0
 80025e6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 80e0 	bne.w	80027b0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260c:	d004      	beq.n	8002618 <HAL_ADC_Start+0x6c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6d      	ldr	r2, [pc, #436]	; (80027c8 <HAL_ADC_Start+0x21c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d106      	bne.n	8002626 <HAL_ADC_Start+0x7a>
 8002618:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_ADC_Start+0x220>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b00      	cmp	r3, #0
 8002622:	d010      	beq.n	8002646 <HAL_ADC_Start+0x9a>
 8002624:	e005      	b.n	8002632 <HAL_ADC_Start+0x86>
 8002626:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_ADC_Start+0x224>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_ADC_Start+0x9a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263a:	d004      	beq.n	8002646 <HAL_ADC_Start+0x9a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a64      	ldr	r2, [pc, #400]	; (80027d4 <HAL_ADC_Start+0x228>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d115      	bne.n	8002672 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d036      	beq.n	80026ce <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002668:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002670:	e02d      	b.n	80026ce <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002686:	d004      	beq.n	8002692 <HAL_ADC_Start+0xe6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a4e      	ldr	r2, [pc, #312]	; (80027c8 <HAL_ADC_Start+0x21c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_Start+0xfc>
 8002692:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e008      	b.n	80026ba <HAL_ADC_Start+0x10e>
 80026a8:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_ADC_Start+0x228>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d106      	bne.n	80026ea <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f023 0206 	bic.w	r2, r3, #6
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	221c      	movs	r2, #28
 80026fe:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002708:	d004      	beq.n	8002714 <HAL_ADC_Start+0x168>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2e      	ldr	r2, [pc, #184]	; (80027c8 <HAL_ADC_Start+0x21c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d106      	bne.n	8002722 <HAL_ADC_Start+0x176>
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_ADC_Start+0x220>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03e      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 8002720:	e005      	b.n	800272e <HAL_ADC_Start+0x182>
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_ADC_Start+0x224>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2b00      	cmp	r3, #0
 800272c:	d037      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002736:	d004      	beq.n	8002742 <HAL_ADC_Start+0x196>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_ADC_Start+0x21c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d106      	bne.n	8002750 <HAL_ADC_Start+0x1a4>
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_ADC_Start+0x220>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b05      	cmp	r3, #5
 800274c:	d027      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 800274e:	e005      	b.n	800275c <HAL_ADC_Start+0x1b0>
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_ADC_Start+0x224>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2b05      	cmp	r3, #5
 800275a:	d020      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002764:	d004      	beq.n	8002770 <HAL_ADC_Start+0x1c4>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_ADC_Start+0x21c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d106      	bne.n	800277e <HAL_ADC_Start+0x1d2>
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <HAL_ADC_Start+0x220>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b09      	cmp	r3, #9
 800277a:	d010      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 800277c:	e005      	b.n	800278a <HAL_ADC_Start+0x1de>
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_ADC_Start+0x224>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b09      	cmp	r3, #9
 8002788:	d009      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002792:	d004      	beq.n	800279e <HAL_ADC_Start+0x1f2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <HAL_ADC_Start+0x228>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10f      	bne.n	80027be <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0204 	orr.w	r2, r2, #4
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e006      	b.n	80027be <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027b8:	e001      	b.n	80027be <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	50000100 	.word	0x50000100
 80027cc:	50000300 	.word	0x50000300
 80027d0:	50000700 	.word	0x50000700
 80027d4:	50000400 	.word	0x50000400

080027d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_ADC_IRQHandler+0x38>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80bc 	beq.w	80029b0 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80b6 	beq.w	80029b0 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002864:	d004      	beq.n	8002870 <HAL_ADC_IRQHandler+0x7c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a90      	ldr	r2, [pc, #576]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d106      	bne.n	800287e <HAL_ADC_IRQHandler+0x8a>
 8002870:	4b8f      	ldr	r3, [pc, #572]	; (8002ab0 <HAL_ADC_IRQHandler+0x2bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2b00      	cmp	r3, #0
 800287a:	d03e      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 800287c:	e005      	b.n	800288a <HAL_ADC_IRQHandler+0x96>
 800287e:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <HAL_ADC_IRQHandler+0x2c0>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2b00      	cmp	r3, #0
 8002888:	d037      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002892:	d004      	beq.n	800289e <HAL_ADC_IRQHandler+0xaa>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a84      	ldr	r2, [pc, #528]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d106      	bne.n	80028ac <HAL_ADC_IRQHandler+0xb8>
 800289e:	4b84      	ldr	r3, [pc, #528]	; (8002ab0 <HAL_ADC_IRQHandler+0x2bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d027      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 80028aa:	e005      	b.n	80028b8 <HAL_ADC_IRQHandler+0xc4>
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_ADC_IRQHandler+0x2c0>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d020      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c0:	d004      	beq.n	80028cc <HAL_ADC_IRQHandler+0xd8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a79      	ldr	r2, [pc, #484]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d106      	bne.n	80028da <HAL_ADC_IRQHandler+0xe6>
 80028cc:	4b78      	ldr	r3, [pc, #480]	; (8002ab0 <HAL_ADC_IRQHandler+0x2bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d010      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 80028d8:	e005      	b.n	80028e6 <HAL_ADC_IRQHandler+0xf2>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_ADC_IRQHandler+0x2c0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d009      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ee:	d004      	beq.n	80028fa <HAL_ADC_IRQHandler+0x106>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a70      	ldr	r2, [pc, #448]	; (8002ab8 <HAL_ADC_IRQHandler+0x2c4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d104      	bne.n	8002904 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e00f      	b.n	8002924 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290c:	d004      	beq.n	8002918 <HAL_ADC_IRQHandler+0x124>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a66      	ldr	r2, [pc, #408]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d102      	bne.n	800291e <HAL_ADC_IRQHandler+0x12a>
 8002918:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800291c:	e000      	b.n	8002920 <HAL_ADC_IRQHandler+0x12c>
 800291e:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_ADC_IRQHandler+0x2c4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800292e:	2b00      	cmp	r3, #0
 8002930:	d137      	bne.n	80029a2 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002938:	2b00      	cmp	r3, #0
 800293a:	d132      	bne.n	80029a2 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02d      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11a      	bne.n	800298a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 020c 	bic.w	r2, r2, #12
 8002962:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d112      	bne.n	80029a2 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
 8002988:	e00b      	b.n	80029a2 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fbea 	bl	800217c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	220c      	movs	r2, #12
 80029ae:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_IRQHandler+0x1d0>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8138 	beq.w	8002c40 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8132 	beq.w	8002c40 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f0:	d004      	beq.n	80029fc <HAL_ADC_IRQHandler+0x208>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d106      	bne.n	8002a0a <HAL_ADC_IRQHandler+0x216>
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_ADC_IRQHandler+0x2bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03e      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a08:	e005      	b.n	8002a16 <HAL_ADC_IRQHandler+0x222>
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_ADC_IRQHandler+0x2c0>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d037      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x236>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d106      	bne.n	8002a38 <HAL_ADC_IRQHandler+0x244>
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_ADC_IRQHandler+0x2bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d027      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a36:	e005      	b.n	8002a44 <HAL_ADC_IRQHandler+0x250>
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_ADC_IRQHandler+0x2c0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d020      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a4c:	d004      	beq.n	8002a58 <HAL_ADC_IRQHandler+0x264>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a16      	ldr	r2, [pc, #88]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d106      	bne.n	8002a66 <HAL_ADC_IRQHandler+0x272>
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_ADC_IRQHandler+0x2bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	d010      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a64:	e005      	b.n	8002a72 <HAL_ADC_IRQHandler+0x27e>
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_ADC_IRQHandler+0x2c0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d009      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a7a:	d004      	beq.n	8002a86 <HAL_ADC_IRQHandler+0x292>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_ADC_IRQHandler+0x2c4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d104      	bne.n	8002a90 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	e018      	b.n	8002ac2 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x2b0>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a03      	ldr	r2, [pc, #12]	; (8002aac <HAL_ADC_IRQHandler+0x2b8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_IRQHandler+0x2c8>
 8002aa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aa8:	e009      	b.n	8002abe <HAL_ADC_IRQHandler+0x2ca>
 8002aaa:	bf00      	nop
 8002aac:	50000100 	.word	0x50000100
 8002ab0:	50000300 	.word	0x50000300
 8002ab4:	50000700 	.word	0x50000700
 8002ab8:	50000400 	.word	0x50000400
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_ADC_IRQHandler+0x514>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 80b0 	bne.w	8002c32 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80a3 	bne.w	8002c32 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 809d 	bne.w	8002c32 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8097 	beq.w	8002c32 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x324>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	; (8002d0c <HAL_ADC_IRQHandler+0x518>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_IRQHandler+0x332>
 8002b18:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_ADC_IRQHandler+0x51c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d03e      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b24:	e005      	b.n	8002b32 <HAL_ADC_IRQHandler+0x33e>
 8002b26:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <HAL_ADC_IRQHandler+0x520>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d037      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3a:	d004      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x352>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a72      	ldr	r2, [pc, #456]	; (8002d0c <HAL_ADC_IRQHandler+0x518>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_IRQHandler+0x360>
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_ADC_IRQHandler+0x51c>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d027      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b52:	e005      	b.n	8002b60 <HAL_ADC_IRQHandler+0x36c>
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_ADC_IRQHandler+0x520>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d020      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x380>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <HAL_ADC_IRQHandler+0x518>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d106      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x38e>
 8002b74:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_ADC_IRQHandler+0x51c>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2b07      	cmp	r3, #7
 8002b7e:	d010      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b80:	e005      	b.n	8002b8e <HAL_ADC_IRQHandler+0x39a>
 8002b82:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <HAL_ADC_IRQHandler+0x520>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2b07      	cmp	r3, #7
 8002b8c:	d009      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x3ae>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5a      	ldr	r2, [pc, #360]	; (8002d08 <HAL_ADC_IRQHandler+0x514>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d104      	bne.n	8002bac <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e00f      	b.n	8002bcc <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x3cc>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a54      	ldr	r2, [pc, #336]	; (8002d0c <HAL_ADC_IRQHandler+0x518>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_ADC_IRQHandler+0x3d2>
 8002bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_IRQHandler+0x3d4>
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_ADC_IRQHandler+0x514>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d12d      	bne.n	8002c32 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11a      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bf2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d112      	bne.n	8002c32 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
 8002c18:	e00b      	b.n	8002c32 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8c4 	bl	8002dc0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2260      	movs	r2, #96	; 0x60
 8002c3e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d011      	beq.n	8002c6e <HAL_ADC_IRQHandler+0x47a>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fa95 	bl	8002190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x4aa>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8aa 	bl	8002de8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d012      	beq.n	8002cce <HAL_ADC_IRQHandler+0x4da>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f89c 	bl	8002dfc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d04f      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x584>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04a      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e02d      	b.n	8002d4c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_IRQHandler+0x510>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <HAL_ADC_IRQHandler+0x518>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d109      	bne.n	8002d18 <HAL_ADC_IRQHandler+0x524>
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_ADC_IRQHandler+0x51c>)
 8002d06:	e008      	b.n	8002d1a <HAL_ADC_IRQHandler+0x526>
 8002d08:	50000400 	.word	0x50000400
 8002d0c:	50000100 	.word	0x50000100
 8002d10:	50000300 	.word	0x50000300
 8002d14:	50000700 	.word	0x50000700
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_ADC_IRQHandler+0x5c8>)
 8002d1a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10a      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	e007      	b.n	8002d4c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10e      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fa1a 	bl	80021a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2210      	movs	r2, #16
 8002d76:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x5c0>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f043 0208 	orr.w	r2, r3, #8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f810 	bl	8002dd4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002db4:	bf00      	nop
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	50000700 	.word	0x50000700

08002dc0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b09b      	sub	sp, #108	; 0x6c
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x22>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e2c8      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x5b4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 82ac 	bne.w	80033a2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d81c      	bhi.n	8002e8c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	461a      	mov	r2, r3
 8002e66:	231f      	movs	r3, #31
 8002e68:	4093      	lsls	r3, r2
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4019      	ands	r1, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8a:	e063      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d81e      	bhi.n	8002ed2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	3b1e      	subs	r3, #30
 8002ea8:	221f      	movs	r2, #31
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	4019      	ands	r1, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3b1e      	subs	r3, #30
 8002ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed0:	e040      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b0e      	cmp	r3, #14
 8002ed8:	d81e      	bhi.n	8002f18 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	3b3c      	subs	r3, #60	; 0x3c
 8002eee:	221f      	movs	r2, #31
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4019      	ands	r1, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	3b3c      	subs	r3, #60	; 0x3c
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
 8002f16:	e01d      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	3b5a      	subs	r3, #90	; 0x5a
 8002f2c:	221f      	movs	r2, #31
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4019      	ands	r1, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	3b5a      	subs	r3, #90	; 0x5a
 8002f48:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 80e5 	bne.w	800312e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d91c      	bls.n	8002fa6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6999      	ldr	r1, [r3, #24]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b1e      	subs	r3, #30
 8002f7e:	2207      	movs	r2, #7
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4019      	ands	r1, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6898      	ldr	r0, [r3, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	3b1e      	subs	r3, #30
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	e019      	b.n	8002fda <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6959      	ldr	r1, [r3, #20]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	4019      	ands	r1, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6898      	ldr	r0, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d84f      	bhi.n	800309c <HAL_ADC_ConfigChannel+0x28c>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003015 	.word	0x08003015
 8003008:	08003037 	.word	0x08003037
 800300c:	08003059 	.word	0x08003059
 8003010:	0800307b 	.word	0x0800307b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800301a:	4b99      	ldr	r3, [pc, #612]	; (8003280 <HAL_ADC_ConfigChannel+0x470>)
 800301c:	4013      	ands	r3, r2
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	0691      	lsls	r1, r2, #26
 8003024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003026:	430a      	orrs	r2, r1
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003032:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003034:	e07b      	b.n	800312e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <HAL_ADC_ConfigChannel+0x470>)
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	0691      	lsls	r1, r2, #26
 8003046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003048:	430a      	orrs	r2, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003054:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003056:	e06a      	b.n	800312e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_ADC_ConfigChannel+0x470>)
 8003060:	4013      	ands	r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	0691      	lsls	r1, r2, #26
 8003068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800306a:	430a      	orrs	r2, r1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003076:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003078:	e059      	b.n	800312e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003080:	4b7f      	ldr	r3, [pc, #508]	; (8003280 <HAL_ADC_ConfigChannel+0x470>)
 8003082:	4013      	ands	r3, r2
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	0691      	lsls	r1, r2, #26
 800308a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800308c:	430a      	orrs	r2, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003098:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800309a:	e048      	b.n	800312e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	069b      	lsls	r3, r3, #26
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d107      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030be:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	069b      	lsls	r3, r3, #26
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030e2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	069b      	lsls	r3, r3, #26
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003106:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	069b      	lsls	r3, r3, #26
 8003118:	429a      	cmp	r2, r3
 800311a:	d107      	bne.n	800312c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800312a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800312c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_ADC_ConfigChannel+0x33e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x33e>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_ADC_ConfigChannel+0x340>
 800314e:	2300      	movs	r3, #0
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8131 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00f      	beq.n	800317e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2201      	movs	r2, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43da      	mvns	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	400a      	ands	r2, r1
 8003178:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800317c:	e049      	b.n	8003212 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	409a      	lsls	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b09      	cmp	r3, #9
 800319e:	d91c      	bls.n	80031da <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6999      	ldr	r1, [r3, #24]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	3b1b      	subs	r3, #27
 80031b2:	2207      	movs	r2, #7
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	4019      	ands	r1, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6898      	ldr	r0, [r3, #8]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b1b      	subs	r3, #27
 80031cc:	fa00 f203 	lsl.w	r2, r0, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e01b      	b.n	8003212 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6959      	ldr	r1, [r3, #20]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	2207      	movs	r2, #7
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	4019      	ands	r1, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6898      	ldr	r0, [r3, #8]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	fa00 f203 	lsl.w	r2, r0, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800321a:	d004      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x416>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_ADC_ConfigChannel+0x474>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x41a>
 8003226:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_ADC_ConfigChannel+0x478>)
 8003228:	e000      	b.n	800322c <HAL_ADC_ConfigChannel+0x41c>
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_ADC_ConfigChannel+0x47c>)
 800322c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003246:	2b11      	cmp	r3, #17
 8003248:	d105      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800324a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800325a:	2b12      	cmp	r3, #18
 800325c:	f040 80ac 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 80a5 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003276:	d10b      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x480>
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <HAL_ADC_ConfigChannel+0x474>)
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e023      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x4b6>
 800327e:	bf00      	nop
 8003280:	83fff000 	.word	0x83fff000
 8003284:	50000100 	.word	0x50000100
 8003288:	50000300 	.word	0x50000300
 800328c:	50000700 	.word	0x50000700
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <HAL_ADC_ConfigChannel+0x5c0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d103      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x492>
 800329a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e011      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x4b6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <HAL_ADC_ConfigChannel+0x5c4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x4a2>
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_ADC_ConfigChannel+0x5c8>)
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e009      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x4b6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a48      	ldr	r2, [pc, #288]	; (80033d8 <HAL_ADC_ConfigChannel+0x5c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d102      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x4b2>
 80032bc:	4b45      	ldr	r3, [pc, #276]	; (80033d4 <HAL_ADC_ConfigChannel+0x5c4>)
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e001      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x4b6>
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x4d6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x4d6>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x4d8>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d150      	bne.n	800338e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_ADC_ConfigChannel+0x4fe>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x4fe>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_ADC_ConfigChannel+0x500>
 800330e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003310:	2b00      	cmp	r3, #0
 8003312:	d13c      	bne.n	800338e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d11d      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x548>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003324:	d118      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800332e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003330:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_ADC_ConfigChannel+0x5cc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0c9a      	lsrs	r2, r3, #18
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003348:	e002      	b.n	8003350 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3b01      	subs	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f9      	bne.n	800334a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003356:	e02e      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b11      	cmp	r3, #17
 800335e:	d10b      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x568>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003368:	d106      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003376:	e01e      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b12      	cmp	r3, #18
 800337e:	d11a      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800338c:	e013      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033a0:	e00a      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033b4:	e000      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033b6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	376c      	adds	r7, #108	; 0x6c
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	50000100 	.word	0x50000100
 80033d4:	50000400 	.word	0x50000400
 80033d8:	50000500 	.word	0x50000500
 80033dc:	20000000 	.word	0x20000000
 80033e0:	431bde83 	.word	0x431bde83

080033e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d108      	bne.n	8003410 <ADC_Enable+0x2c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <ADC_Enable+0x2c>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <ADC_Enable+0x2e>
 8003410:	2300      	movs	r3, #0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d143      	bne.n	800349e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <ADC_Enable+0xc4>)
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0210 	orr.w	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e02f      	b.n	80034a0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003450:	f7fe fe88 	bl	8002164 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003456:	e01b      	b.n	8003490 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003458:	f7fe fe84 	bl	8002164 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d914      	bls.n	8003490 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d00d      	beq.n	8003490 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e007      	b.n	80034a0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d1dc      	bne.n	8003458 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	8000003f 	.word	0x8000003f

080034ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <ADC_Disable+0x2c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <ADC_Disable+0x2c>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <ADC_Disable+0x2e>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d047      	beq.n	800356e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030d 	and.w	r3, r3, #13
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10f      	bne.n	800350c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0202 	orr.w	r2, r2, #2
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2203      	movs	r2, #3
 8003502:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003504:	f7fe fe2e 	bl	8002164 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800350a:	e029      	b.n	8003560 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e023      	b.n	8003570 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003528:	f7fe fe1c 	bl	8002164 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d914      	bls.n	8003560 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10d      	bne.n	8003560 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e007      	b.n	8003570 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d0dc      	beq.n	8003528 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0ed      	b.n	8003766 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd faf2 	bl	8000b80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ac:	f7fe fdda 	bl	8002164 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035b2:	e012      	b.n	80035da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035b4:	f7fe fdd6 	bl	8002164 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b0a      	cmp	r3, #10
 80035c0:	d90b      	bls.n	80035da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0c5      	b.n	8003766 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0e5      	beq.n	80035b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0202 	bic.w	r2, r2, #2
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f8:	f7fe fdb4 	bl	8002164 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035fe:	e012      	b.n	8003626 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003600:	f7fe fdb0 	bl	8002164 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b0a      	cmp	r3, #10
 800360c:	d90b      	bls.n	8003626 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2205      	movs	r2, #5
 800361e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e09f      	b.n	8003766 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7e1b      	ldrb	r3, [r3, #24]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d108      	bne.n	800364e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e007      	b.n	800365e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7e5b      	ldrb	r3, [r3, #25]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e007      	b.n	8003688 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7e9b      	ldrb	r3, [r3, #26]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d108      	bne.n	80036a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0220 	orr.w	r2, r2, #32
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e007      	b.n	80036b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0220 	bic.w	r2, r2, #32
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7edb      	ldrb	r3, [r3, #27]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d108      	bne.n	80036cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0210 	bic.w	r2, r2, #16
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e007      	b.n	80036dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0210 	orr.w	r2, r2, #16
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7f1b      	ldrb	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d108      	bne.n	80036f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0208 	orr.w	r2, r2, #8
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e007      	b.n	8003706 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0208 	bic.w	r2, r2, #8
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7f5b      	ldrb	r3, [r3, #29]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0204 	orr.w	r2, r2, #4
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e007      	b.n	8003730 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	ea42 0103 	orr.w	r1, r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	1e5a      	subs	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800379c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60d3      	str	r3, [r2, #12]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db0b      	blt.n	80037fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4907      	ldr	r1, [pc, #28]	; (800380c <__NVIC_EnableIRQ+0x38>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2001      	movs	r0, #1
 80037f6:	fa00 f202 	lsl.w	r2, r0, r2
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100

08003810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	; (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	; (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	; 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
         );
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	; 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff4c 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f2:	f7ff ff61 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 80038f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	6978      	ldr	r0, [r7, #20]
 80038fe:	f7ff ffb1 	bl	8003864 <NVIC_EncodePriority>
 8003902:	4602      	mov	r2, r0
 8003904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff80 	bl	8003810 <__NVIC_SetPriority>
}
 8003910:	bf00      	nop
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff54 	bl	80037d4 <__NVIC_EnableIRQ>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e037      	b.n	80039ba <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003960:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003964:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800396e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8b3 	bl	8003b08 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}  
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2204      	movs	r2, #4
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d024      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x72>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01f      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0204 	bic.w	r2, r2, #4
 8003a10:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06a      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a32:	e065      	b.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2202      	movs	r2, #2
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdc>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020a 	bic.w	r2, r2, #10
 8003a6a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a82:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d035      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a9c:	e030      	b.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d028      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 020e 	bic.w	r2, r2, #14
 8003ac6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
    }
  }
}  
 8003afe:	e7ff      	b.n	8003b00 <HAL_DMA_IRQHandler+0x13e>
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <DMA_CalcBaseAndBitshift+0x60>)
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d80f      	bhi.n	8003b3c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <DMA_CalcBaseAndBitshift+0x64>)
 8003b24:	4413      	add	r3, r2
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <DMA_CalcBaseAndBitshift+0x68>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <DMA_CalcBaseAndBitshift+0x6c>)
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003b3a:	e00e      	b.n	8003b5a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <DMA_CalcBaseAndBitshift+0x70>)
 8003b44:	4413      	add	r3, r2
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <DMA_CalcBaseAndBitshift+0x68>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <DMA_CalcBaseAndBitshift+0x74>)
 8003b58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40020407 	.word	0x40020407
 8003b6c:	bffdfff8 	.word	0xbffdfff8
 8003b70:	cccccccd 	.word	0xcccccccd
 8003b74:	40020000 	.word	0x40020000
 8003b78:	bffdfbf8 	.word	0xbffdfbf8
 8003b7c:	40020400 	.word	0x40020400

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8e:	e160      	b.n	8003e52 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8152 	beq.w	8003e4c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d005      	beq.n	8003bc0 <HAL_GPIO_Init+0x40>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d130      	bne.n	8003c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0201 	and.w	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d017      	beq.n	8003c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d123      	bne.n	8003cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0203 	and.w	r2, r3, #3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80ac 	beq.w	8003e4c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf4:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <HAL_GPIO_Init+0x2f0>)
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	4a5d      	ldr	r2, [pc, #372]	; (8003e70 <HAL_GPIO_Init+0x2f0>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6193      	str	r3, [r2, #24]
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_GPIO_Init+0x2f0>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d0c:	4a59      	ldr	r2, [pc, #356]	; (8003e74 <HAL_GPIO_Init+0x2f4>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	3302      	adds	r3, #2
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	220f      	movs	r2, #15
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d36:	d025      	beq.n	8003d84 <HAL_GPIO_Init+0x204>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_GPIO_Init+0x2f8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01f      	beq.n	8003d80 <HAL_GPIO_Init+0x200>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_GPIO_Init+0x2fc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d019      	beq.n	8003d7c <HAL_GPIO_Init+0x1fc>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4d      	ldr	r2, [pc, #308]	; (8003e80 <HAL_GPIO_Init+0x300>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <HAL_GPIO_Init+0x1f8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4c      	ldr	r2, [pc, #304]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00d      	beq.n	8003d74 <HAL_GPIO_Init+0x1f4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <HAL_GPIO_Init+0x308>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <HAL_GPIO_Init+0x1f0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a4a      	ldr	r2, [pc, #296]	; (8003e8c <HAL_GPIO_Init+0x30c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d68:	2306      	movs	r3, #6
 8003d6a:	e00c      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d6c:	2307      	movs	r3, #7
 8003d6e:	e00a      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d70:	2305      	movs	r3, #5
 8003d72:	e008      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d74:	2304      	movs	r3, #4
 8003d76:	e006      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e004      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e002      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_GPIO_Init+0x206>
 8003d84:	2300      	movs	r3, #0
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	f002 0203 	and.w	r2, r2, #3
 8003d8c:	0092      	lsls	r2, r2, #2
 8003d8e:	4093      	lsls	r3, r2
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d96:	4937      	ldr	r1, [pc, #220]	; (8003e74 <HAL_GPIO_Init+0x2f4>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003da4:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dc8:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003df2:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <HAL_GPIO_Init+0x310>)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f47f ae97 	bne.w	8003b90 <HAL_GPIO_Init+0x10>
  }
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010000 	.word	0x40010000
 8003e78:	48000400 	.word	0x48000400
 8003e7c:	48000800 	.word	0x48000800
 8003e80:	48000c00 	.word	0x48000c00
 8003e84:	48001000 	.word	0x48001000
 8003e88:	48001400 	.word	0x48001400
 8003e8c:	48001800 	.word	0x48001800
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e001      	b.n	8003eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed4:	787b      	ldrb	r3, [r7, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	041a      	lsls	r2, r3, #16
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43d9      	mvns	r1, r3
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	400b      	ands	r3, r1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f001 b83a 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 816f 	beq.w	8004242 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f64:	4bb5      	ldr	r3, [pc, #724]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d00c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f70:	4bb2      	ldr	r3, [pc, #712]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d15c      	bne.n	8004036 <HAL_RCC_OscConfig+0x10e>
 8003f7c:	4baf      	ldr	r3, [pc, #700]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f88:	d155      	bne.n	8004036 <HAL_RCC_OscConfig+0x10e>
 8003f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f8e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d102      	bne.n	8003fbc <HAL_RCC_OscConfig+0x94>
 8003fb6:	4ba1      	ldr	r3, [pc, #644]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	e015      	b.n	8003fe8 <HAL_RCC_OscConfig+0xc0>
 8003fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003fd8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fe4:	4b95      	ldr	r3, [pc, #596]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fec:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003ff0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003ff4:	fa92 f2a2 	rbit	r2, r2
 8003ff8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003ffc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004000:	fab2 f282 	clz	r2, r2
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	f002 021f 	and.w	r2, r2, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8111 	beq.w	8004240 <HAL_RCC_OscConfig+0x318>
 800401e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004022:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 8108 	bne.w	8004240 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f000 bfc6 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x12e>
 8004048:	4b7c      	ldr	r3, [pc, #496]	; (800423c <HAL_RCC_OscConfig+0x314>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7b      	ldr	r2, [pc, #492]	; (800423c <HAL_RCC_OscConfig+0x314>)
 800404e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e036      	b.n	80040c4 <HAL_RCC_OscConfig+0x19c>
 8004056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x158>
 8004066:	4b75      	ldr	r3, [pc, #468]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a74      	ldr	r2, [pc, #464]	; (800423c <HAL_RCC_OscConfig+0x314>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b72      	ldr	r3, [pc, #456]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a71      	ldr	r2, [pc, #452]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e021      	b.n	80040c4 <HAL_RCC_OscConfig+0x19c>
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x184>
 8004092:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a69      	ldr	r2, [pc, #420]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0x19c>
 80040ac:	4b63      	ldr	r3, [pc, #396]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a62      	ldr	r2, [pc, #392]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b60      	ldr	r3, [pc, #384]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a5f      	ldr	r2, [pc, #380]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d059      	beq.n	8004188 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe f846 	bl	8002164 <HAL_GetTick>
 80040d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040de:	f7fe f841 	bl	8002164 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d902      	bls.n	80040f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	f000 bf67 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80040f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004108:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d102      	bne.n	8004126 <HAL_RCC_OscConfig+0x1fe>
 8004120:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	e015      	b.n	8004152 <HAL_RCC_OscConfig+0x22a>
 8004126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800412a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800413a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800413e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004142:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004146:	fa93 f3a3 	rbit	r3, r3
 800414a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004156:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800415a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800415e:	fa92 f2a2 	rbit	r2, r2
 8004162:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004166:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800416a:	fab2 f282 	clz	r2, r2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	f042 0220 	orr.w	r2, r2, #32
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f002 021f 	and.w	r2, r2, #31
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ab      	beq.n	80040de <HAL_RCC_OscConfig+0x1b6>
 8004186:	e05c      	b.n	8004242 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd ffec 	bl	8002164 <HAL_GetTick>
 800418c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004192:	f7fd ffe7 	bl	8002164 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d902      	bls.n	80041a8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	f000 bf0d 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80041a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80041bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d102      	bne.n	80041da <HAL_RCC_OscConfig+0x2b2>
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_OscConfig+0x314>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	e015      	b.n	8004206 <HAL_RCC_OscConfig+0x2de>
 80041da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80041f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <HAL_RCC_OscConfig+0x314>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800420a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800420e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800421a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ab      	bne.n	8004192 <HAL_RCC_OscConfig+0x26a>
 800423a:	e002      	b.n	8004242 <HAL_RCC_OscConfig+0x31a>
 800423c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 817f 	beq.w	8004556 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004258:	4ba7      	ldr	r3, [pc, #668]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004264:	4ba4      	ldr	r3, [pc, #656]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d173      	bne.n	8004358 <HAL_RCC_OscConfig+0x430>
 8004270:	4ba1      	ldr	r3, [pc, #644]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d16c      	bne.n	8004358 <HAL_RCC_OscConfig+0x430>
 800427e:	2302      	movs	r3, #2
 8004280:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004290:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d102      	bne.n	80042ae <HAL_RCC_OscConfig+0x386>
 80042a8:	4b93      	ldr	r3, [pc, #588]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	e013      	b.n	80042d6 <HAL_RCC_OscConfig+0x3ae>
 80042ae:	2302      	movs	r3, #2
 80042b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042c0:	2302      	movs	r3, #2
 80042c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80042c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042d2:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2202      	movs	r2, #2
 80042d8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80042dc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80042e0:	fa92 f2a2 	rbit	r2, r2
 80042e4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80042e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80042ec:	fab2 f282 	clz	r2, r2
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	f042 0220 	orr.w	r2, r2, #32
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	f002 021f 	and.w	r2, r2, #31
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCC_OscConfig+0x3f6>
 8004308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d002      	beq.n	800431e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f000 be52 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	21f8      	movs	r1, #248	; 0xf8
 8004334:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800433c:	fa91 f1a1 	rbit	r1, r1
 8004340:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004344:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004348:	fab1 f181 	clz	r1, r1
 800434c:	b2c9      	uxtb	r1, r1
 800434e:	408b      	lsls	r3, r1
 8004350:	4969      	ldr	r1, [pc, #420]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	e0fe      	b.n	8004556 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8088 	beq.w	800447a <HAL_RCC_OscConfig+0x552>
 800436a:	2301      	movs	r3, #1
 800436c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800437c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800438a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	461a      	mov	r2, r3
 8004392:	2301      	movs	r3, #1
 8004394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004396:	f7fd fee5 	bl	8002164 <HAL_GetTick>
 800439a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fd fee0 	bl	8002164 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d902      	bls.n	80043b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	f000 be06 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80043c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d102      	bne.n	80043e6 <HAL_RCC_OscConfig+0x4be>
 80043e0:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	e013      	b.n	800440e <HAL_RCC_OscConfig+0x4e6>
 80043e6:	2302      	movs	r3, #2
 80043e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80043f8:	2302      	movs	r3, #2
 80043fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80043fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004402:	fa93 f3a3 	rbit	r3, r3
 8004406:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2202      	movs	r2, #2
 8004410:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004414:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004418:	fa92 f2a2 	rbit	r2, r2
 800441c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004420:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004424:	fab2 f282 	clz	r2, r2
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	f042 0220 	orr.w	r2, r2, #32
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f002 021f 	and.w	r2, r2, #31
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0af      	beq.n	80043a0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	21f8      	movs	r1, #248	; 0xf8
 8004456:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800445e:	fa91 f1a1 	rbit	r1, r1
 8004462:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004466:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800446a:	fab1 f181 	clz	r1, r1
 800446e:	b2c9      	uxtb	r1, r1
 8004470:	408b      	lsls	r3, r1
 8004472:	4921      	ldr	r1, [pc, #132]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e06d      	b.n	8004556 <HAL_RCC_OscConfig+0x62e>
 800447a:	2301      	movs	r3, #1
 800447c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800448c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004490:	fab3 f383 	clz	r3, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800449a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	2300      	movs	r3, #0
 80044a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd fe5d 	bl	8002164 <HAL_GetTick>
 80044aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fd fe58 	bl	8002164 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d902      	bls.n	80044c6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	f000 bd7e 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80044d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x5d4>
 80044f0:	4b01      	ldr	r3, [pc, #4]	; (80044f8 <HAL_RCC_OscConfig+0x5d0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	e016      	b.n	8004524 <HAL_RCC_OscConfig+0x5fc>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	2302      	movs	r3, #2
 80044fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800450e:	2302      	movs	r3, #2
 8004510:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004514:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004520:	4bbf      	ldr	r3, [pc, #764]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2202      	movs	r2, #2
 8004526:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800452a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800452e:	fa92 f2a2 	rbit	r2, r2
 8004532:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004536:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800453a:	fab2 f282 	clz	r2, r2
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	f042 0220 	orr.w	r2, r2, #32
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	f002 021f 	and.w	r2, r2, #31
 800454a:	2101      	movs	r1, #1
 800454c:	fa01 f202 	lsl.w	r2, r1, r2
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ac      	bne.n	80044b0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8113 	beq.w	8004792 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800456c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004570:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d07c      	beq.n	8004676 <HAL_RCC_OscConfig+0x74e>
 800457c:	2301      	movs	r3, #1
 800457e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800458e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	4ba2      	ldr	r3, [pc, #648]	; (8004824 <HAL_RCC_OscConfig+0x8fc>)
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	461a      	mov	r2, r3
 80045a2:	2301      	movs	r3, #1
 80045a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fd fddd 	bl	8002164 <HAL_GetTick>
 80045aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fd fdd8 	bl	8002164 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d902      	bls.n	80045c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	f000 bcfe 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80045c6:	2302      	movs	r3, #2
 80045c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d0:	fa93 f2a3 	rbit	r2, r3
 80045d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e6:	2202      	movs	r2, #2
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	fa93 f2a3 	rbit	r2, r3
 80045f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800460a:	2202      	movs	r2, #2
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004612:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004620:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004624:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004626:	4b7e      	ldr	r3, [pc, #504]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 8004628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004632:	2102      	movs	r1, #2
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800463a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	fa93 f1a3 	rbit	r1, r3
 8004644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004648:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800464c:	6019      	str	r1, [r3, #0]
  return result;
 800464e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004652:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2101      	movs	r1, #1
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d09d      	beq.n	80045b0 <HAL_RCC_OscConfig+0x688>
 8004674:	e08d      	b.n	8004792 <HAL_RCC_OscConfig+0x86a>
 8004676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800467a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004686:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	fa93 f2a3 	rbit	r2, r3
 8004690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004694:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004698:	601a      	str	r2, [r3, #0]
  return result;
 800469a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800469e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b5d      	ldr	r3, [pc, #372]	; (8004824 <HAL_RCC_OscConfig+0x8fc>)
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	461a      	mov	r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fd fd54 	bl	8002164 <HAL_GetTick>
 80046bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fd fd4f 	bl	8002164 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	f000 bc75 	b.w	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80046d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80046e0:	2202      	movs	r2, #2
 80046e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	fa93 f2a3 	rbit	r2, r3
 80046f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004704:	2202      	movs	r2, #2
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800470c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	fa93 f2a3 	rbit	r2, r3
 8004716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004724:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004728:	2202      	movs	r2, #2
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004730:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	fa93 f2a3 	rbit	r2, r3
 800473a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800473e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004742:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b36      	ldr	r3, [pc, #216]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 8004746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800474c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004750:	2102      	movs	r1, #2
 8004752:	6019      	str	r1, [r3, #0]
 8004754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004758:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	fa93 f1a3 	rbit	r1, r3
 8004762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004766:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800476a:	6019      	str	r1, [r3, #0]
  return result;
 800476c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004770:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2101      	movs	r1, #1
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d197      	bne.n	80046c2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004796:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 81a5 	beq.w	8004af2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d116      	bne.n	80047e8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	61d3      	str	r3, [r2, #28]
 80047c6:	4b16      	ldr	r3, [pc, #88]	; (8004820 <HAL_RCC_OscConfig+0x8f8>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <HAL_RCC_OscConfig+0x900>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d121      	bne.n	8004838 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <HAL_RCC_OscConfig+0x900>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <HAL_RCC_OscConfig+0x900>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004800:	f7fd fcb0 	bl	8002164 <HAL_GetTick>
 8004804:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e010      	b.n	800482c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fd fcab 	bl	8002164 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d908      	bls.n	800482c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e3d1      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	10908120 	.word	0x10908120
 8004828:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b8d      	ldr	r3, [pc, #564]	; (8004a64 <HAL_RCC_OscConfig+0xb3c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0e8      	beq.n	800480a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800483c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x92e>
 8004848:	4b87      	ldr	r3, [pc, #540]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4a86      	ldr	r2, [pc, #536]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6213      	str	r3, [r2, #32]
 8004854:	e035      	b.n	80048c2 <HAL_RCC_OscConfig+0x99a>
 8004856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x958>
 8004866:	4b80      	ldr	r3, [pc, #512]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4a7f      	ldr	r2, [pc, #508]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6213      	str	r3, [r2, #32]
 8004872:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	6213      	str	r3, [r2, #32]
 800487e:	e020      	b.n	80048c2 <HAL_RCC_OscConfig+0x99a>
 8004880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004884:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d10c      	bne.n	80048aa <HAL_RCC_OscConfig+0x982>
 8004890:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4a74      	ldr	r2, [pc, #464]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	6213      	str	r3, [r2, #32]
 800489c:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4a71      	ldr	r2, [pc, #452]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6213      	str	r3, [r2, #32]
 80048a8:	e00b      	b.n	80048c2 <HAL_RCC_OscConfig+0x99a>
 80048aa:	4b6f      	ldr	r3, [pc, #444]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	4a6e      	ldr	r2, [pc, #440]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6213      	str	r3, [r2, #32]
 80048b6:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4a6b      	ldr	r2, [pc, #428]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8081 	beq.w	80049d6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d4:	f7fd fc46 	bl	8002164 <HAL_GetTick>
 80048d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	e00b      	b.n	80048f6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd fc41 	bl	8002164 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e365      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80048f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80048fe:	2202      	movs	r2, #2
 8004900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004906:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	fa93 f2a3 	rbit	r2, r3
 8004910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004914:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004922:	2202      	movs	r2, #2
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	fa93 f2a3 	rbit	r2, r3
 8004934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004938:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800493c:	601a      	str	r2, [r3, #0]
  return result;
 800493e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004942:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004946:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f043 0302 	orr.w	r3, r3, #2
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d102      	bne.n	8004962 <HAL_RCC_OscConfig+0xa3a>
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	e013      	b.n	800498a <HAL_RCC_OscConfig+0xa62>
 8004962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004966:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800496a:	2202      	movs	r2, #2
 800496c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004972:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	fa93 f2a3 	rbit	r2, r3
 800497c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004980:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800498e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004992:	2102      	movs	r1, #2
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800499a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	fa92 f1a2 	rbit	r1, r2
 80049a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049a8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80049ac:	6011      	str	r1, [r2, #0]
  return result;
 80049ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049b2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	fab2 f282 	clz	r2, r2
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f002 021f 	and.w	r2, r2, #31
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f202 	lsl.w	r2, r1, r2
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d084      	beq.n	80048de <HAL_RCC_OscConfig+0x9b6>
 80049d4:	e083      	b.n	8004ade <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fd fbc5 	bl	8002164 <HAL_GetTick>
 80049da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd fbc0 	bl	8002164 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e2e4      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
 80049f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a00:	2202      	movs	r2, #2
 8004a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a08:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	fa93 f2a3 	rbit	r2, r3
 8004a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a24:	2202      	movs	r2, #2
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fa93 f2a3 	rbit	r2, r3
 8004a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a3e:	601a      	str	r2, [r3, #0]
  return result;
 8004a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a44:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f043 0302 	orr.w	r3, r3, #2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0xb44>
 8004a5e:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <HAL_RCC_OscConfig+0xb40>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	e017      	b.n	8004a94 <HAL_RCC_OscConfig+0xb6c>
 8004a64:	40007000 	.word	0x40007000
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a70:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a74:	2202      	movs	r2, #2
 8004a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a7c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	fa93 f2a3 	rbit	r2, r3
 8004a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	4bb3      	ldr	r3, [pc, #716]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a98:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	6011      	str	r1, [r2, #0]
 8004aa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aa4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	fa92 f1a2 	rbit	r1, r2
 8004aae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ab2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004ab6:	6011      	str	r1, [r2, #0]
  return result;
 8004ab8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004abc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	fab2 f282 	clz	r2, r2
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	f002 021f 	and.w	r2, r2, #31
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d180      	bne.n	80049e0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ade:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4b9e      	ldr	r3, [pc, #632]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4a9d      	ldr	r2, [pc, #628]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 825e 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b04:	4b96      	ldr	r3, [pc, #600]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	f000 821f 	beq.w	8004f50 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	f040 8170 	bne.w	8004e04 <HAL_RCC_OscConfig+0xedc>
 8004b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b28:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b36:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	fa93 f2a3 	rbit	r2, r3
 8004b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b48:	601a      	str	r2, [r3, #0]
  return result;
 8004b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b52:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	461a      	mov	r2, r3
 8004b66:	2300      	movs	r3, #0
 8004b68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fafb 	bl	8002164 <HAL_GetTick>
 8004b6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b72:	e009      	b.n	8004b88 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd faf6 	bl	8002164 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e21c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
 8004b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	fa93 f2a3 	rbit	r2, r3
 8004ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004bac:	601a      	str	r2, [r3, #0]
  return result;
 8004bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004bb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_OscConfig+0xcaa>
 8004bcc:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	e027      	b.n	8004c22 <HAL_RCC_OscConfig+0xcfa>
 8004bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	fa93 f2a3 	rbit	r2, r3
 8004bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c0a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	fa93 f2a3 	rbit	r2, r3
 8004c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c18:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c2e:	6011      	str	r1, [r2, #0]
 8004c30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	fa92 f1a2 	rbit	r1, r2
 8004c3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c42:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c46:	6011      	str	r1, [r2, #0]
  return result;
 8004c48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c4c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	fab2 f282 	clz	r2, r2
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	f042 0220 	orr.w	r2, r2, #32
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	f002 021f 	and.w	r2, r2, #31
 8004c62:	2101      	movs	r1, #1
 8004c64:	fa01 f202 	lsl.w	r2, r1, r2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d182      	bne.n	8004b74 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	f023 020f 	bic.w	r2, r3, #15
 8004c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	4937      	ldr	r1, [pc, #220]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004c88:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a19      	ldr	r1, [r3, #32]
 8004c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	492d      	ldr	r1, [pc, #180]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
 8004cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cc2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	fa93 f2a3 	rbit	r2, r3
 8004ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004cd4:	601a      	str	r2, [r3, #0]
  return result;
 8004cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004cde:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf6:	f7fd fa35 	bl	8002164 <HAL_GetTick>
 8004cfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cfe:	e009      	b.n	8004d14 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fd fa30 	bl	8002164 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e156      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
 8004d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d26:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	fa93 f2a3 	rbit	r2, r3
 8004d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d34:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d38:	601a      	str	r2, [r3, #0]
  return result;
 8004d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_RCC_OscConfig+0xe3c>
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <HAL_RCC_OscConfig+0xe38>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	e02a      	b.n	8004db4 <HAL_RCC_OscConfig+0xe8c>
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d76:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d9c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	fa93 f2a3 	rbit	r2, r3
 8004da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004daa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	4b86      	ldr	r3, [pc, #536]	; (8004fcc <HAL_RCC_OscConfig+0x10a4>)
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004db8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004dbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	fa92 f1a2 	rbit	r1, r2
 8004dd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dd4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004dd8:	6011      	str	r1, [r2, #0]
  return result;
 8004dda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dde:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	fab2 f282 	clz	r2, r2
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f042 0220 	orr.w	r2, r2, #32
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	f002 021f 	and.w	r2, r2, #31
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f43f af7f 	beq.w	8004d00 <HAL_RCC_OscConfig+0xdd8>
 8004e02:	e0dd      	b.n	8004fc0 <HAL_RCC_OscConfig+0x1098>
 8004e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e08:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	fa93 f2a3 	rbit	r2, r3
 8004e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e28:	601a      	str	r2, [r3, #0]
  return result;
 8004e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e32:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e34:	fab3 f383 	clz	r3, r3
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	461a      	mov	r2, r3
 8004e46:	2300      	movs	r3, #0
 8004e48:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4a:	f7fd f98b 	bl	8002164 <HAL_GetTick>
 8004e4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e52:	e009      	b.n	8004e68 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd f986 	bl	8002164 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0ac      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
 8004e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e6c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	fa93 f2a3 	rbit	r2, r3
 8004e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e88:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e8c:	601a      	str	r2, [r3, #0]
  return result;
 8004e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e92:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d102      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xf8a>
 8004eac:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_OscConfig+0x10a4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	e027      	b.n	8004f02 <HAL_RCC_OscConfig+0xfda>
 8004eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	fa93 f2a3 	rbit	r2, r3
 8004ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004edc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	fa93 f2a3 	rbit	r2, r3
 8004ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <HAL_RCC_OscConfig+0x10a4>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f06:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f0e:	6011      	str	r1, [r2, #0]
 8004f10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f14:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	fa92 f1a2 	rbit	r1, r2
 8004f1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f22:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004f26:	6011      	str	r1, [r2, #0]
  return result;
 8004f28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f2c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	fab2 f282 	clz	r2, r2
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	f042 0220 	orr.w	r2, r2, #32
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	f002 021f 	and.w	r2, r2, #31
 8004f42:	2101      	movs	r1, #1
 8004f44:	fa01 f202 	lsl.w	r2, r1, r2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d182      	bne.n	8004e54 <HAL_RCC_OscConfig+0xf2c>
 8004f4e:	e037      	b.n	8004fc0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e02e      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_OscConfig+0x10a4>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <HAL_RCC_OscConfig+0x10a4>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f78:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d117      	bne.n	8004fbc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f90:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d10b      	bne.n	8004fbc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000

08004fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b09e      	sub	sp, #120	; 0x78
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e162      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b90      	ldr	r3, [pc, #576]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d910      	bls.n	8005018 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b8d      	ldr	r3, [pc, #564]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	498b      	ldr	r1, [pc, #556]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b89      	ldr	r3, [pc, #548]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e14a      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b82      	ldr	r3, [pc, #520]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	497f      	ldr	r1, [pc, #508]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80dc 	beq.w	80051fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d13c      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xf6>
 800504c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005050:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d102      	bne.n	8005076 <HAL_RCC_ClockConfig+0xa6>
 8005070:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	e00f      	b.n	8005096 <HAL_RCC_ClockConfig+0xc6>
 8005076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800507a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	667b      	str	r3, [r7, #100]	; 0x64
 8005084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005088:	663b      	str	r3, [r7, #96]	; 0x60
 800508a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005092:	4b67      	ldr	r3, [pc, #412]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800509a:	65ba      	str	r2, [r7, #88]	; 0x58
 800509c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800509e:	fa92 f2a2 	rbit	r2, r2
 80050a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050a6:	fab2 f282 	clz	r2, r2
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	f042 0220 	orr.w	r2, r2, #32
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	f002 021f 	and.w	r2, r2, #31
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f202 	lsl.w	r2, r1, r2
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d17b      	bne.n	80051ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0f3      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d13c      	bne.n	8005148 <HAL_RCC_ClockConfig+0x178>
 80050ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x128>
 80050f2:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	e00f      	b.n	8005118 <HAL_RCC_ClockConfig+0x148>
 80050f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	fa93 f3a3 	rbit	r3, r3
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
 8005106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510a:	643b      	str	r3, [r7, #64]	; 0x40
 800510c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005114:	4b46      	ldr	r3, [pc, #280]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800511c:	63ba      	str	r2, [r7, #56]	; 0x38
 800511e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005120:	fa92 f2a2 	rbit	r2, r2
 8005124:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005128:	fab2 f282 	clz	r2, r2
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	f042 0220 	orr.w	r2, r2, #32
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	f002 021f 	and.w	r2, r2, #31
 8005138:	2101      	movs	r1, #1
 800513a:	fa01 f202 	lsl.w	r2, r1, r2
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d13a      	bne.n	80051ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b2      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
 8005148:	2302      	movs	r3, #2
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	fa93 f3a3 	rbit	r3, r3
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	b2db      	uxtb	r3, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d102      	bne.n	8005170 <HAL_RCC_ClockConfig+0x1a0>
 800516a:	4b31      	ldr	r3, [pc, #196]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	e00d      	b.n	800518c <HAL_RCC_ClockConfig+0x1bc>
 8005170:	2302      	movs	r3, #2
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	fa93 f3a3 	rbit	r3, r3
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	2302      	movs	r3, #2
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2202      	movs	r2, #2
 800518e:	61ba      	str	r2, [r7, #24]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	fa92 f2a2 	rbit	r2, r2
 8005196:	617a      	str	r2, [r7, #20]
  return result;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	fab2 f282 	clz	r2, r2
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	f042 0220 	orr.w	r2, r2, #32
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	f002 021f 	and.w	r2, r2, #31
 80051aa:	2101      	movs	r1, #1
 80051ac:	fa01 f202 	lsl.w	r2, r1, r2
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e079      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	491a      	ldr	r1, [pc, #104]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fc ffca 	bl	8002164 <HAL_GetTick>
 80051d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fc ffc6 	bl	8002164 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e061      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 020c 	and.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1eb      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d214      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 0207 	bic.w	r2, r3, #7
 8005212:	4906      	ldr	r1, [pc, #24]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <HAL_RCC_ClockConfig+0x25c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d005      	beq.n	8005234 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e040      	b.n	80052ae <HAL_RCC_ClockConfig+0x2de>
 800522c:	40022000 	.word	0x40022000
 8005230:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005240:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCC_ClockConfig+0x2e8>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	491a      	ldr	r1, [pc, #104]	; (80052b8 <HAL_RCC_ClockConfig+0x2e8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_RCC_ClockConfig+0x2e8>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4912      	ldr	r1, [pc, #72]	; (80052b8 <HAL_RCC_ClockConfig+0x2e8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005272:	f000 f829 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8005276:	4601      	mov	r1, r0
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_RCC_ClockConfig+0x2e8>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005280:	22f0      	movs	r2, #240	; 0xf0
 8005282:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	fa92 f2a2 	rbit	r2, r2
 800528a:	60fa      	str	r2, [r7, #12]
  return result;
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	fab2 f282 	clz	r2, r2
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	40d3      	lsrs	r3, r2
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x2ec>)
 8005298:	5cd3      	ldrb	r3, [r2, r3]
 800529a:	fa21 f303 	lsr.w	r3, r1, r3
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <HAL_RCC_ClockConfig+0x2f0>)
 80052a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <HAL_RCC_ClockConfig+0x2f4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fc fa04 	bl	80016b4 <HAL_InitTick>
  
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3778      	adds	r7, #120	; 0x78
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	08009d0c 	.word	0x08009d0c
 80052c0:	20000000 	.word	0x20000000
 80052c4:	20000004 	.word	0x20000004

080052c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08b      	sub	sp, #44	; 0x2c
 80052cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_RCC_GetSysClockFreq+0xc4>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f003 030c 	and.w	r3, r3, #12
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d002      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x30>
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d003      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0x36>
 80052f6:	e03f      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052f8:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_RCC_GetSysClockFreq+0xc8>)
 80052fa:	623b      	str	r3, [r7, #32]
      break;
 80052fc:	e03f      	b.n	800537e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005304:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005308:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	fa92 f2a2 	rbit	r2, r2
 8005310:	607a      	str	r2, [r7, #4]
  return result;
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	fab2 f282 	clz	r2, r2
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	40d3      	lsrs	r3, r2
 800531c:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <HAL_RCC_GetSysClockFreq+0xcc>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005322:	4b1a      	ldr	r3, [pc, #104]	; (800538c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	220f      	movs	r2, #15
 800532c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	fa92 f2a2 	rbit	r2, r2
 8005334:	60fa      	str	r2, [r7, #12]
  return result;
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	fab2 f282 	clz	r2, r2
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	40d3      	lsrs	r3, r2
 8005340:	4a15      	ldr	r2, [pc, #84]	; (8005398 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005350:	4a0f      	ldr	r2, [pc, #60]	; (8005390 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	fbb2 f2f3 	udiv	r2, r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	e007      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005362:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	fbb2 f2f3 	udiv	r2, r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	623b      	str	r3, [r7, #32]
      break;
 8005376:	e002      	b.n	800537e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_RCC_GetSysClockFreq+0xc8>)
 800537a:	623b      	str	r3, [r7, #32]
      break;
 800537c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537e:	6a3b      	ldr	r3, [r7, #32]
}
 8005380:	4618      	mov	r0, r3
 8005382:	372c      	adds	r7, #44	; 0x2c
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40021000 	.word	0x40021000
 8005390:	007a1200 	.word	0x007a1200
 8005394:	08009d24 	.word	0x08009d24
 8005398:	08009d34 	.word	0x08009d34

0800539c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a0:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053a2:	681b      	ldr	r3, [r3, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000000 	.word	0x20000000

080053b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053ba:	f7ff ffef 	bl	800539c <HAL_RCC_GetHCLKFreq>
 80053be:	4601      	mov	r1, r0
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	fa92 f2a2 	rbit	r2, r2
 80053d4:	603a      	str	r2, [r7, #0]
  return result;
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	fab2 f282 	clz	r2, r2
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	40d3      	lsrs	r3, r2
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053e2:	5cd3      	ldrb	r3, [r2, r3]
 80053e4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000
 80053f4:	08009d1c 	.word	0x08009d1c

080053f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80053fe:	f7ff ffcd 	bl	800539c <HAL_RCC_GetHCLKFreq>
 8005402:	4601      	mov	r1, r0
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800540c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005410:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	fa92 f2a2 	rbit	r2, r2
 8005418:	603a      	str	r2, [r7, #0]
  return result;
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	fab2 f282 	clz	r2, r2
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	40d3      	lsrs	r3, r2
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	08009d1c 	.word	0x08009d1c

0800543c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	220f      	movs	r2, #15
 800544a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 0203 	and.w	r2, r3, #3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_GetClockConfig+0x5c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	08db      	lsrs	r3, r3, #3
 8005476:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800547e:	4b07      	ldr	r3, [pc, #28]	; (800549c <HAL_RCC_GetClockConfig+0x60>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0207 	and.w	r2, r3, #7
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	601a      	str	r2, [r3, #0]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40021000 	.word	0x40021000
 800549c:	40022000 	.word	0x40022000

080054a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b092      	sub	sp, #72	; 0x48
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80d4 	beq.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c4:	4b4e      	ldr	r3, [pc, #312]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10e      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d0:	4b4b      	ldr	r3, [pc, #300]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	61d3      	str	r3, [r2, #28]
 80054dc:	4b48      	ldr	r3, [pc, #288]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ee:	4b45      	ldr	r3, [pc, #276]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d118      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fa:	4b42      	ldr	r3, [pc, #264]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a41      	ldr	r2, [pc, #260]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005504:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005506:	f7fc fe2d 	bl	8002164 <HAL_GetTick>
 800550a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550c:	e008      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550e:	f7fc fe29 	bl	8002164 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	; 0x64
 800551a:	d901      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e1d6      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	4b38      	ldr	r3, [pc, #224]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8084 	beq.w	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005548:	429a      	cmp	r2, r3
 800554a:	d07c      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800554c:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800555a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	fa93 f3a3 	rbit	r3, r3
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	461a      	mov	r2, r3
 8005576:	2301      	movs	r3, #1
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04b      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ae:	f7fc fdd9 	bl	8002164 <HAL_GetTick>
 80055b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b4:	e00a      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b6:	f7fc fdd5 	bl	8002164 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e180      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80055cc:	2302      	movs	r3, #2
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	fa93 f3a3 	rbit	r3, r3
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	2302      	movs	r3, #2
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	61fb      	str	r3, [r7, #28]
  return result;
 80055e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	fab3 f383 	clz	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f043 0302 	orr.w	r3, r3, #2
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d108      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80055fa:	4b01      	ldr	r3, [pc, #4]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	e00d      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005600:	40021000 	.word	0x40021000
 8005604:	40007000 	.word	0x40007000
 8005608:	10908100 	.word	0x10908100
 800560c:	2302      	movs	r3, #2
 800560e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	fa93 f3a3 	rbit	r3, r3
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	4b9a      	ldr	r3, [pc, #616]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2202      	movs	r2, #2
 800561e:	613a      	str	r2, [r7, #16]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	fa92 f2a2 	rbit	r2, r2
 8005626:	60fa      	str	r2, [r7, #12]
  return result;
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	fab2 f282 	clz	r2, r2
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	f002 021f 	and.w	r2, r2, #31
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f202 	lsl.w	r2, r1, r2
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0b7      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005646:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	498c      	ldr	r1, [pc, #560]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005658:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005660:	4b88      	ldr	r3, [pc, #544]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4a87      	ldr	r2, [pc, #540]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005678:	4b82      	ldr	r3, [pc, #520]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	f023 0203 	bic.w	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	497f      	ldr	r1, [pc, #508]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005696:	4b7b      	ldr	r3, [pc, #492]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	4978      	ldr	r1, [pc, #480]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056b4:	4b73      	ldr	r3, [pc, #460]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	4970      	ldr	r1, [pc, #448]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056d2:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f023 0210 	bic.w	r2, r3, #16
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4969      	ldr	r1, [pc, #420]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80056f0:	4b64      	ldr	r3, [pc, #400]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	4961      	ldr	r1, [pc, #388]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800570e:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f023 0220 	bic.w	r2, r3, #32
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	495a      	ldr	r1, [pc, #360]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800572c:	4b55      	ldr	r3, [pc, #340]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	4952      	ldr	r1, [pc, #328]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	494b      	ldr	r1, [pc, #300]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005768:	4b46      	ldr	r3, [pc, #280]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4943      	ldr	r1, [pc, #268]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005786:	4b3f      	ldr	r3, [pc, #252]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	493c      	ldr	r1, [pc, #240]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057a4:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	4934      	ldr	r1, [pc, #208]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80057c2:	4b30      	ldr	r3, [pc, #192]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	492d      	ldr	r1, [pc, #180]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	4925      	ldr	r1, [pc, #148]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	491e      	ldr	r1, [pc, #120]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800580c:	4313      	orrs	r3, r2
 800580e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800581c:	4b19      	ldr	r3, [pc, #100]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	4916      	ldr	r1, [pc, #88]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800582a:	4313      	orrs	r3, r2
 800582c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	490f      	ldr	r1, [pc, #60]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005848:	4313      	orrs	r3, r2
 800584a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	4907      	ldr	r1, [pc, #28]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005866:	4313      	orrs	r3, r2
 8005868:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00c      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005876:	4b03      	ldr	r3, [pc, #12]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	4913      	ldr	r1, [pc, #76]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800588c:	4313      	orrs	r3, r2
 800588e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800589c:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	490b      	ldr	r1, [pc, #44]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	4904      	ldr	r1, [pc, #16]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3748      	adds	r7, #72	; 0x48
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000

080058dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e09d      	b.n	8005a2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fe:	d009      	beq.n	8005914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	61da      	str	r2, [r3, #28]
 8005906:	e005      	b.n	8005914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb fe36 	bl	80015a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005954:	d902      	bls.n	800595c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e002      	b.n	8005962 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800595c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005960:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800596a:	d007      	beq.n	800597c <HAL_SPI_Init+0xa0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005974:	d002      	beq.n	800597c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	ea42 0103 	orr.w	r1, r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	f003 0204 	and.w	r2, r3, #4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059f8:	ea42 0103 	orr.w	r1, r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_SPI_Transmit+0x22>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e15f      	b.n	8005d14 <HAL_SPI_Transmit+0x2e2>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a5c:	f7fc fb82 	bl	8002164 <HAL_GetTick>
 8005a60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a76:	e148      	b.n	8005d0a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_SPI_Transmit+0x52>
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a88:	e13f      	b.n	8005d0a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad4:	d10f      	bne.n	8005af6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d007      	beq.n	8005b14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b1c:	d94f      	bls.n	8005bbe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Transmit+0xfa>
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d142      	bne.n	8005bb2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	1c9a      	adds	r2, r3, #2
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b50:	e02f      	b.n	8005bb2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d112      	bne.n	8005b86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b84:	e015      	b.n	8005bb2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b86:	f7fc faed 	bl	8002164 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d803      	bhi.n	8005b9e <HAL_SPI_Transmit+0x16c>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d102      	bne.n	8005ba4 <HAL_SPI_Transmit+0x172>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005bb0:	e0ab      	b.n	8005d0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ca      	bne.n	8005b52 <HAL_SPI_Transmit+0x120>
 8005bbc:	e080      	b.n	8005cc0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_SPI_Transmit+0x19a>
 8005bc6:	8afb      	ldrh	r3, [r7, #22]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d174      	bne.n	8005cb6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d912      	bls.n	8005bfc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b02      	subs	r3, #2
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bfa:	e05c      	b.n	8005cb6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c22:	e048      	b.n	8005cb6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d12b      	bne.n	8005c8a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d912      	bls.n	8005c62 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b02      	subs	r3, #2
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c60:	e029      	b.n	8005cb6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c88:	e015      	b.n	8005cb6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c8a:	f7fc fa6b 	bl	8002164 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d803      	bhi.n	8005ca2 <HAL_SPI_Transmit+0x270>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_Transmit+0x276>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005cb4:	e029      	b.n	8005d0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1b1      	bne.n	8005c24 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fd07 	bl	80066d8 <SPI_EndRxTxTransaction>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e003      	b.n	8005d0a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d40:	e11a      	b.n	8005f78 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d4a:	d112      	bne.n	8005d72 <HAL_SPI_Receive+0x56>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10e      	bne.n	8005d72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2204      	movs	r2, #4
 8005d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4613      	mov	r3, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f90e 	bl	8005f8a <HAL_SPI_TransmitReceive>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	e107      	b.n	8005f82 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_SPI_Receive+0x64>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e100      	b.n	8005f82 <HAL_SPI_Receive+0x266>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d88:	f7fc f9ec 	bl	8002164 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_SPI_Receive+0x7e>
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d9e:	e0eb      	b.n	8005f78 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dea:	d908      	bls.n	8005dfe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	e007      	b.n	8005e0e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e0c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e16:	d10f      	bne.n	8005e38 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d007      	beq.n	8005e56 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e5e:	d86f      	bhi.n	8005f40 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e60:	e034      	b.n	8005ecc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d117      	bne.n	8005ea0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f103 020c 	add.w	r2, r3, #12
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	7812      	ldrb	r2, [r2, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e9e:	e015      	b.n	8005ecc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea0:	f7fc f960 	bl	8002164 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d803      	bhi.n	8005eb8 <HAL_SPI_Receive+0x19c>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d102      	bne.n	8005ebe <HAL_SPI_Receive+0x1a2>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005eca:	e055      	b.n	8005f78 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1c4      	bne.n	8005e62 <HAL_SPI_Receive+0x146>
 8005ed8:	e038      	b.n	8005f4c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d115      	bne.n	8005f14 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f12:	e015      	b.n	8005f40 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f14:	f7fc f926 	bl	8002164 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d803      	bhi.n	8005f2c <HAL_SPI_Receive+0x210>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d102      	bne.n	8005f32 <HAL_SPI_Receive+0x216>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005f3e:	e01b      	b.n	8005f78 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1c6      	bne.n	8005eda <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fb69 	bl	8006628 <SPI_EndRxTransaction>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
 8005f6e:	e003      	b.n	8005f78 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b08a      	sub	sp, #40	; 0x28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x26>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e20a      	b.n	80063c6 <HAL_SPI_TransmitReceive+0x43c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb8:	f7fc f8d4 	bl	8002164 <HAL_GetTick>
 8005fbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fcc:	887b      	ldrh	r3, [r7, #2]
 8005fce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005fd0:	887b      	ldrh	r3, [r7, #2]
 8005fd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fd4:	7efb      	ldrb	r3, [r7, #27]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x6e>
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe0:	d106      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x66>
 8005fea:	7efb      	ldrb	r3, [r7, #27]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d003      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ff6:	e1e0      	b.n	80063ba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_SPI_TransmitReceive+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_TransmitReceive+0x80>
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006010:	e1d3      	b.n	80063ba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b04      	cmp	r3, #4
 800601c:	d003      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2205      	movs	r2, #5
 8006022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	887a      	ldrh	r2, [r7, #2]
 8006036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	887a      	ldrh	r2, [r7, #2]
 800603e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	887a      	ldrh	r2, [r7, #2]
 800604c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	887a      	ldrh	r2, [r7, #2]
 8006052:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006068:	d802      	bhi.n	8006070 <HAL_SPI_TransmitReceive+0xe6>
 800606a:	8a3b      	ldrh	r3, [r7, #16]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d908      	bls.n	8006082 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e007      	b.n	8006092 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006090:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	d007      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b8:	f240 8081 	bls.w	80061be <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x140>
 80060c4:	8a7b      	ldrh	r3, [r7, #18]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d16d      	bne.n	80061a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	881a      	ldrh	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ee:	e05a      	b.n	80061a6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d11b      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x1ac>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d016      	beq.n	8006136 <HAL_SPI_TransmitReceive+0x1ac>
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	2b01      	cmp	r3, #1
 800610c:	d113      	bne.n	8006136 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	881a      	ldrh	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	1c9a      	adds	r2, r3, #2
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d11c      	bne.n	800617e <HAL_SPI_TransmitReceive+0x1f4>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d016      	beq.n	800617e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	b292      	uxth	r2, r2
 800615c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800617a:	2301      	movs	r3, #1
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800617e:	f7fb fff1 	bl	8002164 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618a:	429a      	cmp	r2, r3
 800618c:	d80b      	bhi.n	80061a6 <HAL_SPI_TransmitReceive+0x21c>
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d007      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80061a4:	e109      	b.n	80063ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d19f      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x166>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d199      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x166>
 80061bc:	e0e3      	b.n	8006386 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x244>
 80061c6:	8a7b      	ldrh	r3, [r7, #18]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f040 80cf 	bne.w	800636c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d912      	bls.n	80061fe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b02      	subs	r3, #2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061fc:	e0b6      	b.n	800636c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006224:	e0a2      	b.n	800636c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d134      	bne.n	800629e <HAL_SPI_TransmitReceive+0x314>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d02f      	beq.n	800629e <HAL_SPI_TransmitReceive+0x314>
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	2b01      	cmp	r3, #1
 8006242:	d12c      	bne.n	800629e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	d912      	bls.n	8006274 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	881a      	ldrh	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b02      	subs	r3, #2
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006272:	e012      	b.n	800629a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d148      	bne.n	800633e <HAL_SPI_TransmitReceive+0x3b4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d042      	beq.n	800633e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d923      	bls.n	800630c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	b292      	uxth	r2, r2
 80062d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b02      	subs	r3, #2
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d81f      	bhi.n	800633a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	e016      	b.n	800633a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f103 020c 	add.w	r2, r3, #12
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	7812      	ldrb	r2, [r2, #0]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800633a:	2301      	movs	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800633e:	f7fb ff11 	bl	8002164 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_TransmitReceive+0x3cc>
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d102      	bne.n	800635c <HAL_SPI_TransmitReceive+0x3d2>
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d107      	bne.n	800636c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800636a:	e026      	b.n	80063ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	f47f af57 	bne.w	8006226 <HAL_SPI_TransmitReceive+0x29c>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	f47f af50 	bne.w	8006226 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f9a4 	bl	80066d8 <SPI_EndRxTxTransaction>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b0:	e003      	b.n	80063ba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063dc:	b2db      	uxtb	r3, r3
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063fc:	f7fb feb2 	bl	8002164 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4413      	add	r3, r2
 800640a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800640c:	f7fb feaa 	bl	8002164 <HAL_GetTick>
 8006410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006412:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	0d1b      	lsrs	r3, r3, #20
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	fb02 f303 	mul.w	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006422:	e054      	b.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d050      	beq.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800642c:	f7fb fe9a 	bl	8002164 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	429a      	cmp	r2, r3
 800643a:	d902      	bls.n	8006442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13d      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645a:	d111      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d004      	beq.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d107      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006488:	d10f      	bne.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e017      	b.n	80064ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d19b      	bne.n	8006424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000000 	.word	0x20000000

080064fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800650e:	f7fb fe29 	bl	8002164 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	4413      	add	r3, r2
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800651e:	f7fb fe21 	bl	8002164 <HAL_GetTick>
 8006522:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800652c:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	00da      	lsls	r2, r3, #3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	0d1b      	lsrs	r3, r3, #20
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006544:	e060      	b.n	8006608 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800654c:	d107      	bne.n	800655e <SPI_WaitFifoStateUntilTimeout+0x62>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800655c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d050      	beq.n	8006608 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006566:	f7fb fdfd 	bl	8002164 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	429a      	cmp	r2, r3
 8006574:	d902      	bls.n	800657c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	d13d      	bne.n	80065f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800658a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006594:	d111      	bne.n	80065ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659e:	d004      	beq.n	80065aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a8:	d107      	bne.n	80065ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c2:	d10f      	bne.n	80065e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e010      	b.n	800661a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	3b01      	subs	r3, #1
 8006606:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d196      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3728      	adds	r7, #40	; 0x28
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000000 	.word	0x20000000

08006628 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663c:	d111      	bne.n	8006662 <SPI_EndRxTransaction+0x3a>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006646:	d004      	beq.n	8006652 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006650:	d107      	bne.n	8006662 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006660:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	2180      	movs	r1, #128	; 0x80
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff febd 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e023      	b.n	80066d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006690:	d11d      	bne.n	80066ce <SPI_EndRxTransaction+0xa6>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669a:	d004      	beq.n	80066a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d113      	bne.n	80066ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ff22 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e000      	b.n	80066d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff03 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e027      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fe68 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e014      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fedc 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e000      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e049      	b.n	800680a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fb fada 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 fd3a 	bl	800721c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	d001      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e04f      	b.n	80068cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <HAL_TIM_Base_Start_IT+0x76>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006856:	d018      	beq.n	800688a <HAL_TIM_Base_Start_IT+0x76>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <HAL_TIM_Base_Start_IT+0xc8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_TIM_Base_Start_IT+0x76>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_TIM_Base_Start_IT+0x76>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_TIM_Base_Start_IT+0x76>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_TIM_Base_Start_IT+0x76>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a19      	ldr	r2, [pc, #100]	; (80068ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d115      	bne.n	80068b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006892:	4013      	ands	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b06      	cmp	r3, #6
 800689a:	d015      	beq.n	80068c8 <HAL_TIM_Base_Start_IT+0xb4>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a2:	d011      	beq.n	80068c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b4:	e008      	b.n	80068c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e000      	b.n	80068ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40013400 	.word	0x40013400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40015000 	.word	0x40015000
 80068f0:	00010007 	.word	0x00010007

080068f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e049      	b.n	800699a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f841 	bl	80069a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3304      	adds	r3, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f000 fc72 	bl	800721c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <HAL_TIM_PWM_Start+0x24>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	bf14      	ite	ne
 80069d4:	2301      	movne	r3, #1
 80069d6:	2300      	moveq	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e03c      	b.n	8006a56 <HAL_TIM_PWM_Start+0x9e>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d109      	bne.n	80069f6 <HAL_TIM_PWM_Start+0x3e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	bf14      	ite	ne
 80069ee:	2301      	movne	r3, #1
 80069f0:	2300      	moveq	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	e02f      	b.n	8006a56 <HAL_TIM_PWM_Start+0x9e>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d109      	bne.n	8006a10 <HAL_TIM_PWM_Start+0x58>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	e022      	b.n	8006a56 <HAL_TIM_PWM_Start+0x9e>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	d109      	bne.n	8006a2a <HAL_TIM_PWM_Start+0x72>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	bf14      	ite	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	2300      	moveq	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	e015      	b.n	8006a56 <HAL_TIM_PWM_Start+0x9e>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b10      	cmp	r3, #16
 8006a2e:	d109      	bne.n	8006a44 <HAL_TIM_PWM_Start+0x8c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	e008      	b.n	8006a56 <HAL_TIM_PWM_Start+0x9e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e0a1      	b.n	8006ba2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start+0xb6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a6c:	e023      	b.n	8006ab6 <HAL_TIM_PWM_Start+0xfe>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_PWM_Start+0xc6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a7c:	e01b      	b.n	8006ab6 <HAL_TIM_PWM_Start+0xfe>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_PWM_Start+0xd6>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8c:	e013      	b.n	8006ab6 <HAL_TIM_PWM_Start+0xfe>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b0c      	cmp	r3, #12
 8006a92:	d104      	bne.n	8006a9e <HAL_TIM_PWM_Start+0xe6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a9c:	e00b      	b.n	8006ab6 <HAL_TIM_PWM_Start+0xfe>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d104      	bne.n	8006aae <HAL_TIM_PWM_Start+0xf6>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aac:	e003      	b.n	8006ab6 <HAL_TIM_PWM_Start+0xfe>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2201      	movs	r2, #1
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 ffea 	bl	8007a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a38      	ldr	r2, [pc, #224]	; (8006bac <HAL_TIM_PWM_Start+0x1f4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x148>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a37      	ldr	r2, [pc, #220]	; (8006bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x148>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a35      	ldr	r2, [pc, #212]	; (8006bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x148>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a34      	ldr	r2, [pc, #208]	; (8006bb8 <HAL_TIM_PWM_Start+0x200>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x148>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a32      	ldr	r2, [pc, #200]	; (8006bbc <HAL_TIM_PWM_Start+0x204>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_TIM_PWM_Start+0x148>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a31      	ldr	r2, [pc, #196]	; (8006bc0 <HAL_TIM_PWM_Start+0x208>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d101      	bne.n	8006b04 <HAL_TIM_PWM_Start+0x14c>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_TIM_PWM_Start+0x14e>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a23      	ldr	r2, [pc, #140]	; (8006bac <HAL_TIM_PWM_Start+0x1f4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01d      	beq.n	8006b60 <HAL_TIM_PWM_Start+0x1a8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d018      	beq.n	8006b60 <HAL_TIM_PWM_Start+0x1a8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <HAL_TIM_PWM_Start+0x20c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <HAL_TIM_PWM_Start+0x1a8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a22      	ldr	r2, [pc, #136]	; (8006bc8 <HAL_TIM_PWM_Start+0x210>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_TIM_PWM_Start+0x1a8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIM_PWM_Start+0x1f8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_TIM_PWM_Start+0x1a8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a18      	ldr	r2, [pc, #96]	; (8006bb4 <HAL_TIM_PWM_Start+0x1fc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_TIM_PWM_Start+0x1a8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <HAL_TIM_PWM_Start+0x208>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d115      	bne.n	8006b8c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <HAL_TIM_PWM_Start+0x214>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d015      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x1e6>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d011      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	e008      	b.n	8006b9e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e000      	b.n	8006ba0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40012c00 	.word	0x40012c00
 8006bb0:	40013400 	.word	0x40013400
 8006bb4:	40014000 	.word	0x40014000
 8006bb8:	40014400 	.word	0x40014400
 8006bbc:	40014800 	.word	0x40014800
 8006bc0:	40015000 	.word	0x40015000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	00010007 	.word	0x00010007

08006bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d122      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d11b      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0202 	mvn.w	r2, #2
 8006bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fae3 	bl	80071de <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fad5 	bl	80071ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fae6 	bl	80071f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d122      	bne.n	8006c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d11b      	bne.n	8006c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0204 	mvn.w	r2, #4
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fab9 	bl	80071de <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 faab 	bl	80071ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fabc 	bl	80071f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d122      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d11b      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0208 	mvn.w	r2, #8
 8006ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa8f 	bl	80071de <HAL_TIM_IC_CaptureCallback>
 8006cc0:	e005      	b.n	8006cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa81 	bl	80071ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fa92 	bl	80071f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d122      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d11b      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0210 	mvn.w	r2, #16
 8006cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa65 	bl	80071de <HAL_TIM_IC_CaptureCallback>
 8006d14:	e005      	b.n	8006d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa57 	bl	80071ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fa68 	bl	80071f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d10e      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d107      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0201 	mvn.w	r2, #1
 8006d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa fbd0 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	2b80      	cmp	r3, #128	; 0x80
 8006d60:	d10e      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d107      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 ffce 	bl	8007d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8e:	d10e      	bne.n	8006dae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9a:	2b80      	cmp	r3, #128	; 0x80
 8006d9c:	d107      	bne.n	8006dae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 ffc1 	bl	8007d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d10e      	bne.n	8006dda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d107      	bne.n	8006dda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa16 	bl	8007206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d10e      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d107      	bne.n	8006e06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f06f 0220 	mvn.w	r2, #32
 8006dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 ff81 	bl	8007d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e0ff      	b.n	800702e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b14      	cmp	r3, #20
 8006e3a:	f200 80f0 	bhi.w	800701e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	0800701f 	.word	0x0800701f
 8006e4c:	0800701f 	.word	0x0800701f
 8006e50:	0800701f 	.word	0x0800701f
 8006e54:	08006ed9 	.word	0x08006ed9
 8006e58:	0800701f 	.word	0x0800701f
 8006e5c:	0800701f 	.word	0x0800701f
 8006e60:	0800701f 	.word	0x0800701f
 8006e64:	08006f1b 	.word	0x08006f1b
 8006e68:	0800701f 	.word	0x0800701f
 8006e6c:	0800701f 	.word	0x0800701f
 8006e70:	0800701f 	.word	0x0800701f
 8006e74:	08006f5b 	.word	0x08006f5b
 8006e78:	0800701f 	.word	0x0800701f
 8006e7c:	0800701f 	.word	0x0800701f
 8006e80:	0800701f 	.word	0x0800701f
 8006e84:	08006f9d 	.word	0x08006f9d
 8006e88:	0800701f 	.word	0x0800701f
 8006e8c:	0800701f 	.word	0x0800701f
 8006e90:	0800701f 	.word	0x0800701f
 8006e94:	08006fdd 	.word	0x08006fdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fa5a 	bl	8007358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0208 	orr.w	r2, r2, #8
 8006eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0204 	bic.w	r2, r2, #4
 8006ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	619a      	str	r2, [r3, #24]
      break;
 8006ed6:	e0a5      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fad4 	bl	800748c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	619a      	str	r2, [r3, #24]
      break;
 8006f18:	e084      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fb47 	bl	80075b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0208 	orr.w	r2, r2, #8
 8006f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0204 	bic.w	r2, r2, #4
 8006f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69d9      	ldr	r1, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	61da      	str	r2, [r3, #28]
      break;
 8006f58:	e064      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fbb9 	bl	80076d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	021a      	lsls	r2, r3, #8
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	61da      	str	r2, [r3, #28]
      break;
 8006f9a:	e043      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fc08 	bl	80077b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0208 	orr.w	r2, r2, #8
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fda:	e023      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fc52 	bl	800788c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800701c:	e002      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
      break;
 8007022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIM_ConfigClockSource+0x1c>
 8007050:	2302      	movs	r3, #2
 8007052:	e0b6      	b.n	80071c2 <HAL_TIM_ConfigClockSource+0x18a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800707e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007090:	d03e      	beq.n	8007110 <HAL_TIM_ConfigClockSource+0xd8>
 8007092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007096:	f200 8087 	bhi.w	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 800709a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800709e:	f000 8086 	beq.w	80071ae <HAL_TIM_ConfigClockSource+0x176>
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a6:	d87f      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070a8:	2b70      	cmp	r3, #112	; 0x70
 80070aa:	d01a      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0xaa>
 80070ac:	2b70      	cmp	r3, #112	; 0x70
 80070ae:	d87b      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070b0:	2b60      	cmp	r3, #96	; 0x60
 80070b2:	d050      	beq.n	8007156 <HAL_TIM_ConfigClockSource+0x11e>
 80070b4:	2b60      	cmp	r3, #96	; 0x60
 80070b6:	d877      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070b8:	2b50      	cmp	r3, #80	; 0x50
 80070ba:	d03c      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0xfe>
 80070bc:	2b50      	cmp	r3, #80	; 0x50
 80070be:	d873      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d058      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x13e>
 80070c4:	2b40      	cmp	r3, #64	; 0x40
 80070c6:	d86f      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070c8:	2b30      	cmp	r3, #48	; 0x30
 80070ca:	d064      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x15e>
 80070cc:	2b30      	cmp	r3, #48	; 0x30
 80070ce:	d86b      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d060      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x15e>
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d867      	bhi.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d05c      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x15e>
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d05a      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x15e>
 80070e0:	e062      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070f2:	f000 fcb1 	bl	8007a58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	609a      	str	r2, [r3, #8]
      break;
 800710e:	e04f      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007120:	f000 fc9a 	bl	8007a58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007132:	609a      	str	r2, [r3, #8]
      break;
 8007134:	e03c      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007142:	461a      	mov	r2, r3
 8007144:	f000 fc0e 	bl	8007964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2150      	movs	r1, #80	; 0x50
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fc67 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 8007154:	e02c      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007162:	461a      	mov	r2, r3
 8007164:	f000 fc2d 	bl	80079c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2160      	movs	r1, #96	; 0x60
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fc57 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 8007174:	e01c      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007182:	461a      	mov	r2, r3
 8007184:	f000 fbee 	bl	8007964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2140      	movs	r1, #64	; 0x40
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fc47 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 8007194:	e00c      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f000 fc3e 	bl	8007a22 <TIM_ITRx_SetConfig>
      break;
 80071a6:	e003      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
      break;
 80071ac:	e000      	b.n	80071b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a42      	ldr	r2, [pc, #264]	; (8007338 <TIM_Base_SetConfig+0x11c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <TIM_Base_SetConfig+0x40>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d00f      	beq.n	800725c <TIM_Base_SetConfig+0x40>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a3f      	ldr	r2, [pc, #252]	; (800733c <TIM_Base_SetConfig+0x120>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00b      	beq.n	800725c <TIM_Base_SetConfig+0x40>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a3e      	ldr	r2, [pc, #248]	; (8007340 <TIM_Base_SetConfig+0x124>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <TIM_Base_SetConfig+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a3d      	ldr	r2, [pc, #244]	; (8007344 <TIM_Base_SetConfig+0x128>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a3c      	ldr	r2, [pc, #240]	; (8007348 <TIM_Base_SetConfig+0x12c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d108      	bne.n	800726e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a31      	ldr	r2, [pc, #196]	; (8007338 <TIM_Base_SetConfig+0x11c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d01f      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d01b      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a2e      	ldr	r2, [pc, #184]	; (800733c <TIM_Base_SetConfig+0x120>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d017      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a2d      	ldr	r2, [pc, #180]	; (8007340 <TIM_Base_SetConfig+0x124>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a2c      	ldr	r2, [pc, #176]	; (8007344 <TIM_Base_SetConfig+0x128>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a2c      	ldr	r2, [pc, #176]	; (800734c <TIM_Base_SetConfig+0x130>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2b      	ldr	r2, [pc, #172]	; (8007350 <TIM_Base_SetConfig+0x134>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <TIM_Base_SetConfig+0x138>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_Base_SetConfig+0x9a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a25      	ldr	r2, [pc, #148]	; (8007348 <TIM_Base_SetConfig+0x12c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d108      	bne.n	80072c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a12      	ldr	r2, [pc, #72]	; (8007338 <TIM_Base_SetConfig+0x11c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <TIM_Base_SetConfig+0x100>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a13      	ldr	r2, [pc, #76]	; (8007344 <TIM_Base_SetConfig+0x128>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00f      	beq.n	800731c <TIM_Base_SetConfig+0x100>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a13      	ldr	r2, [pc, #76]	; (800734c <TIM_Base_SetConfig+0x130>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00b      	beq.n	800731c <TIM_Base_SetConfig+0x100>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a12      	ldr	r2, [pc, #72]	; (8007350 <TIM_Base_SetConfig+0x134>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_Base_SetConfig+0x100>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a11      	ldr	r2, [pc, #68]	; (8007354 <TIM_Base_SetConfig+0x138>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_Base_SetConfig+0x100>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a0c      	ldr	r2, [pc, #48]	; (8007348 <TIM_Base_SetConfig+0x12c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d103      	bne.n	8007324 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	615a      	str	r2, [r3, #20]
}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40012c00 	.word	0x40012c00
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40013400 	.word	0x40013400
 8007348:	40015000 	.word	0x40015000
 800734c:	40014000 	.word	0x40014000
 8007350:	40014400 	.word	0x40014400
 8007354:	40014800 	.word	0x40014800

08007358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0303 	bic.w	r3, r3, #3
 8007392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 0302 	bic.w	r3, r3, #2
 80073a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a30      	ldr	r2, [pc, #192]	; (8007474 <TIM_OC1_SetConfig+0x11c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <TIM_OC1_SetConfig+0x88>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a2f      	ldr	r2, [pc, #188]	; (8007478 <TIM_OC1_SetConfig+0x120>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00f      	beq.n	80073e0 <TIM_OC1_SetConfig+0x88>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a2e      	ldr	r2, [pc, #184]	; (800747c <TIM_OC1_SetConfig+0x124>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <TIM_OC1_SetConfig+0x88>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a2d      	ldr	r2, [pc, #180]	; (8007480 <TIM_OC1_SetConfig+0x128>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_OC1_SetConfig+0x88>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a2c      	ldr	r2, [pc, #176]	; (8007484 <TIM_OC1_SetConfig+0x12c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC1_SetConfig+0x88>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2b      	ldr	r2, [pc, #172]	; (8007488 <TIM_OC1_SetConfig+0x130>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10c      	bne.n	80073fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0308 	bic.w	r3, r3, #8
 80073e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f023 0304 	bic.w	r3, r3, #4
 80073f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <TIM_OC1_SetConfig+0x11c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <TIM_OC1_SetConfig+0xd2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <TIM_OC1_SetConfig+0x120>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00f      	beq.n	800742a <TIM_OC1_SetConfig+0xd2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1b      	ldr	r2, [pc, #108]	; (800747c <TIM_OC1_SetConfig+0x124>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00b      	beq.n	800742a <TIM_OC1_SetConfig+0xd2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1a      	ldr	r2, [pc, #104]	; (8007480 <TIM_OC1_SetConfig+0x128>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d007      	beq.n	800742a <TIM_OC1_SetConfig+0xd2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a19      	ldr	r2, [pc, #100]	; (8007484 <TIM_OC1_SetConfig+0x12c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_OC1_SetConfig+0xd2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a18      	ldr	r2, [pc, #96]	; (8007488 <TIM_OC1_SetConfig+0x130>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d111      	bne.n	800744e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40012c00 	.word	0x40012c00
 8007478:	40013400 	.word	0x40013400
 800747c:	40014000 	.word	0x40014000
 8007480:	40014400 	.word	0x40014400
 8007484:	40014800 	.word	0x40014800
 8007488:	40015000 	.word	0x40015000

0800748c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f023 0210 	bic.w	r2, r3, #16
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0320 	bic.w	r3, r3, #32
 80074da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a2c      	ldr	r2, [pc, #176]	; (800759c <TIM_OC2_SetConfig+0x110>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d007      	beq.n	8007500 <TIM_OC2_SetConfig+0x74>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a2b      	ldr	r2, [pc, #172]	; (80075a0 <TIM_OC2_SetConfig+0x114>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d003      	beq.n	8007500 <TIM_OC2_SetConfig+0x74>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <TIM_OC2_SetConfig+0x118>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10d      	bne.n	800751c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a1f      	ldr	r2, [pc, #124]	; (800759c <TIM_OC2_SetConfig+0x110>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <TIM_OC2_SetConfig+0xc0>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <TIM_OC2_SetConfig+0x114>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00f      	beq.n	800754c <TIM_OC2_SetConfig+0xc0>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <TIM_OC2_SetConfig+0x11c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_OC2_SetConfig+0xc0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <TIM_OC2_SetConfig+0x120>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_OC2_SetConfig+0xc0>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <TIM_OC2_SetConfig+0x124>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC2_SetConfig+0xc0>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <TIM_OC2_SetConfig+0x118>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d113      	bne.n	8007574 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007552:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800755a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400
 80075a4:	40015000 	.word	0x40015000
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800

080075b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a2b      	ldr	r2, [pc, #172]	; (80076c0 <TIM_OC3_SetConfig+0x10c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <TIM_OC3_SetConfig+0x72>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2a      	ldr	r2, [pc, #168]	; (80076c4 <TIM_OC3_SetConfig+0x110>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_OC3_SetConfig+0x72>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a29      	ldr	r2, [pc, #164]	; (80076c8 <TIM_OC3_SetConfig+0x114>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d10d      	bne.n	8007642 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800762c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007640:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <TIM_OC3_SetConfig+0x10c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <TIM_OC3_SetConfig+0xbe>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <TIM_OC3_SetConfig+0x110>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00f      	beq.n	8007672 <TIM_OC3_SetConfig+0xbe>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1d      	ldr	r2, [pc, #116]	; (80076cc <TIM_OC3_SetConfig+0x118>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00b      	beq.n	8007672 <TIM_OC3_SetConfig+0xbe>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1c      	ldr	r2, [pc, #112]	; (80076d0 <TIM_OC3_SetConfig+0x11c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d007      	beq.n	8007672 <TIM_OC3_SetConfig+0xbe>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <TIM_OC3_SetConfig+0x120>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d003      	beq.n	8007672 <TIM_OC3_SetConfig+0xbe>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <TIM_OC3_SetConfig+0x114>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d113      	bne.n	800769a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	40015000 	.word	0x40015000
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800

080076d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	031b      	lsls	r3, r3, #12
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <TIM_OC4_SetConfig+0xc8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <TIM_OC4_SetConfig+0x8c>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <TIM_OC4_SetConfig+0xcc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00f      	beq.n	8007764 <TIM_OC4_SetConfig+0x8c>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <TIM_OC4_SetConfig+0xd0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00b      	beq.n	8007764 <TIM_OC4_SetConfig+0x8c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a17      	ldr	r2, [pc, #92]	; (80077ac <TIM_OC4_SetConfig+0xd4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_OC4_SetConfig+0x8c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a16      	ldr	r2, [pc, #88]	; (80077b0 <TIM_OC4_SetConfig+0xd8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_OC4_SetConfig+0x8c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <TIM_OC4_SetConfig+0xdc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d109      	bne.n	8007778 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800776a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40012c00 	.word	0x40012c00
 80077a4:	40013400 	.word	0x40013400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800
 80077b4:	40015000 	.word	0x40015000

080077b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a19      	ldr	r2, [pc, #100]	; (8007874 <TIM_OC5_SetConfig+0xbc>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d013      	beq.n	800783a <TIM_OC5_SetConfig+0x82>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a18      	ldr	r2, [pc, #96]	; (8007878 <TIM_OC5_SetConfig+0xc0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00f      	beq.n	800783a <TIM_OC5_SetConfig+0x82>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a17      	ldr	r2, [pc, #92]	; (800787c <TIM_OC5_SetConfig+0xc4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00b      	beq.n	800783a <TIM_OC5_SetConfig+0x82>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	; (8007880 <TIM_OC5_SetConfig+0xc8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d007      	beq.n	800783a <TIM_OC5_SetConfig+0x82>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a15      	ldr	r2, [pc, #84]	; (8007884 <TIM_OC5_SetConfig+0xcc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d003      	beq.n	800783a <TIM_OC5_SetConfig+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a14      	ldr	r2, [pc, #80]	; (8007888 <TIM_OC5_SetConfig+0xd0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d109      	bne.n	800784e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	621a      	str	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40012c00 	.word	0x40012c00
 8007878:	40013400 	.word	0x40013400
 800787c:	40014000 	.word	0x40014000
 8007880:	40014400 	.word	0x40014400
 8007884:	40014800 	.word	0x40014800
 8007888:	40015000 	.word	0x40015000

0800788c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	051b      	lsls	r3, r3, #20
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a1a      	ldr	r2, [pc, #104]	; (800794c <TIM_OC6_SetConfig+0xc0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <TIM_OC6_SetConfig+0x84>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a19      	ldr	r2, [pc, #100]	; (8007950 <TIM_OC6_SetConfig+0xc4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00f      	beq.n	8007910 <TIM_OC6_SetConfig+0x84>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a18      	ldr	r2, [pc, #96]	; (8007954 <TIM_OC6_SetConfig+0xc8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_OC6_SetConfig+0x84>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <TIM_OC6_SetConfig+0xcc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_OC6_SetConfig+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a16      	ldr	r2, [pc, #88]	; (800795c <TIM_OC6_SetConfig+0xd0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC6_SetConfig+0x84>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <TIM_OC6_SetConfig+0xd4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d109      	bne.n	8007924 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007916:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	40012c00 	.word	0x40012c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800
 8007960:	40015000 	.word	0x40015000

08007964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f023 0201 	bic.w	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800798e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f023 030a 	bic.w	r3, r3, #10
 80079a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b087      	sub	sp, #28
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	f023 0210 	bic.w	r2, r3, #16
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	031b      	lsls	r3, r3, #12
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f043 0307 	orr.w	r3, r3, #7
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	609a      	str	r2, [r3, #8]
}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2201      	movs	r2, #1
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1a      	ldr	r2, [r3, #32]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	401a      	ands	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a1a      	ldr	r2, [r3, #32]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e06d      	b.n	8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a30      	ldr	r2, [pc, #192]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a2f      	ldr	r2, [pc, #188]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a2d      	ldr	r2, [pc, #180]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d01d      	beq.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b78:	d018      	beq.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1c      	ldr	r2, [pc, #112]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d013      	beq.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00e      	beq.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d009      	beq.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d004      	beq.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a11      	ldr	r2, [pc, #68]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d10c      	bne.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40015000 	.word	0x40015000
 8007bf0:	40000400 	.word	0x40000400
 8007bf4:	40000800 	.word	0x40000800
 8007bf8:	40014000 	.word	0x40014000

08007bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e06a      	b.n	8007cee <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d009      	beq.n	8007cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d004      	beq.n	8007cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a16      	ldr	r2, [pc, #88]	; (8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d115      	bne.n	8007cdc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	051b      	lsls	r3, r3, #20
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40013400 	.word	0x40013400
 8007d04:	40015000 	.word	0x40015000

08007d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e040      	b.n	8007dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fa f93c 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2224      	movs	r2, #36	; 0x24
 8007d70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0201 	bic.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f82c 	bl	8007de0 <UART_SetConfig>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e022      	b.n	8007dd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9f4 	bl	8008188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa7b 	bl	80082cc <UART_CheckIdleState>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b92      	ldr	r3, [pc, #584]	; (8008054 <UART_SetConfig+0x274>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	6979      	ldr	r1, [r7, #20]
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a80      	ldr	r2, [pc, #512]	; (8008058 <UART_SetConfig+0x278>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d120      	bne.n	8007e9e <UART_SetConfig+0xbe>
 8007e5c:	4b7f      	ldr	r3, [pc, #508]	; (800805c <UART_SetConfig+0x27c>)
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d817      	bhi.n	8007e98 <UART_SetConfig+0xb8>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x90>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e81 	.word	0x08007e81
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007e93 	.word	0x08007e93
 8007e7c:	08007e87 	.word	0x08007e87
 8007e80:	2301      	movs	r3, #1
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e0b5      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007e86:	2302      	movs	r3, #2
 8007e88:	77fb      	strb	r3, [r7, #31]
 8007e8a:	e0b2      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007e8c:	2304      	movs	r3, #4
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e0af      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007e92:	2308      	movs	r3, #8
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e0ac      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007e98:	2310      	movs	r3, #16
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e0a9      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a6f      	ldr	r2, [pc, #444]	; (8008060 <UART_SetConfig+0x280>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d124      	bne.n	8007ef2 <UART_SetConfig+0x112>
 8007ea8:	4b6c      	ldr	r3, [pc, #432]	; (800805c <UART_SetConfig+0x27c>)
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eb4:	d011      	beq.n	8007eda <UART_SetConfig+0xfa>
 8007eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eba:	d817      	bhi.n	8007eec <UART_SetConfig+0x10c>
 8007ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec0:	d011      	beq.n	8007ee6 <UART_SetConfig+0x106>
 8007ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec6:	d811      	bhi.n	8007eec <UART_SetConfig+0x10c>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <UART_SetConfig+0xf4>
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed0:	d006      	beq.n	8007ee0 <UART_SetConfig+0x100>
 8007ed2:	e00b      	b.n	8007eec <UART_SetConfig+0x10c>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e08b      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007eda:	2302      	movs	r3, #2
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e088      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e085      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e082      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007eec:	2310      	movs	r3, #16
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e07f      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a5b      	ldr	r2, [pc, #364]	; (8008064 <UART_SetConfig+0x284>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d124      	bne.n	8007f46 <UART_SetConfig+0x166>
 8007efc:	4b57      	ldr	r3, [pc, #348]	; (800805c <UART_SetConfig+0x27c>)
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007f04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f08:	d011      	beq.n	8007f2e <UART_SetConfig+0x14e>
 8007f0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f0e:	d817      	bhi.n	8007f40 <UART_SetConfig+0x160>
 8007f10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f14:	d011      	beq.n	8007f3a <UART_SetConfig+0x15a>
 8007f16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f1a:	d811      	bhi.n	8007f40 <UART_SetConfig+0x160>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <UART_SetConfig+0x148>
 8007f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f24:	d006      	beq.n	8007f34 <UART_SetConfig+0x154>
 8007f26:	e00b      	b.n	8007f40 <UART_SetConfig+0x160>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e061      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e05e      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f34:	2304      	movs	r3, #4
 8007f36:	77fb      	strb	r3, [r7, #31]
 8007f38:	e05b      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	77fb      	strb	r3, [r7, #31]
 8007f3e:	e058      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f40:	2310      	movs	r3, #16
 8007f42:	77fb      	strb	r3, [r7, #31]
 8007f44:	e055      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a47      	ldr	r2, [pc, #284]	; (8008068 <UART_SetConfig+0x288>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d124      	bne.n	8007f9a <UART_SetConfig+0x1ba>
 8007f50:	4b42      	ldr	r3, [pc, #264]	; (800805c <UART_SetConfig+0x27c>)
 8007f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f5c:	d011      	beq.n	8007f82 <UART_SetConfig+0x1a2>
 8007f5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f62:	d817      	bhi.n	8007f94 <UART_SetConfig+0x1b4>
 8007f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f68:	d011      	beq.n	8007f8e <UART_SetConfig+0x1ae>
 8007f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f6e:	d811      	bhi.n	8007f94 <UART_SetConfig+0x1b4>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <UART_SetConfig+0x19c>
 8007f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f78:	d006      	beq.n	8007f88 <UART_SetConfig+0x1a8>
 8007f7a:	e00b      	b.n	8007f94 <UART_SetConfig+0x1b4>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e037      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f82:	2302      	movs	r3, #2
 8007f84:	77fb      	strb	r3, [r7, #31]
 8007f86:	e034      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e031      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	77fb      	strb	r3, [r7, #31]
 8007f92:	e02e      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f94:	2310      	movs	r3, #16
 8007f96:	77fb      	strb	r3, [r7, #31]
 8007f98:	e02b      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a33      	ldr	r2, [pc, #204]	; (800806c <UART_SetConfig+0x28c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d124      	bne.n	8007fee <UART_SetConfig+0x20e>
 8007fa4:	4b2d      	ldr	r3, [pc, #180]	; (800805c <UART_SetConfig+0x27c>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fb0:	d011      	beq.n	8007fd6 <UART_SetConfig+0x1f6>
 8007fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fb6:	d817      	bhi.n	8007fe8 <UART_SetConfig+0x208>
 8007fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fbc:	d011      	beq.n	8007fe2 <UART_SetConfig+0x202>
 8007fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc2:	d811      	bhi.n	8007fe8 <UART_SetConfig+0x208>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <UART_SetConfig+0x1f0>
 8007fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fcc:	d006      	beq.n	8007fdc <UART_SetConfig+0x1fc>
 8007fce:	e00b      	b.n	8007fe8 <UART_SetConfig+0x208>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	77fb      	strb	r3, [r7, #31]
 8007fd4:	e00d      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	77fb      	strb	r3, [r7, #31]
 8007fda:	e00a      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e007      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e004      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e001      	b.n	8007ff2 <UART_SetConfig+0x212>
 8007fee:	2310      	movs	r3, #16
 8007ff0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffa:	d16b      	bne.n	80080d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007ffc:	7ffb      	ldrb	r3, [r7, #31]
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d838      	bhi.n	8008074 <UART_SetConfig+0x294>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <UART_SetConfig+0x228>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	0800802d 	.word	0x0800802d
 800800c:	08008035 	.word	0x08008035
 8008010:	0800803d 	.word	0x0800803d
 8008014:	08008075 	.word	0x08008075
 8008018:	08008043 	.word	0x08008043
 800801c:	08008075 	.word	0x08008075
 8008020:	08008075 	.word	0x08008075
 8008024:	08008075 	.word	0x08008075
 8008028:	0800804b 	.word	0x0800804b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800802c:	f7fd f9c2 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8008030:	61b8      	str	r0, [r7, #24]
        break;
 8008032:	e024      	b.n	800807e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008034:	f7fd f9e0 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 8008038:	61b8      	str	r0, [r7, #24]
        break;
 800803a:	e020      	b.n	800807e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <UART_SetConfig+0x290>)
 800803e:	61bb      	str	r3, [r7, #24]
        break;
 8008040:	e01d      	b.n	800807e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008042:	f7fd f941 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8008046:	61b8      	str	r0, [r7, #24]
        break;
 8008048:	e019      	b.n	800807e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804e:	61bb      	str	r3, [r7, #24]
        break;
 8008050:	e015      	b.n	800807e <UART_SetConfig+0x29e>
 8008052:	bf00      	nop
 8008054:	efff69f3 	.word	0xefff69f3
 8008058:	40013800 	.word	0x40013800
 800805c:	40021000 	.word	0x40021000
 8008060:	40004400 	.word	0x40004400
 8008064:	40004800 	.word	0x40004800
 8008068:	40004c00 	.word	0x40004c00
 800806c:	40005000 	.word	0x40005000
 8008070:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	77bb      	strb	r3, [r7, #30]
        break;
 800807c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d073      	beq.n	800816c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	005a      	lsls	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	085b      	lsrs	r3, r3, #1
 800808e:	441a      	add	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	fbb2 f3f3 	udiv	r3, r2, r3
 8008098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b0f      	cmp	r3, #15
 800809e:	d916      	bls.n	80080ce <UART_SetConfig+0x2ee>
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a6:	d212      	bcs.n	80080ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f023 030f 	bic.w	r3, r3, #15
 80080b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	b29a      	uxth	r2, r3
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	89fa      	ldrh	r2, [r7, #14]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	e04e      	b.n	800816c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	77bb      	strb	r3, [r7, #30]
 80080d2:	e04b      	b.n	800816c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d4:	7ffb      	ldrb	r3, [r7, #31]
 80080d6:	2b08      	cmp	r3, #8
 80080d8:	d827      	bhi.n	800812a <UART_SetConfig+0x34a>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <UART_SetConfig+0x300>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	08008105 	.word	0x08008105
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	08008115 	.word	0x08008115
 80080ec:	0800812b 	.word	0x0800812b
 80080f0:	0800811b 	.word	0x0800811b
 80080f4:	0800812b 	.word	0x0800812b
 80080f8:	0800812b 	.word	0x0800812b
 80080fc:	0800812b 	.word	0x0800812b
 8008100:	08008123 	.word	0x08008123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fd f956 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8008108:	61b8      	str	r0, [r7, #24]
        break;
 800810a:	e013      	b.n	8008134 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800810c:	f7fd f974 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 8008110:	61b8      	str	r0, [r7, #24]
        break;
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <UART_SetConfig+0x3a4>)
 8008116:	61bb      	str	r3, [r7, #24]
        break;
 8008118:	e00c      	b.n	8008134 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811a:	f7fd f8d5 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 800811e:	61b8      	str	r0, [r7, #24]
        break;
 8008120:	e008      	b.n	8008134 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008126:	61bb      	str	r3, [r7, #24]
        break;
 8008128:	e004      	b.n	8008134 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	77bb      	strb	r3, [r7, #30]
        break;
 8008132:	bf00      	nop
    }

    if (pclk != 0U)
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	085a      	lsrs	r2, r3, #1
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	441a      	add	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b0f      	cmp	r3, #15
 8008152:	d909      	bls.n	8008168 <UART_SetConfig+0x388>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815a:	d205      	bcs.n	8008168 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60da      	str	r2, [r3, #12]
 8008166:	e001      	b.n	800816c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008178:	7fbb      	ldrb	r3, [r7, #30]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	007a1200 	.word	0x007a1200

08008188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01a      	beq.n	800829e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008286:	d10a      	bne.n	800829e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	605a      	str	r2, [r3, #4]
  }
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b098      	sub	sp, #96	; 0x60
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082dc:	f7f9 ff42 	bl	8002164 <HAL_GetTick>
 80082e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d12e      	bne.n	800834e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f8:	2200      	movs	r2, #0
 80082fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f88c 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d021      	beq.n	800834e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800831e:	653b      	str	r3, [r7, #80]	; 0x50
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008328:	647b      	str	r3, [r7, #68]	; 0x44
 800832a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800832e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e062      	b.n	8008414 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b04      	cmp	r3, #4
 800835a:	d149      	bne.n	80083f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f856 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d03c      	beq.n	80083f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	623b      	str	r3, [r7, #32]
   return(result);
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008394:	633b      	str	r3, [r7, #48]	; 0x30
 8008396:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e6      	bne.n	8008376 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	64bb      	str	r3, [r7, #72]	; 0x48
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c8:	61fa      	str	r2, [r7, #28]
 80083ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	617b      	str	r3, [r7, #20]
   return(result);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e5      	bne.n	80083a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e011      	b.n	8008414 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3758      	adds	r7, #88	; 0x58
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842c:	e049      	b.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d045      	beq.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7f9 fe95 	bl	8002164 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <UART_WaitOnFlagUntilTimeout+0x30>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e048      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d031      	beq.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b08      	cmp	r3, #8
 800846a:	d110      	bne.n	800848e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2208      	movs	r2, #8
 8008472:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f838 	bl	80084ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2208      	movs	r2, #8
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e029      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849c:	d111      	bne.n	80084c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f81e 	bl	80084ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e00f      	b.n	80084e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4013      	ands	r3, r2
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	bf0c      	ite	eq
 80084d2:	2301      	moveq	r3, #1
 80084d4:	2300      	movne	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d0a6      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b095      	sub	sp, #84	; 0x54
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008510:	643b      	str	r3, [r7, #64]	; 0x40
 8008512:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e6      	bne.n	80084f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	61fb      	str	r3, [r7, #28]
   return(result);
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	64bb      	str	r3, [r7, #72]	; 0x48
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800854a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e5      	bne.n	8008524 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855c:	2b01      	cmp	r3, #1
 800855e:	d118      	bne.n	8008592 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60bb      	str	r3, [r7, #8]
   return(result);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f023 0310 	bic.w	r3, r3, #16
 8008574:	647b      	str	r3, [r7, #68]	; 0x44
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6979      	ldr	r1, [r7, #20]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	613b      	str	r3, [r7, #16]
   return(result);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085a6:	bf00      	nop
 80085a8:	3754      	adds	r7, #84	; 0x54
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	4603      	mov	r3, r0
 80085ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80085c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085c4:	2b84      	cmp	r3, #132	; 0x84
 80085c6:	d005      	beq.n	80085d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80085c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	3303      	adds	r3, #3
 80085d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085e6:	f000 faed 	bl	8008bc4 <vTaskStartScheduler>
  
  return osOK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085f2:	b089      	sub	sp, #36	; 0x24
 80085f4:	af04      	add	r7, sp, #16
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d020      	beq.n	8008644 <osThreadCreate+0x54>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01c      	beq.n	8008644 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685c      	ldr	r4, [r3, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691e      	ldr	r6, [r3, #16]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff ffc8 	bl	80085b2 <makeFreeRtosPriority>
 8008622:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800862c:	9202      	str	r2, [sp, #8]
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	9100      	str	r1, [sp, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	4632      	mov	r2, r6
 8008636:	4629      	mov	r1, r5
 8008638:	4620      	mov	r0, r4
 800863a:	f000 f8ed 	bl	8008818 <xTaskCreateStatic>
 800863e:	4603      	mov	r3, r0
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e01c      	b.n	800867e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685c      	ldr	r4, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008650:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff ffaa 	bl	80085b2 <makeFreeRtosPriority>
 800865e:	4602      	mov	r2, r0
 8008660:	f107 030c 	add.w	r3, r7, #12
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	9200      	str	r2, [sp, #0]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	4632      	mov	r2, r6
 800866c:	4629      	mov	r1, r5
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f92e 	bl	80088d0 <xTaskCreate>
 8008674:	4603      	mov	r3, r0
 8008676:	2b01      	cmp	r3, #1
 8008678:	d001      	beq.n	800867e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	e000      	b.n	8008680 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008688 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <osDelay+0x16>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	e000      	b.n	80086a0 <osDelay+0x18>
 800869e:	2301      	movs	r3, #1
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fa5b 	bl	8008b5c <vTaskDelay>
  
  return osOK;
 80086a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f103 0208 	add.w	r2, r3, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295
 80086c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f103 0208 	add.w	r2, r3, #8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f103 0208 	add.w	r2, r3, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d103      	bne.n	8008772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e00c      	b.n	800878c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3308      	adds	r3, #8
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e002      	b.n	8008780 <vListInsert+0x2e>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	d2f6      	bcs.n	800877a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	601a      	str	r2, [r3, #0]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6892      	ldr	r2, [r2, #8]
 80087da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6852      	ldr	r2, [r2, #4]
 80087e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d103      	bne.n	80087f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1e5a      	subs	r2, r3, #1
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08e      	sub	sp, #56	; 0x38
 800881c:	af04      	add	r7, sp, #16
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <xTaskCreateStatic+0x46>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	61fb      	str	r3, [r7, #28]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800885e:	23a0      	movs	r3, #160	; 0xa0
 8008860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2ba0      	cmp	r3, #160	; 0xa0
 8008866:	d00a      	beq.n	800887e <xTaskCreateStatic+0x66>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	61bb      	str	r3, [r7, #24]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01e      	beq.n	80088c2 <xTaskCreateStatic+0xaa>
 8008884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01b      	beq.n	80088c2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008892:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	2202      	movs	r2, #2
 8008898:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800889c:	2300      	movs	r3, #0
 800889e:	9303      	str	r3, [sp, #12]
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	9302      	str	r3, [sp, #8]
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f851 	bl	800895c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088bc:	f000 f8e4 	bl	8008a88 <prvAddNewTaskToReadyList>
 80088c0:	e001      	b.n	80088c6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088c6:	697b      	ldr	r3, [r7, #20]
	}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3728      	adds	r7, #40	; 0x28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08c      	sub	sp, #48	; 0x30
 80088d4:	af04      	add	r7, sp, #16
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fef7 	bl	80096d8 <pvPortMalloc>
 80088ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00e      	beq.n	8008910 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80088f2:	20a0      	movs	r0, #160	; 0xa0
 80088f4:	f000 fef0 	bl	80096d8 <pvPortMalloc>
 80088f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
 8008906:	e005      	b.n	8008914 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008908:	6978      	ldr	r0, [r7, #20]
 800890a:	f000 ffa9 	bl	8009860 <vPortFree>
 800890e:	e001      	b.n	8008914 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d017      	beq.n	800894a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008922:	88fa      	ldrh	r2, [r7, #6]
 8008924:	2300      	movs	r3, #0
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f80f 	bl	800895c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800893e:	69f8      	ldr	r0, [r7, #28]
 8008940:	f000 f8a2 	bl	8008a88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008944:	2301      	movs	r3, #1
 8008946:	61bb      	str	r3, [r7, #24]
 8008948:	e002      	b.n	8008950 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295
 800894e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008950:	69bb      	ldr	r3, [r7, #24]
	}
 8008952:	4618      	mov	r0, r3
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008974:	3b01      	subs	r3, #1
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a4:	2300      	movs	r3, #0
 80089a6:	61fb      	str	r3, [r7, #28]
 80089a8:	e012      	b.n	80089d0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	4413      	add	r3, r2
 80089b0:	7819      	ldrb	r1, [r3, #0]
 80089b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	3334      	adds	r3, #52	; 0x34
 80089ba:	460a      	mov	r2, r1
 80089bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d006      	beq.n	80089d8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	3301      	adds	r3, #1
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	2b0f      	cmp	r3, #15
 80089d4:	d9e9      	bls.n	80089aa <prvInitialiseNewTask+0x4e>
 80089d6:	e000      	b.n	80089da <prvInitialiseNewTask+0x7e>
		{
			break;
 80089d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	2b06      	cmp	r3, #6
 80089e6:	d901      	bls.n	80089ec <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089e8:	2306      	movs	r3, #6
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	2200      	movs	r2, #0
 80089fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	3304      	adds	r3, #4
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fe74 	bl	80086f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	3318      	adds	r3, #24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fe6f 	bl	80086f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	f1c3 0207 	rsb	r2, r3, #7
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	334c      	adds	r3, #76	; 0x4c
 8008a3c:	224c      	movs	r2, #76	; 0x4c
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 f823 	bl	8009a8c <memset>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <prvInitialiseNewTask+0x120>)
 8008a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	; (8008a80 <prvInitialiseNewTask+0x124>)
 8008a50:	655a      	str	r2, [r3, #84]	; 0x54
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	4a0b      	ldr	r2, [pc, #44]	; (8008a84 <prvInitialiseNewTask+0x128>)
 8008a56:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	69b8      	ldr	r0, [r7, #24]
 8008a5e:	f000 fc2b 	bl	80092b8 <pxPortInitialiseStack>
 8008a62:	4602      	mov	r2, r0
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a74:	bf00      	nop
 8008a76:	3720      	adds	r7, #32
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20001068 	.word	0x20001068
 8008a80:	200010d0 	.word	0x200010d0
 8008a84:	20001138 	.word	0x20001138

08008a88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a90:	f000 fd40 	bl	8009514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a94:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <prvAddNewTaskToReadyList+0xb8>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a29      	ldr	r2, [pc, #164]	; (8008b40 <prvAddNewTaskToReadyList+0xb8>)
 8008a9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a9e:	4b29      	ldr	r3, [pc, #164]	; (8008b44 <prvAddNewTaskToReadyList+0xbc>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aa6:	4a27      	ldr	r2, [pc, #156]	; (8008b44 <prvAddNewTaskToReadyList+0xbc>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aac:	4b24      	ldr	r3, [pc, #144]	; (8008b40 <prvAddNewTaskToReadyList+0xb8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d110      	bne.n	8008ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ab4:	f000 fad2 	bl	800905c <prvInitialiseTaskLists>
 8008ab8:	e00d      	b.n	8008ad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008aba:	4b23      	ldr	r3, [pc, #140]	; (8008b48 <prvAddNewTaskToReadyList+0xc0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ac2:	4b20      	ldr	r3, [pc, #128]	; (8008b44 <prvAddNewTaskToReadyList+0xbc>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d802      	bhi.n	8008ad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ad0:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <prvAddNewTaskToReadyList+0xbc>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <prvAddNewTaskToReadyList+0xc4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	4a1b      	ldr	r2, [pc, #108]	; (8008b4c <prvAddNewTaskToReadyList+0xc4>)
 8008ade:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	409a      	lsls	r2, r3
 8008ae8:	4b19      	ldr	r3, [pc, #100]	; (8008b50 <prvAddNewTaskToReadyList+0xc8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	4a18      	ldr	r2, [pc, #96]	; (8008b50 <prvAddNewTaskToReadyList+0xc8>)
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a15      	ldr	r2, [pc, #84]	; (8008b54 <prvAddNewTaskToReadyList+0xcc>)
 8008b00:	441a      	add	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f7ff fdfe 	bl	800870a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b0e:	f000 fd31 	bl	8009574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <prvAddNewTaskToReadyList+0xc0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b1a:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <prvAddNewTaskToReadyList+0xbc>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d207      	bcs.n	8008b38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <prvAddNewTaskToReadyList+0xd0>)
 8008b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	2000041c 	.word	0x2000041c
 8008b44:	2000031c 	.word	0x2000031c
 8008b48:	20000428 	.word	0x20000428
 8008b4c:	20000438 	.word	0x20000438
 8008b50:	20000424 	.word	0x20000424
 8008b54:	20000320 	.word	0x20000320
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d017      	beq.n	8008b9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <vTaskDelay+0x60>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <vTaskDelay+0x30>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	60bb      	str	r3, [r7, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b8c:	f000 f884 	bl	8008c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b90:	2100      	movs	r1, #0
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fb2a 	bl	80091ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b98:	f000 f88c 	bl	8008cb4 <xTaskResumeAll>
 8008b9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d107      	bne.n	8008bb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ba4:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <vTaskDelay+0x64>)
 8008ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bb4:	bf00      	nop
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000444 	.word	0x20000444
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	; 0x28
 8008bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bd2:	463a      	mov	r2, r7
 8008bd4:	1d39      	adds	r1, r7, #4
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f8 f84e 	bl	8000c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	9202      	str	r2, [sp, #8]
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	2300      	movs	r3, #0
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	4921      	ldr	r1, [pc, #132]	; (8008c78 <vTaskStartScheduler+0xb4>)
 8008bf4:	4821      	ldr	r0, [pc, #132]	; (8008c7c <vTaskStartScheduler+0xb8>)
 8008bf6:	f7ff fe0f 	bl	8008818 <xTaskCreateStatic>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <vTaskStartScheduler+0xbc>)
 8008bfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c00:	4b1f      	ldr	r3, [pc, #124]	; (8008c80 <vTaskStartScheduler+0xbc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e001      	b.n	8008c12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d11b      	bne.n	8008c50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	613b      	str	r3, [r7, #16]
}
 8008c2a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c2c:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <vTaskStartScheduler+0xc0>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	334c      	adds	r3, #76	; 0x4c
 8008c32:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <vTaskStartScheduler+0xc4>)
 8008c34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c36:	4b15      	ldr	r3, [pc, #84]	; (8008c8c <vTaskStartScheduler+0xc8>)
 8008c38:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c3e:	4b14      	ldr	r3, [pc, #80]	; (8008c90 <vTaskStartScheduler+0xcc>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008c44:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <vTaskStartScheduler+0xd0>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c4a:	f000 fbc1 	bl	80093d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c4e:	e00e      	b.n	8008c6e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c56:	d10a      	bne.n	8008c6e <vTaskStartScheduler+0xaa>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	60fb      	str	r3, [r7, #12]
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <vTaskStartScheduler+0xa8>
}
 8008c6e:	bf00      	nop
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	08009d04 	.word	0x08009d04
 8008c7c:	0800902d 	.word	0x0800902d
 8008c80:	20000440 	.word	0x20000440
 8008c84:	2000031c 	.word	0x2000031c
 8008c88:	2000005c 	.word	0x2000005c
 8008c8c:	2000043c 	.word	0x2000043c
 8008c90:	20000428 	.word	0x20000428
 8008c94:	20000420 	.word	0x20000420

08008c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c9c:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <vTaskSuspendAll+0x18>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	4a03      	ldr	r2, [pc, #12]	; (8008cb0 <vTaskSuspendAll+0x18>)
 8008ca4:	6013      	str	r3, [r2, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20000444 	.word	0x20000444

08008cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cc2:	4b41      	ldr	r3, [pc, #260]	; (8008dc8 <xTaskResumeAll+0x114>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	603b      	str	r3, [r7, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ce0:	f000 fc18 	bl	8009514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ce4:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <xTaskResumeAll+0x114>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	4a37      	ldr	r2, [pc, #220]	; (8008dc8 <xTaskResumeAll+0x114>)
 8008cec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cee:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <xTaskResumeAll+0x114>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d161      	bne.n	8008dba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cf6:	4b35      	ldr	r3, [pc, #212]	; (8008dcc <xTaskResumeAll+0x118>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d05d      	beq.n	8008dba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cfe:	e02e      	b.n	8008d5e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d00:	4b33      	ldr	r3, [pc, #204]	; (8008dd0 <xTaskResumeAll+0x11c>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3318      	adds	r3, #24
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff fd59 	bl	80087c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fd54 	bl	80087c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	2201      	movs	r2, #1
 8008d22:	409a      	lsls	r2, r3
 8008d24:	4b2b      	ldr	r3, [pc, #172]	; (8008dd4 <xTaskResumeAll+0x120>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	4a2a      	ldr	r2, [pc, #168]	; (8008dd4 <xTaskResumeAll+0x120>)
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a27      	ldr	r2, [pc, #156]	; (8008dd8 <xTaskResumeAll+0x124>)
 8008d3c:	441a      	add	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3304      	adds	r3, #4
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f7ff fce0 	bl	800870a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4e:	4b23      	ldr	r3, [pc, #140]	; (8008ddc <xTaskResumeAll+0x128>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d302      	bcc.n	8008d5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008d58:	4b21      	ldr	r3, [pc, #132]	; (8008de0 <xTaskResumeAll+0x12c>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d5e:	4b1c      	ldr	r3, [pc, #112]	; (8008dd0 <xTaskResumeAll+0x11c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1cc      	bne.n	8008d00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d6c:	f000 fa18 	bl	80091a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d70:	4b1c      	ldr	r3, [pc, #112]	; (8008de4 <xTaskResumeAll+0x130>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d010      	beq.n	8008d9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d7c:	f000 f836 	bl	8008dec <xTaskIncrementTick>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008d86:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <xTaskResumeAll+0x12c>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1f1      	bne.n	8008d7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008d98:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <xTaskResumeAll+0x130>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <xTaskResumeAll+0x12c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d009      	beq.n	8008dba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008daa:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <xTaskResumeAll+0x134>)
 8008dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dba:	f000 fbdb 	bl	8009574 <vPortExitCritical>

	return xAlreadyYielded;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000444 	.word	0x20000444
 8008dcc:	2000041c 	.word	0x2000041c
 8008dd0:	200003dc 	.word	0x200003dc
 8008dd4:	20000424 	.word	0x20000424
 8008dd8:	20000320 	.word	0x20000320
 8008ddc:	2000031c 	.word	0x2000031c
 8008de0:	20000430 	.word	0x20000430
 8008de4:	2000042c 	.word	0x2000042c
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df6:	4b51      	ldr	r3, [pc, #324]	; (8008f3c <xTaskIncrementTick+0x150>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f040 808d 	bne.w	8008f1a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e00:	4b4f      	ldr	r3, [pc, #316]	; (8008f40 <xTaskIncrementTick+0x154>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3301      	adds	r3, #1
 8008e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e08:	4a4d      	ldr	r2, [pc, #308]	; (8008f40 <xTaskIncrementTick+0x154>)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d120      	bne.n	8008e56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e14:	4b4b      	ldr	r3, [pc, #300]	; (8008f44 <xTaskIncrementTick+0x158>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	603b      	str	r3, [r7, #0]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <xTaskIncrementTick+0x46>
 8008e34:	4b43      	ldr	r3, [pc, #268]	; (8008f44 <xTaskIncrementTick+0x158>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	4b43      	ldr	r3, [pc, #268]	; (8008f48 <xTaskIncrementTick+0x15c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a41      	ldr	r2, [pc, #260]	; (8008f44 <xTaskIncrementTick+0x158>)
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4a41      	ldr	r2, [pc, #260]	; (8008f48 <xTaskIncrementTick+0x15c>)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <xTaskIncrementTick+0x160>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	4a3f      	ldr	r2, [pc, #252]	; (8008f4c <xTaskIncrementTick+0x160>)
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	f000 f9a5 	bl	80091a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e56:	4b3e      	ldr	r3, [pc, #248]	; (8008f50 <xTaskIncrementTick+0x164>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d34d      	bcc.n	8008efc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e60:	4b38      	ldr	r3, [pc, #224]	; (8008f44 <xTaskIncrementTick+0x158>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <xTaskIncrementTick+0x82>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <xTaskIncrementTick+0x84>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d004      	beq.n	8008e7e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e74:	4b36      	ldr	r3, [pc, #216]	; (8008f50 <xTaskIncrementTick+0x164>)
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7a:	601a      	str	r2, [r3, #0]
					break;
 8008e7c:	e03e      	b.n	8008efc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008e7e:	4b31      	ldr	r3, [pc, #196]	; (8008f44 <xTaskIncrementTick+0x158>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d203      	bcs.n	8008e9e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e96:	4a2e      	ldr	r2, [pc, #184]	; (8008f50 <xTaskIncrementTick+0x164>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6013      	str	r3, [r2, #0]
						break;
 8008e9c:	e02e      	b.n	8008efc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fc8e 	bl	80087c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3318      	adds	r3, #24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff fc85 	bl	80087c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	409a      	lsls	r2, r3
 8008ec2:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <xTaskIncrementTick+0x168>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	4a22      	ldr	r2, [pc, #136]	; (8008f54 <xTaskIncrementTick+0x168>)
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4a1f      	ldr	r2, [pc, #124]	; (8008f58 <xTaskIncrementTick+0x16c>)
 8008eda:	441a      	add	r2, r3
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7ff fc11 	bl	800870a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <xTaskIncrementTick+0x170>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d3b4      	bcc.n	8008e60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008efa:	e7b1      	b.n	8008e60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008efc:	4b17      	ldr	r3, [pc, #92]	; (8008f5c <xTaskIncrementTick+0x170>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f02:	4915      	ldr	r1, [pc, #84]	; (8008f58 <xTaskIncrementTick+0x16c>)
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d907      	bls.n	8008f24 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008f14:	2301      	movs	r3, #1
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e004      	b.n	8008f24 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <xTaskIncrementTick+0x174>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	4a0f      	ldr	r2, [pc, #60]	; (8008f60 <xTaskIncrementTick+0x174>)
 8008f22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008f24:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <xTaskIncrementTick+0x178>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008f30:	697b      	ldr	r3, [r7, #20]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000444 	.word	0x20000444
 8008f40:	20000420 	.word	0x20000420
 8008f44:	200003d4 	.word	0x200003d4
 8008f48:	200003d8 	.word	0x200003d8
 8008f4c:	20000434 	.word	0x20000434
 8008f50:	2000043c 	.word	0x2000043c
 8008f54:	20000424 	.word	0x20000424
 8008f58:	20000320 	.word	0x20000320
 8008f5c:	2000031c 	.word	0x2000031c
 8008f60:	2000042c 	.word	0x2000042c
 8008f64:	20000430 	.word	0x20000430

08008f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f6e:	4b29      	ldr	r3, [pc, #164]	; (8009014 <vTaskSwitchContext+0xac>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f76:	4b28      	ldr	r3, [pc, #160]	; (8009018 <vTaskSwitchContext+0xb0>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f7c:	e044      	b.n	8009008 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008f7e:	4b26      	ldr	r3, [pc, #152]	; (8009018 <vTaskSwitchContext+0xb0>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008f84:	4b25      	ldr	r3, [pc, #148]	; (800901c <vTaskSwitchContext+0xb4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	fab3 f383 	clz	r3, r3
 8008f90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	f1c3 031f 	rsb	r3, r3, #31
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	4921      	ldr	r1, [pc, #132]	; (8009020 <vTaskSwitchContext+0xb8>)
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	607b      	str	r3, [r7, #4]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <vTaskSwitchContext+0x5a>
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4a14      	ldr	r2, [pc, #80]	; (8009020 <vTaskSwitchContext+0xb8>)
 8008fd0:	4413      	add	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	605a      	str	r2, [r3, #4]
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d104      	bne.n	8008ff4 <vTaskSwitchContext+0x8c>
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	605a      	str	r2, [r3, #4]
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	4a0a      	ldr	r2, [pc, #40]	; (8009024 <vTaskSwitchContext+0xbc>)
 8008ffc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <vTaskSwitchContext+0xbc>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	334c      	adds	r3, #76	; 0x4c
 8009004:	4a08      	ldr	r2, [pc, #32]	; (8009028 <vTaskSwitchContext+0xc0>)
 8009006:	6013      	str	r3, [r2, #0]
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000444 	.word	0x20000444
 8009018:	20000430 	.word	0x20000430
 800901c:	20000424 	.word	0x20000424
 8009020:	20000320 	.word	0x20000320
 8009024:	2000031c 	.word	0x2000031c
 8009028:	2000005c 	.word	0x2000005c

0800902c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009034:	f000 f852 	bl	80090dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <prvIdleTask+0x28>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d9f9      	bls.n	8009034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <prvIdleTask+0x2c>)
 8009042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009050:	e7f0      	b.n	8009034 <prvIdleTask+0x8>
 8009052:	bf00      	nop
 8009054:	20000320 	.word	0x20000320
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009062:	2300      	movs	r3, #0
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	e00c      	b.n	8009082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a12      	ldr	r2, [pc, #72]	; (80090bc <prvInitialiseTaskLists+0x60>)
 8009074:	4413      	add	r3, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fb1a 	bl	80086b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b06      	cmp	r3, #6
 8009086:	d9ef      	bls.n	8009068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009088:	480d      	ldr	r0, [pc, #52]	; (80090c0 <prvInitialiseTaskLists+0x64>)
 800908a:	f7ff fb11 	bl	80086b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800908e:	480d      	ldr	r0, [pc, #52]	; (80090c4 <prvInitialiseTaskLists+0x68>)
 8009090:	f7ff fb0e 	bl	80086b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009094:	480c      	ldr	r0, [pc, #48]	; (80090c8 <prvInitialiseTaskLists+0x6c>)
 8009096:	f7ff fb0b 	bl	80086b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800909a:	480c      	ldr	r0, [pc, #48]	; (80090cc <prvInitialiseTaskLists+0x70>)
 800909c:	f7ff fb08 	bl	80086b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090a0:	480b      	ldr	r0, [pc, #44]	; (80090d0 <prvInitialiseTaskLists+0x74>)
 80090a2:	f7ff fb05 	bl	80086b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <prvInitialiseTaskLists+0x78>)
 80090a8:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <prvInitialiseTaskLists+0x64>)
 80090aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <prvInitialiseTaskLists+0x7c>)
 80090ae:	4a05      	ldr	r2, [pc, #20]	; (80090c4 <prvInitialiseTaskLists+0x68>)
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000320 	.word	0x20000320
 80090c0:	200003ac 	.word	0x200003ac
 80090c4:	200003c0 	.word	0x200003c0
 80090c8:	200003dc 	.word	0x200003dc
 80090cc:	200003f0 	.word	0x200003f0
 80090d0:	20000408 	.word	0x20000408
 80090d4:	200003d4 	.word	0x200003d4
 80090d8:	200003d8 	.word	0x200003d8

080090dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090e2:	e019      	b.n	8009118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090e4:	f000 fa16 	bl	8009514 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80090e8:	4b10      	ldr	r3, [pc, #64]	; (800912c <prvCheckTasksWaitingTermination+0x50>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7ff fb65 	bl	80087c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <prvCheckTasksWaitingTermination+0x54>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3b01      	subs	r3, #1
 8009100:	4a0b      	ldr	r2, [pc, #44]	; (8009130 <prvCheckTasksWaitingTermination+0x54>)
 8009102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009104:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800910c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800910e:	f000 fa31 	bl	8009574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f810 	bl	8009138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e1      	bne.n	80090e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200003f0 	.word	0x200003f0
 8009130:	2000041c 	.word	0x2000041c
 8009134:	20000404 	.word	0x20000404

08009138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	334c      	adds	r3, #76	; 0x4c
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fca9 	bl	8009a9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fb81 	bl	8009860 <vPortFree>
				vPortFree( pxTCB );
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fb7e 	bl	8009860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009164:	e018      	b.n	8009198 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800916c:	2b01      	cmp	r3, #1
 800916e:	d103      	bne.n	8009178 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fb75 	bl	8009860 <vPortFree>
	}
 8009176:	e00f      	b.n	8009198 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800917e:	2b02      	cmp	r3, #2
 8009180:	d00a      	beq.n	8009198 <prvDeleteTCB+0x60>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	60fb      	str	r3, [r7, #12]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <prvDeleteTCB+0x5e>
	}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a6:	4b0f      	ldr	r3, [pc, #60]	; (80091e4 <prvResetNextTaskUnblockTime+0x44>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <prvResetNextTaskUnblockTime+0x14>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <prvResetNextTaskUnblockTime+0x16>
 80091b4:	2300      	movs	r3, #0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d004      	beq.n	80091c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091ba:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <prvResetNextTaskUnblockTime+0x48>)
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091c2:	e008      	b.n	80091d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80091c4:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <prvResetNextTaskUnblockTime+0x44>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	4a05      	ldr	r2, [pc, #20]	; (80091e8 <prvResetNextTaskUnblockTime+0x48>)
 80091d4:	6013      	str	r3, [r2, #0]
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	200003d4 	.word	0x200003d4
 80091e8:	2000043c 	.word	0x2000043c

080091ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091f6:	4b29      	ldr	r3, [pc, #164]	; (800929c <prvAddCurrentTaskToDelayedList+0xb0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091fc:	4b28      	ldr	r3, [pc, #160]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3304      	adds	r3, #4
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff fade 	bl	80087c4 <uxListRemove>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10b      	bne.n	8009226 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800920e:	4b24      	ldr	r3, [pc, #144]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	2201      	movs	r2, #1
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43da      	mvns	r2, r3
 800921c:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4013      	ands	r3, r2
 8009222:	4a20      	ldr	r2, [pc, #128]	; (80092a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009224:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922c:	d10a      	bne.n	8009244 <prvAddCurrentTaskToDelayedList+0x58>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009234:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	481a      	ldr	r0, [pc, #104]	; (80092a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800923e:	f7ff fa64 	bl	800870a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009242:	e026      	b.n	8009292 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800924c:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	429a      	cmp	r2, r3
 800925a:	d209      	bcs.n	8009270 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800925c:	4b13      	ldr	r3, [pc, #76]	; (80092ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3304      	adds	r3, #4
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f7ff fa72 	bl	8008752 <vListInsert>
}
 800926e:	e010      	b.n	8009292 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009270:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7ff fa68 	bl	8008752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009282:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	429a      	cmp	r2, r3
 800928a:	d202      	bcs.n	8009292 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800928c:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6013      	str	r3, [r2, #0]
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000420 	.word	0x20000420
 80092a0:	2000031c 	.word	0x2000031c
 80092a4:	20000424 	.word	0x20000424
 80092a8:	20000408 	.word	0x20000408
 80092ac:	200003d8 	.word	0x200003d8
 80092b0:	200003d4 	.word	0x200003d4
 80092b4:	2000043c 	.word	0x2000043c

080092b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3b04      	subs	r3, #4
 80092c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3b04      	subs	r3, #4
 80092d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f023 0201 	bic.w	r2, r3, #1
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092e8:	4a0c      	ldr	r2, [pc, #48]	; (800931c <pxPortInitialiseStack+0x64>)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3b14      	subs	r3, #20
 80092f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3b04      	subs	r3, #4
 80092fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f06f 0202 	mvn.w	r2, #2
 8009306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3b20      	subs	r3, #32
 800930c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800930e:	68fb      	ldr	r3, [r7, #12]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	08009321 	.word	0x08009321

08009320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800932a:	4b12      	ldr	r3, [pc, #72]	; (8009374 <prvTaskExitError+0x54>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009332:	d00a      	beq.n	800934a <prvTaskExitError+0x2a>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	60fb      	str	r3, [r7, #12]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <prvTaskExitError+0x28>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	60bb      	str	r3, [r7, #8]
}
 800935c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800935e:	bf00      	nop
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0fc      	beq.n	8009360 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	2000000c 	.word	0x2000000c
	...

08009380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <pxCurrentTCBConst2>)
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	6808      	ldr	r0, [r1, #0]
 8009386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938a:	f380 8809 	msr	PSP, r0
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f380 8811 	msr	BASEPRI, r0
 800939a:	4770      	bx	lr
 800939c:	f3af 8000 	nop.w

080093a0 <pxCurrentTCBConst2>:
 80093a0:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop

080093a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093a8:	4808      	ldr	r0, [pc, #32]	; (80093cc <prvPortStartFirstTask+0x24>)
 80093aa:	6800      	ldr	r0, [r0, #0]
 80093ac:	6800      	ldr	r0, [r0, #0]
 80093ae:	f380 8808 	msr	MSP, r0
 80093b2:	f04f 0000 	mov.w	r0, #0
 80093b6:	f380 8814 	msr	CONTROL, r0
 80093ba:	b662      	cpsie	i
 80093bc:	b661      	cpsie	f
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	df00      	svc	0
 80093c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ca:	bf00      	nop
 80093cc:	e000ed08 	.word	0xe000ed08

080093d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093d6:	4b46      	ldr	r3, [pc, #280]	; (80094f0 <xPortStartScheduler+0x120>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a46      	ldr	r2, [pc, #280]	; (80094f4 <xPortStartScheduler+0x124>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d10a      	bne.n	80093f6 <xPortStartScheduler+0x26>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	613b      	str	r3, [r7, #16]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093f6:	4b3e      	ldr	r3, [pc, #248]	; (80094f0 <xPortStartScheduler+0x120>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a3f      	ldr	r2, [pc, #252]	; (80094f8 <xPortStartScheduler+0x128>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d10a      	bne.n	8009416 <xPortStartScheduler+0x46>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	60fb      	str	r3, [r7, #12]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009416:	4b39      	ldr	r3, [pc, #228]	; (80094fc <xPortStartScheduler+0x12c>)
 8009418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	b2db      	uxtb	r3, r3
 8009420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	22ff      	movs	r2, #255	; 0xff
 8009426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009438:	b2da      	uxtb	r2, r3
 800943a:	4b31      	ldr	r3, [pc, #196]	; (8009500 <xPortStartScheduler+0x130>)
 800943c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800943e:	4b31      	ldr	r3, [pc, #196]	; (8009504 <xPortStartScheduler+0x134>)
 8009440:	2207      	movs	r2, #7
 8009442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009444:	e009      	b.n	800945a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009446:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <xPortStartScheduler+0x134>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3b01      	subs	r3, #1
 800944c:	4a2d      	ldr	r2, [pc, #180]	; (8009504 <xPortStartScheduler+0x134>)
 800944e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	b2db      	uxtb	r3, r3
 8009458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009462:	2b80      	cmp	r3, #128	; 0x80
 8009464:	d0ef      	beq.n	8009446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009466:	4b27      	ldr	r3, [pc, #156]	; (8009504 <xPortStartScheduler+0x134>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f1c3 0307 	rsb	r3, r3, #7
 800946e:	2b04      	cmp	r3, #4
 8009470:	d00a      	beq.n	8009488 <xPortStartScheduler+0xb8>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	60bb      	str	r3, [r7, #8]
}
 8009484:	bf00      	nop
 8009486:	e7fe      	b.n	8009486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009488:	4b1e      	ldr	r3, [pc, #120]	; (8009504 <xPortStartScheduler+0x134>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <xPortStartScheduler+0x134>)
 8009490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <xPortStartScheduler+0x134>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800949a:	4a1a      	ldr	r2, [pc, #104]	; (8009504 <xPortStartScheduler+0x134>)
 800949c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094a6:	4b18      	ldr	r3, [pc, #96]	; (8009508 <xPortStartScheduler+0x138>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a17      	ldr	r2, [pc, #92]	; (8009508 <xPortStartScheduler+0x138>)
 80094ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094b2:	4b15      	ldr	r3, [pc, #84]	; (8009508 <xPortStartScheduler+0x138>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a14      	ldr	r2, [pc, #80]	; (8009508 <xPortStartScheduler+0x138>)
 80094b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094be:	f000 f8dd 	bl	800967c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094c2:	4b12      	ldr	r3, [pc, #72]	; (800950c <xPortStartScheduler+0x13c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094c8:	f000 f8fc 	bl	80096c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094cc:	4b10      	ldr	r3, [pc, #64]	; (8009510 <xPortStartScheduler+0x140>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a0f      	ldr	r2, [pc, #60]	; (8009510 <xPortStartScheduler+0x140>)
 80094d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094d8:	f7ff ff66 	bl	80093a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094dc:	f7ff fd44 	bl	8008f68 <vTaskSwitchContext>
	prvTaskExitError();
 80094e0:	f7ff ff1e 	bl	8009320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	e000ed00 	.word	0xe000ed00
 80094f4:	410fc271 	.word	0x410fc271
 80094f8:	410fc270 	.word	0x410fc270
 80094fc:	e000e400 	.word	0xe000e400
 8009500:	20000448 	.word	0x20000448
 8009504:	2000044c 	.word	0x2000044c
 8009508:	e000ed20 	.word	0xe000ed20
 800950c:	2000000c 	.word	0x2000000c
 8009510:	e000ef34 	.word	0xe000ef34

08009514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	607b      	str	r3, [r7, #4]
}
 800952c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <vPortEnterCritical+0x58>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	4a0d      	ldr	r2, [pc, #52]	; (800956c <vPortEnterCritical+0x58>)
 8009536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <vPortEnterCritical+0x58>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d10f      	bne.n	8009560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009540:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <vPortEnterCritical+0x5c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <vPortEnterCritical+0x4c>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	603b      	str	r3, [r7, #0]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <vPortEnterCritical+0x4a>
	}
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	2000000c 	.word	0x2000000c
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800957a:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <vPortExitCritical+0x50>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <vPortExitCritical+0x24>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	607b      	str	r3, [r7, #4]
}
 8009594:	bf00      	nop
 8009596:	e7fe      	b.n	8009596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <vPortExitCritical+0x50>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3b01      	subs	r3, #1
 800959e:	4a09      	ldr	r2, [pc, #36]	; (80095c4 <vPortExitCritical+0x50>)
 80095a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <vPortExitCritical+0x50>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <vPortExitCritical+0x42>
 80095aa:	2300      	movs	r3, #0
 80095ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095b6:	bf00      	nop
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	2000000c 	.word	0x2000000c
	...

080095d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095d0:	f3ef 8009 	mrs	r0, PSP
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	4b15      	ldr	r3, [pc, #84]	; (8009630 <pxCurrentTCBConst>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	f01e 0f10 	tst.w	lr, #16
 80095e0:	bf08      	it	eq
 80095e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	6010      	str	r0, [r2, #0]
 80095ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095f4:	f380 8811 	msr	BASEPRI, r0
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f7ff fcb2 	bl	8008f68 <vTaskSwitchContext>
 8009604:	f04f 0000 	mov.w	r0, #0
 8009608:	f380 8811 	msr	BASEPRI, r0
 800960c:	bc09      	pop	{r0, r3}
 800960e:	6819      	ldr	r1, [r3, #0]
 8009610:	6808      	ldr	r0, [r1, #0]
 8009612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009616:	f01e 0f10 	tst.w	lr, #16
 800961a:	bf08      	it	eq
 800961c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009620:	f380 8809 	msr	PSP, r0
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	f3af 8000 	nop.w

08009630 <pxCurrentTCBConst>:
 8009630:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop

08009638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	607b      	str	r3, [r7, #4]
}
 8009650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009652:	f7ff fbcb 	bl	8008dec <xTaskIncrementTick>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800965c:	4b06      	ldr	r3, [pc, #24]	; (8009678 <SysTick_Handler+0x40>)
 800965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f383 8811 	msr	BASEPRI, r3
}
 800966e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009680:	4b0b      	ldr	r3, [pc, #44]	; (80096b0 <vPortSetupTimerInterrupt+0x34>)
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009686:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <vPortSetupTimerInterrupt+0x38>)
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <vPortSetupTimerInterrupt+0x3c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a0a      	ldr	r2, [pc, #40]	; (80096bc <vPortSetupTimerInterrupt+0x40>)
 8009692:	fba2 2303 	umull	r2, r3, r2, r3
 8009696:	099b      	lsrs	r3, r3, #6
 8009698:	4a09      	ldr	r2, [pc, #36]	; (80096c0 <vPortSetupTimerInterrupt+0x44>)
 800969a:	3b01      	subs	r3, #1
 800969c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800969e:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <vPortSetupTimerInterrupt+0x34>)
 80096a0:	2207      	movs	r2, #7
 80096a2:	601a      	str	r2, [r3, #0]
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	e000e010 	.word	0xe000e010
 80096b4:	e000e018 	.word	0xe000e018
 80096b8:	20000000 	.word	0x20000000
 80096bc:	10624dd3 	.word	0x10624dd3
 80096c0:	e000e014 	.word	0xe000e014

080096c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096d4 <vPortEnableVFP+0x10>
 80096c8:	6801      	ldr	r1, [r0, #0]
 80096ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096ce:	6001      	str	r1, [r0, #0]
 80096d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096d2:	bf00      	nop
 80096d4:	e000ed88 	.word	0xe000ed88

080096d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08a      	sub	sp, #40	; 0x28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096e4:	f7ff fad8 	bl	8008c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096e8:	4b58      	ldr	r3, [pc, #352]	; (800984c <pvPortMalloc+0x174>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096f0:	f000 f910 	bl	8009914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096f4:	4b56      	ldr	r3, [pc, #344]	; (8009850 <pvPortMalloc+0x178>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f040 808e 	bne.w	800981e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01d      	beq.n	8009744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009708:	2208      	movs	r2, #8
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4413      	add	r3, r2
 800970e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f023 0307 	bic.w	r3, r3, #7
 8009720:	3308      	adds	r3, #8
 8009722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <pvPortMalloc+0x6c>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	617b      	str	r3, [r7, #20]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d069      	beq.n	800981e <pvPortMalloc+0x146>
 800974a:	4b42      	ldr	r3, [pc, #264]	; (8009854 <pvPortMalloc+0x17c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d864      	bhi.n	800981e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009754:	4b40      	ldr	r3, [pc, #256]	; (8009858 <pvPortMalloc+0x180>)
 8009756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009758:	4b3f      	ldr	r3, [pc, #252]	; (8009858 <pvPortMalloc+0x180>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800975e:	e004      	b.n	800976a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d903      	bls.n	800977c <pvPortMalloc+0xa4>
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f1      	bne.n	8009760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800977c:	4b33      	ldr	r3, [pc, #204]	; (800984c <pvPortMalloc+0x174>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009782:	429a      	cmp	r2, r3
 8009784:	d04b      	beq.n	800981e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2208      	movs	r2, #8
 800978c:	4413      	add	r3, r2
 800978e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	2308      	movs	r3, #8
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d91f      	bls.n	80097e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <pvPortMalloc+0xf8>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	613b      	str	r3, [r7, #16]
}
 80097cc:	bf00      	nop
 80097ce:	e7fe      	b.n	80097ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	1ad2      	subs	r2, r2, r3
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097e2:	69b8      	ldr	r0, [r7, #24]
 80097e4:	f000 f8f8 	bl	80099d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097e8:	4b1a      	ldr	r3, [pc, #104]	; (8009854 <pvPortMalloc+0x17c>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	4a18      	ldr	r2, [pc, #96]	; (8009854 <pvPortMalloc+0x17c>)
 80097f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097f6:	4b17      	ldr	r3, [pc, #92]	; (8009854 <pvPortMalloc+0x17c>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b18      	ldr	r3, [pc, #96]	; (800985c <pvPortMalloc+0x184>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d203      	bcs.n	800980a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <pvPortMalloc+0x17c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a15      	ldr	r2, [pc, #84]	; (800985c <pvPortMalloc+0x184>)
 8009808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	4b10      	ldr	r3, [pc, #64]	; (8009850 <pvPortMalloc+0x178>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	431a      	orrs	r2, r3
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800981e:	f7ff fa49 	bl	8008cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <pvPortMalloc+0x16a>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	60fb      	str	r3, [r7, #12]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <pvPortMalloc+0x168>
	return pvReturn;
 8009842:	69fb      	ldr	r3, [r7, #28]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3728      	adds	r7, #40	; 0x28
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20001058 	.word	0x20001058
 8009850:	20001064 	.word	0x20001064
 8009854:	2000105c 	.word	0x2000105c
 8009858:	20001050 	.word	0x20001050
 800985c:	20001060 	.word	0x20001060

08009860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d048      	beq.n	8009904 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009872:	2308      	movs	r3, #8
 8009874:	425b      	negs	r3, r3
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4413      	add	r3, r2
 800987a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	4b21      	ldr	r3, [pc, #132]	; (800990c <vPortFree+0xac>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4013      	ands	r3, r2
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <vPortFree+0x44>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	60fb      	str	r3, [r7, #12]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00a      	beq.n	80098c2 <vPortFree+0x62>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	60bb      	str	r3, [r7, #8]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	4b11      	ldr	r3, [pc, #68]	; (800990c <vPortFree+0xac>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d019      	beq.n	8009904 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d115      	bne.n	8009904 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	4b0b      	ldr	r3, [pc, #44]	; (800990c <vPortFree+0xac>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	43db      	mvns	r3, r3
 80098e2:	401a      	ands	r2, r3
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098e8:	f7ff f9d6 	bl	8008c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <vPortFree+0xb0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4413      	add	r3, r2
 80098f6:	4a06      	ldr	r2, [pc, #24]	; (8009910 <vPortFree+0xb0>)
 80098f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098fa:	6938      	ldr	r0, [r7, #16]
 80098fc:	f000 f86c 	bl	80099d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009900:	f7ff f9d8 	bl	8008cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009904:	bf00      	nop
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20001064 	.word	0x20001064
 8009910:	2000105c 	.word	0x2000105c

08009914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800991a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800991e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009920:	4b27      	ldr	r3, [pc, #156]	; (80099c0 <prvHeapInit+0xac>)
 8009922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00c      	beq.n	8009948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3307      	adds	r3, #7
 8009932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0307 	bic.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	4a1f      	ldr	r2, [pc, #124]	; (80099c0 <prvHeapInit+0xac>)
 8009944:	4413      	add	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <prvHeapInit+0xb0>)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <prvHeapInit+0xb0>)
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009960:	2208      	movs	r2, #8
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <prvHeapInit+0xb4>)
 8009974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <prvHeapInit+0xb4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800997e:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <prvHeapInit+0xb4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <prvHeapInit+0xb4>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <prvHeapInit+0xb8>)
 80099a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <prvHeapInit+0xbc>)
 80099aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099ac:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <prvHeapInit+0xc0>)
 80099ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	20000450 	.word	0x20000450
 80099c4:	20001050 	.word	0x20001050
 80099c8:	20001058 	.word	0x20001058
 80099cc:	20001060 	.word	0x20001060
 80099d0:	2000105c 	.word	0x2000105c
 80099d4:	20001064 	.word	0x20001064

080099d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099e0:	4b28      	ldr	r3, [pc, #160]	; (8009a84 <prvInsertBlockIntoFreeList+0xac>)
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e002      	b.n	80099ec <prvInsertBlockIntoFreeList+0x14>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d8f7      	bhi.n	80099e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d108      	bne.n	8009a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	441a      	add	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	441a      	add	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d118      	bne.n	8009a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <prvInsertBlockIntoFreeList+0xb0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d00d      	beq.n	8009a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	441a      	add	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e008      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <prvInsertBlockIntoFreeList+0xb0>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e003      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d002      	beq.n	8009a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	20001050 	.word	0x20001050
 8009a88:	20001058 	.word	0x20001058

08009a8c <memset>:
 8009a8c:	4402      	add	r2, r0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d100      	bne.n	8009a96 <memset+0xa>
 8009a94:	4770      	bx	lr
 8009a96:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9a:	e7f9      	b.n	8009a90 <memset+0x4>

08009a9c <_reclaim_reent>:
 8009a9c:	4b29      	ldr	r3, [pc, #164]	; (8009b44 <_reclaim_reent+0xa8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4283      	cmp	r3, r0
 8009aa2:	b570      	push	{r4, r5, r6, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	d04b      	beq.n	8009b40 <_reclaim_reent+0xa4>
 8009aa8:	69c3      	ldr	r3, [r0, #28]
 8009aaa:	b143      	cbz	r3, 8009abe <_reclaim_reent+0x22>
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d144      	bne.n	8009b3c <_reclaim_reent+0xa0>
 8009ab2:	69e3      	ldr	r3, [r4, #28]
 8009ab4:	6819      	ldr	r1, [r3, #0]
 8009ab6:	b111      	cbz	r1, 8009abe <_reclaim_reent+0x22>
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 f86b 	bl	8009b94 <_free_r>
 8009abe:	6961      	ldr	r1, [r4, #20]
 8009ac0:	b111      	cbz	r1, 8009ac8 <_reclaim_reent+0x2c>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f866 	bl	8009b94 <_free_r>
 8009ac8:	69e1      	ldr	r1, [r4, #28]
 8009aca:	b111      	cbz	r1, 8009ad2 <_reclaim_reent+0x36>
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 f861 	bl	8009b94 <_free_r>
 8009ad2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ad4:	b111      	cbz	r1, 8009adc <_reclaim_reent+0x40>
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f85c 	bl	8009b94 <_free_r>
 8009adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ade:	b111      	cbz	r1, 8009ae6 <_reclaim_reent+0x4a>
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 f857 	bl	8009b94 <_free_r>
 8009ae6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ae8:	b111      	cbz	r1, 8009af0 <_reclaim_reent+0x54>
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f852 	bl	8009b94 <_free_r>
 8009af0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009af2:	b111      	cbz	r1, 8009afa <_reclaim_reent+0x5e>
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 f84d 	bl	8009b94 <_free_r>
 8009afa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009afc:	b111      	cbz	r1, 8009b04 <_reclaim_reent+0x68>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f848 	bl	8009b94 <_free_r>
 8009b04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b06:	b111      	cbz	r1, 8009b0e <_reclaim_reent+0x72>
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 f843 	bl	8009b94 <_free_r>
 8009b0e:	6a23      	ldr	r3, [r4, #32]
 8009b10:	b1b3      	cbz	r3, 8009b40 <_reclaim_reent+0xa4>
 8009b12:	4620      	mov	r0, r4
 8009b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b18:	4718      	bx	r3
 8009b1a:	5949      	ldr	r1, [r1, r5]
 8009b1c:	b941      	cbnz	r1, 8009b30 <_reclaim_reent+0x94>
 8009b1e:	3504      	adds	r5, #4
 8009b20:	69e3      	ldr	r3, [r4, #28]
 8009b22:	2d80      	cmp	r5, #128	; 0x80
 8009b24:	68d9      	ldr	r1, [r3, #12]
 8009b26:	d1f8      	bne.n	8009b1a <_reclaim_reent+0x7e>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 f833 	bl	8009b94 <_free_r>
 8009b2e:	e7c0      	b.n	8009ab2 <_reclaim_reent+0x16>
 8009b30:	680e      	ldr	r6, [r1, #0]
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f82e 	bl	8009b94 <_free_r>
 8009b38:	4631      	mov	r1, r6
 8009b3a:	e7ef      	b.n	8009b1c <_reclaim_reent+0x80>
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	e7ef      	b.n	8009b20 <_reclaim_reent+0x84>
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
 8009b42:	bf00      	nop
 8009b44:	2000005c 	.word	0x2000005c

08009b48 <__libc_init_array>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	4d0d      	ldr	r5, [pc, #52]	; (8009b80 <__libc_init_array+0x38>)
 8009b4c:	4c0d      	ldr	r4, [pc, #52]	; (8009b84 <__libc_init_array+0x3c>)
 8009b4e:	1b64      	subs	r4, r4, r5
 8009b50:	10a4      	asrs	r4, r4, #2
 8009b52:	2600      	movs	r6, #0
 8009b54:	42a6      	cmp	r6, r4
 8009b56:	d109      	bne.n	8009b6c <__libc_init_array+0x24>
 8009b58:	4d0b      	ldr	r5, [pc, #44]	; (8009b88 <__libc_init_array+0x40>)
 8009b5a:	4c0c      	ldr	r4, [pc, #48]	; (8009b8c <__libc_init_array+0x44>)
 8009b5c:	f000 f872 	bl	8009c44 <_init>
 8009b60:	1b64      	subs	r4, r4, r5
 8009b62:	10a4      	asrs	r4, r4, #2
 8009b64:	2600      	movs	r6, #0
 8009b66:	42a6      	cmp	r6, r4
 8009b68:	d105      	bne.n	8009b76 <__libc_init_array+0x2e>
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b70:	4798      	blx	r3
 8009b72:	3601      	adds	r6, #1
 8009b74:	e7ee      	b.n	8009b54 <__libc_init_array+0xc>
 8009b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7a:	4798      	blx	r3
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	e7f2      	b.n	8009b66 <__libc_init_array+0x1e>
 8009b80:	08009d44 	.word	0x08009d44
 8009b84:	08009d44 	.word	0x08009d44
 8009b88:	08009d44 	.word	0x08009d44
 8009b8c:	08009d48 	.word	0x08009d48

08009b90 <__retarget_lock_acquire_recursive>:
 8009b90:	4770      	bx	lr

08009b92 <__retarget_lock_release_recursive>:
 8009b92:	4770      	bx	lr

08009b94 <_free_r>:
 8009b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b96:	2900      	cmp	r1, #0
 8009b98:	d044      	beq.n	8009c24 <_free_r+0x90>
 8009b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9e:	9001      	str	r0, [sp, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ba6:	bfb8      	it	lt
 8009ba8:	18e4      	addlt	r4, r4, r3
 8009baa:	f000 f83f 	bl	8009c2c <__malloc_lock>
 8009bae:	4a1e      	ldr	r2, [pc, #120]	; (8009c28 <_free_r+0x94>)
 8009bb0:	9801      	ldr	r0, [sp, #4]
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	b933      	cbnz	r3, 8009bc4 <_free_r+0x30>
 8009bb6:	6063      	str	r3, [r4, #4]
 8009bb8:	6014      	str	r4, [r2, #0]
 8009bba:	b003      	add	sp, #12
 8009bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bc0:	f000 b83a 	b.w	8009c38 <__malloc_unlock>
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	d908      	bls.n	8009bda <_free_r+0x46>
 8009bc8:	6825      	ldr	r5, [r4, #0]
 8009bca:	1961      	adds	r1, r4, r5
 8009bcc:	428b      	cmp	r3, r1
 8009bce:	bf01      	itttt	eq
 8009bd0:	6819      	ldreq	r1, [r3, #0]
 8009bd2:	685b      	ldreq	r3, [r3, #4]
 8009bd4:	1949      	addeq	r1, r1, r5
 8009bd6:	6021      	streq	r1, [r4, #0]
 8009bd8:	e7ed      	b.n	8009bb6 <_free_r+0x22>
 8009bda:	461a      	mov	r2, r3
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	b10b      	cbz	r3, 8009be4 <_free_r+0x50>
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	d9fa      	bls.n	8009bda <_free_r+0x46>
 8009be4:	6811      	ldr	r1, [r2, #0]
 8009be6:	1855      	adds	r5, r2, r1
 8009be8:	42a5      	cmp	r5, r4
 8009bea:	d10b      	bne.n	8009c04 <_free_r+0x70>
 8009bec:	6824      	ldr	r4, [r4, #0]
 8009bee:	4421      	add	r1, r4
 8009bf0:	1854      	adds	r4, r2, r1
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	6011      	str	r1, [r2, #0]
 8009bf6:	d1e0      	bne.n	8009bba <_free_r+0x26>
 8009bf8:	681c      	ldr	r4, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	6053      	str	r3, [r2, #4]
 8009bfe:	440c      	add	r4, r1
 8009c00:	6014      	str	r4, [r2, #0]
 8009c02:	e7da      	b.n	8009bba <_free_r+0x26>
 8009c04:	d902      	bls.n	8009c0c <_free_r+0x78>
 8009c06:	230c      	movs	r3, #12
 8009c08:	6003      	str	r3, [r0, #0]
 8009c0a:	e7d6      	b.n	8009bba <_free_r+0x26>
 8009c0c:	6825      	ldr	r5, [r4, #0]
 8009c0e:	1961      	adds	r1, r4, r5
 8009c10:	428b      	cmp	r3, r1
 8009c12:	bf04      	itt	eq
 8009c14:	6819      	ldreq	r1, [r3, #0]
 8009c16:	685b      	ldreq	r3, [r3, #4]
 8009c18:	6063      	str	r3, [r4, #4]
 8009c1a:	bf04      	itt	eq
 8009c1c:	1949      	addeq	r1, r1, r5
 8009c1e:	6021      	streq	r1, [r4, #0]
 8009c20:	6054      	str	r4, [r2, #4]
 8009c22:	e7ca      	b.n	8009bba <_free_r+0x26>
 8009c24:	b003      	add	sp, #12
 8009c26:	bd30      	pop	{r4, r5, pc}
 8009c28:	200011a4 	.word	0x200011a4

08009c2c <__malloc_lock>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__malloc_lock+0x8>)
 8009c2e:	f7ff bfaf 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009c32:	bf00      	nop
 8009c34:	200011a0 	.word	0x200011a0

08009c38 <__malloc_unlock>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__malloc_unlock+0x8>)
 8009c3a:	f7ff bfaa 	b.w	8009b92 <__retarget_lock_release_recursive>
 8009c3e:	bf00      	nop
 8009c40:	200011a0 	.word	0x200011a0

08009c44 <_init>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr

08009c50 <_fini>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr
